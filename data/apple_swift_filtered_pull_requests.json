[
    {
        "merged": false,
        "additions": 73,
        "deletions": 35,
        "changed_files": 3,
        "created_at": "2023-10-18T07:43:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "* **Explanation**: This fixes a compile time problem which occurs when using large C arrays, like the 1023-character path array in `statfs`.  C-arrays are imported as tuples and cause the size of the SIL to explode if such arrays are large. Both, redundant-load-elimination and dead-store-elimination, already had a protection against quadratic complexity when processing huge SIL functions, but only per single `load` and `store` operation. The fix for this problem is to have a complexity budget for the whole function. This catches cases where generated SIL contains a very large number of `load` and `store` instructions.\r\n\r\n* **Issue**: rdar://116877696\r\n\r\n* **Risk**: Low. The risk is not so much on functional correctness, because this change only affects when the optimization bails out. The risk is more about potential performance regressions. But the complexity limits are pretty large and should only trigger in rare cases.\r\n\r\n* **Testing**: With a regression test\r\n\r\n* **Reviewer**: @atrick (to-do)\r\n\r\n* **Main branch PR**: https://github.com/apple/swift/pull/69199\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-10-18T07:21:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This still has some edge cases we're ironing out. \r\n\r\nresolves rdar://116812673",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-18T02:05:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Update for https://github.com/apple/swift-syntax/pull/2301\r\nUse `CompilerPluginMessageListener` instead of `CompilerPluginMessageHandler`",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 381,
        "deletions": 3,
        "changed_files": 10,
        "created_at": "2023-10-18T00:12:08Z",
        "closed_at": "2023-10-18T05:36:07Z",
        "merged_at": null,
        "body": null,
        "comments": 4
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-17T20:56:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Current check is too strict for stdlib collection types because it checks conditional conformances which leads to erroneous warnings.\r\n\r\nTo determine whether a type dynamically conforms to a protocol, for stdlib collection types, \r\nthe method is employing `Module::lookupConformance` check which has `allowMissing` \r\nconformances set to `false` by default. That directly contradicts the comment which states\r\nthat the conditional conformances are to be skipped and doesn't fit well with \r\n`TypeChecker::conformsToProtocol` check below it that defaults `allowMissing` to `true`.\r\n\r\nResolves: rdar://115603144\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 145,
        "changed_files": 5,
        "created_at": "2023-10-17T19:49:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Move `PluginProvider` logic to `SwiftCompilerPluginMessageHandling` module so the compiler can reuse that logic for the in-process plugins (in follow-ups)",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T19:38:39Z",
        "closed_at": "2023-10-18T02:31:37Z",
        "merged_at": "2023-10-18T02:31:37Z",
        "body": "Add `swift-syntax-lib` component to the distribution set.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T16:07:01Z",
        "closed_at": "2023-10-17T16:20:00Z",
        "merged_at": null,
        "body": "Companion of https://github.com/apple/sourcekit-lsp/pull/907.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 913,
        "deletions": 838,
        "changed_files": 10,
        "created_at": "2023-10-17T16:06:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-17T15:14:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This would be needed to stop using `swift-api-extract` in some internal configurations.\r\n\r\nGiven the limited scope, only add this as a CMake flag.\r\n\r\nAddresses rdar://117019309",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-17T06:52:55Z",
        "closed_at": "2023-10-17T13:42:37Z",
        "merged_at": "2023-10-17T13:42:36Z",
        "body": "Older compilers don't have the copy-elision rule of newer C++ compilers, resulting in an error message when returning a non-copyable type. Move llvm::Error instead of copying it.\r\n\r\n```\r\n/home/ewilde/work/swift-project/swift/lib/Frontend/CachingUtils.cpp:93:16: error: call to deleted constructor of 'llvm::Error'\r\n        return Err;\r\n               ^~~\r\n/home/ewilde/work/swift-project/llvm-project/llvm/include/llvm/Support/Error.h:184:3: note: 'Error' has been explicitly marked deleted here\r\n  Error(const Error &Other) = delete;\r\n  ^\r\n/home/ewilde/work/swift-project/llvm-project/llvm/include/llvm/Support/Error.h:491:18: note: passing argument to parameter 'Err' here\r\n  Expected(Error Err)\r\n                 ^\r\n/home/ewilde/work/swift-project/swift/lib/Frontend/CachingUtils.cpp:123:16: error: call to deleted constructor of 'llvm::Error'\r\n        return Err;\r\n               ^~~\r\n/home/ewilde/work/swift-project/llvm-project/llvm/include/llvm/Support/Error.h:184:3: note: 'Error' has been explicitly marked deleted here\r\n  Error(const Error &Other) = delete;\r\n  ^\r\n/home/ewilde/work/swift-project/llvm-project/llvm/include/llvm/Support/Error.h:491:18: note: passing argument to parameter 'Err' here\r\n  Expected(Error Err)\r\n                 ^\r\n```",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-10-17T06:15:01Z",
        "closed_at": "2023-10-17T13:33:10Z",
        "merged_at": "2023-10-17T13:33:10Z",
        "body": "Introduce the upcoming feature `FullTypedThrows`. When enabled, infer the error type of a `throw` statement based on its original type, instead of always being `any Error`. This is technically a source-breaking change, hence the upcoming feature flag.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2107,
        "deletions": 764,
        "changed_files": 93,
        "created_at": "2023-10-17T06:02:29Z",
        "closed_at": "2023-10-17T13:42:13Z",
        "merged_at": "2023-10-17T13:42:13Z",
        "body": "Updating rebranch branch with updates from today.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T02:38:04Z",
        "closed_at": "2023-10-17T02:38:39Z",
        "merged_at": "2023-10-17T02:38:38Z",
        "body": "Copy the devtools MSI to the artifacts location.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1167,
        "deletions": 66,
        "changed_files": 27,
        "created_at": "2023-10-17T00:37:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Explanation:\r\nIn order to provide access to base class members in an imported derived class in Swift, the clang importer in Swift clones member signatures (for methods, subscripts and property accessors) and synthesizes a Swift thunk that invokes the base member. The previous implementation for method calls and getter accessors relied on casting the derived Swift type to the base Swift type before invoking the base member using the `__swift_interopStaticCast` helper function. However, this meant that Swift copied the base C++ class, sometimes more than once during this process, i.e. the base member got invoked on a copy of a base type, and not the underlying base value inside of the original derived value. This caused numerous problems in some adopters, e.g. it was impossible to iterate over a subclass of a C++ container that used base `begin` and `end`, as the iterator for sequence traversal that Swift constructed (in the C++ overlay) obtained begin and end iterators from copies of the container, which were immediately invalid after begin and end returned, as they were just temporary copies in the synthesized methods. This also presented a problem for non-copyable type support, and also was a general correctness/performance issue.\r\n\r\nThis change resolves the issue by changing the way the base member is invoked. Instead of invoking it directly from the synthesized Swift thunk, the importer generates an additional inline C++ member function that invokes the base member or accesses the base field directly from C++, which does the cast of the derived value `this` without copying the base value. This C++ member function is then imported into Swift, and invoked from the synthesized Swift thunk using the derived value directly. This avoids any copies of the base value.\r\n\r\nThis change handles method calls, getter accessors for subscripts and `.pointee`, and also getter accessors for base fields. C++ classes that derive from other classes also behave as expected, although their generated Swift thunks may go through multiple levels of generated derived-to-base C++ functions (e.g. derived-derived member calls derived member calls base member). Also, note that in order to preserve the \"copy\" semantics of a retainable foreign reference type C++ field, this change also allows the use of `cf_returns_retained` attribute to let C++ methods use `@owned` semantics for returned FRTs. Such base field accesses invoke the retain function inside of the generated C++ inline member to ensure that the `+1` result convention is established correctly. \r\n\r\nFixes: https://github.com/apple/swift/issues/65876\r\nrdar://115231857\r\n\r\nScope: C++ interop, importing base members of derived C++ classes into Swift.\r\nRisk: Medium, non-trivial change to derived to base calls\r\nTesting: Unit tests, some manual adopter testing\r\nOriginal PR: https://github.com/apple/swift/pull/68846\r\nReviewer: @egorzhdan ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 82,
        "deletions": 39,
        "changed_files": 9,
        "created_at": "2023-10-17T00:14:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Allow for the overlays to not be built in Darwin by respecting SWIFT_BUILD_SDK_OVERLAY.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-16T23:39:20Z",
        "closed_at": "2023-10-17T16:41:03Z",
        "merged_at": "2023-10-17T16:41:02Z",
        "body": "Cherry-pick https://github.com/apple/swift/pull/69177 into release/5.10\r\n\r\n**Explanation**:  Diagnose Sendable annotation on methods of non-Sendable types. This will be an error in Swift 6.\r\n**Risk**: Low, diagnostic\r\n**Testing**: Passes current test-suite\r\n**Reviewer**: @hborla @slavapestov ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 107,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-10-16T23:38:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "\u2026ressors, and observers\r\n\r\nNo other accessor besides a getter could be marked as async \r\nand adding @MainActor global accessor on setters and other \r\naccessor kinds would mean disconnecting them from a getter \r\nin terms of isolation, so let's keep things simple and allow global \r\nactor attribute on getters and/or enclosing declaration only.\r\n\r\nResolves: rdar://99281333\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 103,
        "deletions": 10,
        "changed_files": 10,
        "created_at": "2023-10-16T22:58:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "To-Do:\r\n---------------------------------\r\n- [ ] References to non-type imported decls (e.g. `UsedImportClient5.swift`)\r\n- [ ] Usage of imported conformances",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-10-16T22:31:00Z",
        "closed_at": "2023-10-18T02:15:22Z",
        "merged_at": "2023-10-18T02:15:22Z",
        "body": "Given that right now, the embedded stdlib is part of the toolchain, let's build it even if we're not otherwise producing the regular stdlib (SWIFT_BUILD_STDLIB being off).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-10-16T22:11:26Z",
        "closed_at": null,
        "merged_at": null,
        "body": "SimpleDidSetRequest's implementation was depending on type-checking the body of the observer, meaning that computing the interface type of a `didSet` would require type-checking the body first. This triggers some request cycles, and is unnecessarily complicated.\r\n\r\nRewrite the implementation to work on a non-type-checked body, by using name lookup to establish when the `oldValue` parameter is referenced from the body.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-16T21:22:21Z",
        "closed_at": "2023-10-17T00:44:38Z",
        "merged_at": "2023-10-17T00:44:38Z",
        "body": "Until a `swiftc` with https://github.com/apple/swift-driver/pull/1465 is available widely, enable `-experimental-skip-non-exportable-decls` whenever `-experimental-lazy-typecheck` is specified.\r\n\r\nResolves rdar://117020908\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-16T21:21:13Z",
        "closed_at": "2023-10-17T02:07:56Z",
        "merged_at": "2023-10-17T02:07:56Z",
        "body": "Re-apply #69188 with test case fix",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 86,
        "deletions": 16,
        "changed_files": 4,
        "created_at": "2023-10-16T21:01:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Similar to #69029 but for AutoDiff VJPs.\r\n\r\nFixes #68945",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-16T20:41:50Z",
        "closed_at": "2023-10-17T01:30:39Z",
        "merged_at": "2023-10-17T01:30:39Z",
        "body": "If this is defined, prefer this compiler over the just built compiler.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 51,
        "changed_files": 5,
        "created_at": "2023-10-16T20:21:31Z",
        "closed_at": "2023-10-17T23:41:38Z",
        "merged_at": "2023-10-17T23:41:38Z",
        "body": "Always print the real module name for references in private swiftinterfaces, ignoring export-as declarations. Keep using the export-as name for the public swiftinterface only.\r\n\r\nThe flag `ModuleInterfaceExportAs` used to enable this behavior and we're removing it to make it the default.\r\n\r\nrdar://115922907",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T19:49:45Z",
        "closed_at": "2023-10-16T22:29:21Z",
        "merged_at": "2023-10-16T22:29:21Z",
        "body": "This is (apparently) needed to make executable tests work in some CI configurations.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-16T19:34:53Z",
        "closed_at": "2023-10-16T21:17:26Z",
        "merged_at": "2023-10-16T21:17:26Z",
        "body": "Reverts apple/swift#69188\r\n\r\nReverting while investigating test failure happened in 5.9 branch",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 646,
        "deletions": 56,
        "changed_files": 21,
        "created_at": "2023-10-16T19:11:26Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Motivation\r\n\r\nCurrently the only **proper** way to reference a C function from Swift is by importing it through Clang module.\r\nHowever there are a number of places using the incorrect `@_silgen_name` way to reference C function. (The attribute expects Swift calling convention and it causes calling convention mismatch.)\r\nThese incorrect references happened because defining a new Clang module requires non-trivial work mostly around the build system. (Also there is a very complex issue, which is not easy to solve with Clang module approach https://github.com/apple/swift/pull/67853#issuecomment-1760710859)\r\n\r\nSo this PR adds a new variant of `@_extern` for C function declaration. Also this unlocks a way to declare a function with C calling convention imported through Wasm\u2019s import mechanism by mixing with [`@_extern(wasm)`](https://github.com/apple/swift/pull/69107)\r\n\r\n\r\n## Description\r\n\r\nThe new attribute unlocks declaring a C function in Swift source code. The declared function interfaces are limited to be C-compatible, so no async, no throws, and no ref counted types are allowed. (We might be able to unlock the use of ref counted type in theory but it introduces a lot of complexities)\r\n\r\nExamples:\r\n\r\n```swift\r\n@_extern(c, \"swift_demangle\")\r\npublic func _stdlib_demangleImpl(\r\n  mangledName: UnsafePointer<CChar>?,\r\n  mangledNameLength: UInt,\r\n  outputBuffer: UnsafeMutablePointer<CChar>?,\r\n  outputBufferSize: UnsafeMutablePointer<UInt>?,\r\n  flags: UInt32\r\n) -> UnsafeMutablePointer<CChar>?\r\n\r\n@_extern(wasm, module: \"wasi_snapshot_preview1\", name: \"random_get\")\r\n@_extern(c) // NOTE: Just for calling it with C calling convention\r\nfunc wasi_random_get(\r\n  buffer: UnsafeMutablePointer<UInt8>,\r\n  count: UInt32\r\n) -> Int32\r\n```\r\n\r\nResolves rdar://115802180 and unblock https://github.com/apple/swift/pull/67853\r\n\r\n<details>\r\n<summary>Alternative consideration: Allow @_cdecl without body</summary>\r\n\r\nWe initially planned this approach, but didn\u2019t take it for the following reason\r\n\r\n* The current semantics of `@_cdecl` is \u201cexpose the Swift declaration to C/Objective-C world\u201d and it allows having Objective-C types in its interface.\r\n    * Thus it requires a native-to-foreign thunk to be emitted within the module, which defines the `@_cdecl` function.\r\n* The new mode (without body) would add a semantics: \u201cif no function body is defined, reference a C function corresponding to the Swift function declaration\u201d.\r\n    * This requires a foreign-to-native thunk to be emitted within the module, which *declare* the `@_cdecl` function.\r\n* The problem here is we have to determine if a function with @_cdecl requires foreign-to-native thunk based on where function declarations come from because a @_cdecl function without body declared within a compiling module and imported @_cdecl function both do not have body.\r\n\r\n</details>",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 1236,
        "deletions": 862,
        "changed_files": 34,
        "created_at": "2023-10-16T19:09:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Not complete, and _probably_ not something we're going to pursue for the time being (until we've worked out the Windows + LLDB issues, and can import the AST nodes as references)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 90,
        "deletions": 15,
        "changed_files": 5,
        "created_at": "2023-10-16T17:23:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently, PerformanceDiagnostics are used in embedded Swift to flag uses of existentials in SIL (instructions that have RuntimeEffect::Existential). We should also diagnose RuntimeEffect::MetaData, but that is today overly conservative, so let's start with ValueMetatypeInst + MetatypeInst instructions only (which in IRGen directly emit a metadata reference, so we know they are not going to work).\r\n\r\nAdding a simple test of directly using a metatype, and a more complex test where type(of:) is used which produces a metatype.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-16T16:48:53Z",
        "closed_at": null,
        "merged_at": null,
        "body": "release/5.9 version of #69188 \r\n\r\n* **Explanation**: Add `SWIFT_MODULE_ABI_NAME_PREFIX` CMake variable to swift-syntax libraries. Without this, `(lib)sourcekitdInProc.{dylib|so|dll}` was unusable if the binary links with swift-syntax via SwiftPM dependency, because sourcekitdInProc's swift-syntax symbols conflict with them. By differentiating the ABI name of the compiler's swift-syntax libraries, it can avoids name conflicts.\r\n* **Risk**: Low, no code change. `-module-abi-name` is a well-tested reliable option.\r\n* **Testing**: Passes current test-suite\r\n* **Issues**: rdar://116951101 , https://github.com/apple/swift/issues/68812\r\n* **Reviewer**: Alex Hoppen (@ahoppen), Ben Barham (@bnbarham)",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-16T15:51:39Z",
        "closed_at": "2023-10-17T06:13:32Z",
        "merged_at": "2023-10-17T06:13:32Z",
        "body": "Cherry-pick #69188 into release/5.10\r\n\r\n* **Explanation**: Add `SWIFT_MODULE_ABI_NAME_PREFIX` CMake variable to swift-syntax libraries. Without this, `(lib)sourcekitdInProc.{dylib|so|dll}` was unusable if the binary links with swift-syntax via SwiftPM dependency, because sourcekitdInProc's swift-syntax symbols conflict with them. By differentiating the ABI name of the compiler's swift-syntax libraries, it can avoids name conflicts.\r\n* **Risk**: Low, no code change. `-module-abi-name` is a well-tested reliable option.\r\n* **Testing**: Passes current test-suite\r\n* **Issues**: rdar://116951101 , https://github.com/apple/swift/issues/68812\r\n* **Reviewer**: Alex Hoppen (@ahoppen), Ben Barham (@bnbarham)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 75,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-16T15:24:00Z",
        "closed_at": "2023-10-17T00:17:44Z",
        "merged_at": "2023-10-17T00:17:44Z",
        "body": "Not every phi with a single incoming value can be coalesced.  Explicitly check whether it is coalesceable and only coalesce it if so.\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 35,
        "changed_files": 5,
        "created_at": "2023-10-16T13:58:03Z",
        "closed_at": "2023-10-16T16:06:37Z",
        "merged_at": "2023-10-16T16:06:37Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 59,
        "changed_files": 1,
        "created_at": "2023-10-16T13:56:09Z",
        "closed_at": "2023-10-16T19:55:29Z",
        "merged_at": "2023-10-16T19:55:29Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 73,
        "deletions": 35,
        "changed_files": 3,
        "created_at": "2023-10-16T12:45:30Z",
        "closed_at": "2023-10-17T05:42:07Z",
        "merged_at": "2023-10-17T05:42:07Z",
        "body": "Instead of having a budget for each optimized load or store, provide a budget for the whole function. Fixes a build time problem.\r\n\r\nrdar://116877696\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 327,
        "deletions": 54,
        "changed_files": 13,
        "created_at": "2023-10-16T05:58:22Z",
        "closed_at": "2023-10-16T20:53:34Z",
        "merged_at": "2023-10-16T20:53:34Z",
        "body": "Whenever there is a throwing operation such as a call, subscript, or\r\nproperty access, check that the error type thrown from that operation\r\ncan be caught/rethrown from the current context.\r\n\r\nTo do this, introduce a new API to find the AST node that catches or rethrows an\r\nerror thrown from the given source location.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-16T04:52:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "It seems OptionSet was elided from embedded builds. This corrects that and includes it within those builds. ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-15T18:31:30Z",
        "closed_at": "2023-10-16T16:58:47Z",
        "merged_at": "2023-10-16T16:58:47Z",
        "body": "Cherry-pick https://github.com/apple/swift/pull/69113 to repair release/5.10 CI https://github.com/apple/swift/pull/69113#issuecomment-1763460044\r\n\r\n---\r\n\r\n**Explanation**: Hide compiler emitted `async_Main` symbol from other object files to allow testing multiple async executable modules in SwiftPM.\r\n**Original PR**: https://github.com/apple/swift/pull/69113\r\n**Reviewed by**: @neonichu @etcwilde \r\n**Resolves**: \r\n**Tests**: Tests added in the main of SwiftPM has been auto-merged in advance. https://github.com/apple/swift-package-manager/commit/f258cd551d6508acb2ef89588485659d4cf76729",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-10-15T17:38:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Very tiny cleanup. \r\n\r\nIt's cleaner to use the type and its accessors rather than manually performing a lookup and duplicating the bit-shifting and masking code.\r\n\r\n@Azoy could you review?\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 117,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-15T06:12:29Z",
        "closed_at": "2023-10-15T20:36:39Z",
        "merged_at": "2023-10-15T20:36:39Z",
        "body": "This only makes ExpressibleByStringInterpolation available, but does not provide any concrete implementations of ExpressibleByStringInterpolation. But it should make it possible for users to write their own string interpolation implementations. See the attached test showcasing that.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 70,
        "deletions": 14,
        "changed_files": 4,
        "created_at": "2023-10-15T05:47:26Z",
        "closed_at": null,
        "merged_at": null,
        "body": "(These attributes are currently gated behind an experimental feature.)\r\n\r\n- Drop the current requirement that these attributes can only apply to top-level declarations\r\n- Diagnose if they are used in local contexts\r\n- Diagnose if they are used in generic contexts\r\n- Add tests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-14T17:02:41Z",
        "closed_at": "2023-10-16T15:06:16Z",
        "merged_at": "2023-10-16T15:06:16Z",
        "body": "When deciding whether to clean up copies of noncopyable captures, I got the parameter indexing wrong when the closure has non-capture arguments. Fixing this allows noncopyable captures to work in more general circumstances.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-14T16:58:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Update the toolchain build rules to allow us to package the VCRuntime dependency into the installer.  This avoids the VS dependency in the case that we are cross-compiling to a non-Windows platform.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 10,
        "changed_files": 6,
        "created_at": "2023-10-14T15:52:28Z",
        "closed_at": "2023-10-16T17:44:57Z",
        "merged_at": "2023-10-16T17:44:57Z",
        "body": "Update the Android doc with info about the latest LTS NDK not working.\r\n\r\n@drodriguez, this should get the Android CI passing again.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-14T06:25:22Z",
        "closed_at": "2023-10-16T16:03:47Z",
        "merged_at": "2023-10-16T16:03:47Z",
        "body": "Add 'Compiler' prefix to ABI names of swift-syntax libraries so that compiler libraries (e.g. sourcekitdInProc) can be used from binaries linking with swift-syntax (e.g. via SwiftPM)\r\n\r\nhttps://github.com/apple/swift/issues/68812\r\nrdar://116951101\r\n\r\n(depends on https://github.com/apple/swift-syntax/pull/2282)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 93,
        "deletions": 46,
        "changed_files": 25,
        "created_at": "2023-10-14T05:12:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Top-level mode (script mode) doesn't seem to be useful to embedded Swift usecases, and can cause subtle problems (global variables in top-level mode have often unexpected semantics). Let's make -parse-as-library be the default in embedded Swift.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-14T04:26:48Z",
        "closed_at": "2023-10-16T17:25:54Z",
        "merged_at": "2023-10-16T17:25:54Z",
        "body": "The attached testcase demonstrates the problem, where the resulting program ends up referencing missing symbols at link time:\r\n```\r\nld: Undefined symbols:\r\n  _$ss28__ContiguousArrayStorageBaseC012_doNotCallMeD0AByt_tcfC, referenced from:\r\n      _$ss28__ContiguousArrayStorageBaseCN in main-86e491.o\r\n  _$ss28__ContiguousArrayStorageBaseC16canStoreElements13ofDynamicTypeSbypXp_tF, referenced from:\r\n      _$ss28__ContiguousArrayStorageBaseCN in main-86e491.o\r\n  _$ss28__ContiguousArrayStorageBaseCfD, referenced from:\r\n      _$ss28__ContiguousArrayStorageBaseCN in main-86e491.o\r\n  _$ss41__SwiftNativeNSArrayWithContiguousStorageCABycfC, referenced from:\r\n      _$ss41__SwiftNativeNSArrayWithContiguousStorageCN in main-86e491.o\r\n  _$ss41__SwiftNativeNSArrayWithContiguousStorageCfD, referenced from:\r\n      _$ss41__SwiftNativeNSArrayWithContiguousStorageCN in main-86e491.o\r\n```\r\nThese are all vtable methods referenced from a superclass of an array class that's actually allocated in the program. Because the current logic `SILLinkerVisitor::linkInVTable` only deserializes the one vtable that is being used, we end up with the methods from the superclass missing.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-14T03:59:12Z",
        "closed_at": "2023-10-14T18:31:34Z",
        "merged_at": "2023-10-14T18:31:34Z",
        "body": "The added test triggers a call to swift_release_n, which currently ends up causing an LLVM IR verification failure because swift_release_n is, at the IR level, expected to have a `ptr` argument, but `UnsafePointer?` in Swift code ends up lowering as `i64`. Let's avoid using it and instead use `Builtin.RawPointer` as the argument type, like we do in the other runtime refcounting functions.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-14T03:57:18Z",
        "closed_at": "2023-10-15T00:58:46Z",
        "merged_at": "2023-10-15T00:58:46Z",
        "body": "Function call arguments were not being treated as liveness uses.\r\n\r\nUnblocks SIL: Treat store_borrow as borrowing its source, and have the move-only checker account for borrow scopes. #69169\r\nhttps://github.com/apple/swift/pull/69169\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-14T00:32:02Z",
        "closed_at": "2023-10-14T16:37:49Z",
        "merged_at": "2023-10-14T16:37:49Z",
        "body": "With the work to enable ARM64, we need to package the redistributable into the toolchain to allow distribution via winget.  This is also important to make the runtime work without additional packaging.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-10-13T23:14:16Z",
        "closed_at": "2023-10-14T03:50:10Z",
        "merged_at": "2023-10-14T03:50:10Z",
        "body": "The type that occurs as the thrown error type must conform to the `Error` protocol. Infer this conformance when the type is a type parameter in the signature of a function.\r\n\r\nThis lets us write, e.g.,\r\n\r\n```swift\r\nextension Collection {\r\n  func map<U, E>(body: (Element) throws(E) -> U) throws(E) -> [U] { ... }\r\n}\r\n```\r\n\r\nwithout needing the `E: Error` bit.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 25,
        "changed_files": 2,
        "created_at": "2023-10-13T22:32:39Z",
        "closed_at": "2023-10-18T04:45:20Z",
        "merged_at": "2023-10-18T04:45:20Z",
        "body": "It turns out that the addition of the _CustomStringConvertibleOrNone/_LosslessStringConvertibleOrNone typealiases happened at a very unfortunate source code location that causes the doccomments to get detached from their declarations. Let's fix that.",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 51,
        "changed_files": 5,
        "created_at": "2023-10-13T21:32:28Z",
        "closed_at": "2023-10-16T23:28:55Z",
        "merged_at": "2023-10-16T23:28:55Z",
        "body": "Serialization depended on a longstanding bug in NeedsNewVTableEntryRequest: For a member of a non-class, it always returned `true`, not `false`. It turns out this was because serialization was conflating the concepts of vtable entries and witness table entries, so it needed NeedsNewVTableEntryRequest to return true for members of protocols. Untangle this logic so that NeedsNewVTableEntryRequest can be given the logical behavior.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-10-13T21:15:04Z",
        "closed_at": "2023-10-16T16:49:43Z",
        "merged_at": "2023-10-16T16:49:43Z",
        "body": "The primary goal is to fix this warning:\r\n\r\n$PROJECT_PATH/swift-project/swift/lib/Markup/LineList.cpp:46:10: warning: variable 'Col' set but not used [-Wunused-but-set-variable]\r\n  size_t Col = 0;\r\n\r\nI also rewrote the implementation to use StringRef functionality instead of manually walking over the characters.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-13T19:38:00Z",
        "closed_at": "2023-10-17T04:12:03Z",
        "merged_at": "2023-10-17T04:12:03Z",
        "body": "Disallow Sendable annotation on methods of non-Sendable types.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 257,
        "deletions": 47,
        "changed_files": 32,
        "created_at": "2023-10-13T18:13:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "These attributes are used to establish lifetime dependence between argument/self and the result.\r\n\r\nMatching swift-syntax PR :  https://github.com/apple/swift-syntax/pull/2281\r\n\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T17:54:01Z",
        "closed_at": "2023-10-14T00:26:20Z",
        "merged_at": "2023-10-14T00:26:20Z",
        "body": "This should avoid the internal dependency on the just built clang being for the build.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 10,
        "changed_files": 5,
        "created_at": "2023-10-13T17:52:34Z",
        "closed_at": "2023-10-18T04:08:36Z",
        "merged_at": "2023-10-18T04:08:36Z",
        "body": "- Add a missing case to locator simplification\r\n\r\nIf tuple element is anchored on an assignment, we need to look\r\nat the source of the assignment to find tuple expression the\r\nelement belongs to.\r\n\r\n- Use simplified locator to find owner type of a requirement failure\r\n\r\nOnly simplified locator points to the right underlying expression.\r\n\r\nResolves: rdar://116122902\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 204,
        "deletions": 265,
        "changed_files": 1,
        "created_at": "2023-10-13T17:22:20Z",
        "closed_at": "2023-10-14T02:01:16Z",
        "merged_at": "2023-10-14T02:01:16Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T17:16:00Z",
        "closed_at": "2023-10-14T01:32:27Z",
        "merged_at": "2023-10-14T01:32:27Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T17:03:01Z",
        "closed_at": "2023-10-13T22:44:31Z",
        "merged_at": "2023-10-13T22:44:31Z",
        "body": "Backport the change for linker defaults to 5.9",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T16:57:08Z",
        "closed_at": "2023-10-13T19:15:07Z",
        "merged_at": "2023-10-13T19:15:07Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 138,
        "deletions": 51,
        "changed_files": 8,
        "created_at": "2023-10-13T16:49:12Z",
        "closed_at": "2023-10-16T20:51:41Z",
        "merged_at": "2023-10-16T20:51:41Z",
        "body": "When rewriting uses of a noncopyable value, the move-only checker failed to take into account the scope of borrowing uses when establishing the final lifetimes of values. One way this manifested was when borrowed values get reabstracted from value to in-memory representations, using a store_borrow instruction, the lifetime of the original borrow would be ended immediately after the store_borrow begins rather than after the matching end_borrow. Fix this by, first, changing `store_borrow` to be treated as a borrowing use of its source rather than an interior-pointer use; this should be more accurate overall since `store_borrow` borrows the entire source value for a well-scoped duration balanced by `end_borrow` instructions. That done, change MoveOnlyBorrowToDestructureUtils so that when it sees a borrow use, it ends the borrow at the end(s) of the use's borrow scope, instead of immediately after the beginning of the use.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T16:40:27Z",
        "closed_at": "2023-10-16T19:08:25Z",
        "merged_at": "2023-10-16T19:08:25Z",
        "body": "**Explanation:** explicitly set `lit-args` for `buildbot_incremental,*,build` presets, so that when we run matching `buildbot_incremental,*,test=` on the same build folder we don't have any unnecessary rebuilds in LLVM\r\n**Radar:** rdar://116922016\r\n**Scope:** `buildbot_incremental,*,build` presets\r\n**Risk:** low\r\n* `buildbot_incremental,*,test` presets are currently specifying the same value for `lit-args`\r\n* at worst build times will remain the same instead of descreasing\r\n\r\n**Testing:** run at desk a build of `buildbot_incremental,tools=RA,stdlib=RD,build`\u00a0 followed by `buildbot_incremental,tools=RA,stdlib=RD,test=macOS,type=device`, and checked there is no rebuild of compiler-rt\r\n**Reviewed by:**\r\n\r\n(cherry picked from commit 6cf157e181c3692e2e8b020222223895f45fa429)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T16:38:00Z",
        "closed_at": "2023-10-16T19:03:42Z",
        "merged_at": "2023-10-16T19:03:42Z",
        "body": "We have some configurations in which we run a preset that only builds the compiler, and then a few ones to tests such binary, e.g.\r\n\r\n```\r\nbuildbot_incremental,tools=RA,stdlib=RD,build\r\nbuildbot_incremental,tools=RA,stdlib=RD,test=macOS,type=device\r\nbuildbot_incremental,tools=RA,stdlib=RD,test=iOS,type=simulator\r\nbuildbot_incremental,tools=RA,stdlib=RD,test=watchOS,type=simulator\r\n```\r\n\r\nContrary to the other presets, in the first preset we did not specify \"--lit-args\" since it is not necessary -- however that plays a part in the configuration of compiler-rt, causing an unwanted rebuild when that parameter is specified in the following preset.\r\n\r\nAddresses rdar://116922016",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T16:04:10Z",
        "closed_at": "2023-10-13T21:04:50Z",
        "merged_at": "2023-10-13T21:04:50Z",
        "body": "Embedded Swift relies on several SILOptimizer features in SwiftCompilerSources, let's just avoid building embedded stuff without those (tests are already guarded with REQUIRES: swift_in_compiler).\r\n\r\nFixes <https://github.com/apple/swift/issues/69124>.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 198,
        "deletions": 7,
        "changed_files": 27,
        "created_at": "2023-10-13T07:04:50Z",
        "closed_at": "2023-10-18T04:39:10Z",
        "merged_at": "2023-10-18T04:39:10Z",
        "body": "@_nonEscapable type attribute is for testing compiler support until we have the ~Escapable syntax.\r\n\r\n@_unsafeNonEscapableResult function attribute allows NonEscapable types to be returned from a function for testing non-escapable library development.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 19825,
        "deletions": 2435,
        "changed_files": 393,
        "created_at": "2023-10-13T06:39:26Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 10
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-10-12T21:42:16Z",
        "closed_at": "2023-10-13T05:43:53Z",
        "merged_at": "2023-10-13T05:43:53Z",
        "body": "Disable some tests that use `-emit-library` to emit dynamic library because dynamic library from Swift is not supported yet on Wasm. We will enable them after we will get better dylib support in the ecosystem.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 426,
        "deletions": 57,
        "changed_files": 15,
        "created_at": "2023-10-12T20:35:02Z",
        "closed_at": "2023-10-13T16:34:44Z",
        "merged_at": "2023-10-13T16:34:44Z",
        "body": "IRGen lowering of non-fixed-sized typed errors and the SIL support necessary to spell out IRGen test cases.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 146,
        "deletions": 208,
        "changed_files": 7,
        "created_at": "2023-10-12T19:11:45Z",
        "closed_at": "2023-10-12T23:05:32Z",
        "merged_at": "2023-10-12T23:05:32Z",
        "body": "* Use `BridgedString` for ASTGen -> C++ string returnings - because why not\r\n* Use null terminated C-strings for C++ -> ASTGen string arguments - As long as it's null-terminated and doesn't contain null byte in the string, there's no benefit to pass the length.\r\n* Use `UnsafeMutableRawPointer` for C++ -> ASTGen diagnostic engine arguments - In C++, it's passed as `void *` swift side should use raw pointers.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-12T16:51:30Z",
        "closed_at": "2023-10-13T05:54:19Z",
        "merged_at": "2023-10-13T05:54:19Z",
        "body": "Backport the changes to select the default linker with SPM.  This is required to enable building without the VS developer shell by default.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 20,
        "changed_files": 1,
        "created_at": "2023-10-12T16:43:46Z",
        "closed_at": "2023-10-12T19:17:48Z",
        "merged_at": "2023-10-12T19:17:48Z",
        "body": "For diagnostics in the presence of dead values.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-12T15:25:00Z",
        "closed_at": "2023-10-12T19:44:07Z",
        "merged_at": "2023-10-12T19:44:06Z",
        "body": "This is to match the one SwiftDriver expects, so that we generate API descriptors when they are specified in supplementary output files.\r\n\r\nAddresses rdar://116809713",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 664,
        "deletions": 14,
        "changed_files": 22,
        "created_at": "2023-10-12T14:35:15Z",
        "closed_at": "2023-10-12T21:01:23Z",
        "merged_at": "2023-10-12T21:01:23Z",
        "body": "* **Explanation**: This is the experimental implementation of allowing default arguments to call global-actor-isolated functions. Actor isolation checking is deferred to the caller; it is an error to use a default argument from across isolation domains. Though this is experimental, cherry-picking is useful to make cherry-picking other actor isolation checker bug fixes easier, and it leaves open the opportunity to close the data-race hole with global-actor-isolated instance properties in 5.10 if the feature is accepted.\r\n* **Scope**: Limited to the actor isolation checker. The implementation is gated behind `-enable-experimental-feature IsolatedDefaultValues`, so it will not impact existing code.\r\n* **Risk**: Low; the feature is not actually enabled.\r\n* **Testing**: Added new tests.\r\n* **Reviewer**: @xedin @ktoso\r\n* **Issue**: rdar://101058224\r\n* **Main branch PR**: https://github.com/apple/swift/pull/68794, https://github.com/apple/swift/pull/69030\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-12T14:22:59Z",
        "closed_at": "2023-10-12T19:09:37Z",
        "merged_at": "2023-10-12T19:09:37Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 225,
        "deletions": 24,
        "changed_files": 7,
        "created_at": "2023-10-12T07:28:55Z",
        "closed_at": "2023-10-13T02:29:30Z",
        "merged_at": "2023-10-13T02:29:30Z",
        "body": "For lifetime dependence prototyping.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 7,
        "changed_files": 6,
        "created_at": "2023-10-12T05:08:11Z",
        "closed_at": "2023-10-13T15:09:26Z",
        "merged_at": "2023-10-13T15:09:26Z",
        "body": "Wasm C ABI now uses `int __main_argc_argv(int argc, char *argv[])` as entry point signature[^1], and wasi-libc has removed backward compatibility with legacy \"main\"[^2], so we need to support the new name in compiler side.\r\n\r\n[^1]: https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\r\n[^2]: https://github.com/WebAssembly/wasi-libc/commit/d8d00bcd5a839150f1950678ce6e6a9b80fbc140\r\n\r\nResolve rdar://116552600",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 129,
        "deletions": 27,
        "changed_files": 14,
        "created_at": "2023-10-12T00:46:03Z",
        "closed_at": "2023-10-12T17:49:06Z",
        "merged_at": "2023-10-12T17:49:06Z",
        "body": "When `-experimental-skip-non-exportable-decls` is specified, only emit SIL for declarations that are exposed to clients.\r\n    \r\nResolves rdar://116774565",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-10-12T00:21:15Z",
        "closed_at": "2023-10-12T07:28:52Z",
        "merged_at": "2023-10-12T07:28:52Z",
        "body": "* **Explanation**: Adding global actor isolation via subclassing admits data races because actor-isolated types are `Sendable` while `nonisolated` classes are not, so this allowed bypassing `Sendable` checking.\r\n* **Scope**: Only impacts subclasses that attempt to add global actor isolation. The error is downgraded to a warning prior to Swift 6 to preserve source compatibility in Swift 5 mode.\r\n* **Risk**: Low.\r\n* **Testing**: Added new tests.\r\n* **Reviewer**: @DougGregor @xedin\r\n* **Issue**: rdar://116702475\r\n* **Main branch PR**: https://github.com/apple/swift/pull/69132\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 756,
        "deletions": 99,
        "changed_files": 14,
        "created_at": "2023-10-11T20:51:40Z",
        "closed_at": "2023-10-12T16:09:15Z",
        "merged_at": "2023-10-12T16:09:15Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/68390\r\n\r\n---\r\n\r\n- Explanation:\r\n\r\nTo provide enhanced debugging and runtime checking for the correct usage\r\nof continuations passed in a call to ObjC from Swift, this PR introduces a flag\r\nfor the `swift-frontend` that uses a `CheckedContinuation` when calling an\r\nasync ObjC function from Swift. When enabled, the underlying block value \r\npassed as a completion-handler is created using `CheckedContinuation` \r\ninstead of just an `UnsafeContinuation`, which was what was used previously.\r\nThe checked continuation ensures that the block is only invoked once.\r\n\r\nAs of now, the `swift-frontend` flag is `-checked-async-objc-bridging={on, off}`\r\n\r\n- Scope: Calls to ObjC with async handlers.\r\n\r\n- Main Branch PR: https://github.com/apple/swift/pull/68390\r\n\r\n- Resolves: rdar://89930501\r\n\r\n- Risk: Low\r\n\r\n- Reviewed By: @ktoso @jckarter \r\n\r\n- Testing: added test-cases to the test suite.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 373,
        "deletions": 207,
        "changed_files": 4,
        "created_at": "2023-10-11T18:58:09Z",
        "closed_at": null,
        "merged_at": null,
        "body": "There are 2 of the same implementation of `_gatherWrittenGenericParameters` in MetadataLookup as well as `_buildDemanglingForGenericArgs` in Demangle. Unify these implementations. This also fixes a slight bug in the following:\r\n\r\n```swift\r\nstruct Generic<T, U, V> {}\r\n\r\nextension Generic where T == U, U == V.Element, V: Collection {\r\n  struct Nested {}\r\n}\r\n\r\nprint(_typeName(Generic<Int, Int, [Int]>.Nested.self)) // << invalid type >>\r\n```\r\n\r\nwhere we assumed the rhs parameter is a generic argument with (depth, index) and fail if it isn't. This is incorrect because the rhs can totally be one of these same type constraints to associated types.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 15,
        "changed_files": 6,
        "created_at": "2023-10-11T18:42:07Z",
        "closed_at": "2023-10-11T21:17:28Z",
        "merged_at": "2023-10-11T21:17:28Z",
        "body": "So that it does not collide with BridgedDiagnosticEngine in CASTBridging.h. This hopefully fixes an asan crash.\r\nrdar://116686158\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 1,
        "changed_files": 8,
        "created_at": "2023-10-11T18:29:58Z",
        "closed_at": "2023-10-12T16:08:29Z",
        "merged_at": "2023-10-12T16:08:28Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/69114\r\n\r\n---\r\n\r\n- Explanation:\r\n\r\nThis is a preferred way to make sure that Sendable inference doesn't\r\nhappen for these types (as described in SE-0331) because they are \r\nmarked as `@frozen`.\r\n\r\n- Scope: Passing unsafe pointers across concurrency domains.\r\n\r\n- Main Branch PR: https://github.com/apple/swift/pull/69114\r\n\r\n- Resolves: rdar://101980108\r\n\r\n- Risk: Low\r\n\r\n- Reviewed By: @ktoso @hborla  \r\n\r\n- Testing: added test-cases to the test suite.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-11T16:27:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "To reflect changes in 5.10 branch\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-10-11T16:24:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-10-11T16:11:00Z",
        "closed_at": "2023-10-12T00:19:04Z",
        "merged_at": "2023-10-12T00:19:04Z",
        "body": "Adding global actor isolation to a subclass of a `nonisolated` superclass admits data races because actor-isolated types are `Sendable`, so this allowed bypassing `Sendable` checking, e.g.\r\n\r\n```swift\r\nclass NonSendable {\r\n  var x: Int = 0\r\n}\r\n\r\n@MainActor \r\nclass MainActorSubclass: NonSendable {}\r\n\r\nlet mainActorSub = MainActorSubclass()\r\n\r\nTask.detached {\r\n  _ = mainActorSub\r\n  _ = mainActorSub.x\r\n  mainActorSub.x = 10 // race?\r\n}\r\n\r\nmainActorSub.x = 100 // oops\r\n```\r\n\r\nResolves rdar://116702475",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 57,
        "changed_files": 1,
        "created_at": "2023-10-11T14:52:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "While `build-toolchain` is a script that runs on CI, we haven't found it to be reliable when building locally. Its default settings are sufficiently different from what is recommended in the existing `docs/GettingStarted.md` guide. We've received multiple reports from potential first-time contributors who are unable to build locally with `build-toolchain`, but for whom `utils/build-script` did work.\r\n\r\nAdditionally, there doesn't seem to be a consensus that building a toolchain package is the best and the quickest way to try out a newly built compiler in Xcode. In a subsequent PR we should recommend the usage of `SWIFT_EXEC` or downloading a toolchain as a result of `@swift-ci build toolchain` CI triggers instead.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 163,
        "deletions": 91,
        "changed_files": 9,
        "created_at": "2023-10-11T14:49:25Z",
        "closed_at": "2023-10-12T14:33:17Z",
        "merged_at": "2023-10-12T14:33:17Z",
        "body": "* Description: When resolving the generic argument list of a generic type, we didn't check for certain invalid situations involving occurrences of pack expansion types. As a result we would crash instead of producing a diagnostic.\r\n* Risk: Very low. (Note: The middle commit is a refactoring that has been on `main` for a while. I cherry-picked it to avoid merge conflicts)\r\n* Tested: New test cases added.\r\n* Radar: rdar://116713961 and rdar://116716014.\r\n* Reviewed by: @hborla ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-11T14:26:26Z",
        "closed_at": "2023-10-12T03:34:40Z",
        "merged_at": "2023-10-12T03:34:40Z",
        "body": "Bump curl to address security issues in curl.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-11T14:24:20Z",
        "closed_at": "2023-10-12T03:35:11Z",
        "merged_at": "2023-10-12T03:35:11Z",
        "body": "Bump curl to address security issues in curl.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 115,
        "deletions": 36,
        "changed_files": 2,
        "created_at": "2023-10-11T14:18:27Z",
        "closed_at": "2023-10-12T06:18:33Z",
        "merged_at": "2023-10-12T06:18:33Z",
        "body": "* **Explanation**: `ActorIsolationChecker`'s apply stack was not considering `LookupExpr`, which caused bogus diagnostics for `inout` arguments that happen to be subexpressions of `async` function calls. Similarly, `inout` arguments to `async` subscript calls were not diagnosed because the subscript application was not tracked in the apply stack.\r\n* **Scope**: Only impacts subscript calls that are subexpressions of `async` function calls.\r\n* **Risk**: Low.\r\n* **Testing**: Added new tests.\r\n* **Reviewer**: @xedin \r\n* **Issue**: rdar://115863944\r\n* **Main branch PR**: https://github.com/apple/swift/pull/69083",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 19,
        "changed_files": 1,
        "created_at": "2023-10-11T13:58:27Z",
        "closed_at": "2023-10-13T11:21:54Z",
        "merged_at": "2023-10-13T11:21:54Z",
        "body": "### Tidying up\r\n\r\n* Link out to FAQ for an introduction to rewriting history.\r\n* Link out to our commit message formatting guidelines.\r\n* Expand a bit more on what it means to tidy commit history.\r\n\r\n### Code review\r\n\r\n* Account for automatic review requests\r\n* Add a proper fallback course of action\r\n* Link out to commit access section on swift.org",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-11T13:16:32Z",
        "closed_at": "2023-10-12T16:08:03Z",
        "merged_at": "2023-10-12T16:08:03Z",
        "body": "accidently -> accidentally",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-10-11T08:01:04Z",
        "closed_at": "2023-10-11T12:52:39Z",
        "merged_at": "2023-10-11T12:52:39Z",
        "body": "* Don't exclude code which end up in an infinite loop. rdar://116705459\r\n* Don't exclude error handling code (throw, catch). Errors are existentials and will always allocate. Once we have typed throws it will be possible to do error handling without allocations.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-11T06:46:21Z",
        "closed_at": "2023-10-11T19:11:55Z",
        "merged_at": "2023-10-11T19:11:55Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 9,
        "changed_files": 4,
        "created_at": "2023-10-11T06:15:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- rdar://103356978\r\n-  #59174\r\n\r\nFor now reproducing the issue  and need to figure out why dispatch behaves like this and what we want to do about it.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-11T06:09:30Z",
        "closed_at": "2023-10-11T08:00:18Z",
        "merged_at": "2023-10-11T08:00:18Z",
        "body": "This is another follow-up on https://github.com/apple/swift/pull/69039\r\n\r\n* make BridgedDiagnosticEngine a typedef again. rdar://116686158\r\n* fix storage size of BridgedDiagnosticFixIt and fix the static_assert error message\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 150,
        "deletions": 61,
        "changed_files": 9,
        "created_at": "2023-10-11T03:40:50Z",
        "closed_at": "2023-10-11T19:00:07Z",
        "merged_at": "2023-10-11T19:00:07Z",
        "body": "Fixes rdar://116713961 / https://github.com/apple/swift/issues/69012, rdar://116716014 / https://github.com/apple/swift/issues/69088.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 137,
        "changed_files": 4,
        "created_at": "2023-10-11T02:37:49Z",
        "closed_at": "2023-10-11T15:53:56Z",
        "merged_at": "2023-10-11T15:53:56Z",
        "body": "This reverts commit ccaf427fc3188d54baf62776c98a2d6e5db378ee, reversing changes made to bf45c55530acd2a148b4d4e61bac66627e664d68.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 1,
        "changed_files": 8,
        "created_at": "2023-10-11T00:28:42Z",
        "closed_at": "2023-10-11T18:24:08Z",
        "merged_at": "2023-10-11T18:24:08Z",
        "body": "This is a preferred way to make sure that Sendable inference doesn't\r\nhappen for these types because they are marked as `@frozen`.\r\n\r\nResolves: rdar://101980108\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-11T00:17:19Z",
        "closed_at": "2023-10-11T18:45:27Z",
        "merged_at": "2023-10-11T18:45:27Z",
        "body": "Multiple executable targets with asyc entrypoints within a single package were not able to be tested due to the following linkage failure.\r\nThe sync `main` entrypoint is usually referenced by crt, so it should be visible from the outside of the object file and linked image unit. Therefore, the sync `main` entrypoints are renamed using `-entry-point-function-name` by SwiftPM to avoid conflicting with other executable targets.\r\nOn the other hand, the async `async_Main` entrypoint is only referenced from the sync `main`, so it doesn't need to be visible from other object files. Therefore, we can just hide it from other object files to avoid static link-time conflicts.\r\n\r\nThe `async_Main` symbol was defined as `hidden` SIL visibility, but `hidden` is still visible from other object files (not visible from other image unit), so this PR makes it `private`, which corresponds to `internal` LLVM visibility.\r\n\r\nResolves rdar://114231968\r\n\r\n```\r\n$ ../swift-DEVELOPMENT-SNAPSHOT-2023-10-09-a-ubuntu20.04/usr/bin/swift test\r\nBuilding for debugging...\r\nerror: link command failed with exit code 1 (use -v to see invocation)\r\n/usr/bin/ld.gold: error: /tmp/tmp.o984OA4fPZ/spm-async-main-repro/.build/x86_64-unknown-linux-gnu/debug/b.build/B.swift.o: multiple definition of 'async_Main'\r\n/usr/bin/ld.gold: /tmp/tmp.o984OA4fPZ/spm-async-main-repro/.build/x86_64-unknown-linux-gnu/debug/a.build/A.swift.o: previous definition here\r\n/usr/bin/ld.gold: error: /tmp/tmp.o984OA4fPZ/spm-async-main-repro/.build/x86_64-unknown-linux-gnu/debug/b.build/B.swift.o: multiple definition of 'async_MainTu'\r\n/usr/bin/ld.gold: /tmp/tmp.o984OA4fPZ/spm-async-main-repro/.build/x86_64-unknown-linux-gnu/debug/a.build/A.swift.o: previous definition here\r\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\r\nerror: fatalError\r\n[39/40] Linking spm-async-main-reproPackageTests.xctest\r\nerror: fatalError\r\n```\r\n\r\n<details>\r\n\r\n```swift\r\nlet package = Package(\r\n    name: \"spm-async-main-repro\",\r\n    dependencies: [ ],\r\n    targets: [\r\n        .executableTarget(name: \"a\", dependencies: []),\r\n        .executableTarget(name: \"b\", dependencies: []),\r\n\r\n        .testTarget(name: \"reproTests\", dependencies: [\"a\", \"b\"]),\r\n    ]\r\n)\r\n```\r\n\r\n</details>",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-10-10T23:52:51Z",
        "closed_at": "2023-10-11T02:50:46Z",
        "merged_at": "2023-10-11T02:50:46Z",
        "body": "Declare an explicit type for the enum to make SILGen output consistent across platforms.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 14,
        "changed_files": 5,
        "created_at": "2023-10-10T23:09:45Z",
        "closed_at": "2023-10-12T18:39:17Z",
        "merged_at": "2023-10-12T18:39:17Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/69109\r\n--------------------\r\n\u2022 Release: Swift 5.10\r\n\u2022 Explanation: We will now only record these dependencies in CAS mode, because we require explicit PCH tasks to be produced for imported header of binary module dependencies. In the meantime, in non-CAS mode loading clients will consume the `.h` files encoded in the `.swiftmodules` directly.\r\n\r\nFollowup changes to SwiftDriver will enable explicit PCH compilation of such dependenceis, but for the time being restore prior behavior for non-CAS explicit module builds.\r\n\u2022 Scope of Issue: Explicit module builds \r\n\u2022 Risk: Minimal, this change affects only code paths for explicit module builds, which are not yet default.\r\n\u2022 Origination: Explicit Module Build feature development and addition of CAS-specific functionality. \r\n\r\nResolves rdar://116006619\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 18,
        "changed_files": 10,
        "created_at": "2023-10-10T23:08:08Z",
        "closed_at": "2023-10-11T02:56:52Z",
        "merged_at": "2023-10-11T02:56:52Z",
        "body": "Rename `-experimental-serialize-external-decls-only` to `-experimental-skip-non-exportable-decls` in preparation for the flag being used to influence more than just serialization.\r\n\r\nResolves rdar://116771543\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 14,
        "changed_files": 5,
        "created_at": "2023-10-10T22:58:08Z",
        "closed_at": "2023-10-13T16:04:37Z",
        "merged_at": "2023-10-13T16:04:37Z",
        "body": "- [Serialization] Serialize source `.h` path when an explicit `.pch` bridging header is provided. In explicit module builds, bridging header is passed directly as a `.pch` input. Loading clients may not be able to directly import this PCH because it was built against mis-matched dependencies with a different context hash. So instead they should directly ingest the `.h` dependency and build it against their own set of dependencies.\r\n- [Dependency Scanning] Do now write out bridging header dependencies of binary modules unless in CAS mode. We only record these dependencies in CAS mode, because we require explicit PCH tasks to be produced for imported header of binary module dependencies. In the meantime, in non-CAS mode loading clients will consume the `.h` files encoded in the `.swiftmodules` directly. Followup changes to SwiftDriver will enable explicit PCH compilation of such dependencies, but for the time being restore prior behavior for non-CAS explicit module builds.\r\n\r\nResolves rdar://116006619",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T22:53:33Z",
        "closed_at": "2023-10-14T22:36:49Z",
        "merged_at": null,
        "body": "Confira\r\n\r\n<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #NNNNN, fix apple/llvm-project#MMMMM.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 311,
        "deletions": 3,
        "changed_files": 21,
        "created_at": "2023-10-10T22:52:20Z",
        "closed_at": "2023-10-12T16:29:13Z",
        "merged_at": "2023-10-12T16:29:13Z",
        "body": "This attribute instructs the compiler that this function declaration should be \"import\"ed from host environment. It's equivalent of Clang's [`__attribute__((import_module(\"module\"), import_name(\"field\")))`](https://clang.llvm.org/docs/AttributeReference.html#id523)\r\n\r\nThe attribute doesn't have any effect on to function signature and calling convention but only adds LLVM meta attribute to the function. Currently there is no way to declare a function with non SwiftCC, so functions are always imported as having SwiftCC. (I'm planning to add `@_extern(c)` after this change will be merged. Combination with them makes the declaration to be imported from WebAssembly host using C convention)\r\n\r\nThis is the import version of https://github.com/apple/swift/pull/68524, which adds an attribute to export functions.\r\n\r\n- [Parse] Parse new attribute `@_extern(wasm, module: <module-name>, name: <name>)`\r\n- [TypeCheck] Reject function decl with the attribute with body or non-top-level context.\r\n- [IRGen] Add corresponding LLVM metadata `wasm-import-name` and `wasm-import-module`\r\n\r\nResolves rdar://115502075",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-10-10T22:49:29Z",
        "closed_at": "2023-10-11T14:01:00Z",
        "merged_at": "2023-10-11T14:01:00Z",
        "body": "* **Explanation**: Attached and freestanding macros cannot expand to statements. However, the macro validation code was completely ignoring any ASTNode that isn't a declaration, allowing statement-producing macros to compile. Furthermore, for freestanding declaration macros, the experimental implementation of code item macros caused the invalid statements to be visited during SILGen, resulting in runtime crashes. This change diagnoses macro expansions that contain statements immediately after expansion.\r\n* **Scope**: Only impacts freestanding and attached macros that allow parsing ASTNodes that are not declarations.\r\n* **Risk**: Low.\r\n* **Testing**: Added a new regression test.\r\n* **Reviewer**: @DougGregor \r\n* **Main branch PR**: https://github.com/apple/swift/pull/69089",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 4,
        "changed_files": 8,
        "created_at": "2023-10-10T22:12:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is an ABI breaking change for Windows.  `WCHAR` on Windows is mapped to `short` (`-fshort-wchar` makes it `unsigned short`).  When C++ interop is enabled, `WCHAR` will be mapped to `wchar_t` which is then mapped to `short` (or `unsigned short` if `-fshort-wchar` is specified). Correct the mapping type to get the desired behaviour.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 136,
        "deletions": 72,
        "changed_files": 10,
        "created_at": "2023-10-10T20:32:22Z",
        "closed_at": "2023-10-11T16:31:39Z",
        "merged_at": "2023-10-11T16:31:39Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/68875\r\n\r\n---\r\n\r\n- Explanation:\r\n\r\nThe original change supported only the case where all stored properties were controlled\r\nby an init accessor but when other fields were involved SILGen would emitted copies of\r\nloaded \"self\" for each setter application which is redundant and due to the fact that the\r\nsetter was escaping. \r\n\r\nThese changes make partial application of the setter non-escaping which means that\r\n\"self\" can be borrowed instead of copied.\r\n\r\n- Scope: Init accessor declarations with  `nonmutating set` used in default initializers mixed with other stored properties.\r\n\r\n- Main Branch PR: https://github.com/apple/swift/pull/68875\r\n\r\n- Resolves: https://github.com/apple/swift/issues/67827\r\n\r\n- Risk: Low\r\n\r\n- Reviewed By: @jckarter \r\n\r\n- Testing: SILGen and Interpreter tests added to the test suite.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 470,
        "deletions": 94,
        "changed_files": 17,
        "created_at": "2023-10-10T19:49:16Z",
        "closed_at": "2023-10-11T13:36:51Z",
        "merged_at": "2023-10-11T13:36:51Z",
        "body": "Cherry-pick of #66247\r\n\r\n- Explanation: Implements [SE-0404](https://github.com/apple/swift-evolution/blob/main/proposals/0404-nested-protocols.md)\r\n- Scope: Swift Compiler (no runtime or stdlib changes)\r\n- Risk: Medium\r\n- Testing: Passes the current test suite\r\n- Reviewer: Slava Pestov (@slavapestov)",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 137,
        "deletions": 23,
        "changed_files": 4,
        "created_at": "2023-10-10T18:51:42Z",
        "closed_at": "2023-10-12T16:21:05Z",
        "merged_at": null,
        "body": "Cherry pick of: https://github.com/apple/swift/pull/68844\r\n\r\n* Explanation: The `_swift_instantiateCheckedGenericMetadata` is a new runtime entry not used by anyone yet, but previously it only worked by passing in all generic arguments instead of allow only key arguments. Fix this to allow key argument input.\r\n* Scope: Swift Runtime\r\n* Risk: Very low, affects a function that isn't used anywhere in the runtime and preserves the same behavior with the other runtime function it affects.\r\n* Testing: Passes the current test suite\r\n* Issues: rdar://116748040\r\n* Reviewer: Mike Ash (@mikeash)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 377,
        "deletions": 3,
        "changed_files": 9,
        "created_at": "2023-10-10T18:15:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "**Review is very welcome but DO NOT MERGE until rebranch will be merged**\r\n\r\n---\r\n\r\nThis patch adds new build products to build and test the Swift stdlib for WebAssembly.\r\nThis adds WebAssembly specific stdlib product instead of adding the new target in `stdlib-deployment-targets` because unlike darwin platforms Wasm target has quite different stdlib configuration from host target and there is no way to specify different stdlib configuration for each target in `stdlib-deployment-targets` for now.\r\n\r\nThis patch adds 1 new dependency `wasi-libc` and 3 new build products:\r\n1. `WASILibc` - wasi-libc is a libc implementation for WebAssembly System Interface (WASI). This product is required to build the compiler runtimes and Swift stdlib.\r\n2. `WasmLLVMRuntimeLibs` - This product builds `./runtimes` directory in llvm-project, which contains compiler-rt, libcxx and libcxxabi. This product is required to build Swift stdlib.\r\n3. `WasmStdlib` - This product builds standalone Swift stdlib for WebAssembly. (Similar to `MinimalStdlib` product, but configured for WebAssembly target)\r\n\r\n\r\nCurrently `WasmStdlib` runs test suite under `test/IRGen` to verify the semi-target specific code in IRGen works and the generated IR can be processed by LLVM WebAssembly backend. Rest of test suites including executable tests are now skipped, but will be enabled after we set up a Wasm runtime in the CI infrastructure and calling convention mismatch issues will be resolved. \r\n\r\nResolves rdar://116007434 and rdar://116523979 but now rdar://116406663 blocks merging\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 137,
        "deletions": 23,
        "changed_files": 4,
        "created_at": "2023-10-10T18:14:34Z",
        "closed_at": "2023-10-12T16:20:53Z",
        "merged_at": null,
        "body": "Cherry pick of: https://github.com/apple/swift/pull/68844\r\n\r\n* Explanation: The `_swift_instantiateCheckedGenericMetadata` is a new runtime entry not used by anyone yet, but previously it only worked by passing in all generic arguments instead of allow only key arguments. Fix this to allow key argument input.\r\n* Scope: Swift Runtime\r\n* Risk: Very low, affects a function that isn't used anywhere in the runtime and preserves the same behavior with the other runtime function it affects.\r\n* Testing: Passes the current test suite\r\n* Issues: rdar://116748040\r\n* Reviewer: Mike Ash (@mikeash)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 145,
        "deletions": 15,
        "changed_files": 4,
        "created_at": "2023-10-10T18:12:55Z",
        "closed_at": "2023-10-11T19:51:46Z",
        "merged_at": "2023-10-11T19:51:46Z",
        "body": "Package decls are only printed in interface files if they are inlinable\r\n(@usableFromInline, @inlinable, @_alwaysEmitIntoClient). They could be\r\nreferenced by a module outside of its defining module that belong to the same\r\npackage determined by the package-name flag. However, the flag is only in\r\n.swiftmodule and .private.swiftinterface, thus type checking references of\r\ninlinable package symbols in public interfaces fails due to the missing flag.\r\nInstead of adding the package-name flag to the public interfaces, which\r\ncould raise a security concern, this PR grants access to such cases.\r\n\r\nResolves rdar://116142791\r\n\r\nCherrypicked from https://github.com/apple/swift/pull/68811",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T17:45:18Z",
        "closed_at": "2023-10-10T17:45:26Z",
        "merged_at": "2023-10-10T17:45:26Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/68668\r\n-----------------------------------------\r\nDisable while we investigate rdar://114453974\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T17:31:14Z",
        "closed_at": "2023-10-10T20:24:53Z",
        "merged_at": "2023-10-10T20:24:53Z",
        "body": "Module.h returns an llvm::SmallSetVector and requires the full definition. Something changed in the transitive includes so that it's no longer included and the file fails to build. Including it now.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T14:52:16Z",
        "closed_at": "2023-10-13T16:05:18Z",
        "merged_at": null,
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 238,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-10T13:57:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This has been around for a while but might be nice to fix.\r\n\r\nResolves: rdar://97775548\r\n\r\nThe original report was on the swift forums:\r\n\r\n>  https://forums.swift.org/t/accepted-se-0344-distributed-actor-runtime/56416\r\n>  \r\n>  @ktoso I have played around a little with Xcode 14.0 beta 3 (I currently cannot check beta 4) and have noticed that the behavior regarding RemoteCallArgument does not match the documentation. For these functions, the properties are currently filled as follows:\r\n>  \r\n>  ```\r\n>  // label: \"a\", name: \"a\", effectiveLabel: \"a\"\r\n>  distributed func callMe(a: String) {}\r\n>  \r\n>  // label: \"b\", name: \"c\", effectiveLabel: \"b\"\r\n>  distributed func callMe(b c: String) {}\r\n>  \r\n>  // label: nil, name: \"d\", effectiveLabel: \"d\"\r\n>  distributed func callMe(_ d: String) {}\r\n>  As per the documentation, in the first case, label should be nil.\r\n>  ```\r\n>  \r\n>  I think, the behavior as currently implemented makes much more sense. However, effectiveLabel is now pretty superfluous and returns the wrong string in the third case.\r\n\r\nI thought about this a bunch and arrived at the: we should make `effectiveLabel` do what it sounds like it should be doing: so it's the \"label\" at the call site, if you wanted to construct the `hi(a:b:_:)` yourself\".\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T10:25:17Z",
        "closed_at": "2023-10-12T10:50:15Z",
        "merged_at": "2023-10-12T10:50:15Z",
        "body": "If we're bootstrapping *and* skip-early-swiftsyntax is enabled, the build can fail while trying to build target executables because we haven't built a copy of libswiftCore yet but *the compiler* refers to it.\r\n\r\nThis is \"fixed\" in other places by setting LD_LIBRARY_PATH, but we don't want or need to do that here; we just want to delay building these executables until after libswiftCore is available.\r\n\r\nrdar://116485713\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 232,
        "deletions": 43,
        "changed_files": 12,
        "created_at": "2023-10-10T05:45:54Z",
        "closed_at": "2023-10-15T20:37:35Z",
        "merged_at": "2023-10-15T20:37:35Z",
        "body": "This PR:\r\n- expands the same \"pass type information via taskOptions\" approach done in https://github.com/apple/swift/pull/68928 to async let runtime calls\r\n- starts building a larger portion of the Swift Concurrency runtime in embedded mode, including Actor.swift\r\n- adds simple testcases showing actors and async let working in embedded Swift",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-10-10T04:00:54Z",
        "closed_at": "2023-10-10T22:44:00Z",
        "merged_at": "2023-10-10T22:44:00Z",
        "body": "The validation code already diagnosed all sorts of invalid declarations, but it was ignoring AST nodes that aren't declarations at all.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 400,
        "deletions": 107,
        "changed_files": 16,
        "created_at": "2023-10-10T01:44:58Z",
        "closed_at": "2023-10-11T04:16:44Z",
        "merged_at": "2023-10-11T04:16:44Z",
        "body": "Implement conformance checking for typed throws, including associated type inference, so one can capture the type that is thrown from a witness in a concrete type in an associated type, including `any Error` (for untyped throws) and `Never` (for non-throwing functions). For example:\r\n\r\n```swift\r\nprotocol FailureAssociatedType {\r\n  associatedtype Failure: Error\r\n\r\n  func f() throws(Failure)\r\n}\r\n\r\nstruct S1: FailureAssociatedType {\r\n  func f() throws(MyError) { } // infers Failure == MyError\r\n}\r\n\r\nstruct S2: FailureAssociatedType {\r\n  func f() throws { } // infers Failure == any Error\r\n}\r\n\r\nstruct S3: FailureAssociatedType {\r\n  func f() { } // infers Failure == Never\r\n}\r\n```",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-10-10T00:40:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "`BRIDGING_MODE` affects Swift. Namespacing it to Swift to avoid inadvertently affecting other things.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3309,
        "deletions": 2339,
        "changed_files": 104,
        "created_at": "2023-10-10T00:29:24Z",
        "closed_at": "2023-10-10T05:54:05Z",
        "merged_at": "2023-10-10T05:54:05Z",
        "body": "Merge remote-tracking branch 'main' into 'rebranch'\r\n\r\nConflicts:\r\n      CMakeLists.txt\r\n        Take new BRIDGING_MODE\r\n```cmake\r\n+ option(BRIDGING_MODE [=[\r\n+ How swift-C++ bridging code is compiled:\r\n+     INLINE:       uses full swift C++ interop and briding functions are inlined\r\n+     PURE:         uses limited C++ interp an bridging functions are not inlined\r\n+     DEFAULT:      based on the build configuration\r\n+ ]=] DEFAULT)\r\n+ \r\n +option(SWIFT_USE_SYMLINKS \"Use symlinks instead of copying binaries\" ${CMAKE_HOST_UNIX})\r\n +set(SWIFT_COPY_OR_SYMLINK \"copy\")\r\n +if(SWIFT_USE_SYMLINKS)\r\n +  set(SWIFT_COPY_OR_SYMLINK \"create_symlink\")\r\n +endif()\r\n +\r\n```\r\n SwiftCompilerSources/Sources/SIL/GlobalVariable.swift\r\n        Take new\r\n```swift\r\nprivate extension TupleExtractInst {\r\n  var isResultOfOffsetSubtract: Bool {\r\n    if fieldIndex == 0,\r\n       let bi = tuple as? BuiltinInst,\r\n       bi.id == .USubOver,\r\n       bi.operands[1].value is IntegerLiteralInst,\r\n<<<<<<< HEAD\r\n       let overFlowFlag = bi.operands[2].value as? IntegerLiteralInst,\r\n       overFlowFlag.value.isZero() {\r\n||||||| 8b40353e22f\r\n       let overFlowFlag = bi.operands[2].value as? IntegerLiteralInst,\r\n       overFlowFlag.value.isNullValue() {\r\n=======\r\n       let overflowLiteral = bi.operands[2].value as? IntegerLiteralInst,\r\n       let overflowValue = overflowLiteral.value,\r\n       overflowValue == 0\r\n    {\r\n>>>>>>> upstream/main\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n}\r\n```\r\nturned into\r\n```swift\r\nprivate extension TupleExtractInst {\r\n  var isResultOfOffsetSubtract: Bool {\r\n    if fieldIndex == 0,\r\n       let bi = tuple as? BuiltinInst,\r\n       bi.id == .USubOver,\r\n       bi.operands[1].value is IntegerLiteralInst,\r\n       let overflowLiteral = bi.operands[2].value as? IntegerLiteralInst,\r\n       let overflowValue = overflowLiteral.value,\r\n       overflowValue == 0\r\n    {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T00:02:27Z",
        "closed_at": "2023-10-14T14:16:17Z",
        "merged_at": "2023-10-14T14:16:17Z",
        "body": "Companion of https://github.com/apple/sourcekit-lsp/pull/859",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 115,
        "deletions": 36,
        "changed_files": 2,
        "created_at": "2023-10-09T23:43:37Z",
        "closed_at": "2023-10-11T16:26:27Z",
        "merged_at": "2023-10-11T16:26:27Z",
        "body": "`ActorIsolationChecker`'s apply stack was not considering `LookupExpr`, which caused bogus diagnostics for `inout` arguments that happen to be subexpressions of `async` function calls. Similarly, `inout` arguments to `async` subscript calls were not diagnosed because the subscript application was not tracked in the apply stack.\r\n\r\nThere's still an issue with `async` computed getter calls because the type-checked AST does not have an `InOutExpr` for the base expression.\r\n\r\nResolves rdar://115863944\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T23:27:55Z",
        "closed_at": "2023-10-09T23:31:22Z",
        "merged_at": "2023-10-09T23:31:22Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 4,
        "changed_files": 5,
        "created_at": "2023-10-09T23:21:09Z",
        "closed_at": "2023-10-15T01:17:07Z",
        "merged_at": "2023-10-15T01:17:07Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 71,
        "deletions": 79,
        "changed_files": 19,
        "created_at": "2023-10-09T23:08:43Z",
        "closed_at": "2023-10-10T18:53:44Z",
        "merged_at": "2023-10-10T18:53:44Z",
        "body": "In the C++ sources it is slightly more convenient to dump to stderr than to print to stdout, but it is rather more unpleasant to print to stderr from the Swift sources.  Switch to stdout.  Also allows the dump functions to be marked debug only.\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-09T21:33:02Z",
        "closed_at": "2023-10-11T22:05:15Z",
        "merged_at": null,
        "body": "<!-- What's in this pull request? -->\r\n\r\nUpdates error message for initialization of property wrapper with a custom `init`.\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #69066\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 142,
        "deletions": 58,
        "changed_files": 26,
        "created_at": "2023-10-09T21:06:58Z",
        "closed_at": "2023-10-10T03:39:39Z",
        "merged_at": "2023-10-10T03:39:39Z",
        "body": "This slightly changes the semantic of the existing conditional from only existing on the max width to instead succeed on all lower widths up to the max width.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 744,
        "deletions": 21,
        "changed_files": 10,
        "created_at": "2023-10-09T19:47:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Adds optional `key.should_index_locals` boolean field into the `source.request.indexsource` request. If this field is set to `true`, the response includes local symbols alongside the global symbols.\r\n\r\nResolves #69077 \r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T18:36:08Z",
        "closed_at": "2023-10-09T18:37:07Z",
        "merged_at": "2023-10-09T18:37:06Z",
        "body": "cherry-pick of https://github.com/apple/swift/pull/68627",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 6,
        "changed_files": 21,
        "created_at": "2023-10-09T17:39:51Z",
        "closed_at": "2023-10-10T09:25:58Z",
        "merged_at": "2023-10-10T09:25:58Z",
        "body": "This was unnecessarily pulling in a whole bunch of Clang headers when all was needed was a forward declaration.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T16:15:46Z",
        "closed_at": "2023-10-09T23:47:09Z",
        "merged_at": "2023-10-09T23:47:09Z",
        "body": "This resolves a problem that currently the macOS toolchain CI job is excluding the embedded Swift.swiftmodule from the nightly toolchain because recursive lipo doesn't expect the x86-compiler-produced .swiftmodule and arm64-compiler-produced .swiftmodule to differ, but they do (because they embed file paths because of a missing -enable-experimental-concise-pound-file flag):\r\n\r\n```\r\n-- Warning: non-executable source files are different, skipping:\r\n./macosx-arm64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/armv7-apple-none-macho.swiftmodule\r\n./macosx-x86_64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/armv7-apple-none-macho.swiftmodule\r\n-- Warning: non-executable source files are different, skipping:\r\n./macosx-arm64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/arm64-apple-macos.swiftmodule\r\n./macosx-x86_64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/arm64-apple-macos.swiftmodule\r\n-- Warning: non-executable source files are different, skipping:\r\n./macosx-arm64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/arm64-apple-none-macho.swiftmodule\r\n./macosx-x86_64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/arm64-apple-none-macho.swiftmodule\r\n-- Warning: non-executable source files are different, skipping:\r\n./macosx-arm64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/arm64e-apple-macos.swiftmodule\r\n./macosx-x86_64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/arm64e-apple-macos.swiftmodule\r\n-- Warning: non-executable source files are different, skipping:\r\n./macosx-arm64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/x86_64-apple-macos.swiftmodule\r\n./macosx-x86_64/Applications/Xcode.app/Contents/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-10-08-a.xctoolchain/usr/lib/swift/embedded/Swift.swiftmodule/x86_64-apple-macos.swiftmodule\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 82,
        "deletions": 69,
        "changed_files": 5,
        "created_at": "2023-10-09T15:46:25Z",
        "closed_at": "2023-10-09T17:52:41Z",
        "merged_at": "2023-10-09T17:52:40Z",
        "body": "This is a follow-up on https://github.com/apple/swift/pull/69039\r\n\r\n* fixing an uninitialized member variable in BridgedSourceLoc\r\n* some refactoring to simplify the code in BridgedBuilder",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-09T15:03:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Due to indentation issues, the CHANGELOG.md file could not be parsed and displayed correctly. This commit fixes the Markdown formatting issues in CHANGELOG.md.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-09T14:38:39Z",
        "closed_at": "2023-10-09T18:33:08Z",
        "merged_at": "2023-10-09T18:33:08Z",
        "body": "Rename in terms of casting rather than erasure.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T11:16:32Z",
        "closed_at": "2023-10-09T14:01:27Z",
        "merged_at": null,
        "body": "<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #NNNNN, fix apple/llvm-project#MMMMM.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T06:39:24Z",
        "closed_at": "2023-10-12T04:02:47Z",
        "merged_at": "2023-10-12T04:02:47Z",
        "body": "It makes more sense for the parser folks to own (get notified about changes to) this file.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 41,
        "changed_files": 1,
        "created_at": "2023-10-09T06:29:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "* Remove some options that are implied by a base preset.\r\n* Remove unused preset for building with Xcode.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2023-10-09T06:08:31Z",
        "closed_at": "2023-10-10T17:33:42Z",
        "merged_at": "2023-10-10T17:33:42Z",
        "body": "Since it can construct invalid target triples like wasm32-unknown-windows-msvc, which can hit internal compiler crash in llvm. So split into a separate file to run the test only on archs windows supports.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-10-09T05:57:04Z",
        "closed_at": "2023-10-12T14:13:07Z",
        "merged_at": "2023-10-12T14:13:07Z",
        "body": "The target differs from other archs on:\r\n\r\n1. No `swifttailcc` support for now\r\n2. Having comdat support\r\n3. Using absolute 32bit function pointer for metadata fields that stores relative pointer to function address on other archs",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 20,
        "changed_files": 3,
        "created_at": "2023-10-09T05:43:51Z",
        "closed_at": "2023-10-12T18:53:36Z",
        "merged_at": "2023-10-12T18:53:36Z",
        "body": "Wasm has quite different asm output than other archs, so added new separate test file.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-09T05:40:26Z",
        "closed_at": "2023-10-09T15:26:43Z",
        "merged_at": "2023-10-09T15:26:43Z",
        "body": "musl and wasi-libc modules contains stdint.h and stdbool.h in their modulemap, and `#incnlude <stdint.h>` in huge_c_type.h leads including stdbool.h also in the scope. This results in conflicting the bool definition, so we should avoid the redefinition.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-09T05:30:24Z",
        "closed_at": "2023-10-09T14:47:29Z",
        "merged_at": "2023-10-09T14:47:29Z",
        "body": "This repairs dynamic_replaceable_opaque_return_type_parameter.swift test on WebAssembly.\r\n\r\nThe function pointer field triggered assertion when targeting some triples using absolute 32bit function pointer https://github.com/apple/swift/blob/e253ca9c764801bcac36e5db0734335eba00ba10/lib/IRGen/ConstantBuilder.h#L115-L116\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T01:36:08Z",
        "closed_at": "2023-10-09T04:25:06Z",
        "merged_at": "2023-10-09T04:25:06Z",
        "body": "```swift\r\nfunc search(query: String) async throws -> [String] {\r\n  let entities: [String] = []\r\n\r\n  async let r = entities.filter { $0.contains(query) }.map { String($0) }\r\n  return await r\r\n}\r\n```\r\n\r\nThe above example was reported as diagnosing `error: reading 'async let' can throw but is not marked with 'try'`. This has since been fixed on main, so this change is just adding a test case for the future.\r\n\r\nResolves rdar://96830163",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 54,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-08T18:30:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!-- What's in this pull request? -->\r\nThis PR enhances the error description when declaring generics in enum cases, making it more informative and helpful for developers encountering such issues:\r\n<img width=\"691\" alt=\"generic-error-enum\" src=\"https://github.com/apple/swift/assets/17497343/11fce09a-d67c-4b3e-b71a-451e7854f2d0\">\r\n\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #69036\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T16:43:09Z",
        "closed_at": "2023-10-08T18:29:55Z",
        "merged_at": "2023-10-08T18:29:55Z",
        "body": "Mention that running FunctionTests written in swift requires swift-in-compiler and fixed the name of the register function.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-08T14:58:39Z",
        "closed_at": "2023-10-08T22:46:32Z",
        "merged_at": null,
        "body": "```\r\nenum Foo {\r\n    case bar<T>(baz: T)\r\n            ^\r\n}\r\n```\r\n\r\nabove code results in\r\n\r\n```\r\nConsecutive declarations on a line must be separated by ';'\r\nExpected declaration\r\n```\r\nwhich is not very helpful for informing the user that generics are not available as a case in enums.\r\n\r\nSomething like `enum cases cannot have generic parameters. did you mean to attach it to enum declaration` could be emitted for better guidance to the users.\r\n\r\nResolves #69036\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 70,
        "deletions": 17,
        "changed_files": 7,
        "created_at": "2023-10-08T11:38:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!-- What's in this pull request? -->\r\nThis PR allows operator functions to have more than one or two parameters as long as they are default parameters, allowing something like :\r\n```swift \r\ninfix operator <-\r\n// Still infix because it has 2 formal arguments and 1 default\r\npublic func <- (lhs: T, rhs :T, file: StaticString = #file) -> U { /**/ }\r\n```\r\n\r\nThis can be useful in scenarios when you want to pass some other parameters for other purposes like logging. \r\n\r\nThis PR changes the previous logic of checking the operator function's parameter count directly to only check the parameters that do not have default values.\r\n\r\nThis is an additive feature to the swift language and does not have backwards-breaking changes. \r\n\r\nAccording to the original issue, this addition requires a swift evolution review, so this PR is for POC purposes. It still needs proper formatting and some code-level optimizations. \ud83d\ude43\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #54301\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T11:12:12Z",
        "closed_at": "2023-10-09T16:39:42Z",
        "merged_at": "2023-10-09T16:39:42Z",
        "body": "**PR Summary**:\r\nPR updates the location of the `CallingConvention.rst` which was changed in PR #25123.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 124,
        "changed_files": 16,
        "created_at": "2023-10-08T08:08:52Z",
        "closed_at": "2023-10-09T17:02:34Z",
        "merged_at": "2023-10-09T17:02:34Z",
        "body": "This instruction was given forwarding ownership in the original OSSA implementation. That will obviously lead to memory leaks. Remove ownership from this instruction and verify that it is never used for non-trivial types.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-08T08:08:09Z",
        "closed_at": "2023-10-08T13:39:05Z",
        "merged_at": null,
        "body": "<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #NNNNN, fix apple/llvm-project#MMMMM.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 14,
        "changed_files": 13,
        "created_at": "2023-10-08T07:06:04Z",
        "closed_at": "2023-10-12T04:35:29Z",
        "merged_at": "2023-10-12T04:35:29Z",
        "body": "`buildbot_incremental_linux_base` is not actively checked in the ci.swift.org, and brings non-wasm related issues frequently, so use actively used one instead.\r\n\r\n\r\n",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-08T06:59:24Z",
        "closed_at": "2023-10-09T05:39:01Z",
        "merged_at": "2023-10-09T05:39:01Z",
        "body": "`-disable-llvm-optzns -disable-swift-specific-llvm-optzns -disable-objc-interop` was wrong way to avoid llvm coroutine lowering.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-10-08T06:56:55Z",
        "closed_at": "2023-10-16T22:39:39Z",
        "merged_at": "2023-10-16T22:39:39Z",
        "body": "`llvm.returnaddress` is unavailable on WebAssembly, so split the part from access_markers.sil to exclude it conditionally.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-08T05:26:05Z",
        "closed_at": "2023-10-08T07:13:50Z",
        "merged_at": "2023-10-08T07:13:50Z",
        "body": "To unbreak the build in CI: https://ci.swift.org/job/oss-swift_tools-RA_stdlib-DA_test-simulators/3281/console",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-08T05:12:09Z",
        "closed_at": "2023-10-08T19:39:15Z",
        "merged_at": "2023-10-08T19:39:15Z",
        "body": "While experimenting with typed throws, I discovered that on x86_64 and -Onone only, the IR that typed throws generates (which is identical to IR on arm64!) ends up getting lowered in a wrong way and the execution of the program ends up taking the wrong branch, this is demonstrated by the testcase added in this PR -- the \"this cannot happen\" call actually happens. I don't have the ability to diagnose the LLVM problem further, and so instead this PR adds a workaround to enable executable testing of typed throws. This PR also adds a simple executable test.\r\n\r\n---\r\n\r\n> The following IR demonstrates the problem. When the following is built for x86_64 under -O0\u2026\r\n> \r\n> ```\r\n> target triple = \"x86_64-apple-macosx14.0.0\"\r\n> declare swiftcc i64 @throwing(ptr swiftself %0, ptr noalias nocapture swifterror dereferenceable(8) %1)\r\n> define swiftcc void @catching() {\r\n> entry:\r\n>   %swifterror = alloca swifterror ptr, align 8\r\n>   store ptr null, ptr %swifterror, align 8\r\n>   %0 = call swiftcc i64 @throwing(ptr swiftself undef, ptr noalias nocapture swifterror dereferenceable(8) %swifterror)\r\n>   %1 = load ptr, ptr %swifterror, align 8\r\n>   %2 = icmp ne ptr %1, null\r\n>   br i1 %2, label %catch, label %continue\r\n> catch:\r\n>   ; %dummy_use = ptrtoint ptr %1 to i64    ; UNCOMMENT THIS TO GET CORRECT OUTPUT\r\n>   br label %ret\r\n> continue:\r\n>   br label %ret\r\n> ret:\r\n>   ret void\r\n> }\r\n> ```\r\n> \r\n> \u2026it produces this machine code:\r\n> \r\n> ```\r\n> ] ../llvm-macosx-arm64/bin/llc -O0 x86.ll -o -\r\n> _catching:                              ## @catching\r\n> \tpushq\t%r13\r\n> \tpushq\t%r12\r\n> \tpushq\t%rax\r\n> \txorl\t%eax, %eax\r\n> \tmovl\t%eax, %r12d\r\n> \tcallq\t_throwing\r\n> \tcmpq\t$0, (%rsp)\r\n> \tje\tLBB0_2\r\n> ```\r\n> \r\n> Notice that the cmp is comparing (%rsp), which is a miscompile -- swifterror is expected to be in r12. Interestingly, this only happens if there is no use of %1 in the catch block in the IR, and even a dummy unused instruction that just ends up using %1 suddenly makes the output correct.\r\n> ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 83,
        "changed_files": 6,
        "created_at": "2023-10-08T03:14:11Z",
        "closed_at": "2023-10-08T06:54:32Z",
        "merged_at": "2023-10-08T06:54:32Z",
        "body": "Reland https://github.com/apple/swift/pull/69015 by unsupporting x86_64-unknown-windows-msvc",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 94,
        "changed_files": 6,
        "created_at": "2023-10-07T21:07:10Z",
        "closed_at": "2023-10-07T23:52:20Z",
        "merged_at": "2023-10-07T23:52:20Z",
        "body": "This reverts commit 23db49b4704f0a955be1a1a5fd7cff5369ecb542. Accidentally merged without Windows CI check\r\n\r\n<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #NNNNN, fix apple/llvm-project#MMMMM.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 3,
        "changed_files": 33,
        "created_at": "2023-10-07T20:58:00Z",
        "closed_at": "2023-10-12T14:10:44Z",
        "merged_at": "2023-10-12T14:10:44Z",
        "body": "Clang does not accept `-x objective-c` with WebAssembly target and it crashes with \"Objective-C support is unimplemented for object file format\" for now. `-enable-objc-interop` can work without the objc runtime support (which is indicated by `objc_interop` feature), so this adds a new `objc_codegen` feature to require Objective-C support only at compile-time.\r\n",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 3102,
        "deletions": 2081,
        "changed_files": 52,
        "created_at": "2023-10-07T19:02:24Z",
        "closed_at": "2023-10-09T13:11:19Z",
        "merged_at": "2023-10-09T13:11:19Z",
        "body": "Introduce two modes of bridging:\r\n* inline mode: this is basically how it worked so far. Using full C++ interop which allows bridging functions to be inlined.\r\n* pure mode: bridging functions are not inlined but compiled in a cpp file. This allows to reduce the C++ interop requirements to a minimum. No std/llvm/swift headers are imported.\r\n\r\nThis change requires a major refactoring of bridging sources. The implementation of bridging functions go to two separate files: SILBridgingImpl.h and OptimizerBridgingImpl.h.\r\nDepending on the mode, those files are either included in the corresponding header files (inline mode), or included in the c++ file (pure mode).\r\n\r\nThe mode can be selected with the BRIDGING_MODE cmake variable. By default it is set to the inline mode (= existing behavior). The pure mode is only selected in certain configurations to work around C++ interop issues:\r\n* In debug builds, to workaround a problem with LLDB's `po` command (rdar://115770255).\r\n* On windows to workaround a build problem.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 441,
        "deletions": 244,
        "changed_files": 17,
        "created_at": "2023-10-07T17:13:32Z",
        "closed_at": "2023-10-12T00:58:28Z",
        "merged_at": "2023-10-12T00:58:28Z",
        "body": "Type witnesses and value witnesses have been resolved lazily forever now. However associated conformances were all looked up in one shot, in `NormalProtocolConformance::finishSignatureConformances()`. Filling in this array involves computing a substituted type for the subject type of each associated conformance requirement, then looking up the conformance of the substituted type to the conformed protocol via a global lookup. The computation of the substituted subject type could call back into `finishSignatureConformances()`, causing a crash.\r\n\r\nThis PR makes some preliminary changes in service of making it all lazy. Going all the way exposes a few problems with associated type inference in the standard library, so until those problems are resolved, I'm going to land a preliminary refactoring first.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 160,
        "deletions": 37,
        "changed_files": 6,
        "created_at": "2023-10-07T15:19:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Follow-up to https://github.com/apple/swift/pull/69038 that makes `NormalProtocolConformance::getAssociatedConformance()` fully lazy, via the new `AssociatedConformanceRequest`.\r\n\r\nFixes https://github.com/apple/swift/issues/59772, rdar://89097705, rdar://89369029, rdar://110806272, and rdar://116434843.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 16,
        "changed_files": 4,
        "created_at": "2023-10-07T10:00:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Cherrypick of #65829 and #68565\r\n\r\n__Explanation:__ The libdispatch tests and several concurrency tests in the validation suite were inadvertently disabled a couple years ago. This enables them again by making sure the target libdispatch is built first and using the new `dispatch-vfs-overlay.yaml` it now generates.\r\n\r\n__Scope:__ Enabling compiler tests again\r\n\r\n__Issue:__ #53973\r\n\r\n__Risk:__ negative, as it is only testing more code, thus lowering risk\r\n\r\n__Testing:__ Passes all CI on trunk for the last three weeks, and I've been doing this manually on Android for years without a problem.\r\n\r\n__Reviewer:__ @gottesmm",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 147,
        "deletions": 89,
        "changed_files": 8,
        "created_at": "2023-10-07T00:45:31Z",
        "closed_at": "2023-10-10T06:27:45Z",
        "merged_at": "2023-10-10T06:27:45Z",
        "body": "- Makes sure that key path types are not assigned eagerly when the literal is passed as an argument to a call or coerced\r\n- Fixes locators used for root and value type matching\r\n- Fixes diagnostics related to missing optional unwraps of the key path root and members\r\n- Prevents inference from using type-erased superclasses as bindings for a key path type\r\n- Avoids propagating contextual placeholders into key paths\r\n\r\nResolves: rdar://116376651\r\nResolves: https://github.com/apple/swift/issues/55436\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 11,
        "changed_files": 7,
        "created_at": "2023-10-07T00:00:49Z",
        "closed_at": "2023-10-07T03:17:28Z",
        "merged_at": "2023-10-07T03:17:28Z",
        "body": "To match what's proposed in https://github.com/hborla/swift-evolution/blob/isolated-default-values/proposals/NNNN-isolated-default-values.md",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 157,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-06T22:55:44Z",
        "closed_at": "2023-10-12T16:38:26Z",
        "merged_at": "2023-10-12T16:38:25Z",
        "body": "For linear maps containing control-flow, closures (representing the pullbacks of intermediate values) may be passed as arguments, however, they may be hidden behind a branch-tracing enum (tracing execution flow of the original function).\r\n\r\nSuch linear maps did not use to get inlining benefits as the compiler could not see that the intermediate pullback closures were actually part of the input.\r\n\r\nThis change modifies the inliner logic to correctly award inlining benefits to linear maps containing control-flow, by checking if a \"callee\" in the linear map actually traces back to an input closure that was received as part of a branch-tracing enum input argument.\r\n\r\nFixes #68945 ",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 344,
        "deletions": 141,
        "changed_files": 21,
        "created_at": "2023-10-06T22:37:40Z",
        "closed_at": "2023-10-17T00:35:48Z",
        "merged_at": "2023-10-17T00:35:48Z",
        "body": "rdar://115571427",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T20:57:25Z",
        "closed_at": "2023-10-07T01:05:35Z",
        "merged_at": "2023-10-07T01:05:35Z",
        "body": "On Windows a separate .loc directive is emitted to introduce the function epilogue, which is not there on other platforms.\r\n\r\nrdar://116482190\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-06T20:00:32Z",
        "closed_at": "2023-10-07T00:01:11Z",
        "merged_at": "2023-10-07T00:01:11Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 70,
        "changed_files": 1,
        "created_at": "2023-10-06T20:00:31Z",
        "closed_at": "2023-10-06T23:55:05Z",
        "merged_at": "2023-10-06T23:55:05Z",
        "body": "This test has been disabled for 5 years because it violates language rules by design. Now that the rules are enforced, the test doesn't work.\r\n\r\nFixes rdar://116589817 (Exclusivity violations in test cause segfault)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-06T19:13:50Z",
        "closed_at": "2023-10-07T16:30:01Z",
        "merged_at": "2023-10-07T16:30:01Z",
        "body": "Extract and isolate the AppModel APIs into its own module.  This corresponds to the contract boundary on Windows.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-06T18:56:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T18:29:22Z",
        "closed_at": "2023-10-06T21:46:31Z",
        "merged_at": "2023-10-06T21:46:31Z",
        "body": "rdar://72893124\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T17:14:14Z",
        "closed_at": "2023-10-06T17:21:43Z",
        "merged_at": "2023-10-06T17:21:43Z",
        "body": "Somehow since this passed PR testing, `Builtin.int_trap()` has changed from generating `SIGILL` to `SIGTRAP`.  Accept either.\r\n\r\nrdar://116584708\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T17:13:24Z",
        "closed_at": "2023-10-06T17:21:36Z",
        "merged_at": "2023-10-06T17:21:36Z",
        "body": "Somehow since this passed PR testing, `Builtin.int_trap()` has changed from generating `SIGILL` to `SIGTRAP`.  Accept either.\r\n\r\nrdar://116584708\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T17:12:27Z",
        "closed_at": "2023-10-06T17:23:12Z",
        "merged_at": "2023-10-06T17:23:11Z",
        "body": "Somehow since this passed PR testing, `Builtin.int_trap()` has changed from generating `SIGILL` to `SIGTRAP`.  Accept either.\r\n\r\nrdar://116584708\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T17:08:29Z",
        "closed_at": "2023-10-06T17:21:29Z",
        "merged_at": "2023-10-06T17:21:29Z",
        "body": "Somehow since this passed PR testing, `Builtin.int_trap()` has changed from generating `SIGILL` to `SIGTRAP`.  Accept either.\r\n\r\nrdar://116584708\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 119,
        "deletions": 15,
        "changed_files": 7,
        "created_at": "2023-10-06T16:51:56Z",
        "closed_at": "2023-10-13T16:05:31Z",
        "merged_at": "2023-10-13T16:05:31Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/69000\r\n------------------------\r\nThis change adds the following options to allow for greater control over the compiler's autolinking directive use:\r\n- '-disable-autolink-library': equivalent to an existing '-disable-autolink-framework', this option takes a library name as input and ensures the compiler does not produce an autolink directive '-l<library-name>'.\r\n- '-disable-autolink-frameworks': a boolean disable flag which turns off insertion of autolinking directives for all imported frameworks (of the type '-framework <framework-name>')\r\n- '-disable-all-autolinking': a boolean disable flag which turns off insertion of *any* autolinking directives.\r\n\r\nResolves rdar://100859983\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 94,
        "deletions": 83,
        "changed_files": 6,
        "created_at": "2023-10-06T16:16:50Z",
        "closed_at": "2023-10-07T20:13:30Z",
        "merged_at": "2023-10-07T20:13:30Z",
        "body": "Split out `abitypes.swift` into 3 tests, 1 for objc-interop, 2 for x64 argument coercing, 3 for arm layout.\r\nThis improves test coverage on non-objc-interopping platforms and eliminates the need to add \"XFAIL\" when adding new architectures.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 109,
        "deletions": 63,
        "changed_files": 9,
        "created_at": "2023-10-06T14:12:09Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Doing a name lookup into a C++ struct currently causes all of its base structs to be eagerly imported into Swift. This causes degraded performance and triggers \"circular reference\" errors when a base struct refers to a derived struct (e.g. has a method that returns a pointer to a derived struct).\r\n\r\nrdar://116426238",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-06T04:39:18Z",
        "closed_at": "2023-10-09T15:44:06Z",
        "merged_at": "2023-10-09T15:44:06Z",
        "body": "The embedded Swift custom (\"no runtime calls\") IRGen for array builtins today doesn't handle zero-sized structs, when using an array of zero-sized structs, LLVM IR verifier complains:\r\n```\r\nGEP into unsized type!\r\n  %8 = getelementptr inbounds %T4main8MyStructV, ptr %1, i64 %6\r\n```\r\nLet's fix that and handle zero-sized structs in GenBuiltin (we don't really need to emit the loop at all for them).",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 32,
        "changed_files": 8,
        "created_at": "2023-10-06T02:00:18Z",
        "closed_at": "2023-10-08T06:26:25Z",
        "merged_at": "2023-10-08T06:26:25Z",
        "body": "Based on https://github.com/apple/swift/pull/69007 .\r\n\r\nIn order to change the type of the context argument to FunctionPassContext.  In the fullness of time could be sunk into the SIL module.\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-06T01:50:38Z",
        "closed_at": "2023-10-06T13:33:58Z",
        "merged_at": "2023-10-06T13:33:58Z",
        "body": "Exclude semaphore APIs from WASILibc overlay since wasi-libc does not support those APIs that imply thread features",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 41,
        "changed_files": 5,
        "created_at": "2023-10-06T01:10:00Z",
        "closed_at": "2023-10-08T04:22:04Z",
        "merged_at": "2023-10-08T04:22:04Z",
        "body": "At the cost of adding an unsafe bitcast implementation detail, simplified the code involved to register a new FunctionTest when adding one.\r\n\r\nAlso simplifies how Swift native `FunctionTest`s are registered with the C++ registry.\r\n\r\nNow, the to-be-executed thin closure for native Swift `FunctionTest`s is stored within the swift::test::FunctionTest instance corresponding to it.  Because its type isn't representable in C++, `void *` is used instead.  When the FunctionTest is invoked, a global thunk is called which takes the actual test function and bridged versions of the arguments. That thunk unwraps the arguments, casts the stored function to the appropriate type, and invokes it.\r\n\r\nThanks to Andrew Trick for the idea.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T01:03:31Z",
        "closed_at": "2023-10-06T13:36:09Z",
        "merged_at": "2023-10-06T13:36:09Z",
        "body": "Unfortunately `sleep_until` is defined under <thread> header even though it does not use thread feature at all with `std::chrono::steady_clock`. The <thread> header in libcxx is not available when thread feature is disabled, so we need to fallback to nanosleep for the case.\r\n\r\nResolves part of rdar://116552886",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-06T01:00:18Z",
        "closed_at": "2023-10-06T13:34:27Z",
        "merged_at": "2023-10-06T13:34:27Z",
        "body": "We can't assume libcxx to be built with `LIBCXX_ENABLE_THREADS=YES` with none threading package, so `<thread>` is not available with such configuration. In this file, `<thread>` API is only used in `_swift_stdlib_getHardwareConcurrency` and it's guarded by `SWIFT_THREADING_NONE`, so it's safe to guard out the include.\r\n\r\nhttps://github.com/apple/swift/blob/e01f23496a7ab04232d23f5143d0037402182f6f/stdlib/public/stubs/Stubs.cpp#L484-L490\r\n\r\nResolves part of rdar://116552886",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T23:42:27Z",
        "closed_at": "2023-10-08T22:13:26Z",
        "merged_at": "2023-10-08T22:13:26Z",
        "body": "This reverts commit https://github.com/apple/swift/commit/ed9e4dbc197ee918e339b278d3a63f341fffa84a.\r\n\r\nThis test has started failing again, as it was before September, so I'm\r\ngoing to revert the removal of the xfail. It's testing the old driver\r\nanyway, which folks shouldn't be using.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 428,
        "deletions": 33,
        "changed_files": 10,
        "created_at": "2023-10-05T23:21:49Z",
        "closed_at": "2023-10-11T16:12:14Z",
        "merged_at": "2023-10-11T16:12:14Z",
        "body": null,
        "comments": 17
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T22:51:53Z",
        "closed_at": "2023-10-06T04:27:05Z",
        "merged_at": "2023-10-06T04:27:05Z",
        "body": "The actual value was accidentally placed in docstring field for long time... It has not been revealed until I try removing pthread hack because pthread threading package was faked.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 116,
        "deletions": 15,
        "changed_files": 7,
        "created_at": "2023-10-05T22:19:02Z",
        "closed_at": "2023-10-06T16:13:37Z",
        "merged_at": "2023-10-06T16:13:37Z",
        "body": "This change adds the following options to allow for greater control over the compiler's autolinking directive use:\r\n- `-disable-autolink-library`: equivalent to an existing `-disable-autolink-framework`, this option takes a library name as input and ensures the compiler does not produce an autolink directive `-l<library-name>`.\r\n- `-disable-autolink-frameworks`: a boolean disable flag which turns off insertion of autolinking directives for all imported frameworks (of the type `-framework <framework-name>`)\r\n- `-disable-all-autolinking`: a boolean disable flag which turns off insertion of *any* autolinking directives.\r\n\r\nResolves rdar://100859983\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 18,
        "changed_files": 1,
        "created_at": "2023-10-05T21:11:03Z",
        "closed_at": "2023-10-14T16:49:26Z",
        "merged_at": null,
        "body": "Update the build rules for the toolchain to build the distribution target.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 427,
        "deletions": 34,
        "changed_files": 8,
        "created_at": "2023-10-05T19:52:40Z",
        "closed_at": "2023-10-06T13:58:40Z",
        "merged_at": "2023-10-06T13:58:40Z",
        "body": "**Description:** Fix overconsume on unreachable-terminated paths by handling conditional availability of values in dead-end regions in lifetime completion.\n\nThe function `OSSALifetimeCompletion::visitUnreachableLifetimeEnds` is used (1) to complete OSSA lifetimes and--while OSSA lifetime completion remains disabled--(2) to canonicalize lexical OSSA lifetimes.  The function visits the instructions at which the lifetime implicitly ends--implicitly because with incomplete lifetimes, it's valid for a value not to be destroyed on paths that terminate in `unreachable`.  \n\nPreviously, its determination for those ends was incorrect in the face of unavailable blocks in dead-end regions.  Specifically, it simply walked forward from the non-lifetime-ending boundary until finding `unreachable` instructions.  (Such `unreachable` instructions are guaranteed to exist because the lifetime is \"partially complete\" by precondition.)  That walk alone is insufficient, however:  It's possible that the value isn't available at those `unreachable` instructions.  For example, if a value isn't destroyed on one path to the unreachable but is destroyed on another path to it, then the value isn't available at the unreachable.  Inserting a destroy at the `unreachable` would result in an overconsume on the path on which the value was destroyed.\n\nHere, the determination is fixed by computing availability within the region discovered by that initial walk.  This is done via a forward iterative dataflow within the region, propagating availability.  The visited instructions are then the terminators of the last blocks in the region in which the value is available.  In the preceeding example, rather than visiting the `unreachable` instruction, the terminator of the last block on the path to it where the value has not yet been destroyed would be visited.\n\n**Risk:** Low.  The fix uses a well-known dataflow implementation to propagate availability.\n\n**Scope:** Narrow.  Only affects lifetimes in dead end blocks.\n\n**Original PR:** https://github.com/apple/swift/pull/68975\n\n**Reviewed By:** Andrew Trick ( @atrick )\n\n**Testing:** Added tests.\n\n**Resolves:** rdar://116255254\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 251,
        "deletions": 13,
        "changed_files": 23,
        "created_at": "2023-10-05T19:18:20Z",
        "closed_at": "2023-10-07T16:18:33Z",
        "merged_at": "2023-10-07T16:18:33Z",
        "body": "Using symbolic references instead of a text based mangling avoids the expensive type descriptor scan when objective c protocols are requested.\r\n\r\nrdar://111536582\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 271,
        "deletions": 28,
        "changed_files": 15,
        "created_at": "2023-10-05T18:55:31Z",
        "closed_at": "2023-10-07T17:14:48Z",
        "merged_at": "2023-10-07T17:14:48Z",
        "body": "Teach the constraint solver about the subtyping rule that permits converting one function type to another when the effective thrown error type of one is a subtype of the effective thrown error type of the other, using `any Error` for untyped throws and `Never` for non-throwing.\r\n\r\nWith minor other fixes, this allows us to use typed throws for generic functions that carry a typed error from their arguments through to themselves, which is in effect a typed `rethrows`:\r\n\r\n```swift\r\nfunc mapArray<T, U, E: Error>(_ array: [T], body: (T) throws(E) -> U)\r\nthrows(E) -> [U] {\r\n  var resultArray: [U] = .init()\r\n  for value in array {\r\n    resultArray.append(try body(value))\r\n  }\r\n  return resultArray\r\n}\r\n```\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 428,
        "deletions": 142,
        "changed_files": 24,
        "created_at": "2023-10-05T18:48:16Z",
        "closed_at": "2023-10-05T23:45:52Z",
        "merged_at": "2023-10-05T23:45:52Z",
        "body": "An \"API descriptor\" file is JSON describing the externally accessible symbols of a module and metadata associated with those symbols like availability and SPI status. This output was previously only generated by the `swift-api-extract` alias of `swift-frontend`, which is designed to take an already built module as input. Post-processing a built module to extract this information is inefficient because the module and the module's dependencies need to be deserialized in order to visit the entire AST. We can generate this output more efficiently as a supplementary output of the `-emit-module` job that originally produced the module (since the AST is already available in-memory). The new `-emit-api-descriptor` flag can be used to request this output.\r\n\r\nThe output of `-emit-api-descriptor` differs from the output of `swift-api-extract` run on an existing module in a couple of important ways:\r\n\r\n- The value for the `file` key in the descriptor JSON is now the path to the source file that defines the declaration responsible for the symbol. In `swift-api-extract` mode, the value for this key is the path to the module or swiftinterface which is unavailable during an `-emit-module` job since the module is usually not being emitted to its final installed location.\r\n- Some additional symbols may be included in the API descriptor JSON because more of the AST is available when emitting the module.\r\n\r\nResolves rdar://110916764",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-05T18:42:01Z",
        "closed_at": "2023-10-06T16:23:46Z",
        "merged_at": "2023-10-06T16:23:46Z",
        "body": "Per current Apple Style Guide <https://help.apple.com/applestyleguide/#/apsge70df12b?sub=apd57d1e8d9c>\r\n\r\nResolves rdar://65958589",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 152,
        "deletions": 38,
        "changed_files": 8,
        "created_at": "2023-10-05T17:47:53Z",
        "closed_at": "2023-10-07T00:04:37Z",
        "merged_at": "2023-10-07T00:04:37Z",
        "body": "See the attached testcase that demonstrates the problem: Currently, the test fails to link with a missing symbol referencing the other module's class vtable, because (1) CMO doesn't serialize vtables, (2) IRGen doesn't emit class metadata when there isn't a Decl for the class in the module.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-05T16:08:30Z",
        "closed_at": "2023-10-05T21:32:58Z",
        "merged_at": "2023-10-05T21:32:58Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/68964\r\n\r\n---\r\n\r\n- Explanation:\r\n\r\nAddresses a common source of crashes in 5.9\r\n\r\nInstead of trying to get string representation of the type itself, \r\nlet's just get it based on the type name, which works well with\r\nthe list of types we have.\r\n\r\n- Scope: Based on the stacktrace - expressions with some generic types that do not satisfy contextual conformance requirements.\r\n\r\n- Main Branch PR: https://github.com/apple/swift/pull/68964\r\n\r\n- Resolves: rdar://113675093\r\n\r\n- Risk: Low\r\n\r\n- Reviewed By: @hborla \r\n\r\n- Testing: No tests because this is a speculative fix. \r\n\r\nResolves: rdar://113675093\r\n(cherry picked from commit b83a73d177dc423c4d1eebaa57c8aeffdfcf6699)\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-10-05T15:36:39Z",
        "closed_at": "2023-10-05T19:40:17Z",
        "merged_at": "2023-10-05T19:40:17Z",
        "body": "The Sema error in `sendable_checking.swift` was preventing the test from getting to SILGen, and thus not testing the `SendNonSendable` diagnostics.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-05T15:22:09Z",
        "closed_at": "2023-10-06T07:37:03Z",
        "merged_at": "2023-10-06T07:37:03Z",
        "body": "Turn on frame pointers for the Swift runtime libraries.  This makes backtraces that go through the runtimes more reliable without having to parse DWARF data.\r\n\r\nrdar://116112040\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-05T15:21:28Z",
        "closed_at": "2023-10-06T07:36:48Z",
        "merged_at": "2023-10-06T07:36:48Z",
        "body": "Turn on frame pointers for the Swift runtime libraries.  This makes backtraces that go through the runtimes more reliable without having to parse DWARF data.\r\n\r\nrdar://116112040\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-05T15:19:32Z",
        "closed_at": "2023-10-06T07:36:31Z",
        "merged_at": "2023-10-06T07:36:31Z",
        "body": "Turn on frame pointers for the Swift runtime libraries.  This makes backtraces that go through the runtimes more reliable without having to parse DWARF data.\r\n\r\nrdar://116112040\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-05T15:14:54Z",
        "closed_at": "2023-10-06T07:36:16Z",
        "merged_at": "2023-10-06T07:36:16Z",
        "body": "Turn on frame pointers for the Swift runtime libraries.  This makes backtraces that go through the runtimes more reliable without having to parse DWARF data.\r\n\r\nrdar://116112040\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 200,
        "deletions": 23,
        "changed_files": 13,
        "created_at": "2023-10-05T14:44:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Allow dynamic loading of LLVM passes via `load-pass-plugin` option passed to the Swift compiler driver, similarly to current Apple Clang `-fpass-plugin` option.\r\n\r\nPrevious discussion: https://forums.swift.org/t/load-external-llvm-pass-plugins-via-swift-frontend/67596",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 131,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-10-05T12:22:12Z",
        "closed_at": "2023-10-06T04:01:10Z",
        "merged_at": "2023-10-06T04:01:10Z",
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 131,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-10-05T12:16:59Z",
        "closed_at": "2023-10-06T04:13:54Z",
        "merged_at": "2023-10-06T04:13:54Z",
        "body": "This function was performing a linear scan through the set of known buffers to find the buffer containing a given source location. This linear scan can show up in hot loops, and the number of buffers in a program is increasing due to macros, so this has become a performance problem.\r\n\r\nReplace the linear scan with a logarithmic lookup into a sorted vector of the buffer IDs, with a one-element most-recently-used cache so that repeated lookups in the same buffer require constant time.\r\n\r\nThis mirrors what we already do with source files in a module. Unfortunately, we cannot reuse that code because there is no link from buffers to source files. We should look to consolidate this in the future.\r\n\r\nFixes rdar://116184248.\r\n\r\nOriginal PR: https://github.com/apple/swift/pull/68971\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 131,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-10-05T12:15:48Z",
        "closed_at": "2023-10-06T03:59:43Z",
        "merged_at": "2023-10-06T03:59:43Z",
        "body": "This function was performing a linear scan through the set of known buffers to find the buffer containing a given source location. This linear scan can show up in hot loops, and the number of buffers in a program is increasing due to macros, so this has become a performance problem.\r\n\r\nReplace the linear scan with a logarithmic lookup into a sorted vector of the buffer IDs, with a one-element most-recently-used cache so that repeated lookups in the same buffer require constant time.\r\n\r\nThis mirrors what we already do with source files in a module. Unfortunately, we cannot reuse that code because there is no link from buffers to source files. We should look to consolidate this in the future.\r\n\r\nFixes rdar://116184248.\r\n\r\nOriginal PR: https://github.com/apple/swift/pull/68971",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 68,
        "changed_files": 7,
        "created_at": "2023-10-05T08:33:19Z",
        "closed_at": "2023-10-05T17:51:26Z",
        "merged_at": null,
        "body": "The base operand should be analyzed for such an optimization.\r\n\r\nAdded a swift test where there is no exclusivity error when compiler with optimizations.\r\n\r\nFixes rdar://116508574",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 166,
        "deletions": 70,
        "changed_files": 10,
        "created_at": "2023-10-05T04:47:52Z",
        "closed_at": "2023-10-05T17:49:21Z",
        "merged_at": "2023-10-05T17:49:21Z",
        "body": "The output of `swift-api-extract` had inaccurate visibility and availability for many symbols because `APIRecorder` did not consistently have access to a representative `Decl` to query for those attributes. We can plumb the currently visited `Decl` through from `SILSymbolVisitor` to provide more consistent context.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 97,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T03:33:40Z",
        "closed_at": "2023-10-08T23:53:12Z",
        "merged_at": "2023-10-08T23:53:12Z",
        "body": "The actual compiler changes are taken from Doug's PR at <https://github.com/apple/swift/pull/68976/commits> (and I'll wait for that one to land first), I'm only adding the embedded testcase with this one.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 239,
        "deletions": 8,
        "changed_files": 8,
        "created_at": "2023-10-05T00:20:58Z",
        "closed_at": "2023-10-05T12:06:27Z",
        "merged_at": "2023-10-05T12:06:27Z",
        "body": "The type that is caught by the `catch` clauses in a `do..catch` block is determined by the union of the thrown error types in the `do` statement. Compute this type and use it for the catch clauses. This does several things at once:\r\n\r\n* Makes the type of the implicit `error` be a more-specific concrete type when all throwing sites throw that same type\r\n* When there's a concrete type for the error, one can use patterns like `.cancelled`\r\n* Check that this error type can be rethrown in the current context\r\n* Verify that SIL generation involving do..catch with typed errors doesn't require any existentials.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 424,
        "deletions": 34,
        "changed_files": 8,
        "created_at": "2023-10-04T23:47:17Z",
        "closed_at": "2023-10-05T20:35:56Z",
        "merged_at": "2023-10-05T20:35:56Z",
        "body": "Not every block in a region which begins with the non-lifetime-ending boundary of a value and ending with `unreachable`-terminated blocks has the value available.  If the `unreachable`-terminated blocks in this boundary are not available, it is incorrect to insert destroys of the value in them: it is an overconsume on some paths.  Previously, however, destroys were simply being inserted at the `unreachable`.\r\n\r\nHere, this is fixed by finding the boundary of availability within that region and inserting destroys before the terminators of the blocks on that boundary.\r\n\r\nrdar://116255254\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-04T22:32:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently those are hardcoded to `-g`, but in some internal configurations we would like to change them -- given the limited scope, for now leverage a CMake cache variable instead of a full fledged build-script flag.\r\n\r\nThere are other part of the build system that hardcode `-g` (e.g. in `SwiftCompilerSources` and `AddSwiftStdlib.cmake`), but we are not interested in those at the moment -- we will address those in the future if need be.\r\n\r\nSupports rdar://116371011",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T21:50:34Z",
        "closed_at": "2023-10-06T16:41:13Z",
        "merged_at": "2023-10-06T16:41:13Z",
        "body": "Cherry-pick #68962 into release/5.10\r\n\r\n* **Explanation**: swift-backtrace currently doesn't build property in `bootstrapping` mode. Although we should fix the 'bootstrapping' issue separately, since lldb should be built with parser integration, enable it.\r\n* **Scope**: lldb CI job in Linux\r\n* **Risk**: Low. Just updating a CI job not used for creating toolchain releases.\r\n* **Testing**: Passes current test suite, and the updating preset\r\n* **Issues**: rdar://116470411\r\n* **Reviewer**: Ben Barham (@bnbarham)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 130,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-10-04T21:38:13Z",
        "closed_at": "2023-10-05T14:02:33Z",
        "merged_at": "2023-10-05T14:02:33Z",
        "body": "This function was performing a linear scan through the set of known buffers to find the buffer containing a given source location. This linear scan can show up in hot loops, and the number of buffers in a program is increasing due to macros, so this has become a performance problem.\r\n\r\nReplace the linear scan with a logarithmic lookup into a sorted vector of the buffer IDs, with a one-element most-recently-used cache so that repeated lookups in the same buffer require constant time.\r\n\r\nThis mirrors what we already do with source files in a module. Unfortunately, we cannot reuse that code because there is no link from buffers to source files. We should look to consolidate this in the future.\r\n\r\nFixes rdar://116184248.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 908,
        "deletions": 325,
        "changed_files": 38,
        "created_at": "2023-10-04T21:30:48Z",
        "closed_at": "2023-10-05T00:50:10Z",
        "merged_at": "2023-10-05T00:50:10Z",
        "body": "Dealing with a conflict in `FrontendOptions.h` when `std::vector<std::string> CacheReplayPrefixMap;` was added.\r\n\r\nResolution: Take both \r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-04T21:25:01Z",
        "closed_at": "2023-10-05T20:51:32Z",
        "merged_at": "2023-10-05T20:51:32Z",
        "body": "Cherry-pick the equivalent of https://github.com/apple/swift/pull/68778 to `release/5.10`.\r\n\r\n---\r\n\r\nWe do allow `SourceLoc` to point to the address right after the buffer ends to point to the end of a file.\r\n\r\nFixes an issue found by the SourceKit stress tester.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 201,
        "changed_files": 7,
        "created_at": "2023-10-04T21:21:23Z",
        "closed_at": "2023-10-05T01:05:07Z",
        "merged_at": "2023-10-05T01:05:07Z",
        "body": "Reverts apple/swift#68285\r\n\r\nrdar://116334389",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 175,
        "deletions": 160,
        "changed_files": 32,
        "created_at": "2023-10-04T21:14:50Z",
        "closed_at": "2023-10-12T05:23:53Z",
        "merged_at": "2023-10-12T05:23:53Z",
        "body": "The proposal [SE-0409 Access level on imports](https://github.com/apple/swift-evolution/blob/main/proposals/0409-access-level-on-imports.md) has been accepted, let's lift the flag requirement!\r\n\r\nAlso adds the upcoming feature flag `InternalImportsByDefault` for imports to default to internal. This is the Swift 6 behavior that can be enabled in Swift 5 using this new flag. The logic is cleaned but by moving all the Swift 6 specific logic being this flag.\r\n\r\nrdar://107566870",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 10,
        "changed_files": 6,
        "created_at": "2023-10-04T20:17:40Z",
        "closed_at": "2023-10-05T02:36:18Z",
        "merged_at": "2023-10-05T02:36:18Z",
        "body": "* **Explanation**: Per SE-0337, when you annotate a ValueDecl with `@preconcurrency`, the compiler should allow uses of that declaration in Swift 5 mode to violate strict concurrency checking by downgrading errors in the actor isolation checker to warnings. Previously, the actor isolation checker only checked whether the caller's context was preconcurrency when deciding to downgrade, so referencing preconcurrency declarations directly remained errors. Preconcurrency was also dropped when computing actor isolation for declarations imported from clang, which are always preconcurrency. This meant that calling any `@MainActor` function imported from Objective-C from a non-`MainActor`-isolated context resulted in an error under `-strict-concurrency=complete`.\r\n* **Scope**: Only impacts uses of `@preconcurrency` declarations.\r\n* **Risk**: Low.\r\n* **Testing**: Added and updated many tests in `test/Concurrency/`.\r\n* **Issue**: rdar://101979691\r\n* **Reviewer**: @xedin \r\n* **Main branch PR**: https://github.com/apple/swift/pull/68961",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-04T19:15:05Z",
        "closed_at": "2023-10-05T01:22:06Z",
        "merged_at": "2023-10-05T01:22:06Z",
        "body": "This change fixes an ASAN issue introduced in https://github.com/apple/swift/pull/68865. The code is refactored to not reassign the `Desc` function parameter.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-04T18:58:57Z",
        "closed_at": "2023-10-05T15:41:15Z",
        "merged_at": "2023-10-05T15:41:15Z",
        "body": "\u2026fer way\r\n\r\nInstead of trying to get string representation of the type itself, let's just get it based on the type name, which works well with the list of types we have.\r\n\r\nResolves: rdar://113675093\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-10-04T18:12:21Z",
        "closed_at": "2023-10-04T22:25:24Z",
        "merged_at": "2023-10-04T22:25:24Z",
        "body": "Help readers find out what the `specify_test` instruction allows right away as they peruse the documentation.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T17:36:53Z",
        "closed_at": "2023-10-04T21:27:00Z",
        "merged_at": "2023-10-04T21:27:00Z",
        "body": "`swift-backtrace` currently doesn't build property in 'bootstrapping' mode. Although we should fix the 'bootstrapping' issue separately, since lldb should be built with parser integration, enable it.\r\n\r\nrdar://116470411\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 10,
        "changed_files": 6,
        "created_at": "2023-10-04T14:15:27Z",
        "closed_at": "2023-10-04T20:14:16Z",
        "merged_at": "2023-10-04T20:14:16Z",
        "body": "Per SE-0337, when you annotate a ValueDecl with `@preconcurrency`, the compiler should allow uses of that declaration in Swift 5 mode to violate strict concurrency checking by downgrading errors in the actor isolation checker to warnings. Previously, the actor isolation checker only checked whether the caller's context was preconcurrency when deciding to downgrade, so referencing preconcurrency declarations directly remained errors. Preconcurrency was also dropped when computing actor isolation for declarations imported from clang, which are always preconcurrency. This meant that calling any `@MainActor` function imported from Objective-C from a non-`MainActor`-isolated context resulted in an error under `-strict-concurrency=complete`.\r\n\r\nResolves rdar://101979691",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T14:10:59Z",
        "closed_at": "2023-10-04T16:28:32Z",
        "merged_at": "2023-10-04T16:28:31Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 18,
        "changed_files": 3,
        "created_at": "2023-10-04T08:15:42Z",
        "closed_at": "2023-10-10T03:52:07Z",
        "merged_at": null,
        "body": "Checking after rebase -- since cannot reproduce failure seen in https://github.com/apple/swift/pull/68378 \ud83e\udd14 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-04T05:44:33Z",
        "closed_at": "2023-10-04T19:55:38Z",
        "merged_at": "2023-10-04T19:55:38Z",
        "body": "* **Explanation**: This fixes a compiler crash when using the `copy` operator. The corresponding `explicit_copy_addr` instruction was not handled in `SILInstruction::mayRelease()`.\r\n\r\n* **Issue**: rdar://116102136\r\n\r\n* **Risk**: Very low. The change implements a case which would have otherwise run into a fatal error.\r\n\r\n* **Testing**: With a regression test.\r\n\r\n* **Reviewer**: @gottesmm\r\n\r\n* **Main branch PR**: https://github.com/apple/swift/pull/68932\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-04T03:38:55Z",
        "closed_at": "2023-10-04T14:28:55Z",
        "merged_at": "2023-10-04T14:28:55Z",
        "body": "I ignored this symbol on swiftRemoteMirror, but forgot to ignore it in swiftCore, so ignoring it now\r\n\r\n_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJRKjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T01:24:14Z",
        "closed_at": "2023-10-04T17:53:23Z",
        "merged_at": "2023-10-04T17:53:23Z",
        "body": "With https://github.com/apple/llvm-project/pull/7566, we have changed the command line options for llvm-cas. The `--data` option has been replaced by a `cl::positional` when using the `--ingest` option\r\n\r\nThis PR updates the swift tests that depend on that earlier behavior",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 310,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-10-03T22:21:06Z",
        "closed_at": "2023-10-04T21:44:21Z",
        "merged_at": "2023-10-04T21:44:21Z",
        "body": "Access levels on extensions are special. They're not handled by the main access level checks. Let's make sure we report public extensions referencing non-public imported types using the preexisting general exportability checks.\r\n\r\nRecord and remark on the use of the import at the same time.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-03T22:09:13Z",
        "closed_at": "2023-10-04T05:16:48Z",
        "merged_at": "2023-10-04T05:16:48Z",
        "body": "We must be conservative when generating SIL for raw value initializers of clang enums and not insert an unavailable code reached trap, even if the enum is technically unavailable. It appears that there is a long-standing loophole that allows a clang module to typedef an unavailable type in order to make that type available in Swift even though the underlying type is declared to be unavailable in Swift. This loophole is load-bearing for some existing Swift overlays.\r\n\r\nResolves rdar://116378269\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-03T21:58:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The following sequence of casts would previously succeed\r\n```\r\nstruct S {}\r\nlet s = S() as AnyObject\r\ns as? NSObject // Should fail\r\n```\r\nThe final cast here should fail, since `S` clearly is _not_ a subclass of NSObject.  But it would previously succeed because the `as AnyObject` would package the struct into an ObjC-compatible `__SwiftValue` class.  This latter _is_ an NSObject subclass.\r\n\r\nThis bug was fixed in the main `swift_dynamicCast` runtime function some time ago, but not in the `swift_dynamicCastObjCClass` which is chosen by IRGen to optimize casts to ObjC class types. This PR changes the latter to test for `__SwiftValue` and fall back to the former in that case in order to get the correct handling.  Falling back to `swift_dynamicCast` also ensures that the contents of the `__SwiftValue` are correctly unwrapped/bridged/etc as necessary to fully support Swift casting semantics.\r\n\r\nResolves: rdar://111422725\r\n\r\nTODO: I've left an XFAILed test here about the behavior of `type(of:)` with `__SwiftValue` boxes.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 18,
        "changed_files": 12,
        "created_at": "2023-10-03T21:16:55Z",
        "closed_at": "2023-10-04T11:19:54Z",
        "merged_at": "2023-10-04T11:19:54Z",
        "body": "In C++20, the compiler will synthesize a version of the operator with its arguments reversed to ease commutativity. This reversed version is ambiguous with the hand-written operator when the argument is const but `this` isn't.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 156,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-03T21:13:39Z",
        "closed_at": "2023-10-04T14:46:27Z",
        "merged_at": "2023-10-04T14:46:27Z",
        "body": "A \"trivial\" enum is one that carries no information. The previous logic asserted that a trivial enum had only one case and that case had no payload.\r\nBut `Format` below is also a trivial enum:\r\n```\r\n// Trivial, so zero-sized\r\nenum MyFormatVersion {\r\n  case v4\r\n}\r\n// Also trivial, since the payload carries no information\r\nenum Format {\r\n  case MyFormat(MyFormatVersion)\r\n}\r\n```\r\n\r\nThis commit adds a test case similar to the above\r\nand corrects the assertions for trivial enums to\r\nassert that there is either no payload, or that the payload is zero-sized.\r\n\r\nResolves rdar://116406504",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-03T20:58:54Z",
        "closed_at": "2023-10-04T15:39:14Z",
        "merged_at": "2023-10-04T15:39:14Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/68938 to `release/5.9`.\r\n\r\nSome data is stored in __AUTH, which we need to add to our list of data segments so that `ownsAddress` works correctly.\r\n\r\nrdar://116363531",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T20:49:11Z",
        "closed_at": "2023-10-04T19:57:48Z",
        "merged_at": "2023-10-04T19:57:48Z",
        "body": "Update swift.vim to contain concurrency keywords like `async` and `await`.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1012,
        "deletions": 353,
        "changed_files": 25,
        "created_at": "2023-10-03T20:14:23Z",
        "closed_at": "2023-10-16T17:03:12Z",
        "merged_at": "2023-10-16T17:03:12Z",
        "body": "Update swift cache key computation mechanism from one cache key per output, to one cache key per primary input file (for all outputs that associated with that input).\r\n\r\nThe new schema allows fewer cache lookups while still preserving most of the flexibility for batch mode and incremental mode.\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-03T18:29:30Z",
        "closed_at": "2023-10-03T20:10:12Z",
        "merged_at": "2023-10-03T20:10:12Z",
        "body": "Fixes a CI failure: https://ci.swift.org/job/oss-swift-incremental-RA-macos-apple-silicon/4485/console\r\n\r\nrdar://116407797\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-03T17:16:06Z",
        "closed_at": "2023-10-04T17:06:46Z",
        "merged_at": "2023-10-04T17:06:46Z",
        "body": "\u2026tial values\r\n\r\nIf type of the key path expression is convertible to an existential \r\nvalue with a superclass constraint represented as a known key\r\npath type, we can use it to inform key path inference.\r\n\r\nResolves: rdar://93103421\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-03T17:12:48Z",
        "closed_at": "2023-10-04T15:39:09Z",
        "merged_at": "2023-10-04T15:39:09Z",
        "body": "Cherry-pick https://github.com/apple/swift/pull/68938 to `release/5.10`.\r\n\r\nSome data is stored in __AUTH, which we need to add to our list of data segments so that `ownsAddress` works correctly.\r\n\r\nrdar://116363531",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-03T16:55:35Z",
        "closed_at": "2023-10-04T14:46:48Z",
        "merged_at": "2023-10-04T14:46:48Z",
        "body": "Some data is stored in __AUTH, which we need to add to our list of data segments so that `ownsAddress` works correctly.\r\n\r\nrdar://116363531",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T15:45:13Z",
        "closed_at": "2023-10-04T00:10:57Z",
        "merged_at": "2023-10-04T00:10:56Z",
        "body": "rdar://116396459",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-03T15:40:05Z",
        "closed_at": "2023-10-04T01:03:05Z",
        "merged_at": "2023-10-04T01:03:05Z",
        "body": "This is a cherry-pick of https://github.com/apple/swift/pull/68715.\r\nRemoves an inout-to-pointer conversion for inlinable runtime code that is completely expressed in Swift.\r\n\r\nIf pointer conversions were to be completely disallowed in pure Swift code, the presence of this pointer conversion in a pre-existing standard library would prevent the compiler from building from scratch.\r\n\r\nAfter this change, we get the same generated assembly as before when compiling in release mode.\r\n\r\nAddresses rdar://116374967\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 8,
        "changed_files": 6,
        "created_at": "2023-10-03T14:58:48Z",
        "closed_at": "2023-10-12T20:39:28Z",
        "merged_at": "2023-10-12T20:39:28Z",
        "body": "<!-- What's in this pull request? -->\r\nThis PR improves error description when casting can't find a type on its right-hand side.\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #68825\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T08:40:08Z",
        "closed_at": "2023-10-03T11:16:47Z",
        "merged_at": "2023-10-03T11:16:47Z",
        "body": "mutliple -> multiple\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-03T06:35:30Z",
        "closed_at": "2023-10-03T19:37:59Z",
        "merged_at": "2023-10-03T19:37:59Z",
        "body": "This fixes a compiler crash when using the `copy` operator.\r\n\r\nrdar://116102136\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T06:20:57Z",
        "closed_at": "2023-10-03T15:19:37Z",
        "merged_at": "2023-10-03T15:19:37Z",
        "body": "WASI does not provide any interface to inject dynamic library at runtime and all stdlib are now always statically linked, so don't need to inject dynamically.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 103,
        "deletions": 11,
        "changed_files": 10,
        "created_at": "2023-10-03T02:42:05Z",
        "closed_at": "2023-10-04T14:31:22Z",
        "merged_at": "2023-10-04T14:31:22Z",
        "body": "This looks like it was never properly implemented, since when we generate the memberwise initializer for the struct in SILGen, it incorrectly tries to apply the entire initializer expression to each variable binding in the pattern, rather than destructuring the result and pattern-matching it to the variables. Since it never worked it doesn't look like anyone is using this, so let's put up an error saying it's unsupported until we can implement it properly. Add `StructLetDestructuring` as an experimental feature flag so that tests around the feature for things like module interface printing can still work.\r\n\r\nFixes https://github.com/apple/swift/issues/68915 | rdar://116343732.\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-10-03T00:55:22Z",
        "closed_at": "2023-10-03T14:02:20Z",
        "merged_at": "2023-10-03T14:02:19Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 539,
        "deletions": 129,
        "changed_files": 25,
        "created_at": "2023-10-03T00:14:16Z",
        "closed_at": "2023-10-08T02:33:54Z",
        "merged_at": "2023-10-08T02:33:54Z",
        "body": "PR starts building a (simplified, cut-down) embedded version of the Swift Concurrency runtime library, implements a modified contract between the compiler and swift_task_create() that doesn't rely on metadata, and adds an executable test that exercises a simple task creation showing the setup working (!).\r\n\r\nNote that there is definitely a lot of Swift Concurrency functionality still missing, this doesn't achieve full Swift Concurrency parity.\r\n\r\nMajor parts involved:\r\n- SILOptimizer rewrites CreateAsyncTask builtin to use a thin metatype instead of thick\r\n- IRGen of CreateAsyncTask builtin synthesizes a set of witnesses for the result type and passes that to the runtime as a new TaskOptionRecord.\r\n- swift_task_create() parses the new TaskOptionRecord, forms a ResultTypeInfo (data structure in the runtime can hold either a Metadata*, or the separate witnesses pass down by the compiler)\r\n- FutureFragment, PollResult, TaskGroup stop using Metadata* in favor of ResultTypeInfo\r\n- CMake for Concurrency starts building a subset of the Concurrency runtime, for macOS only for now.\r\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-03T00:09:28Z",
        "closed_at": "2023-10-03T15:21:53Z",
        "merged_at": null,
        "body": "This is a cherry-pick of https://github.com/apple/swift/pull/68715.\r\nRemoves an inout-to-pointer conversion for inlinable runtime code that is completely expressed in Swift.\r\n\r\nIf pointer conversions were to be completely disallowed in pure Swift code, the presence of this pointer conversion in a pre-existing standard library would prevent the compiler from building from scratch.\r\n\r\nAfter this change, we get the same generated assembly as before when compiling in release mode.\r\n\r\nAddresses rdar://116374967\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T00:02:10Z",
        "closed_at": "2023-10-04T22:13:40Z",
        "merged_at": "2023-10-04T22:13:40Z",
        "body": "Cherry-pick #68807 into release/5.10\r\n\r\n* **Explanation**: SourceKit frameworks didn't have correct RPATH to `lib/swift/host` in the toolchain. All tests happened to work because the parent executables happened to have the RPATH to `lib/swift/host`. \r\n* **Scope**: SourceKit\r\n* **Risk**: Low, this only affects clients who wants to use SourceKit frameworks directly, and it only corrects RPATHs.\r\n* **Testing**: Current test suite passes. And fixes ASAN CI jobs failing.\r\n* **Issues**: rdar://115976985\r\n* **Reviewer**: Ben Barham (@bnbarham)",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T00:01:29Z",
        "closed_at": "2023-10-05T17:06:32Z",
        "merged_at": null,
        "body": "Cherry-pick #68807 into release/5.9\r\n\r\n* **Explanation**: SourceKit frameworks didn't have correct RPATH to `lib/swift/host` in the toolchain. All tests happened to work because the parent executables happened to have the RPATH to `lib/swift/host`. This is broken since #68190 \r\n* **Scope**: SourceKit\r\n* **Risk**: Low, this only affects clients who wants to use SourceKit frameworks directly, and it only corrects RPATHs.\r\n* **Testing**: Current test suite passes. And fixes ASAN CI jobs failing.\r\n* **Issues**: rdar://115976985\r\n* **Reviewer**: Ben Barham (@bnbarham)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-02T23:58:16Z",
        "closed_at": "2023-10-03T04:36:57Z",
        "merged_at": "2023-10-03T04:36:57Z",
        "body": "Refer to a source file in the relevant language.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-02T23:52:02Z",
        "closed_at": "2023-10-03T04:51:41Z",
        "merged_at": "2023-10-03T04:51:41Z",
        "body": "Explain why deinit barriers are not respected within mutable exclusive access scopes.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-02T20:09:29Z",
        "closed_at": "2023-10-03T16:54:58Z",
        "merged_at": "2023-10-03T16:54:58Z",
        "body": "Cherry-pick https://github.com/apple/swift/pull/68920 to `release/5.10`.\r\n\r\nThe `ivar` reference still pointed to the original list, so the first modification went to the wrong place. Change `ivar` to a pointer, and re-point it when we copy the list.\r\n\r\nrdar://116339597",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-02T20:08:46Z",
        "closed_at": "2023-10-03T14:01:21Z",
        "merged_at": "2023-10-03T14:01:21Z",
        "body": "The `ivar` reference still pointed to the original list, so the first modification went to the wrong place. Change `ivar` to a pointer, and re-point it when we copy the list.\r\n\r\nrdar://116339597",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-02T18:06:48Z",
        "closed_at": "2023-10-02T22:44:06Z",
        "merged_at": "2023-10-02T22:44:06Z",
        "body": "Follow up to https://github.com/apple/swift/pull/68760 to fix a failed assertion when building the `swift-distributed-actors` project.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-02T17:41:13Z",
        "closed_at": "2023-10-02T22:33:57Z",
        "merged_at": "2023-10-02T22:33:57Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/68913\r\n---------------------------------------\r\n\u2022 Release: Swift 5.10\r\n\u2022 Explanation: Today, this (`-disable-objc-attr-requires-foundation-module`) is an extra flag we add in `InterfaceSubContextDelegateImpl::inheritOptionsForBuildingInterface`, which does not seem right for all cases, such as explicit interface build and verify jobs, as it is not inherited from the parent invocation. It should instead just be the default for these frontend actions.\r\n\u2022 Scope of Issue: Explicit module builds invoke interface verification jobs which may hard fail upon encountering `@objc` if `Foundation` module is not imported by the interface. This is not meant to be a hard error. \r\n\u2022 Risk: Minimal, this change sets the default to match behavior of implicit builds.\r\n\u2022 Origination: Explicit Module Build feature development.\r\n\r\nResolves rdar://116008985 \r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-02T17:28:37Z",
        "closed_at": "2023-10-02T20:23:11Z",
        "merged_at": "2023-10-02T20:23:11Z",
        "body": "Today, this (`-disable-objc-attr-requires-foundation-module`) is an extra flag we add in `InterfaceSubContextDelegateImpl::inheritOptionsForBuildingInterface`, which does not seem right for all cases, as it is not inherited from the parent invocation. It should instead just be the default for these frontend actions. ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-02T16:47:57Z",
        "closed_at": "2023-10-03T14:00:46Z",
        "merged_at": "2023-10-03T14:00:46Z",
        "body": "Currently, IRGen of alloc_box doesn't do the right thing on embedded Swift (it produces a `swift.full_boxmetadata` with the standard Swift layout). Let's fix it by producing a layout that embedded Swift and its runtime expects (just a superclass pointer + destructor). Adding a test for escaping closures with captures.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-10-02T16:36:19Z",
        "closed_at": "2023-10-02T20:54:34Z",
        "merged_at": "2023-10-02T20:54:34Z",
        "body": "Caused CI failures, <https://ci.swift.org/view/Swift%20rebranch/job/oss-swift-rebranch-lldb-linux-ubuntu-18_04/4638/>. Let's revert.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 933,
        "deletions": 133,
        "changed_files": 16,
        "created_at": "2023-10-02T10:54:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!-- What's in this pull request? -->\r\n\r\nAdds `key.substitutions` field into the SourceKit `source.request.cursorinfo` response which contains substitutions info of the referenced generic declaration. Also adds optional `key.expand_substitutions` flag into the cursor info request which controls the amount of information we receive.\r\n\r\nFor an example please see the linked issue:\r\nResolves #68908\r\n\r\n(around 500 lines in this PR are just test cases \ud83d\ude42 )\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 141,
        "deletions": 12,
        "changed_files": 5,
        "created_at": "2023-10-02T10:23:34Z",
        "closed_at": "2023-10-03T16:26:29Z",
        "merged_at": "2023-10-03T16:26:28Z",
        "body": "This adds a new binary, `swift-backtrace-static`, to the build.  The runtime will not by default use this binary as the backtracer, but if you want to statically link your own binaries against the standard library you can copy `swift-backtrace-static` rather than `swift-backtrace` alongside your binary, naming it `swift-backtrace`, and the runtime should find and use it, which will mean you don't need to have `libswiftCore.so` et al installed.\r\n\r\nrdar://115278959\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 141,
        "deletions": 12,
        "changed_files": 5,
        "created_at": "2023-10-02T10:23:01Z",
        "closed_at": "2023-10-03T16:26:09Z",
        "merged_at": "2023-10-03T16:26:09Z",
        "body": "This adds a new binary, `swift-backtrace-static`, to the build.  The runtime will not by default use this binary as the backtracer, but if you want to statically link your own binaries against the standard library you can copy `swift-backtrace-static` rather than `swift-backtrace` alongside your binary, naming it `swift-backtrace`, and the runtime should find and use it, which will mean you don't need to have `libswiftCore.so` et al installed.\r\n\r\nrdar://115278959\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 141,
        "deletions": 12,
        "changed_files": 5,
        "created_at": "2023-10-02T10:22:18Z",
        "closed_at": "2023-10-03T16:25:47Z",
        "merged_at": "2023-10-03T16:25:47Z",
        "body": "This adds a new binary, `swift-backtrace-static`, to the build.  The runtime will not by default use this binary as the backtracer, but if you want to statically link your own binaries against the standard library you can copy `swift-backtrace-static` rather than `swift-backtrace` alongside your binary, naming it `swift-backtrace`, and the runtime should find and use it, which will mean you don't need to have `libswiftCore.so` et al installed.\r\n\r\nrdar://115278959\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 2,
        "changed_files": 5,
        "created_at": "2023-10-02T10:13:20Z",
        "closed_at": "2023-10-03T10:42:36Z",
        "merged_at": "2023-10-03T10:42:36Z",
        "body": "Cherry picked backtracing changes needed to make the new backtracer work for statically linked binaries.\r\n\r\nrdar://116336687",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-02T09:20:30Z",
        "closed_at": "2023-10-04T05:46:28Z",
        "merged_at": "2023-10-04T05:46:28Z",
        "body": "This can happen for inout arguments. It fixes a potential miscompile, e.g. observable by a weak reference being nil where it shouldn't.\r\n\r\nrdar://116335089\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 97,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-02T09:20:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR adds a python script and swift test file to check for any unused diagnostics in the codebase. \r\nIf uses regex to get all the diagnostics kinds from `Diagnostic~.def` files, and uses [aho-corasick algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm) for faster searching of all the diagnostics in all files under `/lib` \r\n\r\n- I'm not yet sure how to properly use pythong script inside a swift test. \r\n- I'm not sure if it's okay to use external pip package `aho-corasick` inside swift test - would it be better to write the implementation in the python script entirely?\r\n\r\nResolves https://github.com/apple/swift/issues/67306",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 459,
        "deletions": 249,
        "changed_files": 3,
        "created_at": "2023-10-01T20:42:15Z",
        "closed_at": "2023-10-04T19:34:30Z",
        "merged_at": "2023-10-04T19:34:30Z",
        "body": "While here, eliminate some redundancy in the implementation of effects checking be consolidating the logic for computing a `Classification` from a particular expression or other entity.\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-10-01T10:56:27Z",
        "closed_at": "2023-10-03T16:25:25Z",
        "merged_at": "2023-10-03T16:25:25Z",
        "body": "The community CI doesn't have a prebuilt Swift compiler right now, so this unbreaks the build on there. Also, update the doc with the latest working LTS NDK and trunk snapshot.\r\n\r\n@drodriguez, this will get the community CI running again, as you asked for.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 71,
        "deletions": 32,
        "changed_files": 4,
        "created_at": "2023-10-01T06:58:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Problem\r\nWhen declaring a method with multiple access-level modifiers (a programming mistake), the current diagnostic is not clear nor accurate.\r\n\r\nAs an example, when we compile the following block of code:\r\n```Swift\r\nclass Foo {\r\n  public private func exampleMethod() { }\r\n}\r\n```\r\nWe get the following diagnostics:\r\n```Swift\r\nerror: duplicate modifier\r\n  public private func exampleMethod() { }\r\n         ^~~~~~~\r\nnote: modifier already specified here\r\n  public private func exampleMethod() { }\r\n  ^~~~~~\r\n```\r\n\r\nIt can be argued that both modifiers are from the same \"type\" (access-level modifiers), but the example shows a situation where they aren't a duplicate of each other as the error message says.\r\n\r\n## Solution\r\nThe solution implemented on this pull request is a new diagnostic: an error message that describes the problem more clearly and a note that refers to the previous modifier by name.\r\n```Swift\r\nerror: multiple access-level modifiers specified\r\n  public private func exampleMethod() { }\r\n         ^~~~\r\nnote: 'public' previously specified here\r\n  public private func exampleMethod() { }\r\n  ^~~~~~~\r\n```\r\n\r\nResolves #60914.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-01T03:17:55Z",
        "closed_at": "2023-10-01T05:19:07Z",
        "merged_at": "2023-10-01T05:19:07Z",
        "body": "To resolve build failure at <https://ci.swift.org/job/oss-swift_tools-RA_stdlib-DA_test-simulators/3249/>.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 165,
        "deletions": 500,
        "changed_files": 51,
        "created_at": "2023-09-30T21:26:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "ASTGen always builds with the host Swift compiler, without requiring\r\nbootstrapping, and is enabled in more places. Move the regex literal\r\nparsing logic there so it is enabled in more host environments, and\r\nmakes use of CMake's Swift support. Enable all of the regex literal\r\ntests when ASTGen is built, to ensure everything is working.\r\n\r\nRemove the \"AST\" and \"Parse\" Swift modules from SwiftCompilerSources,\r\nbecause they are no longer needed.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-30T18:42:00Z",
        "closed_at": "2023-10-17T01:47:18Z",
        "merged_at": null,
        "body": "We should be using intrinsics where possible, because they are faster and better-tested than manual popcounts.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-30T05:11:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### Problem\r\n\r\nIf we have a class with a throwing initializer and a subclass that implements an initializer and doesn't call the `super.init` explicitly, like this:\r\n```swift\r\nclass ThrowingInitClass {\r\n    init() throws {}\r\n}\r\n\r\nclass ExampleSubclass: ThrowingInitClass {\r\n    let exampleVariable: Int\r\n    \r\n    init(exampleParameter: Int) {\r\n        self.exampleVariable = exampleParameter\r\n    }\r\n}\r\n```\r\nThe compiler doesn't behave appropriately, as can be seen here:\r\n`<unknown>:0: error: call can throw, but it is not marked with 'try' and the error is not handled.`\r\n\r\nNote: This is not a problem if the subclass's initializer is also a throwing initializer (like `init(exampleParameter: Int) throws`). It compiles without errors or warnings.\r\n\r\n### Solution Context\r\n\r\nIf we were to replace the `throws` on the previous block of code with `async`, we would hit the situation described on this excerpt from [\r\nThe Swift Programming Language (5.9) > Initialization > Initializer Inheritance and Overriding](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/initialization/#Initializer-Inheritance-and-Overriding):\r\n>If a subclass initializer performs no customization in phase 2 of the initialization process, and the superclass has a synchronous, zero-argument designated initializer, you can omit a call to super.init() after assigning values to all of the subclass\u2019s stored properties. **If the superclass\u2019s initializer is asynchronous, you need to write await super.init() explicitly**.\r\n\r\nAs the related diagnostic in that case is:\r\n`missing call to superclass's initializer; 'super.init' is 'async' and requires an explicit call`\r\n\r\n### Implemented Solution\r\n\r\nThe solution I implemented mirrors the `async` approach to improve the diagnostic for the throwing case:\r\n`missing call to superclass's initializer; 'super.init' is a throwing initializer and requires an explicit call`\r\n\r\nThis error only shows when the `super.init` is throwing while the subclass's initializer is not. If both are throwing, the current behavior (synthesizing what is probably something like `try super.init()`) should still work.\r\n\r\n### Improvements Considered\r\n\r\n1. I considered ending the error message with `\"[...] requires an explicit call or that this initializer becomes a throwing initializer\"` but I think it would be too long.\r\n\r\n2. I also considered adding a fix-it for writing `throws` on the initializer, which would enable the synthetization to work. But I think that doing this would imply that this is the ideal solution on most cases, and it's not clear to me that this is true.\r\n\r\n3. I also considered adding a fix-it for writing the `try super.init()` statement explicitly, which would then result on the `Errors thrown from here are not handled` error. But although I think this could be useful, I'm not confident on how to thoroughly test an implementation like that, so I decided to not go that deep for now.\r\n\r\n4. I think we should clarify this situation on the paragraph I cited from the documentation and I plan on exploring if there are ways to do that if this pull request is approved.\r\n\r\nFixes #56650.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-30T01:12:45Z",
        "closed_at": "2023-10-01T19:09:04Z",
        "merged_at": "2023-10-01T19:09:04Z",
        "body": "Fixes an incorrect library name that resulted in linking errors.\r\n\r\nThis fixes issue #68887\r\n@compnerd",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 18,
        "changed_files": 1,
        "created_at": "2023-09-30T00:43:41Z",
        "closed_at": "2023-10-03T00:46:54Z",
        "merged_at": "2023-10-03T00:46:54Z",
        "body": "This is supposed to implement refcounting in the embedded Swift runtime in a threads-safe way, i.e. all loads and modifications are done via atomic builtins.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 736,
        "deletions": 31,
        "changed_files": 11,
        "created_at": "2023-09-30T00:38:37Z",
        "closed_at": "2023-10-05T17:22:30Z",
        "merged_at": "2023-10-05T17:22:30Z",
        "body": "Add SwiftCompilerSources bridging for operand ownership and forwarding instructions.\r\n\r\nThis needs to be in place to bootstrap lifetime diagnostics. We'll start adding unit tests as we explore different diagnostic test cases.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-30T00:04:07Z",
        "closed_at": "2023-10-02T22:49:57Z",
        "merged_at": "2023-10-02T22:49:57Z",
        "body": "Use PrunedLiveness' new extendToNonUse API to extend liveness beyond deinit barriers.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 10,
        "changed_files": 4,
        "created_at": "2023-09-29T23:29:50Z",
        "closed_at": "2023-10-02T20:15:04Z",
        "merged_at": "2023-10-02T20:15:04Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 273,
        "deletions": 461,
        "changed_files": 39,
        "created_at": "2023-09-29T23:24:35Z",
        "closed_at": "2023-10-10T00:25:33Z",
        "merged_at": "2023-10-10T00:25:33Z",
        "body": "Cherrypick #68408 (and #68388, #68527, and #68867) into `release/5.10`\r\n\r\n* **Explanation**: Build the `swift-syntax` host libraries using FetchContent rather than early-swiftsyntax. This simplifies the overall toolchain build process and fix the issues we've seen caused by swift-syntax not being rebuilt. We should be able to use this to fix cross-compiling on Linux\r\n* **Scope**: Build system\r\n* **Risk**: Mid, since we update the build mechanism. But removes some nasty hacks.\r\n* **Testing**: Passes the current test suite\r\n* **Issues**: rdar://115439072\r\n* **Reviewer**: Ben Barham (@bnbarham)",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 203,
        "deletions": 1,
        "changed_files": 7,
        "created_at": "2023-09-29T23:19:01Z",
        "closed_at": "2023-10-03T04:48:15Z",
        "merged_at": "2023-10-03T04:48:15Z",
        "body": "Clang Importer strips prefixes from enum and option set case names. The logic to do this computes a common prefix from the type name and all non-deprecated case names (to oversimplify), which means that adding, removing, or changing one case can change the prefix that is removed from *all* cases. This typically causes the prefix to become shorter, meaning that additional words are prepended to each existing case name.\r\n\r\nExisting diagnostics make it look like the case has disappeared, when in fact it still exists under a different name. A little more information may help developers to figure out what happened.\r\n\r\nAdd a tailored diagnostic for this scenario which kicks in when (a) a missing member is diagnosed, (b) the base is an imported enum or option set\u2019s metatype, and (c) an enum case or static property exists which has the name we attempted to look up as a suffix:\r\n\r\n```\r\nuseEnum(MYNetworkKind.wifi)\r\n// error: type 'MYNetworkKind.wifi' has no case 'wifi', but it does have a case named 'kindWifi'; if 'wifi' worked before, a recent change to the underlying C enum may have affected how prefixes are stripped from its case names\r\n```\r\n\r\nFixes rdar://116251319.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 26,
        "changed_files": 1,
        "created_at": "2023-09-29T22:18:58Z",
        "closed_at": "2023-09-30T00:07:28Z",
        "merged_at": null,
        "body": "`build-windows-toolchain.bat` used to build and install 'swift-syntax' for the compiler. Now that swift-syntax is built as a part of 'swift' build. So no need to built it separately anymore.\r\n\r\n(Depends on #68867)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 27,
        "changed_files": 1,
        "created_at": "2023-09-29T21:34:10Z",
        "closed_at": "2023-10-02T22:52:20Z",
        "merged_at": "2023-10-02T22:52:20Z",
        "body": "(cherry picked from commit 130c16c6d2afbc5460db7faa6a9b77de2fb4fe7e)\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 27,
        "changed_files": 1,
        "created_at": "2023-09-29T21:31:28Z",
        "closed_at": "2023-09-30T02:40:29Z",
        "merged_at": "2023-09-30T02:40:29Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-29T20:57:27Z",
        "closed_at": "2023-10-02T20:14:47Z",
        "merged_at": "2023-10-02T20:14:47Z",
        "body": "For early experimentation with embedded Swift mode, the -throws-as-traps is useful before we get real compiler support for throwing (typed throws). Let's extend this flag (-throws-as-traps) to also cover the case where the embedded stdlib contains the throw sites in unreachable blocks, where the actual throw is not reachable but we end up producing a runtime call to swift_willThrow.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 140,
        "deletions": 74,
        "changed_files": 10,
        "created_at": "2023-09-29T20:25:56Z",
        "closed_at": "2023-10-02T16:23:25Z",
        "merged_at": "2023-10-02T16:23:25Z",
        "body": "The original change supported only the case where all stored properties were controlled\r\nby an init accessor but when other fields were involved SILGen would emitted copies of\r\nloaded \"self\" for each setter application which is redundant and due to the fact that the\r\nsetter was escaping. \r\n\r\nThese changes make partial application of the setter non-escaping which means that\r\n\"self\" can be borrowed instead of copied.\r\n\r\nResolves: https://github.com/apple/swift/issues/67827\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-29T18:54:20Z",
        "closed_at": "2023-09-29T23:03:00Z",
        "merged_at": "2023-09-29T23:03:00Z",
        "body": "We must avoid emitting applies of `_diagnoseUnavailableCodeReached()` in function bodies that are already marked unreachable since there isn't a valid insertion point once an `unreachable` instruction has been emitted. A function body may be marked unreachable if, for example, the parameters of the function are uninhabited.\r\n\r\nResolves rdar://116246677\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-29T18:07:01Z",
        "closed_at": "2023-09-29T21:46:10Z",
        "merged_at": "2023-09-29T21:46:10Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 281,
        "deletions": 474,
        "changed_files": 38,
        "created_at": "2023-09-29T17:44:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Cherry-pick #68408 (and dependent #68273, #68388, and #68527)   into `release/5.9`\r\n\r\n* **Explanation**: Build the `swift-syntax` host libraries using FetchContent rather than early-swiftsyntax. This simplifies the overall toolchain build process and fix the issues we've seen caused by swift-syntax not being rebuilt. We should be able to use this to fix cross-compiling on Linux\r\n* **Scope**: Build system\r\n* **Risk**: Mid, since we update the build mechanism. But removes some nasty hacks.\r\n* **Testing**: Passes the current test suite\r\n* **Issues**: rdar://115439072\r\n* **Reviewer**: Ben Barham (@bnbarham)",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 27,
        "changed_files": 1,
        "created_at": "2023-09-29T17:34:17Z",
        "closed_at": "2023-10-02T15:02:56Z",
        "merged_at": "2023-10-02T15:02:56Z",
        "body": "Cherry-pick https://github.com/apple/swift/pull/68834 to `release/5.10`.\r\n\r\nThere's often nothing that needs to be fixed up in the ivar list. In that case, we can avoid copying it. This saves time and memory, and allows the class rodata to be in immutable memory.\r\n\r\nrdar://116189946",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-09-29T17:18:43Z",
        "closed_at": "2023-09-29T22:03:16Z",
        "merged_at": "2023-09-29T22:03:16Z",
        "body": "Fixes the following warnings:\r\n```\r\n../swift-project/swift/lib/Frontend/PrintingDiagnosticConsumer.cpp:374:33: warning: unused function 'getSourceBufferStack' [-Wunused-function]\r\nstatic SmallVector<unsigned, 1> getSourceBufferStack(\r\n                                ^\r\n../swift-project/swift/lib/Sema/TypeCheckMacros.cpp:184:15: warning: unused variable 'ctx' [-Wunused-variable]\r\n  ASTContext &ctx = macro->getASTContext();\r\n              ^\r\n../swift-project/swift/lib/Sema/TypeCheckMacros.cpp:191:8: warning: unused variable 'sourceFile' [-Wunused-variable]\r\n  auto sourceFile = macro->getParentSourceFile();\r\n       ^\r\n../swift-project/swift/lib/Sema/TypeCheckMacros.cpp:999:13: warning: unused variable 'macroRole' [-Wunused-variable]\r\n  MacroRole macroRole =\r\n            ^\r\n../swift-project/swift/lib/Sema/TypeCheckMacros.cpp:165:25: warning: unused function 'handleExternalMacroDefinition' [-Wunused-function]\r\nstatic MacroDefinition  handleExternalMacroDefinition(\r\n                        ^\r\n../swift-project/swift/lib/Sema/TypeCheckMacros.cpp:940:16: warning: unused function 'getRawMacroRole' [-Wunused-function]\r\nstatic uint8_t getRawMacroRole(MacroRole role) {\r\n               ^\r\n```",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-29T17:03:31Z",
        "closed_at": "2023-09-29T19:15:10Z",
        "merged_at": "2023-09-29T19:15:10Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 314,
        "deletions": 486,
        "changed_files": 42,
        "created_at": "2023-09-29T16:57:07Z",
        "closed_at": "2023-09-29T16:58:40Z",
        "merged_at": "2023-09-29T16:58:40Z",
        "body": "Conflicts:\r\n  - `CMakeLists.txt` caused by the extra `-D` added in rebranch to reduce the number of deprecation warnings.\r\n  - `lib/Frontend/PrintingDiagnosticConsumer.cpp` caused by the removal of one of the `#if SWIFT_SWIFT_PARSER` on rebranch (probably should have been done on main).",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 38,
        "changed_files": 7,
        "created_at": "2023-09-29T16:39:38Z",
        "closed_at": "2023-10-01T00:38:00Z",
        "merged_at": "2023-10-01T00:38:00Z",
        "body": "rdar://116239522\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-29T15:42:17Z",
        "closed_at": "2023-10-03T20:42:51Z",
        "merged_at": "2023-10-03T20:42:51Z",
        "body": "When building and importing modules built with `-fmodule-file-home-is-cwd` we should be setting the debug info directory to the current working directory. This matches the behavior in clang: https://reviews.llvm.org/D134911\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-29T08:20:53Z",
        "closed_at": "2023-09-30T02:26:05Z",
        "merged_at": "2023-09-30T02:26:05Z",
        "body": "This inline Xcode version is a maintenance bother with no apparent justification, and shall it ever fall out of sync (like right now), it can start causing build failures for newcomers.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-29T07:05:55Z",
        "closed_at": "2023-09-29T23:01:08Z",
        "merged_at": "2023-09-29T23:01:08Z",
        "body": "Currently, CMO's \"everything\" serialization promotes shared functions (thunks, specializations) to public. This isn't generally a problem, unless an importing module triggers specialization of the the exact same function, in which case we end up tripping the following assert (see the test case demonstrating this):\r\n\r\n```\r\nAssertion failed: (stripExternalFromLinkage(fn->getLinkage()) == stripExternalFromLinkage(linkage)), function getOrCreateFunction, file SILFunctionBuilder.cpp, line 35.\r\n\r\n3.\tWhile evaluating request ExecuteSILPipelineRequest(Run pipelines { Mandatory Diagnostic Passes + Enabling Optimization Passes } on SIL for Main)\r\n4.\tWhile running pass #456 SILModuleTransform \"MandatoryPerformanceOptimizations\".\r\n\r\n7  swift-frontend           0x0000000109d0cfe4 swift::SILFunctionBuilder::getOrCreateFunction(swift::SILLocation, llvm::StringRef, swift::SILLinkage, swift::CanTypeWrapper<swift::SILFunctionType>, swift::IsBare_t, swift::IsTransparent_t, swift::IsSerialized_t, swift::IsDynamicallyReplaceable_t, swift::IsDistributed_t, swift::IsRuntimeAccessible_t, swift::ProfileCounter, swift::IsThunk_t, swift::SubclassScope) (.cold.3) + 0\r\n8  swift-frontend           0x0000000105aa1114 swift::SILFunctionBuilder::getOrCreateFunction(swift::SILLocation, llvm::StringRef, swift::SILLinkage, swift::CanTypeWrapper<swift::SILFunctionType>, swift::IsBare_t, swift::IsTransparent_t, swift::IsSerialized_t, swift::IsDynamicallyReplaceable_t, swift::IsDistributed_t, swift::IsRuntimeAccessible_t, swift::ProfileCounter, swift::IsThunk_t, swift::SubclassScope) + 520\r\n9  swift-frontend           0x0000000105aa26cc swift::SILFunctionBuilder::getOrCreateSharedFunction(swift::SILLocation, llvm::StringRef, swift::CanTypeWrapper<swift::SILFunctionType>, swift::IsBare_t, swift::IsTransparent_t, swift::IsSerialized_t, swift::ProfileCounter, swift::IsThunk_t, swift::IsDynamicallyReplaceable_t, swift::IsDistributed_t, swift::IsRuntimeAccessible_t) + 84\r\n10 swift-frontend           0x000000010580b97c swift::trySpecializeApplyOfGeneric(swift::SILOptFunctionBuilder&, swift::ApplySite, llvm::SmallSetVector<swift::SILInstruction*, 8u>&, llvm::SmallVectorImpl<swift::SILFunction*>&, swift::OptRemark::Emitter&, bool) + 13468\r\n11 swift-frontend           0x0000000105733b70 swift::specializeAppliesInFunction(swift::SILFunction&, swift::SILTransform*, bool) + 808\r\n12 swift-frontend           0x0000000104cb4e58 $s9Optimizer19FunctionPassContextV17specializeApplies2in11isMandatorySb3SIL0B0C_SbtF + 44\r\n13 swift-frontend           0x0000000104cb7658 $s9Optimizer33mandatoryPerformanceOptimizationsAA10ModulePassVvpfiyAA0eF7ContextVcfU_ + 1456\r\n```\r\n\r\nThe problem is that getOrCreateSharedFunction expects that if the function already exists, it must be shared and not public. Let's fix this by not promoting the linkage to public during serialization in the \"everything\" mode.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 66,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-29T06:32:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "**Issue:** Without this change, in debug builds the requirement machine validation infra would crash to compile. This prevents advanced Distributed Actors users with lots of generics from using NIGHTLY builds. Stable builds have this assertion turned off.\r\n\r\n\r\n**Description:** If we don't do this, the generic parameter has no requirements at all, which a) is incorrect to begin with, it should have the exact same signature as the method it is the accessor for, and b) it would trip up verification which is enabled on linux in snapshot builds -- causing crashes.\r\n\r\n\r\n**Affected versions:** All the way since initial introduction, but ONLY in debug builds -- i.e. _nightly snapshots on linux_. Released stable Swift versions don't have this assertion and would \"happen to work\".\r\n\r\n\r\n**Risk:** Low, this only adds missing requirements to distributed function accessors which is the correct thing to do. Missing them \"worked by accident\".\r\n\r\n\r\n**Review by:** @slavapestov @xedin \r\n\r\n**Testing:** CI testing; verified manually on reproducer project provided in issue\r\n\r\n**Radar:** rdar://115497090\r\n\r\n**Original PR:** https://github.com/apple/swift/pull/68859\r\n\r\nResolves https://github.com/apple/swift/issues/68517",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-29T06:27:31Z",
        "closed_at": "2023-10-09T19:50:43Z",
        "merged_at": "2023-10-09T19:50:43Z",
        "body": "changed @_spi(RawSyntax) import SwiftSyntax in ASTGen.swift to @_spi(BumpPtrAllocator) import SwiftSyntax.\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nResolves #68351.\r\n\r\nCoupled with https://github.com/apple/swift-syntax/pull/2249.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 97,
        "deletions": 28,
        "changed_files": 5,
        "created_at": "2023-09-29T06:23:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The distributed func accessor does not need to carry forward generic parameters EXCEPT the Decoder and the self type. We adjust the implementation to pass those and correct handling of those parameters. This will now no longer produce crashes when distributed funcs are used in nested generic types in debug builds. This does not affect stable releases because those assertions are disabled there, and don't actually happen to cause issues here. But we should do the right thing in any case.\r\n\r\nResolves rdar://115497090\r\nResolves https://github.com/apple/swift/issues/68517\r\n\r\nOld analysis: ~If we don't do this, the generic parameter has no requirements at all, which a) is incorrect to begin with, it should have the exact same signature as the method it is the accessor for, and b) it would trip up verification which is enabled on linux in snapshot builds -- causing crashes.~",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 897,
        "deletions": 383,
        "changed_files": 74,
        "created_at": "2023-09-29T04:31:12Z",
        "closed_at": "2023-10-03T18:47:13Z",
        "merged_at": "2023-10-03T18:47:13Z",
        "body": "Squashed cherry-pick of #68334 and #68743.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 2304,
        "deletions": 4,
        "changed_files": 15,
        "created_at": "2023-09-29T03:56:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This implements the Synchronization module along with all of the Atomic APIs pitched here: https://forums.swift.org/t/atomics/67350\r\n\r\nResolves: rdar://115570626",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-29T03:09:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "As highlighted by [this issue](https://github.com/apple/swift/issues/43376), the official documentation doesn't seem to use the word 'synthesized initializer' as some of the diagnostics do. It, instead, uses 'default initializers' to refer to this concept, as can be seen at the [The Swift Programming Language (5.9) > Initialization > Default Initializers section](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/initialization#Default-Initializers).\r\n\r\nThis pull request simply replaces one term by the other on 3 diagnostics, which are related to eachother and seem to be the only ones using the 'synthesized' term.\r\n\r\nResolves #43376",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 75,
        "deletions": 104,
        "changed_files": 9,
        "created_at": "2023-09-29T01:53:08Z",
        "closed_at": "2023-09-29T17:25:57Z",
        "merged_at": "2023-09-29T17:25:57Z",
        "body": "This reverts re-landed custom NS_OPTIONS support from https://github.com/apple/swift/pull/68546 .\r\n\r\n- Explanation:\r\nRevert https://github.com/apple/swift/pull/68546 as it causes some issues in existing adopters.\r\n- Scope: C++ interop.\r\n- Risk: Low, revert of an existing change.\r\n- Testing: Unit tests.\r\n- Original PR: https://github.com/apple/swift/pull/68853",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 75,
        "deletions": 104,
        "changed_files": 9,
        "created_at": "2023-09-29T01:50:49Z",
        "closed_at": "2023-09-29T17:25:45Z",
        "merged_at": "2023-09-29T17:25:45Z",
        "body": "This reverts re-landed custom NS_OPTIONS support from https://github.com/apple/swift/pull/68546 .\r\n\r\n- Explanation:\r\nRevert https://github.com/apple/swift/pull/68546 as it causes some issues in existing adopters.\r\n- Scope: C++ interop.\r\n- Risk: Low, revert of an existing change.\r\n- Testing: Unit tests.\r\n- Original PR: https://github.com/apple/swift/pull/68853",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 75,
        "deletions": 104,
        "changed_files": 9,
        "created_at": "2023-09-29T01:49:13Z",
        "closed_at": "2023-09-29T17:26:10Z",
        "merged_at": "2023-09-29T17:26:10Z",
        "body": "This reverts re-landed custom NS_OPTIONS support from https://github.com/apple/swift/pull/68546 . ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 362,
        "deletions": 440,
        "changed_files": 28,
        "created_at": "2023-09-29T01:33:35Z",
        "closed_at": "2023-09-29T17:02:48Z",
        "merged_at": "2023-09-29T17:02:48Z",
        "body": "* **Explanation**: This change fills a number of known holes and bugs in the static data-race-safety checking, including:\r\n  * An issue where a `nonisolated` initializer of a subclass could invoke global-actor-isolated properties in the superclass.\r\n  * An issue with `Sendable` checking for function references where parameter and result types were `Sendable`-checked at the point of partial application when there was no function conversion. Sendability of function references depends only on captures, and applies when the function itself is passed across isolation boundaries. Parameter and result values can only cross isolation boundaries when the function is called, so they shouldn't be checked when checking a reference for Sendable violations.\r\n  * Diagnose Sendable violations in captures of local functions, which were previously completely unchecked.\r\n  * Correctness issues / false positives with the diagnostics for erasing actor-isolation via function conversions \r\n \r\nThis change also includes a minor refactoring to consolidate the representation of actor isolation across function declarations and closures.\r\n* **Scope**: Primarily impacts strict concurrency checking. The constraint system change around global actor isolation can impact existing code but the impacted cases are very narrow.\r\n* **Risk**: Low.\r\n* **Testing**: Added and updated many tests in `test/Concurrency/`.\r\n* **Issue**: rdar://86550653, rdar://104129168, rdar://113293502\r\n* **Main branch PR**: \r\n  * https://github.com/apple/swift/pull/68414\r\n  * https://github.com/apple/swift/pull/68420\r\n  * https://github.com/apple/swift/pull/68567\r\n  * https://github.com/apple/swift/pull/68685\r\n  * https://github.com/apple/swift/pull/68693\r\n  * https://github.com/apple/swift/pull/68752",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 16,
        "changed_files": 6,
        "created_at": "2023-09-28T23:26:12Z",
        "closed_at": "2023-10-03T01:48:29Z",
        "merged_at": "2023-10-03T01:48:29Z",
        "body": "Adding an arm64e test execising -enable-import-ptrauth-field-function-pointers, which also surfaced a bug in the deserialization of SILAccessEnforcement::Signed (which is enum case 4, no longer fits into a 0x03 mask).",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 211,
        "deletions": 91,
        "changed_files": 9,
        "created_at": "2023-09-28T23:22:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 99,
        "deletions": 20,
        "changed_files": 9,
        "created_at": "2023-09-28T22:43:56Z",
        "closed_at": "2023-10-02T16:30:10Z",
        "merged_at": "2023-10-02T16:30:10Z",
        "body": "It is possible that import resolution failed because we are attempting to resolve a module which can only be brought in via a `.modulemap` of a different Clang module dependency which is not otherwise on the current search paths. For example, suppose we are scanning a `.swiftinterface` for module `Foo`, which contains:\r\n```\r\n@_exported import Foo\r\nimport Bar\r\n...\r\n```\r\nWhere `Foo` is the underlying Framework clang module whose `.modulemap` defines an auxiliary module `Bar`. Because `Foo` is a framework, its `.modulemap` is under `<some_framework_search_path>/Foo.framework/Modules/module.modulemap`. Which means that lookup of `Bar` alone from Swift will not be able to locate the module in it. However, the lookup of `Foo` will itself bring in the auxiliary module because the Clang scanner instance scanning for clang module `Foo` will be able to find it in the corresponding framework module's `.modulemap` and register it as a dependency which means it will be registered with the scanner's cache. To handle such cases, we first add all successfully-resolved modules and (for Clang modules) their transitive dependencies to the cache, and then attempt to re-query imports for which resolution originally failed from the cache. If this fails, then the scanner genuinely failed to resolve this dependency.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 9,
        "changed_files": 7,
        "created_at": "2023-09-28T22:43:38Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 6
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-28T22:24:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This change passes through the `-file-compilation-dir` flag to the ClangImporter instance as `-ffile-compilation-dir`. When used in conjunction with https://github.com/llvm/llvm-project/pull/67744 this will allow for setting the compilation directory of pcm files using the -file-compilation-dir flag.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1167,
        "deletions": 66,
        "changed_files": 27,
        "created_at": "2023-09-28T21:46:39Z",
        "closed_at": "2023-10-17T14:08:00Z",
        "merged_at": "2023-10-17T14:08:00Z",
        "body": "\u2026d from a derived class synthesized method\r\n\r\nThe use of a synthesized C++ method allows us to avoid making a copy of self when invoking the base method from Swift\r\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-28T20:58:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "In the PR , we've marked BumpPtrAllocator with @_spi(BumpPtrAllocator) and updated the import statement for SwiftSyntax to use @_spi(BumpPtrAllocator) as you requested.\r\n\r\nResolves #68351   \r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 137,
        "deletions": 23,
        "changed_files": 4,
        "created_at": "2023-09-28T20:42:22Z",
        "closed_at": "2023-10-10T18:08:33Z",
        "merged_at": "2023-10-10T18:08:33Z",
        "body": "Previously, callers to `_gatherGenericParameters` had to provide all generic parameters, even non-key ones. This made initializing something like:\r\n\r\n```swift\r\nstruct A<T> {}\r\n\r\nextension A where T == Int {\r\n  struct B {}\r\n}\r\n```\r\nwith `B` pretty awkward because the metadata accessor only has a single parameter (the request) and has 0 key arguments. Teach `_gatherGenericParameters` to handle callers only passing in the required key generic parameters.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 253,
        "deletions": 184,
        "changed_files": 24,
        "created_at": "2023-09-28T19:59:50Z",
        "closed_at": "2023-10-09T20:58:21Z",
        "merged_at": "2023-10-09T20:58:21Z",
        "body": "Currently, when compiling with no optimizations on, we still delete\r\nfunctions that are sometimes used in the debugger. For example, users\r\nmight want to call functions which are unused, or compiler generated\r\nsetters/getters.\r\n\r\nrdar://101046198",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-09-28T19:58:00Z",
        "closed_at": "2023-09-29T16:53:15Z",
        "merged_at": "2023-09-29T16:53:15Z",
        "body": "Cherry-pick of https://github.com/apple/swift/pull/68841\r\n---------------------------\r\n\u2022 Release: Swift 5.10\r\n\u2022 Explanation: https://github.com/apple/swift/pull/66151 implemented support in dependency scanning for a special case of re-mapping imports of `Foo.Private` to clang modules of form `Foo_Private`. Such a module may not actually exist and the user did in fact mean a submodule of `Foo` called `Private` instead, in which case we do not want to error out during the scan on not being able to find it.\r\n\u2022 Scope of Issue: Some projects which rely on importing a clang submodule called `Private` using the `.Private` syntax may fail to resolve the dependency.\r\n\u2022 Risk: Minimal, this change only affects the code-path which currently leads to a hard scanning failure, making it not error on failure to resolve the potentially-optional `_Private` module.\r\n\u2022 Origination: Explicit Module Build feature development.\r\n\r\nResolves rdar://109426243\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-09-28T19:54:54Z",
        "closed_at": "2023-09-29T19:48:32Z",
        "merged_at": "2023-09-29T19:48:32Z",
        "body": "https://github.com/apple/swift/pull/66151 implemented support in dependency scanning for a special case of re-mapping imports of `Foo.Private` to clang modules of form `Foo_Private`. Such a module may not actually exist and the user did in fact mean a submodule of `Foo` called `Private` instead, in which case we do not want to error out during the scan on not being able to find it.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-28T19:47:53Z",
        "closed_at": "2023-10-07T16:30:28Z",
        "merged_at": "2023-10-07T16:30:28Z",
        "body": "**PR Summary**:\r\nPR simply fixes the link to the `PythonKit/Python.swift` file which can be found [here](https://github.com/pvieito/PythonKit/blob/master/PythonKit/Python.swift).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 8,
        "changed_files": 8,
        "created_at": "2023-09-28T19:25:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "There are 13 AutoDiff tests which are disabled since a while ago. I could make all of them pass on local macOS (M1 and x86)\r\n\r\nExample PRs\r\n- https://github.com/apple/swift/pull/68260\r\n- https://github.com/apple/swift/pull/68584\r\n\r\nUnsupported Tests (13), grouped together:\r\n\r\nx86:\r\n- Swift(macosx-arm64) :: AutoDiff/IRGen/loadable_by_address.swift\r\n- Swift(macosx-arm64) :: AutoDiff/IRGen/witness_table_differentiable_requirements.sil\r\n- Swift(macosx-arm64) :: AutoDiff/validation-test/control_flow.swift\r\n\r\nFlaky\r\n- Swift(macosx-arm64) :: AutoDiff/compiler_crashers_fixed/issue-55094-noderivative-parameter-type-mangling.swift\r\n- Swift(macosx-arm64) :: AutoDiff/compiler_crashers_fixed/issue-55177-optimize-partial-apply-convention-thin-only.swift\r\n- Swift(macosx-arm64) :: AutoDiff/compiler_crashers_fixed/issue-56330-vjpcloner-apply-multiple-consuming-users.swift\r\n- Swift(macosx-arm64) :: AutoDiff/compiler_crashers_fixed/issue-56977-over-consume-in-subset-parameters-thunk.swift\r\n- Swift(macosx-arm64) :: AutoDiff/compiler_crashers_fixed/issue-57869-vardecl-adjoint-values.swift\r\n\r\nOthers\r\n- IDf  Swift(macosx-arm64) :: AutoDiff/compiler_crashers_fixed/rdar74087329-debug-scope-trampoline-blocks.swift\r\n- lnk  Swift(macosx-arm64) :: AutoDiff/compiler_crashers_fixed/tf1232-autodiff-generated-declaration-mangling.swift\r\n- PR!  Swift(macosx-arm64) :: AutoDiff/stdlib/collection_higher_order_functions.swift\r\n- PR!  Swift(macosx-arm64) :: AutoDiff/validation-test/differentiable_protocol_requirements.swift\r\n- PR!  Swift(macosx-arm64) :: AutoDiff/compiler_crashers_fixed/rdar71319547-generated-decls-shall-not-be-resilient.swift\r\n\r\nThe idea, as suggested by @asl , is to run CI multiple times in this PR, which identifies the Flakiness of these tests",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-28T19:06:44Z",
        "closed_at": "2023-09-29T21:17:41Z",
        "merged_at": "2023-09-29T21:17:41Z",
        "body": "We should include `oleauto.h` in the OLE32 module.  This ensures that we are able to access the BSTR APIs which are used extensively in OLE.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-28T18:43:23Z",
        "closed_at": "2023-09-29T23:00:08Z",
        "merged_at": "2023-09-29T23:00:08Z",
        "body": "Fetch and extract a prebuilt toolchain to enable macros support on 5.10. This is a squashed cherry-pick of #68319, #68641, and #68835.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-28T18:31:19Z",
        "closed_at": "2023-09-29T22:59:55Z",
        "merged_at": "2023-09-29T22:59:55Z",
        "body": "Cherry-pick of 56d350cc1e8eda4ce9989bc773322492fa6bf40d to ensure we don't fail if wix already exists.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-09-28T18:26:58Z",
        "closed_at": "2023-09-29T21:45:55Z",
        "merged_at": "2023-09-29T21:45:55Z",
        "body": "The main snapshot was being used as we needed C++ interop changes. They're in the released 5.9.0 though, so update to a proper release instead.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 27,
        "changed_files": 1,
        "created_at": "2023-09-28T18:19:27Z",
        "closed_at": "2023-09-29T17:29:28Z",
        "merged_at": "2023-09-29T17:29:28Z",
        "body": "There's often nothing that needs to be fixed up in the ivar list. In that case, we can avoid copying it. This saves time and memory, and allows the class rodata to be in immutable memory.\r\n\r\nrdar://116189946",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 503,
        "deletions": 70,
        "changed_files": 9,
        "created_at": "2023-09-28T17:42:38Z",
        "closed_at": "2023-10-02T15:36:15Z",
        "merged_at": "2023-10-02T15:36:15Z",
        "body": "Typed errors are returned indirectly in this version. No support for non-loadable typed errors.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-28T17:21:39Z",
        "closed_at": "2023-09-29T17:27:04Z",
        "merged_at": null,
        "body": "The Swift runtime currently unconditionally writes to RODATA->ivar (in initObjCClass).\r\n\r\nrdar://113642480",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 400,
        "deletions": 39,
        "changed_files": 24,
        "created_at": "2023-09-28T16:57:18Z",
        "closed_at": "2023-09-30T03:15:57Z",
        "merged_at": "2023-09-30T03:15:57Z",
        "body": "This PR introduces two new features based on tracking which import was the source of each entities used in API.\r\n\r\nThe compiler will warn on imports that are marked either `public` or `package` but aren't used as such by the local file. A fixit will suggest to downgrade them to either `package` or `internal`. This logic ignores anything below internal.\r\n\r\nUsing `-Rmodule-api-import` the compiler will print a remark about the import bringing in every decl used in public function signatures or inlinable code. It also remarks on the source of conformances use, the source of typealias underlying types, and implicitly used decls.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 321,
        "deletions": 18,
        "changed_files": 37,
        "created_at": "2023-09-28T16:28:57Z",
        "closed_at": "2023-09-29T15:54:05Z",
        "merged_at": null,
        "body": "A quick proof-of-concept implementation of an @attached(attribute) role. Matching SwiftSyntax implementation in apple/swift-syntax#2244.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-28T16:18:16Z",
        "closed_at": "2023-09-29T19:39:03Z",
        "merged_at": "2023-09-29T19:39:03Z",
        "body": "Previous attempt needed to be reverted: https://github.com/apple/swift/pull/68809",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 63,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-09-28T15:21:49Z",
        "closed_at": "2023-09-28T16:10:58Z",
        "merged_at": null,
        "body": "This adds a new binary, `swift-backtrace-static`, to the build.  The runtime will not by default use this binary as the backtracer, but if you want to statically link your own binaries against the standard library you can copy `swift-backtrace-static` rather than `swift-backtrace` alongside your binary, naming it `swift-backtrace`, and the runtime should find and use it, which will mean you don't need to have `libswiftCore.so` et al installed.\r\n\r\nrdar://115278959\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 63,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-09-28T15:21:00Z",
        "closed_at": "2023-09-28T16:10:39Z",
        "merged_at": null,
        "body": "This adds a new binary, `swift-backtrace-static`, to the build.  The runtime will not by default use this binary as the backtracer, but if you want to statically link your own binaries against the standard library you can copy `swift-backtrace-static` rather than `swift-backtrace` alongside your binary, naming it `swift-backtrace`, and the runtime should find and use it, which will mean you don't need to have `libswiftCore.so` et al installed.\r\n\r\nrdar://115278959\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 140,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-09-28T15:03:48Z",
        "closed_at": "2023-10-02T15:57:19Z",
        "merged_at": "2023-10-02T15:57:19Z",
        "body": "This adds a new binary, `swift-backtrace-static`, to the build.  The runtime will not by default use this binary as the backtracer, but if you want to statically link your own binaries against the standard library you can copy `swift-backtrace-static` rather than `swift-backtrace` alongside your binary, naming it `swift-backtrace`, and the runtime should find and use it, which will mean you don't need to have `libswiftCore.so` et al installed.\r\n\r\nrdar://115278959\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-28T06:11:12Z",
        "closed_at": "2023-09-28T11:02:03Z",
        "merged_at": "2023-09-28T11:02:03Z",
        "body": "This reverts commit 1b1db053d58de4e694fd1365741def4fc3b18e67.\r\n\r\nLooks like there is some build breakage at <https://ci.swift.org/job/oss-swift_tools-R_stdlib-RD_test-simulator/>.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-28T05:56:28Z",
        "closed_at": "2023-09-29T20:16:28Z",
        "merged_at": "2023-09-29T20:16:28Z",
        "body": "Implements retain_n and release_n in the embedded runtime. Don't have good ideas how to write a runtime test for this...",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-28T05:22:48Z",
        "closed_at": "2023-09-29T20:16:48Z",
        "merged_at": "2023-09-29T20:16:48Z",
        "body": "Add a -O test that promotes a class instance allocation to be statically allocated in the data section instead, and implement swift_initStaticObject to handle that.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 52,
        "deletions": 9,
        "changed_files": 4,
        "created_at": "2023-09-28T05:08:09Z",
        "closed_at": "2023-09-29T17:28:48Z",
        "merged_at": "2023-09-29T17:28:48Z",
        "body": "Honestly not sure if this is the right approach, please suggest any better solutions :)\r\n\r\nThe added testcase currently triggers a compiler crash, under -Osize (doesn't happen in -Onone):\r\n\r\n```\r\nAssertion failed: (vtable), function emitLazySpecializedClassMetadata, file GenMeta.cpp, line 5113.\r\nPlease submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the crash backtrace.\r\n3.\tWhile evaluating request IRGenRequest(IR Generation for module main)\r\n4.\tWhile emitting lazy specialized class metadata for type '_ContiguousArrayStorage<Int>'\r\n7  swift-frontend           0x0000000107f56c90 swift::irgen::emitLazySpecializedClassMetadata(swift::irgen::IRGenModule&, swift::CanType) (.cold.4) + 0\r\n8  swift-frontend           0x00000001031c1798 swift::irgen::emitLazySpecializedClassMetadata(swift::irgen::IRGenModule&, swift::CanType) + 656\r\n9  swift-frontend           0x000000010314148c swift::irgen::IRGenerator::emitLazyDefinitions() + 2056\r\n10 swift-frontend           0x000000010323bb68 swift::IRGenRequest::evaluate(swift::Evaluator&, swift::IRGenDescriptor) const + 2584\r\n```\r\n\r\nWhat happens is: A generic function in the module ends up using implementation of arrays from the stdlib. This functionality gets loaded (deserialized). MandatoryPerfOpts ends up not actually specializing any of it, because there is no non-generic anchor from which it would be used, and namely it doesn't specialize the vtable of _ContiguousArrayStorage. Then the performance pipeline, later, ends up inlining and specializing the implementation of arrays. This creates a reference to _ContiguousArrayStorage<Int> from some non-generic functions (!) because they are specialized (by the performance pipeline). IRGen ends up lowering those functions, and crashes when it cannot find a specialized vtable for _ContiguousArrayStorage<Int>.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1065,
        "deletions": 289,
        "changed_files": 47,
        "created_at": "2023-09-28T05:03:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "More work that is a NFC unless using `-enable-experimental-feature NoncopyableGenerics`\r\n\r\nThis change-set primarily overhauls the `isNoncopyable` methods of `TypeBase` and `ValueDecl`:\r\n\r\nFirst, I've narrowed the scope of `ValueDecl::isNoncopyable` to `TypeDecl::isNoncopyable`. We are still defining `TypeDecl::isNoncopyable` as meaning \"is always noncopyable\" via checking for a `~Copyable` written on the decl. \r\nI'd eventually like this method to go away and/or be substantially changed into\r\n1. `decl->isNoncopyable()` is rewritten as `getInterfaceType()->isNoncopyable()`\r\n2. `TypeDecl::implicitCopyableBehavior()` returning one of `{None, Conditional, Always}` to reflect the different meanings of physically annotating the type with `~Copyable`.\r\n\r\nFor `TypeBase::isNoncopyable`, we now query whether the type conforms to `Copyable`. This change happens in coordination with actually synthesizing conformances to `Copyable` for all nominal types when it makes sense to (i.e., it doesn't have `~Copyable` written on it, hence why the legacy-form of `TypeDecl::isNoncopyable` lingers).\r\n\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-28T04:05:11Z",
        "closed_at": "2023-09-29T23:44:26Z",
        "merged_at": "2023-09-29T23:44:26Z",
        "body": "The attached testcase shows the problem: With -Xcc -fno-builtin, or with -Xcc -ffreestanding, the compiler crashes during deserialization due to the \"free\" function not showing up in SwiftShims. This turns out to be caused by the declaration of free not being at the top level in LibcShims.h.\r\n\r\n```\r\nlib/swift/embedded/Swift.swiftmodule/arm64-apple-macos.swiftmodule:1:1: error: reference to top-level declaration 'free' broken by a context change; 'free' is not found, it was expected to be in 'SwiftShims'\r\nSwiftShims.free\r\n^\r\n<unknown>:0: note: the declaration was expected to be found in module 'SwiftShims'\r\n<unknown>:0: note: declarations in the  clang module 'SwiftShims' may be hidden by clang preprocessor macros\r\nStack dump:\r\n3.\tWhile evaluating request ExecuteSILPipelineRequest(Run pipelines { Mandatory Diagnostic Passes + Enabling Optimization Passes } on SIL for main)\r\n4.\tWhile running pass #51 SILModuleTransform \"MandatorySILLinker\".\r\n5.\tWhile deserializing SIL function \"swift_deallocClassInstance\"\r\n6.\tWhile deserializing SIL function \"free\"\r\n7.\t*** DESERIALIZATION FAILURE ***\r\n```",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-28T02:56:36Z",
        "closed_at": "2023-09-29T17:29:05Z",
        "merged_at": "2023-09-29T17:29:05Z",
        "body": "The attached testcase demonstrates the problem: On Darwin, the compiler expects that after after swift_once completes, the predicate value is \"-1\", and under LTO the optimizer ends up seeing through the swift_once implementation and turning the failed expectation into a trap.\r\n\r\nThis PR is still a stopgap in terms of swift_once becoming \"real\", but the -1 value matching Darwin resolves the immediate problem and is harmless on non-Darwin.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-09-28T02:07:41Z",
        "closed_at": "2023-10-09T18:13:49Z",
        "merged_at": "2023-10-09T18:13:49Z",
        "body": "This reverts commit 3aea04c440ce86ed402f9e7f7cc79d10e4d05429.\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 104,
        "deletions": 57,
        "changed_files": 11,
        "created_at": "2023-09-28T01:51:24Z",
        "closed_at": "2023-09-29T22:51:00Z",
        "merged_at": "2023-09-29T22:51:00Z",
        "body": "All SILArgument types are \"block arguments\". There are three kinds:\r\n1. Function arguments\r\n2. Phis\r\n3. Terminator results\r\n\r\nIn every situation where the source of the block argument matters, we need to distinguish between these three. Accidentally failing to handle one of the cases is an perpetual source of compiler bugs. Attempting to handle both phis and terminator results uniformly is *always* a bug, especially once OSSA has phi flags. Even when all cases are handled correctly, the code that deals with data flow across blocks is incomprehensible without giving each case a type. This continues to be a massive waste of time literally every time I review code that involves cross-block control flow.\r\n\r\nUnfortunately, we don't have these C++ types yet (nothing big is blocking that, it just wasn't done). That's manageable because we can use wrapper types on the Swift side for now. Wrapper types don't create any more complexity than protocols, but they do sacrifice some usability in switch cases.\r\n\r\nThere is no reason for a BlockArgument type. First, a function argument is a block argument just as much as any other. BlockArgument provides no useful information beyond Argument. And it is nearly always a mistake to care about whether a value is a function argument and not care whether it is a phi or terminator result.\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 374,
        "deletions": 105,
        "changed_files": 9,
        "created_at": "2023-09-28T01:36:24Z",
        "closed_at": "2023-09-29T19:28:08Z",
        "merged_at": "2023-09-29T19:28:08Z",
        "body": "Added the bridging types involved and the basic functionality.\n",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 145,
        "deletions": 15,
        "changed_files": 4,
        "created_at": "2023-09-27T23:24:48Z",
        "closed_at": "2023-10-04T19:49:49Z",
        "merged_at": "2023-10-04T19:49:49Z",
        "body": "Package decls are only printed in interface files if they are inlinable\r\n(@usableFromInline, @inlinable, @_alwaysEmitIntoClient). They could be\r\nreferenced by a module outside of its defining module that belong to the same\r\npackage determined by the `package-name` flag. However, the flag is only in\r\n.swiftmodule and .private.swiftinterface, thus type checking references of\r\ninlinable package symbols in public interfaces fails due to the missing flag.\r\nInstead of adding the package-name flag to the public interfaces, which\r\ncould raise a security concern, this PR grants access to such cases.\r\n\r\nResolves rdar://116142791",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-27T21:51:37Z",
        "closed_at": "2023-09-28T04:06:20Z",
        "merged_at": "2023-09-28T04:06:20Z",
        "body": "We currently get a build-time warning when building the embedded stdlib:\r\n```\r\nwarning: no such SDK: -target\r\n```\r\nLet's fix that.\r\n\r\nrdar://115863725",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-09-27T20:39:59Z",
        "closed_at": "2023-09-29T06:38:06Z",
        "merged_at": "2023-09-29T06:38:06Z",
        "body": "Cherry pick of https://github.com/apple/swift/pull/68791\r\n\r\nWe cut off a sentence; this corrects that issue.\r\n\r\nFixes: rdar://115519046",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-27T20:30:45Z",
        "closed_at": "2023-10-02T23:57:18Z",
        "merged_at": "2023-10-02T23:57:18Z",
        "body": "Relative path calculation to lib/swift/host was not correct.\r\n\r\nrdar://115976985\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-27T16:55:40Z",
        "closed_at": "2023-09-27T20:19:05Z",
        "merged_at": "2023-09-27T20:19:05Z",
        "body": "\u2026 6ecea1a\r\n\r\nrdar://116105472",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 207,
        "deletions": 73,
        "changed_files": 4,
        "created_at": "2023-09-27T13:31:58Z",
        "closed_at": "2023-09-27T20:06:00Z",
        "merged_at": "2023-09-27T20:06:00Z",
        "body": "*5.10 cherry-pick of https://github.com/apple/swift/pull/68705 + https://github.com/apple/swift/pull/68803*\r\n\r\n- Explanation: Fixes a spurious diagnostic that definite initialization would emit for an `as?` branch of an `if`/`switch` expression.\r\n- Scope: Affects the use of conditional casts as `if`/`switch` expression bodies\r\n- Issue: https://github.com/apple/swift/issues/68764\r\n- Risk: Low, the fix removes an unnecessary instruction\r\n- Testing: Added tests to test suite\r\n- Reviewer: Joe Groff",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-27T13:30:28Z",
        "closed_at": "2023-09-27T15:54:10Z",
        "merged_at": "2023-09-27T15:54:10Z",
        "body": "https://github.com/apple/swift/issues/68764",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1020,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2023-09-27T09:46:07Z",
        "closed_at": "2023-09-27T20:07:18Z",
        "merged_at": "2023-09-27T20:07:18Z",
        "body": "*5.10 cherry-pick of https://github.com/apple/swift/pull/68765*\r\n\r\n- Explanation: Fixes an issue where `try` and `await` could be used to \"cover\" throwing and async calls within the branches of an `if`/`switch` expression. This patch fixes the issue such that we require `try` and `await` to appear on the effectful calls in the branches, and diagnose the use of `try`/`await` on an `if`/`switch` expression.\r\n- Scope: Affects effect type-checking around `if`/`switch` expressions\r\n- Issue: rdar://116066748\r\n- Risk: Low, the fix is fairly straightforward, and I have added a plethora of tests to ensure it works correctly\r\n- Testing: Added tests to test suite\r\n- Reviewer: Pavel Yaskevich",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-27T09:03:38Z",
        "closed_at": "2023-10-03T10:41:33Z",
        "merged_at": "2023-10-03T10:41:33Z",
        "body": "On the LSan builds, we disable the backtracer, which results in a link error because we completely remove the code from libswiftCore.\r\n\r\nrdar://116105222\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-27T09:03:07Z",
        "closed_at": "2023-09-28T10:42:29Z",
        "merged_at": "2023-09-28T10:42:29Z",
        "body": "On the LSan builds, we disable the backtracer, which results in a link error because we completely remove the code from libswiftCore.\r\n\r\nrdar://116105222\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-27T09:02:32Z",
        "closed_at": "2023-09-27T12:38:10Z",
        "merged_at": "2023-09-27T12:38:10Z",
        "body": "On the LSan builds, we disable the backtracer, which results in a link error because we completely remove the code from libswiftCore.\r\n\r\nrdar://116105222\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-27T07:34:44Z",
        "closed_at": "2023-09-27T13:21:59Z",
        "merged_at": "2023-09-27T13:21:59Z",
        "body": "It failed because the constant overflows a signed 32 bit integer.\r\n\r\nAnd sorry, little insects, I didn't mean it that way.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 664,
        "deletions": 14,
        "changed_files": 22,
        "created_at": "2023-09-27T06:11:42Z",
        "closed_at": "2023-10-05T03:10:44Z",
        "merged_at": "2023-10-05T03:10:44Z",
        "body": "Type checking a default argument expression will compute the required actor isolation for evaluating that argument value synchronously. Actor isolation checking is deferred to the caller; it is an error to use a default argument from across isolation domains.\r\n\r\nThis change enables code like the following:\r\n\r\n```swift\r\n@MainActor\r\nfunc requiresMainActor() -> Int { 0 }\r\n\r\n@MainActor\r\nfunc useMainActorDefault(value: Int = requiresMainActor()) { ... }\r\n\r\n@MainActor\r\nfunc mainActorCaller() {\r\n  useMainActorDefault() // okay\r\n}\r\n\r\nfunc nonisolatedCaller() {\r\n  useMainActorDefault() // error\r\n}\r\n```\r\n\r\nCurrently gated behind `-enable-experimental-feature IsolatedDefaultArguments`.\r\n\r\nResolves https://github.com/apple/swift/issues/58177",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 1654,
        "deletions": 114,
        "changed_files": 58,
        "created_at": "2023-09-27T05:28:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Pending proposal and Swift Evolution process, do not merge yet.\r\n\r\nThis generally will allow tasks to be launched/spawned immediately on a specific executor or actor, and handle all the associated isolation.\r\n\r\nResolves rdar://107072140",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-09-27T05:00:26Z",
        "closed_at": "2023-09-27T15:55:20Z",
        "merged_at": "2023-09-27T15:55:20Z",
        "body": "Fix TuplePackExtractInst forwarding operand and add an assert to prevent these problems in the future.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-09-27T03:49:06Z",
        "closed_at": "2023-09-29T05:47:20Z",
        "merged_at": "2023-09-29T05:47:20Z",
        "body": "We cut off a sentence, this corrects that issue.\r\n\r\nresolves rdar://115519046\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-27T03:18:19Z",
        "closed_at": "2023-09-27T17:03:57Z",
        "merged_at": "2023-09-27T17:03:57Z",
        "body": "Let's add the embedded stdlib into the nightly toolchains on swift.org.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 270,
        "deletions": 248,
        "changed_files": 3,
        "created_at": "2023-09-27T03:14:38Z",
        "closed_at": "2023-09-27T15:53:47Z",
        "merged_at": "2023-09-27T15:53:47Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-27T03:08:17Z",
        "closed_at": "2023-09-27T14:00:37Z",
        "merged_at": "2023-09-27T14:00:37Z",
        "body": "Use PrunedLiveness' new `extendToNonUse` API to extend liveness across overlapping access scopes.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 74,
        "deletions": 29,
        "changed_files": 8,
        "created_at": "2023-09-27T01:08:30Z",
        "closed_at": "2023-10-02T16:22:53Z",
        "merged_at": "2023-10-02T16:22:53Z",
        "body": "Doing so fits better into conjunction model which leads to more granular control\r\nover what variables are brought into scope during `where` clause expression checking.\r\n\r\nThese changes also remove \"one-way bind\" flag from \"for-in\" statement target.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-27T01:01:02Z",
        "closed_at": "2023-10-03T02:34:16Z",
        "merged_at": "2023-10-03T02:34:16Z",
        "body": "Currently, we get warnings like this:\r\n\r\n```\r\n[1/13] Generating /Users/kuba/swift-github-main/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/./lib/swift/macosx/Cxx.swiftmodule/arm64-apple-macos.swiftmodule\r\n<unknown>:0: warning: module interfaces are only supported with -enable-library-evolution\r\n<unknown>:0: warning: module interfaces are only supported with -enable-library-evolution\r\n[13/13] Generating /Users/kuba/swift-github-main/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/lib/swift/embedded/Swift.swiftmodule/arm64-apple-macos.swiftmodule\r\n<unknown>:0: warning: module interfaces are only supported with -enable-library-evolution\r\n<unknown>:0: warning: module interfaces are only supported with -enable-library-evolution\r\n```\r\n\r\nLet's fix it (by not generating the .swiftinterface for these fragile modules), for both the embedded stdlib, and the Cxx module.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-27T00:17:18Z",
        "closed_at": "2023-10-03T16:04:20Z",
        "merged_at": "2023-10-03T16:04:20Z",
        "body": "We currently get a warning during the embedded stdlib build...\r\n```\r\n/Users/kuba/swift-github-main/build/Ninja-RelWithDebInfoAssert/swift-macosx-arm64/stdlib/public/core/8/FloatingPointTypes.swift:468:5: warning: default will never be executed\r\n    @unknown default:\r\n    ^\r\n```\r\n...because the embedded stdlib is built without resilience on and therefore enums cannot get unknown future cases. Let's fix the warning.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-26T23:24:16Z",
        "closed_at": "2023-09-27T17:03:13Z",
        "merged_at": "2023-09-27T17:03:13Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-26T23:12:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!-- What's in this pull request? -->\r\nAdd error diagnostic when an expression macro is used as the default argument per SE-0382. Using a macro as a sub expression in default argument position is still allowed as expression macros behave the same as built-in magic literals.\r\n\r\n<!--\r\nIf this pull request resolves any GitHub issues, link them.\r\nFor information about linking a pull request to an issue, see:\r\nhttps://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\r\n-->\r\nrdar://115674594\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/main/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 17,
        "changed_files": 11,
        "created_at": "2023-09-26T23:09:52Z",
        "closed_at": "2023-09-28T14:04:18Z",
        "merged_at": "2023-09-28T14:04:18Z",
        "body": "This fixes a problem when emitting debuginfo in IRGen where we might have an \"inlined at\" debuginfo reference to an unspecialized function, which in turn causes it to get lazily emitted, which crashes in embedded Swift. See the attached testcase for a small reproducer.\r\n\r\n```\r\nAssertion failed: (!loweredFunctionHasGenericArguments(f)), function addLazyFunction, file GenDecl.cpp, line 1557.\r\nStack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):\r\n7  swift-frontend           0x00000001053e89e8 swift::irgen::IRGenerator::noteUseOfTypeGlobals(swift::NominalTypeDecl*, bool, swift::irgen::RequireMetadata_t) (.cold.1) + 0\r\n8  swift-frontend           0x0000000100a48c2c swift::irgen::IRGenerator::addLazyFunction(swift::SILFunction*) + 368\r\n9  swift-frontend           0x0000000100a4ab24 swift::irgen::IRGenModule::getAddrOfSILFunction(swift::SILFunction*, swift::ForDefinition_t, bool, bool) + 484\r\n10 swift-frontend           0x0000000100b547f4 (anonymous namespace)::IRGenDebugInfoImpl::getOrCreateScope(swift::SILDebugScope const*) + 812\r\n11 swift-frontend           0x0000000100b5a680 (anonymous namespace)::IRGenDebugInfoImpl::getOrCreateContext(swift::DeclContext*) + 144\r\n12 swift-frontend           0x0000000100b54e7c (anonymous namespace)::IRGenDebugInfoImpl::emitFunction(swift::SILDebugScope const*, llvm::Function*, swift::SILFunctionTypeRepresentation, swift::SILType, swift::DeclContext*, llvm::StringRef) + 1280\r\n13 swift-frontend           0x0000000100b55aa4 (anonymous namespace)::IRGenDebugInfoImpl::emitFunction(swift::SILFunction&, llvm::Function*) + 160\r\n14 swift-frontend           0x0000000100b8d968 (anonymous namespace)::IRGenSILFunction::emitSILFunction() + 840\r\n15 swift-frontend           0x0000000100b8d078 swift::irgen::IRGenModule::emitSILFunction(swift::SILFunction*) + 1528\r\n```\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-09-26T23:07:38Z",
        "closed_at": "2023-10-08T17:41:57Z",
        "merged_at": "2023-10-08T17:41:57Z",
        "body": "Because swift_swap_compiler_if_needed updates the compiler ID to Clang, we need to account for it when deciding to add a dependencies on clang. Otherwise, the sourcekit build could fail due to lack of clang dependency.\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-26T22:52:51Z",
        "closed_at": "2023-09-27T15:19:45Z",
        "merged_at": "2023-09-27T15:19:45Z",
        "body": "Equivalent change to `main`'s: https://github.com/apple/swift/pull/68775\r\n-----------------------------------------------\r\n\r\nFunctionally reverts #67928.\r\nWe must still support potentially older drivers which are not ready for this change due to: apple/swift-driver#1438\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-26T22:47:16Z",
        "closed_at": "2023-09-27T03:48:53Z",
        "merged_at": "2023-09-27T03:48:53Z",
        "body": "We do allow `SourceLoc` to point to the address right after the buffer ends to point to the end of a file.\r\n\r\nFixes an issue found by the SourceKit stress tester.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 137,
        "deletions": 44,
        "changed_files": 5,
        "created_at": "2023-09-26T22:29:24Z",
        "closed_at": "2023-10-04T21:48:04Z",
        "merged_at": "2023-10-04T21:48:04Z",
        "body": "when calculating constrained function type. Also, add requirements for differentiable results as well.\r\n\r\nFixes #65487",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 129,
        "deletions": 21,
        "changed_files": 8,
        "created_at": "2023-09-26T21:53:21Z",
        "closed_at": "2023-09-27T19:54:36Z",
        "merged_at": "2023-09-27T19:54:35Z",
        "body": "Extend exportability checking to support non-public imports in some cases. Error on conformances imported from a non-public import is used in API, and on typealiases that desugars to a type behind a non-public import is used in API. Do no use the exportability checking logic for other checks that are already handled by the checks on the access levels.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-26T20:56:15Z",
        "closed_at": "2023-09-27T15:20:23Z",
        "merged_at": "2023-09-27T15:20:23Z",
        "body": "Reverts https://github.com/apple/swift/pull/67928.\r\nWe must still support potentially older drivers which are not ready for this change due to: https://github.com/apple/swift-driver/pull/1438",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2023-09-26T20:53:19Z",
        "closed_at": "2023-09-27T01:33:27Z",
        "merged_at": "2023-09-27T01:33:27Z",
        "body": "Importing a package module rebuilt from its swiftinterface loses all package decls, it is reported as an error. Make the error point to the import.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 727,
        "deletions": 622,
        "changed_files": 182,
        "created_at": "2023-09-26T20:53:12Z",
        "closed_at": "2023-09-27T16:15:09Z",
        "merged_at": "2023-09-27T16:15:09Z",
        "body": "Merge conflict while removing `nocapture` from\r\n`s21move_function_dbginfo20addressOnlyValueTestyyxAA1PRzlF`. Resolution\r\nwas to remove nocapture from the expected output in both cases:\r\n```\r\n// CHECK-LABEL: define swiftcc void @\"$s21move_function_dbginfo20addressOnlyValueTestyyxAA1PRzlF\"(ptr noalias[-nocapture-] %0, ptr %T, ptr %T.P)\r\n```\r\n\r\nConflict cause: 4858cb62253823f4467d8ea7d1cbae526acad66c\r\nThis is the same as the original change to this file. The conflict seems\r\nto be due to the next line changing, when moving from llvm.dbg.addr to\r\nllvm.dbg.value.\r\n\r\nConflicts:\r\n  - test/DebugInfo/move_function_dbginfo.swift",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 417,
        "deletions": 289,
        "changed_files": 1,
        "created_at": "2023-09-26T20:34:01Z",
        "closed_at": "2023-09-27T00:34:26Z",
        "merged_at": "2023-09-27T00:34:26Z",
        "body": "The skip-function-bodies.swift test previously relied on `-emit-sorted-sil` to control the order of SIL emission for matching CHECK: lines. I found that this made the test too difficult to evolve, so I've re-written the test to instead use SILGen's natural output order. This makes it much more straightforward to add new test cases at the right location in the file.\r\n\r\nThere are a number of additional improvements to the test:\r\n- SILGen without any function body skipping is now checked as a baseline to ensure that all the checks are in the right order. Previously, most of the negative CHECK lines were not properly ordered in the file, so they could have missed regressions.\r\n- Every declaration in the test has a set of exhaustive CHECK lines covering each of the outputs explicitly. While more verbose, it should be clearer what is expected for every declaration.\r\n- Module interfaces are emitted with the proper flags and are typechecked to verify they are valid.\r\n- Superfluous diagnostics (e.g. unused variables) have been minimized to improve the experience of debugging failures.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 289,
        "deletions": 426,
        "changed_files": 1,
        "created_at": "2023-09-26T20:20:48Z",
        "closed_at": "2023-09-26T20:30:22Z",
        "merged_at": "2023-09-26T20:30:22Z",
        "body": "This reverts commit 43e36cc184bfdaff4cd5b0913420712f80a9b934. This was merged automatically but broke Windows CI",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-09-26T19:32:47Z",
        "closed_at": "2023-09-27T17:02:49Z",
        "merged_at": "2023-09-27T17:02:49Z",
        "body": "Some embedded tests today crash under arm64e -- we need to properly authenticate the ptrauth signed \"destroy\" function pointer when making the runtime call to destroy a class instance.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-09-26T19:26:45Z",
        "closed_at": "2023-10-11T03:49:37Z",
        "merged_at": "2023-10-11T03:49:37Z",
        "body": "rdar://113969026\r\nrdar://115794818\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-26T18:34:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Empty commit to see some tests.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1020,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2023-09-26T18:23:59Z",
        "closed_at": "2023-09-27T15:08:26Z",
        "merged_at": "2023-09-27T15:08:26Z",
        "body": "Previously we allowed an attached `try` or `await` on an `if`/`switch` expression to cover the branches, which does not match what was proposed, and is especially harmful for multi-statement cases. Fix the effect handling logic such that we reset effect coverage for `if`/`switch` expressions similar to closures, but continue to maintain the state needed for rethrows checking. This means that we'll now consistently diagnose `try` and `await` on `if`/`switch` expressions as invalid.\r\n\r\nrdar://116066748",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-09-26T16:58:34Z",
        "closed_at": "2023-09-26T22:31:28Z",
        "merged_at": "2023-09-26T22:31:28Z",
        "body": "We were checking that the generated files matched the code in CodeGeneration in a number of jobs, which was still a relict from when `gyb_syntax_support` lived in the swift repo and was thus possible to break with a PR to the swift repo. Now, CodeGeneration lives exclusively in the swift-syntax repo and thus the checked in generated files can only be broken by a swift-syntax change.\r\n\r\nReduce the number of jobs that verify the generated files to:\r\n- swift-syntax macOS PR testing (no need to run CodeGeneration on macOS and Linux)\r\n- `buildbot_all_platforms,tools=RA,stdlib=RA`, which is used fro the macOS Pull Request status bot so we get signal if two PRs in swift-syntax raced and broke the checked in generated files\r\n\r\nAnd while at it, also only verify the formatting of swift-syntax on macOS. There\u2019s no need to verify it on all platforms.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-09-26T16:33:32Z",
        "closed_at": "2023-09-27T01:37:04Z",
        "merged_at": "2023-09-27T01:37:04Z",
        "body": "Follow up to https://github.com/apple/swift/pull/68555.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 239,
        "deletions": 116,
        "changed_files": 17,
        "created_at": "2023-09-26T06:40:00Z",
        "closed_at": "2023-09-29T16:42:57Z",
        "merged_at": "2023-09-29T16:42:57Z",
        "body": "Function bodies are skipped during typechecking when one of the `-experimental-skip-*-function-bodies` flags is passed to the frontend. This was implemented by setting the \"body kind\" of an `AbstractFunctionDecl` during decl checking in `TypeCheckDeclPrimary`. This approach had a couple of issues:\r\n\r\n- It is incompatible with skipping function bodies during lazy typechecking, since the skipping is only evaluated during a phase of eager typechecking.\r\n- It prevents skipped function bodies from being parsed on-demand (\"skipped\" is a state that is distinct from \"parsed\", when they ought to be orthogonal). This needlessly prevented complete module interfaces from being emitted with `-experimental-skip-all-function-bodies`.\r\n    \r\nStoring the skipped status of a function separately from body kind and requestifying the determination of whether to skip a function solves these problems.\r\n    \r\nResolves rdar://116020403",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-26T05:29:08Z",
        "closed_at": "2023-09-26T09:40:54Z",
        "merged_at": "2023-09-26T09:40:54Z",
        "body": "To resolve CI failure at <https://ci.swift.org/job/oss-swift_tools-RA_stdlib-DA_test-simulators/3217/>.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 426,
        "deletions": 289,
        "changed_files": 1,
        "created_at": "2023-09-26T04:10:03Z",
        "closed_at": "2023-09-26T20:12:47Z",
        "merged_at": "2023-09-26T20:12:46Z",
        "body": "The skip-function-bodies.swift test previously relied on `-emit-sorted-sil` to control the order of SIL emission for matching CHECK: lines. I found that this made the test too difficult to evolve, so I've re-written the test to instead check SILGen's output by extracting just the `string_literal` lines and then sorting them. This makes it much more straightforward to add new test cases at the right location in the file.\r\n\r\nThere are a number of additional improvements to the test:\r\n- SILGen without any function body skipping is now checked as a baseline to ensure that all the checks are in the right order. Previously, most of the negative CHECK lines were not properly ordered in the file, so they could have missed regressions.\r\n- Every declaration in the test has a set of exhaustive CHECK lines covering each of the outputs explicitly. While more verbose, it should be clearer what is expected for every declaration.\r\n- Module interfaces are emitted with the proper flags and are typechecked to verify they are valid.\r\n- Superfluous diagnostics (e.g. unused variables) have been minimized to improve the experience of debugging failures.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-26T03:51:23Z",
        "closed_at": "2023-09-26T15:48:38Z",
        "merged_at": "2023-09-26T15:48:38Z",
        "body": "Commit 5bc036661c60 introduced changes to\r\ndistributed_id_system_ownership_verify_sil.swift that don't work unless you have SwiftCompilerSources enabled. Gating test on that.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 877,
        "deletions": 192,
        "changed_files": 17,
        "created_at": "2023-09-26T01:39:55Z",
        "closed_at": "2023-09-27T01:01:55Z",
        "merged_at": "2023-09-27T01:01:55Z",
        "body": "Add the new method to the various versions of PrunedLiveness.  It differs from calling `updateForUse(...,/lifetimeEnding=*/false)` because the latter changes lifetime-ending-ness of the instruction.  Specifically, it makes the instruction non-lifetime-ending if it was previously lifetime-ending.  Updated the field-sensitive version to correctly have this behavior for `updateForUse` as well.  Added in-IR tests to verify the behavior.\r\n\r\nUsed the new members in lifetime extension.  \r\n\r\nIn a follow-up, the new member should be used to extend across access scopes in `extendLivenessThroughOverlappingAccess`.\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 117,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-25T23:05:06Z",
        "closed_at": "2023-09-26T23:10:29Z",
        "merged_at": "2023-09-26T23:10:29Z",
        "body": "Adding an example test that triggers an interesting pattern from refcounting perspective: Stack promoted class object that still needs (strong) refcounting to happen on it, and needs the destructor to be called on the last swift_release, but it must not be free()'d (as it's stack allocated).",
        "comments": 2
    }
]