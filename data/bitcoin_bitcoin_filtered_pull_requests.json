[
    {
        "merged": false,
        "additions": 5,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-18T08:36:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This check fails on slow runners, such as s390x qemu.\r\n\r\nFix it by using mocktime.\r\n\r\nSee https://github.com/bitcoin/bitcoin/pull/28523#discussion_r1357980527",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 27,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-18T03:59:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Improve error messaging in `loadtxoutset` to provide a more user-friendly error message when the utxo snapshot file size is insufficient to contain the necessary metadata structure (40 bytes).\r\n\r\n- Error message output before the change (current master):\r\n```\r\n./src/bitcoin-cli -datadir=${AU_DATADIR} loadtxoutset ${AU_DATADIR}/utxo-111.dat\r\nerror code: -1\r\nerror message:\r\nAutoFile::read: end of file: iostream error\r\n```\r\n\r\n- Error message output after the change:\r\n```\r\n./src/bitcoin-cli -datadir=${AU_DATADIR} loadtxoutset ${AU_DATADIR}/utxo-111.dat\r\nerror code: -32603\r\nerror message:\r\nUnable to load UTXO snapshot, the file /tmp/.test_utxo_3/utxo-111.dat has an invalid size.\r\n```\r\n\r\n<details>\r\n<summary>Another simpler alternative to this code change is just to catch the error on the de-serialization.</summary>\r\n\r\n```diff\r\ndiff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp\r\nindex 6d2b84cb6..2f799a975 100644\r\n--- a/src/rpc/blockchain.cpp\r\n+++ b/src/rpc/blockchain.cpp\r\n@@ -2749,7 +2749,16 @@ static RPCHelpMan loadtxoutset()\r\n     }\r\n \r\n     SnapshotMetadata metadata;\r\n-    afile >> metadata;\r\n+\r\n+    try {\r\n+        // Read data from the file\r\n+        afile >> metadata;\r\n+    } catch (const std::exception& e) {\r\n+        // Handle any exception, which includes reaching the end of the file e.g. file size < sizeOf(metadata)\r\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strprintf(\"Unable to load UTXO snapshot, \"\r\n+            \"couldn't read snapshot metadata from file %s.\\nThis error is usually \"\r\n+            \"due to the file size being too small.\\n%s\", path.u8string(), e.what()));\r\n+    }\r\n \r\n     uint256 base_blockhash = metadata.m_base_blockhash;\r\n     if (!chainman.GetParams().AssumeutxoForBlockhash(base_blockhash).has_value()) {\r\n```\r\n</details>\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2023-10-17T16:37:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Also doing some de-dublications. I kept the second commit separate for now as I am not 100% if this is overdoing it and makes it harder to reason about. But it also makes it easier to add more cases where we change more data.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 22,
        "deletions": 22,
        "changed_files": 8,
        "created_at": "2023-10-17T15:55:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Final changes for v24.2.\r\nPR for bitcoincore.org is here: https://github.com/bitcoin-core/bitcoincore.org/pull/993.\r\n\r\n24.2rc1 was tagged 1 week ago: https://github.com/bitcoin/bitcoin/releases/tag/v24.2rc1\r\nrc1 bins availalble shortly.\r\nCurrently a draft, but not expecting further changes.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 108,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T15:42:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "v25.1 has [been tagged](https://github.com/bitcoin/bitcoin/releases/tag/v25.1).\r\nFor merge post-bin-availability.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-17T15:01:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Takes care of one of the open Todos in the assumeutxo functional test. Since an unknown block could be any hash, I simply chose one placeholder, it could also be a random string though.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 70,
        "deletions": 59,
        "changed_files": 28,
        "created_at": "2023-10-17T10:28:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "We currently use a mix of both, consolidate to the (less verbose) later.\r\n\r\n```cpp    \r\nstd::is_integral<T>::value -> std::is_integral_v<T>\r\nstd::is_same<A,B>::value -> std::is_same_v<A,B>\r\nstd::decay<T>::type -> std:decay_t<T>\r\nstd::common_type<D>::type -> std::common_type_t<D>\r\nstd::is_lvalue_reference<T>::value -> std::is_lvalue_reference_v<T>\r\nstd::remove_cv<T>::type -> std::remove_cv_t<T>\r\nstd::enable_if<A,B>::type -> std::enable_if_t<A,B>\r\nstd::is_convertible<A,B>::value -> std::is_convertible_v<A,B>\r\nstd::underlying_type<T>::type -> std::underlying_type_t<T>\r\n```\r\n\r\nSee https://clang.llvm.org/extra/clang-tidy/checks/modernize/type-traits.html.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T02:59:22Z",
        "closed_at": "2023-10-17T22:41:06Z",
        "merged_at": null,
        "body": null,
        "comments": 4
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2023-10-16T23:25:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": "libconsensus currently can't be used in projects that still use the [ANSI C](https://en.wikipedia.org/wiki/ANSI_C) (=ISO C/C89/C90) standard, as the header uses single-line-comments which are only supported since C99:\r\n\r\n```\r\n$ echo '#include \"./src/script/bitcoinconsensus.h\"\\nint main() {}' > consensus_test.c\r\n$ gcc -ansi -c consensus_test.c\r\nIn file included from consensus_test.c:1:\r\n./src/script/bitcoinconsensus.h:1:1: error: C++ style comments are not allowed in ISO C90\r\n    1 | // Copyright (c) 2009-2010 Satoshi Nakamoto\r\n      | ^\r\n./src/script/bitcoinconsensus.h:1:1: note: (this will be reported only once per input file)\r\nIn file included from consensus_test.c:1:\r\n./src/script/bitcoinconsensus.h:96:8: warning: extra tokens at end of #endif directive [-Wendif-labels]\r\n   96 | #endif // BITCOIN_SCRIPT_BITCOINCONSENSUS_H\r\n      |        ^\r\n```\r\n\r\nThis PR fixed this by changing all single-line comments to /* ... */ comments instead.\r\n\r\nI have no knowledge about who current and potential future users of this library are and if this would ever be an issue (apparently it wasn't until now), but it feels to me that the change is trivial enough to be worth it to potentially having to avoid users having to patch the header. As an alternative, we could specify the minimum needed version (i.e. C99) somewhere.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-10-16T20:57:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "see https://github.com/bitcoin/bitcoin/pull/27850#discussion_r1349505585\r\n\r\nOpenBSD and FreeBSD don't have `chattr` but they do have `chflags`, use that method to make the block file immutable for the reindex_readonly test.\r\n\r\nWritten and tested on a VPS running FreeBSD:\r\n```\r\nFreeBSD freebsd-13-1 13.2-RELEASE-p4 FreeBSD 13.2-RELEASE-p4 GENERIC amd64\r\n```",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-16T20:41:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Might fix https://github.com/bitcoin/bitcoin/issues/28620 \r\n\r\nThis PR only modifies the behavior of loadtxoutset to require a mandatory \"start\" string as a first parameter.\r\n\r\nThis change will allow to implement \"status\", \"abort\" or similar future parameters in follow-ups, without breaking the current RPC protocol with incompatible changes (if this were to be merged in the current release cycle)\r\n\r\nAlso, it is implemented in a minimalist way, to make it easy to review.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 165,
        "deletions": 87,
        "changed_files": 24,
        "created_at": "2023-10-16T18:29:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Builds on https://github.com/bitcoin/bitcoin/pull/28107\r\n\r\nTiny(<30 loc) set of changes that detects issues with fuzz targets in master, and longer term should make things safer.\r\n\r\nMost of this `GenTxid::Txid(Txid::FromUint256())` chaining can be removed by further work pushing the types \"up\", and maybe other helper functions that make them directly out of `COutPoint`s or similar since that appears to be a common pattern.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-10-16T14:19:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "It seems modern compilers don't realize that all invocations of operator\"\"_mst can be evaluated at compile time, despite the `constexpr` keyword.\r\n\r\nIn C++20 mode we can force them to evaluate at compile time using `consteval`, turning all the miniscript type constants into actual compile-time constants.\r\n\r\nThis should give a nice but not very important speedup for miniscript logic, but it's also a way to start testing C++20 features.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-16T11:22:45Z",
        "closed_at": "2023-10-17T08:51:59Z",
        "merged_at": "2023-10-17T08:51:59Z",
        "body": "This allows to merge the result from several servers (or just several folders) at the same time, instead of having to iterate over them.\r\n\r\nThis should also allow the fuzz engine (libFuzzer) to optimize the final merge result more, because all fuzz inputs from all folders are available at the same time.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 23,
        "changed_files": 8,
        "created_at": "2023-10-16T09:43:22Z",
        "closed_at": "2023-10-16T15:44:29Z",
        "merged_at": "2023-10-16T15:44:29Z",
        "body": "Final changes for `v25.1`.\r\nPR for bitcoincore.org is here: https://github.com/bitcoin-core/bitcoincore.org/pull/991.\r\nNo additional changes have been backported since rc1 (tagged 14 days ago), \r\nand no bugs or issues have been reported (test bins have been available for 9 days).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-15T23:53:17Z",
        "closed_at": "2023-10-16T00:08:51Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-10-15T15:22:11Z",
        "closed_at": "2023-10-17T09:20:30Z",
        "merged_at": "2023-10-17T09:20:30Z",
        "body": "Right now the `loadtxoutset` RPC call treats literally all files with a minimum size of 40 bytes (=size of metadata) as potential valid snapshot candidates and the waiting loop for seeing the metadata block hash in the headers chain is always entered, e.g.:\r\n```\r\n$ ./src/bitcoin-cli loadtxoutset ~/.vimrc\r\n<wait>\r\n\r\nbitcoind log:\r\n...\r\n2023-10-15T14:55:45Z [snapshot] waiting to see blockheader 626174207465730a7265626d756e207465730a656c62616e65207861746e7973 in headers chain before snapshot activation\r\n...\r\n```\r\nThere is no point in doing any further action though if we already know from the start that the UTXO snapshot loading won't be successful. This PR adds an assumeutxo parameter check immediately after the metadata is read in, so we can fail immediately on a mismatch:\r\n```\r\n$ ./src/bitcoin-cli loadtxoutset ~/.vimrc                                                                                      \r\nerror code: -32603                                                  \r\nerror message:                                                      \r\nUnable to load UTXO snapshot, assumeutxo block hash in snapshot metadata not recognized (626174207465730a7265626d756e207465730a656c62616e\r\n65207861746e7973)\r\n```\r\nThis way, users who mistakenly try to load files that are not snapshots don't have to wait 10 minutes (=the block header waiting timeout) anymore to get a negative response. If a file is loaded which is a valid snapshot (referencing to an existing block hash), but one which doesn't match the parameters, the feedback is also faster, as we don't have to wait anymore to see the hash in the headers chain before getting an error.\r\n\r\nThis is also partially fixes #28621.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 124,
        "deletions": 101,
        "changed_files": 3,
        "created_at": "2023-10-13T19:22:38Z",
        "closed_at": "2023-10-17T22:28:05Z",
        "merged_at": "2023-10-17T22:28:05Z",
        "body": "So far, the same algorithm is used to compute an (upper bound on) the maximum witness size for both P2WSH and P2TR miniscript. That's unfortunate, because it means fee estimations for P2TR miniscript will miss out on the generic savings brought by P2TR witnesses (smaller signatures and public keys, specifically).\r\n\r\nFix this by making the algorithm use script context specification calculations, and add tests for it. Also included is a cleanup for the tests to avoid mutable globals, as I found it hard to reason about what exactly was being tested.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T16:11:51Z",
        "closed_at": "2023-10-15T09:08:40Z",
        "merged_at": "2023-10-15T09:08:39Z",
        "body": "This should be less controversial than commit 151a2b189c3561dda2bb7de809306c1cfeb40e23. The overall size of the qa-assets repo is reduced further from 1.9GB to 1.6GB. Also, the runtime to iterate on the resulting folder is reduced further from ~1699s to ~1149s (N=1).",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 140,
        "deletions": 115,
        "changed_files": 6,
        "created_at": "2023-10-13T14:35:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The `Socks5()` function which does the SOCKS5 handshake with the SOCKS5 proxy sends bytes to the socket without retrying partial writes.\r\n\r\n`send(2)` may write only part of the provided data and return. In this case the caller is responsible for retrying the operation with the remaining data. Change `Socks5()` to do that. There is already a method `Sock::SendComplete()` which does exactly that, so use it in `Socks5()`.\r\n\r\nA minor complication for this PR is that `Sock::SendComplete()` takes `std::string` argument whereas `Socks5()` has `std::vector<uint8_t>`. Thus the necessity for the first commit. It is possible to do also in other ways - convert the data in `Socks5()` to `std::string` or have just one `Sock::SendComplete()` that takes `void*` and change the callers to pass `str.data(), str.size()` or `vec.data(), vec.size()`.\r\n\r\nThis came up while testing https://github.com/bitcoin/bitcoin/pull/27375.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-13T10:19:42Z",
        "closed_at": "2023-10-17T16:05:56Z",
        "merged_at": "2023-10-17T16:05:56Z",
        "body": "Also:\r\n* Update test TODOs\r\n* Fix off-by-4 typo in test, remove `struct` import",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-12T15:50:20Z",
        "closed_at": "2023-10-13T16:32:30Z",
        "merged_at": "2023-10-13T16:32:30Z",
        "body": "Two recently added tests (PR #28625 / commit 2e31250027ac580a7a72221fe2ff505b30836175 and PR #28634 / commit 3bb51c29df596aab2c1fde184667cee435597715) introduced bugs by wrongly using the `assert_debug_log` helper:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/5ea4fc05edde66c5c90383bc054590dfbdb2b645/test/functional/feature_assumeutxo.py#L84-L85 (already fixed in https://github.com/bitcoin/bitcoin/pull/28639)\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/5ea4fc05edde66c5c90383bc054590dfbdb2b645/test/functional/p2p_v2_transport.py#L148\r\nhttps://github.com/bitcoin/bitcoin/blob/5ea4fc05edde66c5c90383bc054590dfbdb2b645/test/functional/p2p_v2_transport.py#L159\r\n\r\nInstead of passing the expected debug string in a list as expected, it was passed as bare string, which is then interpretered as a list of characters, very likely leading the debug log assertion pass even if the intended message is not appearing. Thanks to maflcko for discovering: https://github.com/bitcoin/bitcoin/pull/28625#discussion_r1356489861\r\n\r\nIn order to avoid bugs like this in the future, enforce that the `{un}expected_msgs` parameters are lists, as discussed in https://github.com/bitcoin/bitcoin/pull/28625#discussion_r1356864233. Using mypy might be an alternative, but I guess it takes quite a bit of effort to properly integrate this into CI for the whole functional test suite (including taking care of false-positives), so I decided to go with the simpler \"manual asserts\" hack. Suggestions are very welcome of course.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-12T14:54:11Z",
        "closed_at": "2023-10-13T08:16:59Z",
        "merged_at": "2023-10-13T08:16:59Z",
        "body": "Seems odd that this has to be done, but for now there are (unknown) size limits on the qa-assets repo. Also, a larger size means that cloning and iterating over the files takes a longer time.\r\n\r\nNot sure how to measure the net impact of this, but with some backups reverting this commit, it can be limited on the downside?",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 10,
        "changed_files": 4,
        "created_at": "2023-10-12T14:12:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR is a resurrection of https://github.com/bitcoin/bitcoin/pull/28623:\r\n\r\n> This should fix [bitcoin/bitcoin/actions/runs/6457002476/job/17527598426#step:7:240](https://github.com/bitcoin/bitcoin/actions/runs/6457002476/job/17527598426#step:7:240):\r\n> \r\n> ```\r\n> + git clone --depth=1 https://github.com/bitcoin-core/qa-assets /Users/runner/work/bitcoin/bitcoin/ci/scratch/qa-assets\r\n> Cloning into '/Users/runner/work/bitcoin/bitcoin/ci/scratch/qa-assets'...\r\n> error: RPC failed; curl 18 HTTP/2 stream 5 was reset\r\n> error: 54975 bytes of body are still expected\r\n> fetch-pack: unexpected disconnect while reading sideband packet\r\n> fatal: early EOF\r\n> fatal: fetch-pack: invalid index-pack output\r\n> Error: Process completed with exit code 128.\r\n> ```\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-12T10:05:24Z",
        "closed_at": "2023-10-12T15:04:32Z",
        "merged_at": "2023-10-12T15:04:32Z",
        "body": "After recent tool updates in the \"tidy\" CI task, the one instance of `NOLINTNEXTLINE` is not required anymore.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-12T09:55:51Z",
        "closed_at": "2023-10-12T15:18:12Z",
        "merged_at": "2023-10-12T15:18:12Z",
        "body": "Needed to bump the EOL date and unlock clang-17.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-10-12T09:16:36Z",
        "closed_at": "2023-10-13T09:14:59Z",
        "merged_at": "2023-10-13T09:14:59Z",
        "body": "See commit messages",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-11T17:53:43Z",
        "closed_at": "2023-10-18T09:33:11Z",
        "merged_at": "2023-10-18T09:33:11Z",
        "body": "This PR adds a missing release note for #27460.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T20:04:29Z",
        "closed_at": "2023-10-12T07:35:13Z",
        "merged_at": "2023-10-12T07:35:13Z",
        "body": "This PR adds test coverage for the \"missing garbage terminator\" detection on incoming v2 transport (BIP324) connections:\r\nhttps://github.com/bitcoin/bitcoin/blob/04265ba9378efbd4c35b33390b1e5cf246d420a9/src/net.cpp#L1205-L1209\r\n\r\nNote that this always happens at the same exact amount of bytes sent in (after 64 + 4095 + 16 = 4175 bytes), if at no point, the last 16 bytes of potential authentication data match the garbage, i.e. all the previous bytes after the ellswift pubkey. To keep it simple, we just send in zero-value bytes here and verify that the detection hits exactly after the last bytes is sent.\r\n\r\nAFAICT, with this PR all the v2 transport errors that can be triggered in this simple way of \"just open a socket and send in a fixed byte-string\" are covered. For more advanced test, we need BIP324 cryptography in the test framework in order to perform a v2 handshake etc. (PRs #28374, #24748).",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T18:46:26Z",
        "closed_at": "2023-10-12T07:11:57Z",
        "merged_at": "2023-10-12T07:11:57Z",
        "body": "When building the `qt` package, it expects that the default (in Qt's view) Android API platform is installed.\r\n\r\nDuring the recent Qt version [update](https://github.com/bitcoin/bitcoin/pull/28561), it has been changed:\r\n```diff\r\n--- a/mkspecs/features/android/sdk.prf\r\n+++ b/mkspecs/features/android/sdk.prf\r\n@@ -1,6 +1,6 @@\r\n API_VERSION_TO_USE = $$(ANDROID_API_VERSION)\r\n isEmpty(API_VERSION_TO_USE): API_VERSION_TO_USE = $$API_VERSION\r\n-isEmpty(API_VERSION_TO_USE): API_VERSION_TO_USE = android-28\r\n+isEmpty(API_VERSION_TO_USE): API_VERSION_TO_USE = android-31\r\n \r\n ANDROID_JAR_FILE = $$ANDROID_SDK_ROOT/platforms/$$API_VERSION_TO_USE/android.jar\r\n !exists($$ANDROID_JAR_FILE) {\r\n```\r\n\r\nThis PR fixes the CI for the Android task and addresses https://github.com/bitcoin/bitcoin/pull/28561#issuecomment-1749180177.\r\n\r\nQt [docs](https://doc.qt.io/qt-5/android.html) still claim that Android API Level 21 and up are supported, however, I did not test every possible configuration.\r\n\r\nNOTE: https://github.com/bitcoin/bitcoin/pull/28611 is still valid.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-10T17:09:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "`bitcoind` nodes send `getaddr` messages only to outbound nodes (and ignore `getaddr` received by outgoing connections).\r\nThe python p2p node should mirror this behavior by not sending a `getaddr` message when it is not the initiator of the connection.\r\nThis is currently causing several unnecessary messages being sent and then ignored (`Ignoring \"getaddr\" from outbound-full-relay connection.`) in tests like `p2p_add_connections.py`.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-10T11:01:59Z",
        "closed_at": "2023-10-13T09:16:40Z",
        "merged_at": "2023-10-13T09:16:40Z",
        "body": "There were bare sleep statements in the script where it was unclear why they were needed and I think they could also be replaced by existing helpers.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-10T10:49:27Z",
        "closed_at": "2023-10-16T17:29:43Z",
        "merged_at": "2023-10-16T17:29:43Z",
        "body": "I forgot to do this in https://github.com/bitcoin/bitcoin/commit/7d5815293ed8a3dea68b61a78944e410f02b147f.\r\nAdd a test so it's impossible to forget.",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 11,
        "changed_files": 5,
        "created_at": "2023-10-10T09:39:25Z",
        "closed_at": "2023-10-12T10:00:19Z",
        "merged_at": "2023-10-12T10:00:19Z",
        "body": "This is one way to fix #28600\r\n\r\nRecently usage of undeclared functions became an error rather than a warning, in C2x. https://reviews.llvm.org/D122983?id=420290\r\n\r\nThis change has migrated into the build tools of Ubuntu 23.10 which now causes the USDT tests to fail to compile, see\r\nhttps://github.com/bitcoin/bitcoin/issues/28600\r\n\r\nI think there are various potential fixes:\r\n\r\n1. Manually declare the functions we use\r\n2. Fix imports so that manual declarations aren't needed\r\n3. Revert the new C2X behaviour and don't error on implicit function declarations\r\n\r\nI would have preferred solution 2, but I believe this will require changes to the upstream bcc package. Having played with the imports I can get things working in a standalone C program, using system headers, but when building the program from a python context as we do in the test it uses its own headers (bundled with the python lib) rather than the system ones, and manually importing (some) system headers results in definition mismatches. I also investigated explicitly importing required headers from the package, which use paths like `#import </virtual/bcc/bcc_helpers.h>`, but this seems more obtuse and brittle than simply ignoring the warning.\r\n \r\nTherefore I think that until the upstream python pacakge fixes their declarations, we should fix this by setting `-Wno-error=implicit-function-declaration` for the tracing programs.\r\n\r\ncc maflcko 0xB10C ",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-10T09:38:31Z",
        "closed_at": "2023-10-17T08:49:07Z",
        "merged_at": "2023-10-17T08:49:07Z",
        "body": "jamesob excluded `test_utxo_snapshots.sh` from the shell linter with this explanation: \"Add the script to the shellcheck exception list since the quoted variables rule needs to be violated in order to get bitcoind to pick up on $EARLY_IBD_FLAGS.\" However, macrofake pointed out that single lines can be excluded from linting.\r\n\r\nThis fixes one fixable rule violation, excludes the rest of the offending lines from the linter and then removes the exclusion of the `test_utxo_snapshots.sh` file. Also adds documentation.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 62,
        "changed_files": 2,
        "created_at": "2023-10-10T09:19:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "First new point release of zeromq in two and a half years. Mostly bug fixes; the project also completed a relicense to the \"Mozilla Public License\".\r\n\r\nThis could go into master after branch-off.\r\n\r\nSee https://github.com/zeromq/libzmq/releases/tag/v4.3.5.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T07:55:11Z",
        "closed_at": "2023-10-11T18:25:38Z",
        "merged_at": "2023-10-11T18:25:38Z",
        "body": "This PR adds test coverage for the failed loading of an AssumeUTXO snapshot in case the referenced block hash doesn't match the parameters in the chainparams. Right now, I expect this would be the most common error-case for `loadtxoutset` out in the wild, as for mainnet the `m_assumeutxo_data` map is empty and this error condition would obviously always be triggered for any (otherwise valid, correctly encoded) snapshot. Note that this test-case is the simplest scenario and doesn't cover any of the TODO ideas mentioned at the top of the functional test yet.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T07:08:09Z",
        "closed_at": "2023-10-11T10:36:08Z",
        "merged_at": "2023-10-11T10:36:08Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-09T15:15:41Z",
        "closed_at": "2023-10-09T15:25:01Z",
        "merged_at": null,
        "body": "This should fix https://github.com/bitcoin/bitcoin/actions/runs/6457002476/job/17527598426#step:7:240:\r\n\r\n```\r\n+ git clone --depth=1 https://github.com/bitcoin-core/qa-assets /Users/runner/work/bitcoin/bitcoin/ci/scratch/qa-assets\r\nCloning into '/Users/runner/work/bitcoin/bitcoin/ci/scratch/qa-assets'...\r\nerror: RPC failed; curl 18 HTTP/2 stream 5 was reset\r\nerror: 54975 bytes of body are still expected\r\nfetch-pack: unexpected disconnect while reading sideband packet\r\nfatal: early EOF\r\nfatal: fetch-pack: invalid index-pack output\r\nError: Process completed with exit code 128.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 33,
        "changed_files": 5,
        "created_at": "2023-10-09T13:51:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This fixes: https://github.com/bitcoin/bitcoin/pull/28349#issuecomment-1748515277 (cross-compiling with C++20 for macOS). Qt doesn't build against the new Xcode, not sure why:\r\n```bash\r\n../../include/QtCore/5.15.10/QtCore/private/../../../../../src/corelib/kernel/qcore_mac_p.h:267:13: error: use of undeclared identifier 'os_activity_scope_enter'; did you mean 'os_activity_scope_state_s'?\r\n            os_activity_scope_enter(static_cast<os_activity_t>(*this), &state);\r\n            ^\r\n/root/bitcoin/depends/SDKs/Xcode-15.0-15A240d-extracted-SDK-with-libcxx-headers/usr/include/os/activity.h:122:16: note: 'os_activity_scope_state_s' declared here\r\ntypedef struct os_activity_scope_state_s {\r\n               ^\r\nIn file included from time/qtimezoneprivate_mac.mm:44:\r\nIn file included from ../../include/QtCore/5.15.10/QtCore/private/qcore_mac_p.h:1:\r\n../../include/QtCore/5.15.10/QtCore/private/../../../../../src/corelib/kernel/qcore_mac_p.h:273:13: error: use of undeclared identifier 'os_activity_scope_leave'\r\n            os_activity_scope_leave(&state);\r\n            ^\r\n../../include/QtCore/5.15.10/QtCore/private/../../../../../src/corelib/kernel/qcore_mac_p.h:304:20: error: use of undeclared identifier '_os_activity_current'; did you mean '_os_activity_start'?\r\nQT_MAC_WEAK_IMPORT(_os_activity_current);\r\n                   ^~~~~~~~~~~~~~~~~~~~\r\n                   _os_activity_start\r\n```\r\n\r\nI've compiled and tested excluding Qt (with master and #28349), and this is good enough to make C++20 a reality. See https://developer.apple.com/xcode/cpp/#c++20 for C++20 support in Apples libc++, some features landed with Xcode 14.3, although many more landed with Xcode 15.0.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-09T12:55:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Based on recent comments on #27596.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 143,
        "deletions": 128,
        "changed_files": 7,
        "created_at": "2023-10-09T12:41:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #28601, see https://github.com/bitcoin/bitcoin/pull/28403#discussion_r1325426430\r\n\r\nAdd Context Manager to manage the locking and unlocking of locked wallets with a passphrase during testing.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 76,
        "deletions": 28,
        "changed_files": 7,
        "created_at": "2023-10-09T09:47:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #28598\r\n\r\nThe UI experience for assume utxo still needs work. This PR makes the wallet UI safer by not rendering transactions as fully confirmed until the background validation is done.\r\n\r\nInstead it shows the same icon as when a transaction has 1 confirmation. This is quite conservative. The cost of tricking someone into accepting a fake coin, by giving them a invalid snapshot`*` and then mining a block on top of it, is higher than a regular doublespend by mining.\r\n\r\n![pending](https://github.com/bitcoin/bitcoin/assets/10217/a2a95190-a1a7-402e-822b-b0829d5bdf45)\r\n\r\n`* =` in the current implementation this involves giving someone a malicious binary or getting them to recompile\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-08T15:41:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #28603\r\n\r\nAdded suggested simplifications and implemented randomization\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T11:26:00Z",
        "closed_at": "2023-10-09T13:12:38Z",
        "merged_at": "2023-10-09T13:12:38Z",
        "body": "On the master branch @ d2b8c5e1234cdaff84bd1f60aea598d219cdac5e, building the `apk` target fails:\r\n```\r\n$ make -C src/qt apk\r\n...\r\n> Task :compileDebugJavaWithJavac FAILED\r\n/home/hebasto/git/gui/src/qt/android/src/org/qtproject/qt5/android/QtActivityDelegate.java:690: error: cannot find symbol\r\n                Display display = (Build.VERSION.SDK_INT < Build.VERSION_CODES.R)\r\n                                                                              ^\r\n  symbol:   variable R\r\n  location: class VERSION_CODES\r\n/home/hebasto/git/gui/src/qt/android/src/org/qtproject/qt5/android/QtActivityDelegate.java:692: error: cannot find symbol\r\n                        : m_activity.getDisplay();\r\n                                    ^\r\n  symbol:   method getDisplay()\r\n  location: variable m_activity of type Activity\r\n/home/hebasto/git/gui/src/qt/android/src/org/qtproject/qt5/android/QtActivityDelegate.java:833: error: cannot find symbol\r\n        float refreshRate = (Build.VERSION.SDK_INT < Build.VERSION_CODES.R)\r\n                                                                        ^\r\n  symbol:   variable R\r\n  location: class VERSION_CODES\r\n/home/hebasto/git/gui/src/qt/android/src/org/qtproject/qt5/android/QtActivityDelegate.java:835: error: cannot find symbol\r\n                : m_activity.getDisplay().getRefreshRate();\r\n                            ^\r\n  symbol:   method getDisplay()\r\n  location: variable m_activity of type Activity\r\n/home/hebasto/git/gui/src/qt/android/src/org/qtproject/qt5/android/QtLayout.java:95: error: cannot find symbol\r\n        Display display = (Build.VERSION.SDK_INT < Build.VERSION_CODES.R)\r\n                                                                      ^\r\n  symbol:   variable R\r\n  location: class VERSION_CODES\r\n/home/hebasto/git/gui/src/qt/android/src/org/qtproject/qt5/android/QtLayout.java:97: error: cannot find symbol\r\n                : ((Activity)getContext()).getDisplay();\r\n                                          ^\r\n  symbol:   method getDisplay()\r\n  location: class Activity\r\n/home/hebasto/git/gui/src/qt/android/src/org/qtproject/qt5/android/ExtractStyle.java:418: error: cannot find symbol\r\n            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q)\r\n                                                           ^\r\n  symbol:   variable Q\r\n  location: class VERSION_CODES\r\n/home/hebasto/git/gui/src/qt/android/src/org/qtproject/qt5/android/ExtractStyle.java:421: error: cannot find symbol\r\n                numStates = stateList.getStateCount();\r\n                                     ^\r\n  symbol:   method getStateCount()\r\n  location: variable stateList of type StateListDrawable\r\nNote: Some input files use or override a deprecated API.\r\nNote: Recompile with -Xlint:deprecation for details.\r\n8 errors\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':compileDebugJavaWithJavac'.\r\n> Compilation failed; see the compiler error output for details.\r\n\r\n* Try:\r\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\r\n\r\n* Get more help at https://help.gradle.org\r\n\r\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\r\nUse '--warning-mode all' to show the individual deprecation warnings.\r\nSee https://docs.gradle.org/6.6.1/userguide/command_line_interface.html#sec:command_line_warnings\r\n\r\nBUILD FAILED in 827ms\r\n...\r\n```\r\n\r\nFixing it by updating the Gradle tool's properties.",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 70,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-10-06T22:39:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Not all of the data in an address book entry was being copied to the watchonly and solvables wallets. This includes information such as whether the address was previously spent, and any receive requests that may exist. A test has been added to check that the previously spent information is copied, although it passes without the changes in this PR since this information is also regenerated when a transaction is loaded/added into a wallet.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 142,
        "deletions": 28,
        "changed_files": 4,
        "created_at": "2023-10-06T22:37:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Some incomplete/incorrect state as a result of migration can be mitigated/cleaned up by simply restarting the migrated wallets. We already do this for a wallet when it is migrated, but we do not for the new watchonly and solvables wallets that may be created. This PR introduces this behavior, in addition to creating those wallets initially without an attached chain.\r\n\r\nWhile implementing this, I noticed that not all `CWalletTx` metadata was being copied over to the watchonly wallet and so some data, such as time received, was being lost. This PR fixes this as a side effect of not having a chain attached to the watchonly wallet. A test has also been added.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 479,
        "deletions": 619,
        "changed_files": 24,
        "created_at": "2023-10-06T22:01:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is a draft PR to follow up on comments about simplifying assumetxo state representation https://github.com/bitcoin/bitcoin/pull/28562#discussion_r1344824078, https://github.com/bitcoin/bitcoin/pull/27746#discussion_r1321872262, https://github.com/bitcoin/bitcoin/pull/24232#discussion_r835355848 so validation code is less complicated, and each chainstate is handled independently without references to other assumeutxo chainstates everywhere.\r\n\r\nImplementation is not done, but the plan is also for this PR to make two functional improvements:\r\n\r\n1. Not locking cs_main while validating assumeutxo snapshots, so the node is responsive when the background chainstate download finishes.\r\n2. Deleting the background chainstate right away when it is no longer needed, instead of waiting until the next restart, which takes up extra disk space and slows down the next startup.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 22,
        "changed_files": 22,
        "created_at": "2023-10-06T07:48:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "We probably don't want too many pull requests that just fix a typo. At the same time, if we never fix them people will start ignore the linter all-together. So my suggestion would be to do this before branch-off.\r\n\r\nThis PR fixes typos found by lint-spelling.py using codespell 2.2.6, and adds a note to the release process.\r\n\r\nOur CI linter job uses codespell 2.2.5 and found fewer typos that I did locally. In any case it's happy now.",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-05T23:23:01Z",
        "closed_at": "2023-10-09T08:53:11Z",
        "merged_at": "2023-10-09T08:53:11Z",
        "body": "The external input weight test in wallet_fundrawtransaction.py made transactions at the minimum relay fee. However due to ECDSA sometimes making a shorter signature than expected, the size estimate (and therefore the funded fee) ends up being a little bit too low, which results in the final transaction being under the min relay fee. We can compensate for this by just using a feerate higher than the minrelayfee as the actual feerate itself does not matter in this test.\r\n\r\nFixes #28437",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 157,
        "deletions": 16,
        "changed_files": 3,
        "created_at": "2023-10-05T18:01:50Z",
        "closed_at": "2023-10-11T10:50:52Z",
        "merged_at": "2023-10-11T10:50:52Z",
        "body": "`InferDescriptor` was not always checking that the pubkey it was placing into the descriptor was an allowed pubkey. For example, given a P2WPKH script that uses an uncompressed pubkey, it would produce a `wpkh()` with the uncompressed key. Additionally, the hybrid key check was only being done for `pk()` scripts, where it should've been done for all scripts.\r\n\r\nThis PR moves the key checking into `InferPubkey`. If the key is not valid for the context, then `nullptr` is returned and the inferring will fall through to the defaults of either `raw()` or `addr()`.\r\n\r\nThis also resolves an issue with migrating legacy wallets that contain hybrid pubkeys as such watchonly scripts will become `raw()` or `addr()` and go to the watchonly wallet. Note that a legacy wallet cannot sign for hybrid pubkeys. A test has been added for the migration case.\r\n\r\nAlso added unit tests for `InferDescriptor` itself as the edge cases with that function are not covered by the descriptor roundtrip test.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-05T13:50:14Z",
        "closed_at": "2023-10-05T19:36:12Z",
        "merged_at": "2023-10-05T19:36:12Z",
        "body": "With BDB being removed soon, it seems confusing and harmful to allow users to create fresh BDB wallets going forward, as it would load them with an additional burden of having to migrate them soon after.\r\n\r\nAlso, it would be good to allow for one release for test (and external) scripts to adapt.\r\n\r\nFix all issues by introducing the `-deprecatedrpc=create_bdb` setting.",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T11:57:58Z",
        "closed_at": "2023-10-09T13:13:38Z",
        "merged_at": "2023-10-09T13:13:38Z",
        "body": "Fixes https://github.com/bitcoin/bitcoin/issues/28365 (maybe?)",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T01:59:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "In the presence of smaller transactions on the network, blocks can sustain a higher relay rate than 7tx/second. In this event, the per-peer inventory queues can grow too large.\r\n\r\nThis commit bumps the rate up to 14 tx/s (for inbound peers), increasing the safety margin by a factor of 2.\r\n\r\nOutbound peers continue to receive relayed transactions at 2.5x the rate of inbound peers, for a rate of 35tx/second.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 27,
        "changed_files": 4,
        "created_at": "2023-10-04T16:19:29Z",
        "closed_at": "2023-10-09T13:54:46Z",
        "merged_at": "2023-10-09T13:54:46Z",
        "body": "Update chainparams pre `26.x` branch off.\r\n\r\nNote: Remember that some variance is expected in the m_assumed_* sizes.\r\n\r\nCloses #28572.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 37,
        "changed_files": 2,
        "created_at": "2023-10-04T15:46:36Z",
        "closed_at": "2023-10-05T18:19:44Z",
        "merged_at": "2023-10-05T18:19:44Z",
        "body": "Current `getchainstates` RPC returns \"normal\" and \"snapshot\" fields which are not ideal because it requires new \"normal\" and \"snapshot\" terms to be defined, and the definitions are not really consistent with internal code. (In the RPC interface, the \"snapshot\" chainstate becomes the \"normal\" chainstate after it is validated, while in internal code there is no \"normal chainstate\" and the \"snapshot chainstate\" is still called that temporarily after it is validated).\r\n\r\nThe current `getchainstates` RPC is also awkward to use if you to want information about the most-work chainstate, because you have to look at the \"snapshot\" field if it exists, and otherwise fall back to the \"normal\" field.\r\n\r\nFix these issues by having `getchainstates` just return a flat list of chainstates ordered by work, and adding a new chainstate \"validated\" field alongside the existing \"snapshot_blockhash\" field so it is explicit if a chainstate was originally loaded from a snapshot, and whether the snapshot has been validated.\r\n\r\nThis change was motivated by comment thread in https://github.com/bitcoin/bitcoin/pull/28562#discussion_r1344154808",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-04T15:05:28Z",
        "closed_at": "2023-10-04T17:32:53Z",
        "merged_at": "2023-10-04T17:32:53Z",
        "body": "Fixes https://github.com/bitcoin/bitcoin/issues/28585.\r\n\r\nFixes a few races within the assumeutxo tests:\r\n- In general, `-stopatheight` can't be used with `connect_nodes` safely because the latter performs blocking assertions that are racy with the stopatheight triggering.\r\n- Now that the snapshot chainstate is listed as `normal` after background validation, accept the final height from either chainstate.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-04T15:04:45Z",
        "closed_at": "2023-10-05T11:02:58Z",
        "merged_at": "2023-10-05T11:02:58Z",
        "body": "This PR adds missing test coverage for the detection of incoming v1 connections and wrong network magic on BIP324-enabled (i.e. running with `-v2transport=1`) nodes. Both checks are using prefix sizes of 16 bytes (previously only 12 bytes were used for the v1 prefix matching, which was fixed by PR #28577).",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-04T14:58:41Z",
        "closed_at": "2023-10-05T15:59:01Z",
        "merged_at": "2023-10-05T15:59:01Z",
        "body": "Fixes #28511\r\n\r\nThe descriptor documentation (`doc/descriptors.md`) and [BIP380](https://github.com/bitcoin/bips/blob/master/bip-0380.mediawiki) explicitly require that hex-encoded public keys start with 02 or 03 (compressed) or 04 (uncompressed). However, the current parsing/inference code permit 06 and 07 (hybrid) encoding as well. Fix this.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-04T14:37:41Z",
        "closed_at": "2023-10-04T15:42:08Z",
        "merged_at": null,
        "body": "This adds the possibility of defining a default wait timeout for a whole functional test case. It then applies this to `feature_assumeutxo` which tends to timeout on slower machines.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 101,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-04T11:27:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Extend `CConnman` fuzz tests to also exercise the methods `OpenNetworkConnection()`, `CreateNodeFromAcceptedSocket()`, `InitBinds()` and `SocketHandler()`.\r\n\r\nPreviously fuzzing those methods would have resulted in real socket functions being called in the operating system which is undesirable during fuzzing. Now that https://github.com/bitcoin/bitcoin/pull/21878 is complete all those are mocked to a fuzzed socket and a fuzzed DNS resolver (see how `CreateSock` and `g_dns_lookup` are replaced in the first commit).",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 167,
        "deletions": 162,
        "changed_files": 47,
        "created_at": "2023-10-04T11:22:15Z",
        "closed_at": "2023-10-16T14:36:07Z",
        "merged_at": "2023-10-16T14:36:07Z",
        "body": "Constructing a temporary unnamed object only to copy or move it into a container seems both verbose in code and a strict performance penalty.\r\n\r\nFix both issues via the `modernize-use-emplace` tidy check.",
        "comments": 14
    },
    {
        "merged": true,
        "additions": 136,
        "deletions": 60,
        "changed_files": 9,
        "created_at": "2023-10-04T11:02:14Z",
        "closed_at": "2023-10-11T18:16:50Z",
        "merged_at": "2023-10-11T18:16:50Z",
        "body": "Final changes to tag a `24.2rc1`.\r\nBumps version numbers, man pages, adds release notes etc.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 23,
        "changed_files": 3,
        "created_at": "2023-10-04T10:56:53Z",
        "closed_at": "2023-10-06T12:53:41Z",
        "merged_at": "2023-10-06T12:53:41Z",
        "body": "Resolves build failures under Python 3.12:\r\n```bash\r\nmake[3]: Nothing to be done for 'install-exec-am'.\r\n /usr/bin/mkdir -p '/bitcoin/depends/work/staging/aarch64-unknown-linux-gnu/xcb_proto/1.14.1-4a91ac9dc41/bitcoin/depends/aarch64-unknown-linux-gnu/lib/python3.12/site-packages/xcbgen'\r\n /usr/bin/install -c -m 644 __init__.py error.py expr.py align.py matcher.py state.py xtypes.py '/bitcoin/depends/work/staging/aarch64-unknown-linux-gnu/xcb_proto/1.14.1-4a91ac9dc41/bitcoin/depends/aarch64-unknown-linux-gnu/lib/python3.12/site-packages/xcbgen'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 2, in <module>\r\nModuleNotFoundError: No module named 'imp'\r\nmake[3]: *** [Makefile:271: install-pkgpythonPYTHON] Error 1\r\n```\r\n\r\n`imp` was removed in 3.12: https://docs.python.org/3/library/imp.html.\r\n\r\nAlso backported for 25.x & 24.x.\r\n\r\nAlso:\r\n* Add historical release-notes for 23.2.\r\n* Update release notes for currently backported changes.\r\n\r\nIt's not clear if a 23.3 will be released, as 23.x goes [EOL 01-12-2023](https://bitcoincore.org/en/lifecycle/#schedule).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-10-04T10:04:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "python-altgraph (0.17.4) has been upstreamed, see: https://git.savannah.gnu.org/cgit/guix.git/commit/?id=0c6198319a61d85cd8925af418466dcdccf3daff, so we can use it, and drop our package definition.\r\n\r\nAlso includes:\r\n* Linux Kernel Headers 5.15.127 -> 5.15.134\r\n\r\nDraft for now, as we may get a couple more packages upstreamed shortly, so open for testing.\r\n\r\nIf anyone wants to help upstream things, `python-macholib`, `python-elfesteem` and `python-oscrypto` are good candidates (see [manifest.scm](https://github.com/bitcoin/bitcoin/blob/master/contrib/guix/manifest.scm)).\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 28,
        "changed_files": 6,
        "created_at": "2023-10-04T09:29:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Generally, compile-time checks should be close to the code that use them. Especially, since `compat/assumptions.h` is only included in one place, where iwyu suggests to remove it.\r\n\r\nFix all issues:\r\n* The `NDEBUG` check is used in `util/check`, so it is redundant in `compat/assumptions.h`.\r\n* The `__cplusplus` check is redundant with `doc/dependencies.md` (see commit message).\r\n* Add missing `// IWYU pragma: keep` to avoid removing the include by accident.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 247,
        "deletions": 96,
        "changed_files": 6,
        "created_at": "2023-10-04T01:03:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR adds fuzz target for `DescriptorScriptPubKeyMan`. Also, moves `MockedDescriptorConverter` to `fuzz/util/descriptor` to be used here and in `descriptor` target.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-03T18:48:12Z",
        "closed_at": "2023-10-04T20:57:43Z",
        "merged_at": "2023-10-04T20:57:43Z",
        "body": "A \"version\" message in the V1 protocol starts with a fixed 16 bytes:\r\n* The 4-byte network magic\r\n* The 12-byte command string: \"version\" plus 5 0x00 bytes\r\n\r\nThe current code detects incoming V1 connections by just looking at the first 12 bytes (matching an [earlier version](https://github.com/bitcoin/bips/pull/1496) of BIP324), but 16 bytes is more precise. This isn't an observable difference right now, as a 12 byte prefix ought to be negligible already, but it may become observable with future extensions to the protocol, so make the code match the specification.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T18:25:45Z",
        "closed_at": "2023-10-04T08:53:54Z",
        "merged_at": "2023-10-04T08:53:54Z",
        "body": "Removed extra word `the` in packages.md\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T14:39:20Z",
        "closed_at": "2023-10-03T15:57:19Z",
        "merged_at": "2023-10-03T15:57:19Z",
        "body": "Required to debug issues like https://github.com/bitcoin/bitcoin/pull/28487#issuecomment-1729717923. For example:\r\n\r\n```\r\nFATAL: ThreadSanitizer: unexpected memory mapping 0x57cf8f031000-0x57cf8f173000",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 351,
        "deletions": 261,
        "changed_files": 11,
        "created_at": "2023-10-03T13:54:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The benchmark conducted locally showed a ~65% processing time reduction, on a SSD.\r\nResults can be found at the end of the description.\r\n\r\n#### Detailed Description:\r\nThe current wallet migration process performs only individual db writes. Accessing disk to\r\ndelete all legacy records, clone and clean each address book entry for every created wallet,\r\ncreate each new descriptor (with their corresponding master key, caches and key pool), and\r\nalso clone and delete each transaction that requires to be transferred to a different wallet.\r\n\r\nThis work consolidates all individual disk writes into two batch operations. One for the descriptors\r\ncreation from the legacy data and a second one for the execution of the migration process itself.\r\nEfficiently dumping all the information to disk at once atomically at the end of each process.\r\n\r\nThis represent a significant speed up and also a consistency improvement. During migration, we\r\neither want to succeed or fail. No other outcomes should be accepted. We should never leave a\r\npartially migrated wallet on disk and request the user to manually restore the previous wallet from\r\na backup (at least not if we can avoid it).\r\n\r\nAdditionally, since db transactions relevant to the key pool generation were also batched, this work\r\nalso speeds up the regular wallet creation process.\r\n\r\n#### Note for Testers:\r\nThe first commit introduces a benchmark for the migration process. This one can be\r\ncherry-picked on top of master to compare results pre and post changes.\r\n\r\nPlease note that the benchmark setup may take some time (~70 seconds here) due to the absence\r\nof a batching mechanism for the address generation process (`GetNewDestination()` calls). Which,\r\nI plan to address in a separate PR, just to not continue expanding this PR.\r\n\r\n#### Final Notes:\r\nThis PR is intended to be an \"all-in-one\" solution that's ready for use and testing. In the coming days, \r\nwill start breaking it down into smaller, focused PRs for better manageability and review.\r\n\r\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\n\r\nBenchmark on master (debug mode)\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:-----------\r\n|   65,093,884,958.00 |                0.02 |    0.0% |     65.09 | `WalletMigration`\r\n\r\nBenchmark on this branch (debug mode)\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|   22,926,814,750.00 |                0.04 |    0.0% |     22.93 | `WalletMigration`",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-03T13:05:31Z",
        "closed_at": "2023-10-09T14:03:54Z",
        "merged_at": "2023-10-09T14:03:54Z",
        "body": "Instead of figuring out the commit *after* the last merge and rebasing on that with a ~1 suffix, just figure out the last merge commit directly and rebase on it. This way, if HEAD happens to be a merge commit, the rebase just succeeds immediately without blank variables or errors.\r\n\r\nExplanation of the problem from https://github.com/bitcoin/bitcoin/pull/28497#issuecomment-1743430631:\r\n\r\n> The problem is that the PR only contains a one commit after the last merge, so the job _should_ be skipped, but the `pull_request.commits != 1` check is not smart enough to skip it because the PR is based on another PR and has merge ancestor commits. So specifically what happens is that after HEAD~ is checked out, the new HEAD  is a merge commit, so the range `$(git log --merges -1 --format=%H)..HEAD` is equivalent to HEAD..HEAD, which is empty, so the `COMMIT_AFTER_LAST_MERGE` variable is empty and the rebase command fails.\r\n\r\nNote: In the current version of this PR, the \"test each commit\" job is skipped, because this PR only contains a single commit. But I manually verified the code works in earlier versions of the PR that included dummy commits.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-03T12:31:56Z",
        "closed_at": "2023-10-03T14:54:19Z",
        "merged_at": "2023-10-03T14:54:19Z",
        "body": "See https://codereview.qt-project.org/c/qt/qtbase/+/482392.\r\n\r\nFixes #28566.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T11:41:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I have noticed that this log now is always printed, even if there is no snapshot chainstate present or even was present. I think this is confusing to users that have never even thought about using assumeutxo since in that case the rebalancing is just ensuring the normal environment with one chainstate. So I suggest we don't log in absence of a snapshot chainstate. We could also think about rewording the message instead but I think this is simpler.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-03T09:42:05Z",
        "closed_at": "2023-10-04T16:13:23Z",
        "merged_at": "2023-10-04T16:13:23Z",
        "body": "This idea was discussed [here](https://github.com/bitcoin/bitcoin/pull/28509#issuecomment-1740841988).",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 62,
        "changed_files": 5,
        "created_at": "2023-10-03T05:26:42Z",
        "closed_at": "2023-10-16T09:21:56Z",
        "merged_at": "2023-10-16T09:21:56Z",
        "body": "- make `getaddrmaninfo` RPC public since it's not for development purposes only and regular users might find it useful. [#26988 (comment)](https://github.com/bitcoin/bitcoin/pull/26988#issuecomment-1738371584)\r\n- add missing `all_networks` key to RPC help. [#27511 (comment)](https://github.com/bitcoin/bitcoin/pull/27511#discussion_r1335084087)\r\n- fix clang format spacing\r\n- add and use `EnsureAddrman` in RPC code. [#27511 (comment)](https://github.com/bitcoin/bitcoin/pull/27511#discussion_r1331501491)\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-03T04:09:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #28563",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 73,
        "deletions": 73,
        "changed_files": 18,
        "created_at": "2023-10-02T22:42:30Z",
        "closed_at": "2023-10-07T10:22:51Z",
        "merged_at": "2023-10-07T10:22:51Z",
        "body": "Addressing what I consider to be non- or not-too-controversial comments from #27596.\r\n\r\nLet me know if I missed anything among the many comments that can be easily included here.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 170,
        "changed_files": 10,
        "created_at": "2023-10-02T21:27:54Z",
        "closed_at": "2023-10-04T17:37:39Z",
        "merged_at": "2023-10-04T17:37:39Z",
        "body": "The Qt 5.15.10 contains at least three important for us fixes:\r\n- https://github.com/qt/qtbase/commit/8bb90ab760310c9bc82b6ecbe068532fcb4e7822, which allows us to drop the [`dont_hardcode_x86_64.patch`](https://github.com/bitcoin/bitcoin/blob/fd8ab08558ccfb62f2d0a64d2d0d4dcefba977bc/depends/patches/qt/dont_hardcode_x86_64.patch)\r\n- https://github.com/qt/qtbase/commit/8467beddb7239cc213ae13900fa30e3d26df5e78, which allows us to drop the [`fix_montery_include.patch`](https://github.com/bitcoin/bitcoin/blob/fd8ab08558ccfb62f2d0a64d2d0d4dcefba977bc/depends/patches/qt/fix_montery_include.patch)\r\n- https://github.com/qt/qtbase/commit/df08a21fa4e7139d46ec68bcf264c922789c4f3a, which addresses https://github.com/bitcoin/bitcoin/pull/28349#issuecomment-1743519614",
        "comments": 28
    },
    {
        "merged": false,
        "additions": 424,
        "deletions": 219,
        "changed_files": 11,
        "created_at": "2023-10-02T16:50:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This builds on https://github.com/bitcoin/bitcoin/pull/25273, marking as a draft until that one merges.\r\n\r\n## Motivation\r\n\r\nThe primary motivation for this PR is to enable `FundTransaction` to take a vector of `CRecipient` objects to allow passing BIP352 silent payment addresses to RPCs that use `FundTransaction` (e.g. `send`, `walletcreatefundedpsbt`). In order to do that, SFFO logic needs to be moved out of `FundTransaction` up to the RPCs.\r\n\r\nAs a secondary motivation, this PR moves the SFFO stuff closer to the caller, making the code cleaner and easier to understand. This (hopefully) makes the eventual deprecation of SFFO easier (see https://github.com/bitcoin/bitcoin/pull/24142 for motivation)\r\n\r\nI'm also not convinced we need to pass a full `CMutableTx` object to `FundTransaction`, but I'm leaving that for a follow-up PR/discussion.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 398,
        "deletions": 290,
        "changed_files": 9,
        "created_at": "2023-10-02T16:00:08Z",
        "closed_at": "2023-10-04T12:10:25Z",
        "merged_at": "2023-10-04T12:10:25Z",
        "body": "Final changes to tag a `25.1rc1`.\r\nBumps version numbers, man pages, adds release notes etc.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 20,
        "changed_files": 7,
        "created_at": "2023-10-02T13:48:47Z",
        "closed_at": "2023-10-05T13:06:48Z",
        "merged_at": "2023-10-05T13:06:48Z",
        "body": "This lets us avoid some non-determinism in tests (also see #28537).",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-02T12:17:00Z",
        "closed_at": "2023-10-02T15:21:29Z",
        "merged_at": "2023-10-02T15:21:29Z",
        "body": "Followup to https://github.com/bitcoin/bitcoin/pull/28385#discussion_r1339964480.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-02T10:14:28Z",
        "closed_at": "2023-10-02T10:49:33Z",
        "merged_at": "2023-10-02T10:49:33Z",
        "body": "Fix link to `developer-notes.md` file in `multiprocess.md`.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-30T19:10:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When writing some scripts that iterated over many blocks to generate hashrate estimates I realized that my script was going out of range of the current chain tip height but was not encountering any errors.\r\n\r\nI believe that passing an invalid block height to this function but receiving the hashrate estimate for the chain tip instead should be considered unexpected behavior.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-30T12:53:11Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This adds snapshot parameters for mainnet block 800,000.\r\n\r\nIt can be used for testing, but I'm not proposing it for merge just yet. I think more testing and conceptual discussion should happen.\r\n\r\nIn particular I think we should first:\r\n- [ ] make the snapshot slightly smaller: #26045\r\n- [ ] consider (something like) MuHash instead or in addition #27669\r\n- [ ] consider not hardcoding the params at all\r\n  * find another way to make them relatively safe to use\r\n  * make it easier to fresh snapshots more frequently (if only to prevent malicious actors from shipping \"faster\" binaries)\r\n- [ ] go through the \"longer term questions\" in https://github.com/bitcoin/bitcoin/pull/27596#issuecomment-1727936044\r\n\r\nYou can generate the snapshot yourself using `./contrib/devtools/utxo_snapshot.sh` or download my torrent:\r\n* torrent: `magnet:?xt=urn:btih:50ee955bef37f5ec3e5b0df4cf0288af3d715a2e&dn=utxo-800000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969`\r\n\r\nIt would be a good idea to test:\r\n1. That you can produce the same snapshot file, sha256 sum:\r\n\r\n```\r\n59c6d1a021b03693b022c357c7ae23520e2786507ffe85c115ccbb8e20a8a4c7 utxo-800000.dat\r\n```\r\n\r\n2. That the snapshot works",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-09-29T16:15:58Z",
        "closed_at": "2023-10-04T09:09:12Z",
        "merged_at": "2023-10-04T09:09:12Z",
        "body": "#26742 significantly increased the http server shutdown speed, but also introduced a bug (#27722 - see https://github.com/bitcoin/bitcoin/issues/27722#issuecomment-1559453982 for steps to reproduce on master) that causes http server shutdown to halt in case of a remote client disconnection. This happens because `evhttp_request_set_on_complete_cb` is never called and thus the request is never removed from `g_requests`.\r\n\r\nThis PR fixes that bug, and improves robustness of the code by encapsulating the request tracking logic. Earlier approaches (#27909, #27245, #19434) attempted to resolve this but [imo are fundamentally unsafe](https://github.com/bitcoin/bitcoin/pull/27909#discussion_r1265614783) because of differences in lifetime between an `evhttp_request` and `evhttp_connection`.\r\n\r\nWe don't need to keep track of open requests or connections, we just [need to ensure](https://github.com/bitcoin/bitcoin/pull/19420#issue-648067169) that there are no active requests on server shutdown. Because a connection can have multiple requests, and a request can be completed in various ways (the request actually being handled, or the client performing a remote disconnect), keeping a counter per connection seems like the approach with the least overhead to me.\r\n\r\nFixes #27722\r\n\r\n",
        "comments": 14
    },
    {
        "merged": false,
        "additions": 6933,
        "deletions": 215,
        "changed_files": 53,
        "created_at": "2023-09-28T18:42:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "**Conceptual discussion here:** https://delvingbitcoin.org/t/covenant-tools-softfork/98\r\n\r\nThis draft is a patch that activates the consensus changes outlined in\r\n\r\n- [BIP-118](https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki) (SIGHASH_ANYPREVOUT for Taproot Scripts)\r\n- [BIP-119](https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki) (CHECKTEMPLATEVERIFY)\r\n- [BIP-345](https://github.com/jamesob/bips/blob/jamesob-23-02-opvault/bip-0345.mediawiki) (OP_VAULT)\r\n\r\nThese changes make possible a number of use-cases that are broadly beneficial to users of Bitcoin, including\r\n\r\n- [vaults](https://bitcoinops.org/en/topics/vaults/) (reactive custodial security),\r\n- [LN-Symmetry](https://bitcoinops.org/en/topics/eltoo/),\r\n- efficient implementations of [DLCs](https://bitcoinops.org/en/topics/discreet-log-contracts/),\r\n- [non-interactive channel openings](https://utxos.org/uses/non-interactive-channels/),\r\n- [congestion control](https://utxos.org/uses/scaling/),\r\n- decentralized mining pools (via [CTV compression in coinbase payouts](https://utxos.org/uses/miningpools/)),\r\n- various [Lightning efficiency improvements](https://twitter.com/roasbeef/status/1692589689939579259),\r\n- using [covenant based timeout-trees](https://bitcoinops.org/en/newsletters/2023/09/27/) to scale Lightning, and more generally enabling [channel factories](https://bitcoinops.org/en/topics/channel-factories/).\r\n\r\nWe also see that many speculative scaling solutions (e.g. [Ark](https://arkpill.me/), [Spacechains](https://gist.github.com/RubenSomsen/c9f0a92493e06b0e29acced61ca9f49a#spacechains)) require locking coins to be spent to a particular set of outputs without any additional authorization (i.e. CTV, or APO\u2019s emulation of it).\r\n\r\n### Scope of discussion\r\n\r\nTo prevent this thread from becoming overrun, please keep high-level, conceptual discussion to the [related Delving Bitcoin thread](https://delvingbitcoin.org/t/covenant-tools-softfork/98). At this point in time, code nits probably aren't going to be useful either.\r\n\r\nThis draft has been posted to provide a tangible example of a softfork we might pursue, and a representation of the necessary code changes.\r\n\r\n### Activation method and parameters\r\n\r\nSpecific activation parameters have not been specified here (or are marked FIXME) to avoid putting the consensus cart before the horse. The activation method here has defaulted to the one used for BIP-0341 and might change pending discussion.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 14,
        "changed_files": 11,
        "created_at": "2023-09-28T13:37:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR breaks the `libbitcoin_util` library's dependency on the `libbitcoin_consensus` library due to the `CPubKey::RecoverCompact` symbol, which is not in alignment with our library design goals.\r\n\r\nThe `libbitcoin_util` library, unlike `libbitcoin_common`, is a dependency of the kernel library, so we are trying to move unnecessary things out of it, to make the kernel library smaller.\r\n\r\nFor more details please refer to https://github.com/bitcoin/bitcoin/issues/28548.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2023-09-28T09:03:40Z",
        "closed_at": "2023-10-13T08:24:14Z",
        "merged_at": "2023-10-13T08:24:14Z",
        "body": "Sometimes, it seems that `podman stop` does not work. Presumably, it falls back to `podman kill`, which is async.\r\n\r\nTry to work around this intermittent issue by using the `rm --force` over `stop`.\r\n\r\nExample failing log https://cirrus-ci.com/task/4549784611061760?logs=ci#L238:\r\n\r\n```\r\nRestart docker before run to stop and clear all containers started with --rm\r\n++ podman container stop --all\r\ne4eca0766f87864d89fc230aa884a238c214cfbcd44cf76a4dbdb2a30c982009\r\n++ echo 'Prune all dangling images'\r\nPrune all dangling images\r\n++ docker image prune --force\r\nEmulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.\r\n+++ docker run --cap-add LINUX_IMMUTABLE --rm --interactive --detach --tty --mount type=bind,src=/tmp/cirrus-build-1970593815,dst=/tmp/cirrus-build-1970593815,readonly --mount type=volume,src=ci_macos_cross_ccache,dst=/tmp/ccache_dir --mount type=volume,src=ci_macos_cross_depends,dst=/ci_container_base/depends --mount type=volume,src=ci_macos_cross_previous_releases,dst=/ci_container_base/prev_releases --env-file /tmp/env --name ci_macos_cross ci_macos_cross\r\nEmulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.\r\ntime=\"2023-09-27T20:55:39Z\" level=warning msg=\"The input device is not a TTY. The --tty and --interactive flags might not work properly\"\r\nError: creating container storage: the container name \"ci_macos_cross\" is already in use by e4eca0766f87864d89fc230aa884a238c214cfbcd44cf76a4dbdb2a30c982009. You have to remove that container to be able to reuse that name: that name is already in use",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 52,
        "deletions": 17,
        "changed_files": 4,
        "created_at": "2023-09-27T17:22:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "During migration, `CWalletTx` objects that no longer belong to the migrated wallet are moved to a watchonly wallet. But because the migrated wallet is offline (has null `m_chain`), the `confirmed_block_height` and `conflicting_block_height` values in these transactions are -1. These values need to be updated before they are moved to the watchonly wallet, because the watchonly wallet is online, and remains loaded after the migration is complete. Not updating these values could lead to the watchonly wallet returning incorrect information and potentially triggering assert failures.\r\n\r\nThe problem is only temporary since the height values would be refreshed the next time the watchonly wallet is loaded, but it is worth fixing to avoid unpredictable behavior.\r\n\r\nNoticed while reviewing #28542, and looking for other cases where negative confirmed_block_height and conflicting_block_height values might be used.\r\n\r\nAn easy way to test this bug is to revert the bugfix in the second commit. Then the assert added in the third commit will trigger a crash when `getwalletinfo` is called in [`wallet_migration.py`](https://github.com/bitcoin/bitcoin/blob/c9f288244b8d183e09a917025922b99e3368ef78/test/functional/wallet_migration.py#L250)\r\n\r\n\r\n \r\n",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-27T14:49:11Z",
        "closed_at": "2023-10-02T09:09:23Z",
        "merged_at": "2023-10-02T09:09:23Z",
        "body": "This turns a test failure on Linux when running the test as `root`, but without the `LINUX_IMMUTABLE` capability, into an early return, with a suggestion to turn on `LINUX_IMMUTABLE` next time (if possible).",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-27T14:39:51Z",
        "closed_at": "2023-10-17T19:28:24Z",
        "merged_at": "2023-10-17T19:28:24Z",
        "body": "I found this useful while debugging silent conflict between #10102 and #27469 recently",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-27T11:51:46Z",
        "closed_at": "2023-10-03T09:29:40Z",
        "merged_at": "2023-10-03T09:29:40Z",
        "body": "Fixes https://github.com/bitcoin/bitcoin/issues/28541 by backporting an upstream [patch](https://github.com/qt/qtbase/commit/cdf64b0e47115cc473e1afd1472b4b09e130b2a5).\r\n\r\nGuix build:\r\n```\r\nx86_64\r\nb37713bc8a526662eac3d9535924f4a4d2893c58f9c12d3c7599e761e6ff677c  guix-build-79ef528511f0/output/arm64-apple-darwin/SHA256SUMS.part\r\n0befb524181aa10e1635a2616a8bed53f51beafa4f0d495d3bf52a64cbd2d977  guix-build-79ef528511f0/output/arm64-apple-darwin/bitcoin-79ef528511f0-arm64-apple-darwin-unsigned.tar.gz\r\n9cba170f2ffe542c33fdd1ac52b7684dd6301e91d32aa45af7b4ce8769d88d4a  guix-build-79ef528511f0/output/arm64-apple-darwin/bitcoin-79ef528511f0-arm64-apple-darwin-unsigned.zip\r\n04556309266c791ae4d7409359222c88cd7aeb569566f7ef4d29816148a5b7e4  guix-build-79ef528511f0/output/arm64-apple-darwin/bitcoin-79ef528511f0-arm64-apple-darwin.tar.gz\r\n51229df8e104a2ffcd5c5b3f81f7585e1258ef10461d136948ea2a2d690a920d  guix-build-79ef528511f0/output/dist-archive/bitcoin-79ef528511f0.tar.gz\r\n3fe216a05561f2fe7229ddf186ff495b29a5cc31b6f35f407187573d072c5743  guix-build-79ef528511f0/output/x86_64-apple-darwin/SHA256SUMS.part\r\n961d71104e61a2baf727576eb2da630697bb4f109f66e73be5c96add25378d12  guix-build-79ef528511f0/output/x86_64-apple-darwin/bitcoin-79ef528511f0-x86_64-apple-darwin-unsigned.tar.gz\r\n5598f514d065756ac376e2f3c4f8e758bfba53a43ddef778f106456de1536073  guix-build-79ef528511f0/output/x86_64-apple-darwin/bitcoin-79ef528511f0-x86_64-apple-darwin-unsigned.zip\r\n5360ae1f1b7d96a44a33b2c87708b466e4a7bf3f9de0fc58bccbbcdb21ee254e  guix-build-79ef528511f0/output/x86_64-apple-darwin/bitcoin-79ef528511f0-x86_64-apple-darwin.tar.gz\r\n```",
        "comments": 22
    },
    {
        "merged": true,
        "additions": 105,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-27T02:37:19Z",
        "closed_at": "2023-10-02T12:27:56Z",
        "merged_at": "2023-10-02T12:27:56Z",
        "body": "`MarkConflicted` assumes that `m_last_block_processed_height` is always valid. However it may not be valid when a chain is not attached, as happens in the wallet tool and during migration. In such situations, when the conflicting height is also negative (which occurs on loading when no chain is available), the calculation of the number of conflict confirms results in a non-negative value which passes the existing check for valid values. This will subsequently hit an assertion in `GetTxDepthInMainChain`.\r\n\r\nFurthermore, `MarkConflicted` is also only called on loading a transaction whose parent has a stored state of `TxStateConflicted` and was loaded before the child transaction. This depends on the loading order, which for both sqlite and bdb depends on the txids.\r\n\r\nWe can avoid this by explicitly checking that both `m_last_block_processed_height` and `conflicting_height` are non-negative. Both `tool_wallet.py` and `wallet_migration.py` are updated to create wallets with a state that triggers the assertion.\r\n\r\nFixes #28510",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-26T21:49:55Z",
        "closed_at": "2023-09-28T15:22:27Z",
        "merged_at": "2023-09-28T15:22:27Z",
        "body": "Bumpfee will try to increase the entire package to the target feerate, which causes repeated bumpfees to quickly shoot up in fees, causing intermittent failures when the fee is too large. We don't care about this property, just that the child is continuously replaced until we observe it's position in mapWallet is before its parent. Instead of using bumpfee, we can create raw transactions which have only pay (just above) the additional incremental relay fee, thus avoiding this problem.\r\n\r\nFixes #28491",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 175,
        "deletions": 6,
        "changed_files": 6,
        "created_at": "2023-09-26T21:02:09Z",
        "closed_at": "2023-10-16T16:59:51Z",
        "merged_at": "2023-10-16T16:59:51Z",
        "body": "Grabbed from #21158. Closes #21133.",
        "comments": 22
    },
    {
        "merged": false,
        "additions": 55,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-09-26T19:13:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "As described in the issues #16418 and #28371, it's a possibility that we could end up having an insufficient number of outbound peers relaying our transactions. Having fewer outbound peers support tx-relay could also have implications on [privacy](https://github.com/bitcoin/bitcoin/issues/16418#issuecomment-514328042) and fee estimation.\r\n\r\nWhile #28488 is suggesting meaures based on comparing fee filters / mempool sizes, there is also the simpler issue of peers that tell us they don't want transactions, which is determined by the `fRelay` field in the `version` msg. If such a peer runs bitcoin core, that usually means that it's running in `-blocksonly` mode and accepting inbound connections. The status quo is that we will not avoid these peers and just not send them any transactions.\r\n\r\nThis PR proposes not to waste any of our 8 full-relay outbound slots on these peers (unless we are in `-blocksonly` mode ourselves). Using them as outbound peers for block-relay-only connections is fine though and not impacted.\r\n\r\nAs was suggested by ajtowns below, we don't disconnect during version processing, but later during the regularly scheduled `EvictExtraOutboundPeers()` task, and only if we are at the maximum of full-outbound peers.\r\n\r\nIf reviewers think that this proposal is too aggressive, an alternative solution (with a little more complexity) would be to restrict the maximum number of outbound connections to `-blocksonly` peers to 1 or 2. Although I currently think that it's ok to be selective with outbound connections, so I didn't implement that right away.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-09-26T14:59:48Z",
        "closed_at": "2023-09-28T20:10:57Z",
        "merged_at": null,
        "body": "This PR introduces `g_mock_get_rand` to allow tests to mock `GetRand` and makes `g_mock_get_rand` consume from the fuzzed data in the process_message(s) targets.\r\n\r\nMocking `GetRand` reduces the non-determinism in these targets and results in more stable fuzzing.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 329,
        "deletions": 33,
        "changed_files": 15,
        "created_at": "2023-09-26T11:00:36Z",
        "closed_at": "2023-10-06T10:37:00Z",
        "merged_at": "2023-10-06T10:37:00Z",
        "body": "Backports to the 24.x branch. Currently:\r\n* https://github.com/bitcoin/bitcoin/pull/27622\r\n* https://github.com/bitcoin/bitcoin/pull/27777\r\n* https://github.com/bitcoin/bitcoin/pull/27834\r\n* https://github.com/bitcoin/bitcoin/pull/27844\r\n* https://github.com/bitcoin/bitcoin/pull/27886\r\n* https://github.com/bitcoin/bitcoin/pull/28452\r\n* https://github.com/bitcoin/bitcoin/pull/28543\r\n* https://github.com/bitcoin/bitcoin/pull/28571",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7973,
        "deletions": 494,
        "changed_files": 44,
        "created_at": "2023-09-26T10:46:44Z",
        "closed_at": "2023-10-02T08:47:48Z",
        "merged_at": "2023-10-02T08:47:48Z",
        "body": "This PR pulls the recent translations from the [Transifex.com](https://www.transifex.com/bitcoin/bitcoin) using the [`bitcoin-maintainer-tools/update-translations.py`](https://github.com/bitcoin-core/bitcoin-maintainer-tools/blob/main/update-translations.py) tool.\r\n\r\nAccording to our [Release Process docs](https://github.com/bitcoin/bitcoin/blob/master/doc/release-process.md#before-every-release-candidate), it is supposed to be merged before `v25.1rc1` tagging.\r\n\r\nChanges in \"Chinese (China) (zh_CN)\" translation were manually discarded as they have too many removals (it looks like a vandalism).",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 109,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-09-26T09:56:36Z",
        "closed_at": "2023-09-26T13:29:51Z",
        "merged_at": null,
        "body": "Our mempool may receive a CPFP of a transaction that is below our peer's mempool minimum feerate. There are many possible reasons, but the most common is when our peer's mempool has a smaller capacity and so their mempool minimum feerate is higher than ours. In the future, another likely reason is that we accept packages but they don't (this change was originally part of package relay but seems beneficial today).\r\n\r\nToday, we broadcast this CPFP transaction to our peers (assuming its individual feerate is above the fee filter). Assuming they're running Bitcoin Core, this happens:\r\n- Peer requests the child\r\n- We send the child\r\n- The peer sees this child as an orphan, stores it in orphanage, and requests the parent\r\n- We send the parent\r\n- The parent is rejected for being too low feerate\r\n\r\nThis is a waste of bandwidth and computation. It also wastes the peer's orphanage slots - instagibbs has been monitoring orphanage usage recently and noted that this is happening pretty frequently.\r\n\r\nWhen announcing a transaction, if it contains a mempool ancestor below the peer's fee filter, drop it.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-26T09:52:18Z",
        "closed_at": "2023-10-06T09:46:18Z",
        "merged_at": "2023-10-06T09:46:18Z",
        "body": "Patch around multiple definition issues in Qt, and enable `-ltcg` when using `LTO=1`.\r\n\r\nSplit from #25391.",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 59,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-09-25T22:17:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The `MallocUsage()` function takes an allocation size as an argument and returns the amount of physical memory consumed, which is greater due to memory allocator overhead and alignment. It was first added in 2015 (first commit of #6102), but its accuracy has degraded as memory allocation libraries have evolved. It's used when it's important that large data structures, such as the coins cache and mempool, should use a predictable, configurable (limited) amount of physical memory (see the `-dbcache` and `-maxmempool` configuration options), as well as a few other places.\r\n\r\nsipa figured out a concise, efficient [expression](https://github.com/bitcoin/bitcoin/pull/27748#discussion_r1215541260) that this function can use, and that's what's implemented here.\r\n\r\nAlso add a unit test, which is more helpful than usual in this case since platforms, operating systems, and libraries vary significantly in this area.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 197,
        "deletions": 75,
        "changed_files": 8,
        "created_at": "2023-09-25T15:51:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR is a follow up to fix some review comments from #28385 \r\n\r\n- Updated `DisconnectedBlockTransactions`  const `MAX_DISCONNECTED_TX_POOL` from kb to bytes.\r\n- Moved `DisconnectedBlockTransactions` implementation code  to `disconnected_transactions.cpp`\r\nReviewers may find it helpful to review the commit for the move  change with `--color-moved=zebra  --color-moved-ws=\"allow-indentation-change\"`\r\n- Add test for `DisconnectedBlockTransactions` memory limit.\r\n\r\n\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 364,
        "deletions": 228,
        "changed_files": 64,
        "created_at": "2023-09-25T04:14:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Replaces bare asserts with test framework utils across both the functional tests and the test framework itself.\r\n\r\nAlso adds the `assert_not_equal`, `assert_less_than`, and `assert_less_than_or_equal` util functions for greater readability.\r\n\r\nFixes #23119.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-24T20:15:05Z",
        "closed_at": "2023-09-24T20:15:57Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 264,
        "deletions": 5,
        "changed_files": 10,
        "created_at": "2023-09-24T14:18:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR reintroduces the 1-way SSE4 SHA256 implementation using intrinsics, as suggested in https://github.com/bitcoin/bitcoin/pull/13442, specifically for MSVC builds, where a 50% performance gain has been achieved.\r\n\r\nHere are benchmarks on my machine with Intel Core i5-8350U CPU (no `sha_ni` flag) + Windows 11 Pro 22H2:\r\n- before this PR (8a9e37fb95cbb0bf7f6e06fa05d8381db04d61e2):\r\n```\r\n>.\\src\\bench_bitcoin.exe -filter=SHA256_.*\r\n\r\n|             ns/byte |              byte/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|                9.92 |      100,826,852.23 |    0.1% |      0.01 | SHA256_32b_AVX2 using the 'standard,sse41(4way),avx2(8way)' SHA256 implementation\r\n|                9.90 |      101,038,141.67 |    0.3% |      0.01 | SHA256_32b_SHANI using the 'standard,sse41(4way)' SHA256 implementation\r\n|               10.02 |       99,788,852.31 |    0.9% |      0.01 | SHA256_32b_SSE4 using the 'standard,sse41(4way)' SHA256 implementation\r\n|               10.01 |       99,883,509.98 |    0.8% |      0.01 | SHA256_32b_STANDARD using the 'standard' SHA256 implementation\r\n|                4.48 |      223,348,893.31 |    1.1% |      0.05 | SHA256_AVX2 using the 'standard,sse41(4way),avx2(8way)' SHA256 implementation\r\n|                4.47 |      223,668,612.58 |    1.2% |      0.05 | SHA256_SHANI using the 'standard,sse41(4way)' SHA256 implementation\r\n|                4.45 |      224,638,332.29 |    0.7% |      0.05 | SHA256_SSE4 using the 'standard,sse41(4way)' SHA256 implementation\r\n|                4.45 |      224,542,494.67 |    0.6% |      0.05 | SHA256_STANDARD using the 'standard' SHA256 implementation\r\n```\r\n- with this PR:\r\n```\r\n>.\\src\\bench_bitcoin.exe -filter=SHA256_.*\r\n\r\n|             ns/byte |              byte/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|                7.04 |      142,024,691.36 |    0.2% |      0.01 | SHA256_32b_AVX2 using the 'sse41(1way),sse41(4way),avx2(8way)' SHA256 implementation\r\n|                7.03 |      142,222,222.22 |    0.2% |      0.01 | SHA256_32b_SHANI using the 'sse41(1way),sse41(4way)' SHA256 implementation\r\n|                7.08 |      141,231,323.51 |    0.8% |      0.01 | SHA256_32b_SSE4 using the 'sse41(1way),sse41(4way)' SHA256 implementation\r\n|                9.88 |      101,196,866.84 |    0.4% |      0.01 | SHA256_32b_STANDARD using the 'standard' SHA256 implementation\r\n|                3.01 |      332,270,069.11 |    1.3% |      0.03 | SHA256_AVX2 using the 'sse41(1way),sse41(4way),avx2(8way)' SHA256 implementation\r\n|                3.00 |      332,989,244.45 |    0.3% |      0.03 | SHA256_SHANI using the 'sse41(1way),sse41(4way)' SHA256 implementation\r\n|                3.04 |      328,612,270.38 |    2.0% |      0.03 | SHA256_SSE4 using the 'sse41(1way),sse41(4way)' SHA256 implementation\r\n|                4.45 |      224,678,709.45 |    0.4% |      0.05 | SHA256_STANDARD using the 'standard' SHA256 implementation\r\n```\r\n\r\nBased on https://github.com/bitcoin/bitcoin/pull/24773.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 103,
        "changed_files": 3,
        "created_at": "2023-09-24T13:46:50Z",
        "closed_at": "2023-09-29T13:50:14Z",
        "merged_at": "2023-09-29T13:50:14Z",
        "body": "Note that this is a breaking change, see also https://github.com/bitcoin/bips/pull/1498\r\n\r\nThe benefit is a simpler implementation:\r\n - The protocol state machine does not need separate states for garbage authentication and version phases.\r\n - The special case of \"ignoring the ignore bit\" is removed.\r\n - The freedom to choose the contents of the garbage authentication packet is removed. This simplifies testing.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-23T19:45:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "A small step towards dropping checkpoints entirely, make the option to disable them a bit easier to find.\r\n\r\n```\r\nbitcoind --help\r\n...\r\n  -checkpoints\r\n       Enable rejection of any forks from the known historical chain until\r\n       block 295000 (default: 1)\r\n```\r\n\r\nBefore this PR this required `bitcoind --help-debug`.\r\n\r\nA potential next step could be to change the default to 0 in a future release, then drop the checkpoints in the next release (#28524) and then drop all the checkpoint code one release later. ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 239,
        "deletions": 1,
        "changed_files": 6,
        "created_at": "2023-09-23T17:48:13Z",
        "closed_at": "2023-10-03T15:38:37Z",
        "merged_at": "2023-10-03T15:38:36Z",
        "body": "Inspired by `getaddrmaninfo` (#27511), this adds a hidden/test-only `getrawaddrman` RPC. The RPC returns information on all addresses in the address manager new and tried tables. Addrman table contents can be used in tests and during development. \r\n\r\nThe RPC result encodes the `bucket` and `position`, the internal location of addresses in the tables, in the address object's string key. This allows users to choose to consume or to ignore the location information. If the internals of the address manager implementation change, the location encoding might change too.  \r\n\r\n```\r\ngetrawaddrman\r\n\r\nEXPERIMENTAL warning: this call may be changed in future releases.\r\n\r\nReturns information on all address manager entries for the new and tried tables.\r\n\r\nResult:\r\n{                                  (json object)\r\n  \"table\" : {                      (json object) buckets with addresses in the address manager table ( new, tried )\r\n    \"bucket/position\" : {          (json object) the location in the address manager table (<bucket>/<position>)\r\n      \"address\" : \"str\",           (string) The address of the node\r\n      \"port\" : n,                  (numeric) The port number of the node\r\n      \"network\" : \"str\",           (string) The network (ipv4, ipv6, onion, i2p, cjdns) of the address\r\n      \"services\" : n,              (numeric) The services offered by the node\r\n      \"time\" : xxx,                (numeric) The UNIX epoch time when the node was last seen\r\n      \"source\" : \"str\",            (string) The address that relayed the address to us\r\n      \"source_network\" : \"str\"     (string) The network (ipv4, ipv6, onion, i2p, cjdns) of the source address\r\n    },\r\n    ...\r\n  },\r\n  ...\r\n}\r\n\r\nExamples:\r\n> bitcoin-cli getrawaddrman\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getrawaddrman\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n```\r\n",
        "comments": 18
    },
    {
        "merged": false,
        "additions": 182,
        "deletions": 11,
        "changed_files": 6,
        "created_at": "2023-09-23T14:58:02Z",
        "closed_at": "2023-09-23T15:03:20Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-23T14:22:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "While debugging unexpected disconnections, possibly related to #28331, I found some additional [net] logging to be useful.\r\n\r\nAll cases where we disconnect now come with a log message that has the word `disconnecting`:\r\n\r\n* `CloseSocketDisconnect()` logs `disconnecting peer=\u2026`\r\n* whereever we set `pnode->fDisconnect = true;`\r\n* for all `InactivityCheck` cases (which in turn sets `fDisconnect`)\r\n* replaces \"dropping\" with \"disconnecting\" in `Network not active, dropping peer=\u2026`\r\n\r\nSometimes the reason appears in the line above, e.g.:\r\n\r\n```\r\nsocket send error for peer=\u2026\r\ndisconnecting peer=\u2026 \r\n```\r\n\r\nNote that `CloseSocketDisconnect()` always logs `disconnecting` (unless there's no socket), so the message before it doesn't need `disconnecting`, whereas `pnode->fDisconnect = true;` unceremoniously drops the connection without a log message.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1598,
        "deletions": 285,
        "changed_files": 43,
        "created_at": "2023-09-21T14:12:54Z",
        "closed_at": "2023-09-30T12:53:22Z",
        "merged_at": null,
        "body": "Based on #27596. This adds snapshot parameters for testnet block 2,500,000 and signet block 160,000.\r\n\r\nYou can generate the snapshots yourself using `./contrib/devtools/utxo_snapshot.sh` or download my torrent:\r\n* testnet: `magnet:?xt=urn:btih:511e09f4bf853aefab00de5c070b1e031f0ecbe9&dn=utxo-testnet-2500000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969`\r\n* signet: `magnet:?xt=urn:btih:9da986cb27b3980ea7fd06b21e199b148d486880&dn=utxo-signet-160000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969`\r\n\r\nIt would be a good idea to test:\r\n1. That you can produce the same snapshot files, sha256 sums:\r\n\r\n```\r\neeeca845385ba91e84ef58c09d38f98f246a24feadaad57fe1e5874f3f92ef8c utxo-signet-160000.dat\r\n79db4b025448cc0ac388d8589a28eab02de53055d181e34eb47391717aa16388 utxo-testnet-2500000.dat\r\n```\r\n\r\n2. That the snapshots work\r\n\r\n---\r\n\r\nNot part of this PR:\r\n\r\nI also have a branch with a mainnet snapshot at height 800,000. It can be used for testing, but I'm not proposing it for merge just yet. I think more testing and conceptual discussion should happen first.\r\n* branch: [2023/09/assume_mainnet](https://github.com/Sjors/bitcoin/tree/2023/09/assume_mainnet)\r\n* torrent: `magnet:?xt=urn:btih:50ee955bef37f5ec3e5b0df4cf0288af3d715a2e&dn=utxo-800000.dat&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969`",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-21T11:20:45Z",
        "closed_at": "2023-09-23T10:41:24Z",
        "merged_at": null,
        "body": "The call is a no-op on this wallet, because it has no relevant keys.\r\n\r\nFix this by removing the no-op.\r\n\r\nFound in the context of https://github.com/bitcoin/bitcoin/issues/28437#issuecomment-1719853544",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 95,
        "deletions": 30,
        "changed_files": 10,
        "created_at": "2023-09-21T06:52:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #16220, see [#16220 (comment)](https://github.com/bitcoin/bitcoin/issues/16220#issuecomment-1429962692)\r\n\r\n- util/system datadir code should not care about wallets or look for or create any wallet paths\r\n- If -walletdir is specified, wallet code should use that directory to locate and list wallets.\r\n- If -walletdir is specified and path is not a directory, wallet init should return a fatal error and refuse to start\r\n- If -walletdir is not specified, wallet code should use <datadir>/wallets as the directory to locate and list wallets.\r\n- If -walletdir is not specified and <datadir>/wallets does not exist, wallet init code should create it\r\n    - Before creating <datadir>/wallets wallet should call ListWalletDir ListDatabases on <datadir>\r\n    - If list is empty wallet should create <datadir>/wallets as a directory, otherwise it should create it as a symlink pointing to .",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-20T20:56:14Z",
        "closed_at": "2023-09-21T16:33:10Z",
        "merged_at": "2023-09-21T16:33:10Z",
        "body": "Some versions of macOS images lack the `pkg-config` package.\r\n\r\nFor example, https://github.com/bitcoin/bitcoin/actions/runs/6248032071/job/16961797066:\r\n```\r\nRunner Image\r\n  Image: macos-13\r\n  Version: 20230417.1\r\n```\r\n\r\n```\r\n+ ./autogen.sh\r\nconfigure.ac:16: error: PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh\r\n```\r\n\r\nThis PR makes Homebrew install the `pkg-config` package explicitly.\r\n\r\nAlso please refer to [macOS Build Guide](https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md).",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-20T17:12:49Z",
        "closed_at": "2023-09-24T17:54:24Z",
        "merged_at": "2023-09-24T17:54:24Z",
        "body": "Before this commit, we claim that glibc's malloc implementation uses 2 arenas by default. But that's true only on 32-bit systems, and even there, it uses *up* to 2 arenas.\r\n\r\nThis commit fixes the wrong statement. The new statement is intentionally vague to reduce our maintenance burden.\r\n\r\nFor details, see:\r\nhttps://www.gnu.org/software/libc/manual/html_node/Memory-Allocation-Tunables.html#index-glibc_002emalloc_002earena_005fmax\r\n\r\nNoticed in:\r\nhttps://github.com/bitcoin/bitcoin/pull/27642#issuecomment-1728103427\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 63,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-19T20:56:48Z",
        "closed_at": "2023-10-02T10:55:25Z",
        "merged_at": null,
        "body": "During my [investigation](https://github.com/bitcoin/bitcoin/issues/28411#issuecomment-1724233900) of https://github.com/bitcoin/bitcoin/issues/28411 and other similar functional test failures on Windows in CI, I found out that https://github.com/bitcoin/bitcoin/blob/abe4fedab735c145881e85dc2b02cf819a241635/test/functional/test_framework/test_node.py#L223 sometimes fails for unknown to me reasons. By \"fails\", I mean that a child process does not make any progress.\r\n\r\nThis PR ensures a child process's progress by checking a created PID file shortly. If the check fails, another two attempts are following.\r\n\r\nAlthough this PR fixes tests on Windows, the new logic is platform-agnostic and increases test robustness.\r\n\r\nIn several dozens of runs in my personal repo GHA, the only intermittent failure still happens -- https://github.com/bitcoin/bitcoin/issues/28491.\r\n\r\nCloses https://github.com/bitcoin/bitcoin/issues/28411.",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 95,
        "changed_files": 19,
        "created_at": "2023-09-19T14:43:11Z",
        "closed_at": "2023-10-02T10:34:03Z",
        "merged_at": "2023-10-02T10:34:02Z",
        "body": "Removes a bunch of redundant, dead or duplicate code.\r\n\r\nUses the idea from and finishes the idea https://github.com/bitcoin/bitcoin/pull/28428 by theuni ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-19T11:45:02Z",
        "closed_at": "2023-10-03T09:58:42Z",
        "merged_at": "2023-10-03T09:58:42Z",
        "body": "#### Copy of commit msg\r\n\r\nThis naming scheme supports auto-detection and on-demand loading of completions.\r\n\r\nSee\r\nhttps://github.com/scop/bash-completion/blob/ba109693ee2284f6a82f8f0e1563baf071252df9/README.md#faq,\r\nsection \"Where should I put it to be sure that interactive bash shells will find it and source it\", keyword `foo.bash`.\r\n\r\nPreviously, distro package maintainers had to rename these files manually.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-19T11:42:45Z",
        "closed_at": "2023-09-19T15:13:38Z",
        "merged_at": "2023-09-19T15:13:38Z",
        "body": "Should fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62455",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 30,
        "changed_files": 5,
        "created_at": "2023-09-19T11:11:21Z",
        "closed_at": "2023-09-27T20:46:48Z",
        "merged_at": "2023-09-27T20:46:48Z",
        "body": "Fixes #28180. Resulted from discussions with S3RK, achow101, and Murch.\r\n\r\nThe current argument name and description are dangerous as it don't\r\ndescribe the case where the user selects the recipient output as the\r\nchange address. This one could end up been increased by the inputs\r\nminus outputs remainder. Which, when `bumpfee` adds new inputs\r\nto the transaction, leads the process to send more coins to the\r\nrecipient. Which is not what the user would expect from a\r\n'reduce_output' param naming.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-19T09:36:00Z",
        "closed_at": "2023-09-20T16:14:44Z",
        "merged_at": "2023-09-20T16:14:44Z",
        "body": "Currently `$MAKEJOBS` is the default value in `01_base_install.sh` when building the container image.\r\n\r\nThis problem can't be fixed (see below), so just use `nproc` for now.\r\n\r\nOther solutions would be bad:\r\n\r\n* Passing in the `MAKEJOBS` as a dockerfile env would create a new image if the number of tasks are changed, seems verbose and confusing.\r\n* Leaving `master` as-is would leave CPUs unused if there are more than `4`.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 80,
        "deletions": 85,
        "changed_files": 7,
        "created_at": "2023-09-19T09:10:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Every serialization parameter struct already has the `SER_PARAMS_OPFUNC`, except for one in the tests.\r\n\r\nFor consistency, and to remove verbose code, convert the test to `SER_PARAMS_OPFUNC`, and use it everywhere, then remove the `WithParams` helper.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-18T23:19:34Z",
        "closed_at": "2023-09-18T23:33:02Z",
        "merged_at": null,
        "body": "Bitcoin la familia Thraupidae del sieglu pas\u00e1u como se conoz como 9 de terror que pertenez cada elementu de terror que pertenez cada elementu de terror que pertenez cada elementu de la familia Thraupidae que vive en los Angeles en tolos pa\u00edses del templu del sieglu pas\u00e1u foi dirixida en pel\u00edcules como les de los sos primeros papeles rom\u00e1nticos europeos de terror que pertenez\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 38,
        "changed_files": 3,
        "created_at": "2023-09-18T16:42:41Z",
        "closed_at": "2023-10-02T10:16:31Z",
        "merged_at": "2023-10-02T10:16:31Z",
        "body": "Bitcoin Core has `secure_allocator`, which allocates inside special \"secure\" (non-swappable) memory pages, which may be limited in availability. Currently, every `CKey` object uses 32 such secure bytes, even when the `CKey` object contains the (invalid) value zero.\r\n\r\nChange this to not use memory when the `CKey` is invalid. This is particularly relevant for `BIP324Cipher` which briefly holds a `CKey`, but after receiving the remote's public key and initializing the encryption ciphers, the key is wiped. In case secure memory usage is in high demand, it'd be silly to waste it on P2P encryption keys instead of wallet keys.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-15T19:59:42Z",
        "closed_at": "2023-09-19T16:09:21Z",
        "merged_at": "2023-09-19T16:09:21Z",
        "body": "This is a fixed version of https://github.com/bitcoin/bitcoin/pull/28279:\r\n> Currently, if a pull request has more than one commit, previous commits may fail to compile, or may fail the tests. This is problematic, because it breaks git-bisect, or worse.\r\n>\r\n> Fix this by adding a CI task for this.\r\n\r\nThe new job checks at most 6 commits of a pull request, excluding the top one.\r\n\r\nThe maximum number of tested commits is 6, which derives from the time [constrains](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes).\r\n\r\nFor historical context, please see:\r\n- https://github.com/bitcoin/bitcoin/pull/28279\r\n- https://github.com/bitcoin/bitcoin/pull/28477\r\n- https://github.com/bitcoin/bitcoin/pull/28478\r\n\r\n**A note for reviewers:** To test scripts locally, ensure that you works with a _shallow_ copy of the repo.\r\n",
        "comments": 19
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-09-15T16:10:57Z",
        "closed_at": "2023-09-23T15:56:03Z",
        "merged_at": "2023-09-23T15:56:03Z",
        "body": "Coming from [#28414 comment](https://github.com/bitcoin/bitcoin/pull/28414#pullrequestreview-1618684391) Same thing also for `descriptorprocesspsbt`.\r\n\r\nBefore this PR `descriptorprocesspsbt` returns a boolean `complete` which indicates that the psbt is final, users then have to call `finalizepsbt` to get the hex encoded network transaction.\r\n\r\nIn this PR if the psbt is complete the return object also has the hex encoded network transaction ready for broadcast with `sendrawtransaction`.\r\n\r\nThis save users calling `finalizepsbt` with the descriptor, if it is already complete.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-15T11:21:54Z",
        "closed_at": "2023-09-16T11:15:26Z",
        "merged_at": "2023-09-16T11:15:26Z",
        "body": "One part of the current `v2transport_test` introduced in #28196 assumes that if a bit gets modified in a message, failure should instantly be detected after sending that message. This is not correct in case the length descriptor is modified, as that may cause the receiver to need more data first. Fix this by sending more messages until failure actually occurs.\r\n\r\nDiscovered in https://github.com/bitcoin/bitcoin/pull/27495#issuecomment-1719934041.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 135,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-09-15T09:28:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "See issue #28371\r\n\r\nHaving no peers with sufficiently broad mempool limits may prevent our low-fee transactions from propagating, even though they would seem perfectly valid for us locally.\r\n\r\nHaving too few such peers may cause privacy leaks.\r\n\r\nWe should periodically check that we have sufficient peers with mempool limits comparable to ours.\r\nIf that's not true, we should evict some high-minFeeRate outbound peers to make room for a new peer with hopefully broader limits.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 563,
        "deletions": 54,
        "changed_files": 21,
        "created_at": "2023-09-15T09:09:57Z",
        "closed_at": "2023-10-04T10:23:23Z",
        "merged_at": "2023-10-04T10:23:23Z",
        "body": "Further backports for the `25.x` branch. Currently:\r\n* https://github.com/bitcoin/bitcoin/pull/27622\r\n* https://github.com/bitcoin/bitcoin/pull/27834\r\n* https://github.com/bitcoin/bitcoin/pull/28125\r\n* https://github.com/bitcoin/bitcoin/pull/28452\r\n* https://github.com/bitcoin/bitcoin/pull/28542\r\n* https://github.com/bitcoin/bitcoin/pull/28543\r\n* https://github.com/bitcoin/bitcoin/pull/28551\r\n* https://github.com/bitcoin/bitcoin/pull/28571\r\n* https://github.com/bitcoin-core/gui/pull/751",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-14T22:08:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "On the master branch, the `bench_bitcoin.exe` does not initialize Winsock DLL that is required, for example, here: https://github.com/bitcoin/bitcoin/blob/459272d639b9547f68000d2b9a5a0d991d477de5/src/bench/addrman.cpp#L124\r\n\r\nFor some reasons (I failed to figure them out, unfortunately) the code on the master branch works. But it is easy to trigger the bug with a minor diff:\r\n- a demo branch: https://github.com/hebasto/bitcoin/tree/230914-BUG.demo\r\n- a GHA run: https://github.com/hebasto/bitcoin/actions/runs/6190751633/job/16807644023\r\n\r\nThis PR fixes that bug.\r\n\r\nMore docs:\r\n- https://learn.microsoft.com/en-us/windows/win32/winsock/initializing-winsock\r\n- https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-wsastartup\r\n- https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-wsacleanup\r\n\r\nRequired for the CMake project.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-14T20:47:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently, p2p_filter.py::test_msg_mempool is not testing much. This extends the tests so the interaction between sending `MEMPOOL` messages with a filter that does not include all transactions in the mempool reacts, plus how it interacts with `INV` messages, especially after the changes introduced by #27675 \r\n\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 84,
        "changed_files": 12,
        "created_at": "2023-09-14T15:13:51Z",
        "closed_at": "2023-09-26T13:02:24Z",
        "merged_at": "2023-09-26T13:02:24Z",
        "body": "This is required for https://github.com/bitcoin/bitcoin/pull/28052, but makes sense on its own, because offloading logic to `CAutoFile` instead of re-implementing it allows to delete code and complexity.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-09-14T15:05:23Z",
        "closed_at": "2023-10-11T10:29:28Z",
        "merged_at": "2023-10-11T10:29:28Z",
        "body": "Also update MSAN to use 17.0.2.\r\n\r\nRelated to #28465.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 658,
        "deletions": 63,
        "changed_files": 5,
        "created_at": "2023-09-14T13:59:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR contains changes to `TxOrphanage` needed for package relay stuff. See #27463 for project tracking and #28031 for how this code is used.\r\n\r\nSeparating this PR was suggested in https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1261414179.\r\n\r\nChanges here:\r\n- Change params to wtxid instead of txid.\r\n- Track total size (`CTransaction::GetTotalSize()` of orphans stored, as well as the size per peer.\r\n- Support having multiple announcers for the same tx. This helps us retry resolving the same orphan with multiple peers if it fails the first time.\r\n- Store the deduplicated missing parent txids in `OrphanTx` so that we don't need to calculate them again later on.\r\n- Return the erased wtxids from `EraseForBlock` which includes orphans that conflicted with the block. This helps us delete those orphan resolution attempts from our tracker.\r\n- Enable limiting the total size of orphans instead of just the total count. No new limits are introduced, the default is maximum count * maximum tx size.\r\n- Unit tests + fuzzer.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-09-14T13:46:34Z",
        "closed_at": "2023-09-15T09:16:33Z",
        "merged_at": "2023-09-15T09:16:33Z",
        "body": "Fixes #28469\r\n\r\nThis makes our afl++ harness essentially behave like libFuzzer, with the exception that the whole program does fully reset every 100000 iterations. 100000 is somewhat arbitrary and we could also go with `std::numeric_limits<unsigned in>::max()` but a smaller limit does allow for the occasional reset to counter act some amount of instability in the fuzzing loop (e.g. non-determinism, statefulness).\r\n\r\nIt's a bit of a shame to do this just for the targets whose initial state can't be forked (e.g. threads) because other targets do benefit from not having to redo the state setup. An alternative would be https://github.com/bitcoin/bitcoin/issues/28469#issuecomment-1717526774:\r\n```\r\nIf the goal is to be maximally performant, the fork would need to happen for each fuzz target specifically.\r\nI guess it can be achieved by wrapping __AFL_INIT(); into a helper function and then require all fuzz\r\ntarget initialize() to call it?\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-14T13:20:48Z",
        "closed_at": "2023-09-16T11:17:03Z",
        "merged_at": "2023-09-16T11:17:03Z",
        "body": "`_LIBCPP_ENABLE_ASSERTIONS` is deprecated, and will be removed. [See (from libc++ __config in main)](https://github.com/llvm/llvm-project/blob/b57df9fe9a1a230f277d671bfa0884bbda9fc1c5/libcxx/include/__config#L205-L209):\r\n\r\n> TODO(hardening): remove this in LLVM 19.\r\n> This is for backward compatibility -- make enabling `_LIBCPP_ENABLE_ASSERTIONS` (which predates hardening modes)\r\n> equivalent to setting the safe mode.\r\n> ifdef _LIBCPP_ENABLE_ASSERTIONS\r\n> warning \"_LIBCPP_ENABLE_ASSERTIONS is deprecated, please use _LIBCPP_ENABLE_SAFE_MODE instead.\"\r\n\r\n\r\nFrom LLVM 17, `_LIBCPP_ENABLE_DEBUG_MODE` can be used instead, which also performs more checks than safe mode:\r\n\r\n> Enables the debug mode which contains all the checks from the hardened mode and additionally more expensive checks that may affect the complexity of algorithms. The debug mode is intended to be used for testing, not in production. Mutually exclusive with `_LIBCPP_ENABLE_HARDENED_MODE` and `_LIBCPP_ENABLE_SAFE_MODE`.\r\n\r\nSee https://libcxx.llvm.org/Hardening.html.\r\n\r\nRelated to #28476.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-09-14T11:21:10Z",
        "closed_at": "2023-09-14T12:59:13Z",
        "merged_at": "2023-09-14T12:59:13Z",
        "body": "This should unbreak the GHA CI for now, and allow someone to fix the task in a follow-up. The issue is https://github.com/bitcoin/bitcoin/pull/28279#issuecomment-1719324530 .\r\n\r\nIf no one fixes it, it can be replaced by a Cirrus CI self-hosted runner.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-14T10:57:15Z",
        "closed_at": "2023-09-14T11:17:12Z",
        "merged_at": null,
        "body": "This should fix the issues observed in https://github.com/bitcoin/bitcoin/pull/28279#issuecomment-1719174878",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-14T10:12:39Z",
        "closed_at": "2023-09-15T10:49:47Z",
        "merged_at": "2023-09-15T10:49:47Z",
        "body": "See https://libcxx.llvm.org/Hardening.html as well as https://discourse.llvm.org/t/rfc-removing-the-legacy-debug-mode-from-libc/71026.",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 71,
        "changed_files": 10,
        "created_at": "2023-09-14T00:30:06Z",
        "closed_at": "2023-09-15T13:27:28Z",
        "merged_at": "2023-09-15T13:27:28Z",
        "body": "Cleanups after #25284:\r\n\r\n * ser_action namespacing - https://github.com/bitcoin/bitcoin/pull/25284#discussion_r1316189977 \r\n * make reference implicit - https://github.com/bitcoin/bitcoin/pull/25284#discussion_r1316277030\r\n * function notation - https://github.com/bitcoin/bitcoin/pull/25284#issuecomment-1710714821",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 18,
        "changed_files": 4,
        "created_at": "2023-09-13T18:33:27Z",
        "closed_at": "2023-09-20T11:49:26Z",
        "merged_at": "2023-09-20T11:49:26Z",
        "body": "Without remoing it, if we ever call `PreChecks()` multiple times for any reason during any one `MempoolAccept`, subsequent invocations may have incorrect limits, allowing longer/larger chains than should be allowed.\r\n\r\nCurrently this is only an issue with `submitpackage`, so this is not exposed on mainnet.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 99,
        "deletions": 28,
        "changed_files": 8,
        "created_at": "2023-09-13T17:34:31Z",
        "closed_at": "2023-09-21T16:14:12Z",
        "merged_at": "2023-09-21T16:14:12Z",
        "body": "(Alternative) Minimal subset of https://github.com/bitcoin/bitcoin/pull/28345 to:\r\n\r\n1) Replace MAX_PACKAGE_SIZE with MAX_PACKAGE_WEIGHT which accounts for additional WU necessary to not exclude default chain limit transactions that would have been accepted individually. Avoids sigops vbyte confusion.\r\n2) pass correct vsize to chain limit evaluations in package context\r\n3) stop overly-large packages that have no existing mempool ancestors (also a bugfix by itself if someone sets non-standard chain limits)\r\n\r\nThis should fix the known issues while not blocking additional refactoring later.",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-09-13T14:15:28Z",
        "closed_at": "2023-09-20T11:39:09Z",
        "merged_at": "2023-09-20T11:39:09Z",
        "body": "Some minor fixups to addr fuzzing",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-13T08:06:25Z",
        "closed_at": "2023-09-13T09:26:27Z",
        "merged_at": null,
        "body": "Someone upgraded the `lunar` type persistent workers to Ubuntu Mantic. This broke CI https://cirrus-ci.com/task/4900424734474240?logs=ci#L322 :\r\n\r\n```\r\nGet:17 http://archive.ubuntu.com/ubuntu lunar-backports/universe amd64 Packages [4208 B]\r\nFetched 25.1 MB in 3s (9362 kB/s)\r\nReading package lists...\r\n+ retry -- bash -c 'apt-get install --no-install-recommends --no-upgrade -y systemtap-sdt-dev clang-16 llvm-16 libclang-rt-16-dev python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev libboost-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev bpfcc-tools linux-headers-6.3.0-7-generic build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps bison'\r\nReading package lists...\r\nBuilding dependency tree...\r\nReading state information...\r\nE: Unable to locate package linux-headers-6.3.0-7-generic\r\nE: Couldn't find any package by glob 'linux-headers-6.3.0-7-generic'\r\nE: Couldn't find any package by regex 'linux-headers-6.3.0-7-generic'\r\nBefore retry #1: sleeping 0.3 seconds\r\n```\r\n\r\nFix it by also upgrading the CI config.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-09-13T07:33:13Z",
        "closed_at": "2023-09-14T10:14:02Z",
        "merged_at": "2023-09-14T10:14:02Z",
        "body": "Bump clang in CI from 16 to 17, to:\r\n\r\n* Bump the CI \"EOL\" from Jan 2024 to July 2024, by bumping from Ubuntu lunar to mantic\r\n* Test, ensure compatibility, and make use of any new sanitizer features in clang-17",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 34,
        "deletions": 35,
        "changed_files": 4,
        "created_at": "2023-09-12T20:47:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is joint work with amitiuttarwar.\r\n\r\nThis has the first few commits of #28463. It is not strictly a prerequisite for that, but has changes that in our opinion make sense on their own.\r\nIt improves the handling of maximum numbers for different connection types (that are set during init and don\u2019t change after) by:\r\n* moving all calculations into one place, `CConnMan::Init()`. Before, they were dispersed between `Init`, `CConnman::Init` and other parts of `CConnman`, resulting in some duplicated test code.\r\n* removing the possibility of having a negative maximum of inbound connections, which is hard to argue about\r\n* renaming of variables and doc improvements \r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 192,
        "deletions": 44,
        "changed_files": 9,
        "created_at": "2023-09-12T20:36:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is joint work with amitiuttarwar.\r\n\r\n**Current PR: #28464** with the first few commits, I will keep this in draft for now.\r\n\r\nSee issue #28462 for a broader discussion on increasing the number of block-relay-only connections independent of this particular implementation proposal.\r\n\r\nWe suggest to increase the number of inbound slots allocated to block-relay-only peers by increasing the default maximum connections from 125 to 200, with 60% of inbound slots accessible for tx-relaying peers.\r\nThis is a prerequisite for being able to increase the default number of outgoing block-relay-only peers later, because the current inbound capacity of the network is not sufficient.\r\nIn order to account for incoming tx-relaying peers separately from incoming block-relay peers, changes to the inbound eviction logic are necessary.\r\n\r\nSee the next post in this thread for a more detailed explanation and motivation of the changes.\r\n\r\n### TODOs\r\n*  add test coverage for the new `-inboundrelaypercent` parameter\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-09-12T14:46:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I was expecting this to fail to compile somewhere, maybe in the CI, but that doesn't seem to be the case? \r\nSeems workable given the SSP related changes in the newer mingw-w64 headers (which are in Guix):\r\n> Implement some of the stack protector functions/variables so -lssp is now optional when _FORTIFY_SOURCE or -fstack-protector-strong is used.\r\n\r\nHowever I think this would still be broken in some older environments, so we might have to wait for a compiler bump, or similar. The optional -lssp also seems to work when using older headers, which doesn't make sense.\r\n\r\nGuix build (aarch64)\r\n```bash\r\ne7c156cfd9c203beba7e23b38442114f3f694e50c5e22be0f301127848313083  guix-build-b12c66e674dd/output/dist-archive/bitcoin-b12c66e674dd.tar.gz\r\nbd4fe452474cb9e053d3ebe3dfc7611eae2df220e93e16e785fe5a21113a0bbb  guix-build-b12c66e674dd/output/x86_64-w64-mingw32/SHA256SUMS.part\r\nd88360508b60a6d6bd9f032f7129200c2a2e185ebfe78197f9ff87e76792977e  guix-build-b12c66e674dd/output/x86_64-w64-mingw32/bitcoin-b12c66e674dd-win64-debug.zip\r\nbaa1349d93e6a5653efdf5084547857f4d27ba8a9a2835f1d251a66420253b0d  guix-build-b12c66e674dd/output/x86_64-w64-mingw32/bitcoin-b12c66e674dd-win64-setup-unsigned.exe\r\nac78a623b69e93b7df78fc48464fab7fa9f6aa3bf0f0912b31cd2ba90417232b  guix-build-b12c66e674dd/output/x86_64-w64-mingw32/bitcoin-b12c66e674dd-win64-unsigned.tar.gz\r\n849de39e3168e65026c38efa63a374d6e938aad3a94c3036f02d6eb95ce951f8  guix-build-b12c66e674dd/output/x86_64-w64-mingw32/bitcoin-b12c66e674dd-win64.zip\r\n```\r\n\r\nWould fix #28104.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-12T13:55:46Z",
        "closed_at": "2023-09-14T12:58:44Z",
        "merged_at": "2023-09-14T12:58:44Z",
        "body": "Using shared-memory is faster than reading from stdin, see https://github.com/AFLplusplus/AFLplusplus/blob/7d2122e0596132f9344a5d0896020ebc79cd33db/instrumentation/README.persistent_mode.md",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-12T13:32:52Z",
        "closed_at": "2023-10-13T09:00:04Z",
        "merged_at": "2023-10-13T09:00:04Z",
        "body": "This is a simpler (less hardening) version of https://github.com/bitcoin/bitcoin/pull/24123.\r\n\r\nYou can inspect binaries using `readelf -n`, and look for BTI in a `.note.gnu.property`. i.e\r\n```bash\r\nreadelf -n src/bitcoin-cli\r\n\r\nDisplaying notes found in: .note.gnu.property\r\n  Owner                Data size \tDescription\r\n  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\r\n      Properties: AArch64 feature: BTI\r\n```\r\n\r\nRelated to https://github.com/bitcoin/bitcoin/issues/19075.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 38,
        "changed_files": 10,
        "created_at": "2023-09-12T11:00:48Z",
        "closed_at": "2023-09-14T08:56:29Z",
        "merged_at": "2023-09-14T08:56:29Z",
        "body": "This refactor is required for https://github.com/bitcoin/bitcoin/pull/28052 and https://github.com/bitcoin/bitcoin/pull/28451\r\n\r\nThus, split it out.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 58,
        "deletions": 92,
        "changed_files": 15,
        "created_at": "2023-09-12T01:51:11Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Making the `GeneratingRandomKey` helper (recently introduced in PR #28433, commit b6934fd03f080d437acb1fd2b665503c3d6de785) available to other modules via key.{h.cpp} allows us to create random private keys directly at CKey instantiation, in contrast to the currently needed two-step process of creating an (invalid) CKey instance first and then having to call `MakeNewKey(...)`.\r\n\r\nThis is mostly used in unit tests and a few instances in the wallet.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 22,
        "deletions": 16,
        "changed_files": 8,
        "created_at": "2023-09-11T22:57:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "In this change we allow the timeout for walletpassphrase to be\r\nset to MAX_SLEEP_TIME,\r\nif set as -1 then we then use the MAX_SLEEP_TIME amount\r\n\r\ncontext from PR 28403\r\n\r\nadded release notes for RPC Wallet\r\n\r\nAlso tests were modified to use the max timeout amount using timeout = -1\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 24
    },
    {
        "merged": false,
        "additions": 4369,
        "deletions": 325,
        "changed_files": 60,
        "created_at": "2023-09-11T20:39:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR implements receiving silent payment transactions through the use of a new `ScriptPubKeyMan` type: `SilentPaymentsSPKM`. This is a descriptor wallet only feature, although it does not use descriptors.\r\n\r\nThis is an optional feature, so the only way to use it is to create a new wallet with `createwallet` with `silent_payments=true`. Such wallets will have a single `SilentPaymentsSPKM` that is used for both receiving and change. Since silent payments only have a single address, repeated calls to `getnewaddress` and `getrawchangeaddress` always return the same address, however the receiving and change addresses are different, see the BIP for how the change is generated.\r\n\r\nSince silent payments requires the spent coins in order to extract public keys from them, `TransactionAddedToMempool` is modified to also provide that information. For scanning blocks, the wallet will retrieve that information from the undo data. Additionally, when rescanning, a silent payments wallet must use the slow rescan method.\r\n\r\nThe labels feature has not been fully implemented yet and is left for a followup.\r\n\r\nBased on #28122 and #28201 \r\n\r\nAlternative to #28202",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 14,
        "changed_files": 4,
        "created_at": "2023-09-11T18:16:53Z",
        "closed_at": "2023-09-15T09:04:56Z",
        "merged_at": "2023-09-15T09:04:55Z",
        "body": "It appears that invoking `v = {};` for an `std::vector<...> v` is equivalent to `v.clear()`, which does not release its allocated memory. There are a number of places in the codebase where it appears to be used for that purpose however (mostly written by me). Replace those with `std::vector<...>{}.swap(v);` (using a helper function `ClearShrink` in util/vector.h).\r\n\r\nTo explain what is going on: `v = {...};` is equivalent in general to `v.operator=({...});`. For many types, the `{}` is converted to the type of `v`, and then assigned to `v` - which for `std::vector` would ordinarily have the effect of clearing its memory (constructing a new empty vector, and then move-assigning it to `v`). However, since `std::vector<T>` has an `operator=(std::initializer_list<T>)` defined, it has precedence (since no implicit conversion is needed), and with an empty list, that is equivalent to `clear()`.\r\n\r\nI did consider using `v = std::vector<T>{};` as replacement for `v = {};` instances where memory releasing is desired, but it appears that it does not actually work universally either. `V{}.swap(v);` does.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 200,
        "deletions": 219,
        "changed_files": 44,
        "created_at": "2023-09-11T16:07:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Seems odd to have code that is completely dead.\r\n\r\nFix this by removing all of it.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 295,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-11T14:10:48Z",
        "closed_at": "2023-09-28T11:06:18Z",
        "merged_at": "2023-09-28T11:06:18Z",
        "body": "This fuzzer target caught the issue in https://github.com/bitcoin/bitcoin/pull/28251 within 5 minutes on master branch, and an additional issue which I've applied a preliminary patch to cover.\r\n\r\nFuzzer target does the following:\r\n\r\n1) Picks mempool confgs, including max package size, count, mempool size, etc\r\n2) Generates 1 to 26 transactions with arbitrary coins/fees, the first N-1 spending only confirmed outpoints\r\n3) Nth transaction, if >1, sweeps all unconfirmed outpoints in mempool\r\n4) If N==1, it may submit it through single-tx submission path, to allow for more interesting topologies\r\n5) Otherwise submits through package submission interface\r\n6) Repeat 1-5  a few hundred times per mempool instance\r\n\r\nIn other words, it ends up building chains of txns in the mempool using parents-and-children packages, which is currently the topology supported on master.\r\n\r\nThe test itself is a direct rip of tx_pool.cpp, with a number of assertions removed because they were failing for unknown reasons, likely due to the notification changes of single tx submission to package, which is used to track addition/removal of transactions in the test. I'll continue working on re-adding these assertions for further invariant testing.",
        "comments": 20
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-11T07:20:56Z",
        "closed_at": "2023-09-12T13:27:07Z",
        "merged_at": "2023-09-12T13:27:07Z",
        "body": "This option was introduced in #9194 to ease the transition to segwit; now that most libraries and apps have been updated it should no longer be necessary.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-11T05:17:23Z",
        "closed_at": "2023-09-11T05:21:26Z",
        "merged_at": null,
        "body": "currently lint is issuing warnings for spelling errors created in these 2 commits \r\n\r\nSee https://github.com/bitcoin/bitcoin/pull/27260/checks?check_run_id=16663221395\r\n\r\nhttps://github.com/bitcoin/bitcoin/commit/c00000df1605788acadceb90c22ae9f00db8a9dc and https://github.com/bitcoin/bitcoin/commit/69c31bc748104407c596e84bcef893dc968fd758\r\n\r\nThis change also makes the codebase more readable.\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-10T20:30:26Z",
        "closed_at": "2023-09-10T20:31:17Z",
        "merged_at": null,
        "body": "\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 238,
        "deletions": 275,
        "changed_files": 62,
        "created_at": "2023-09-09T04:41:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Choose whether witness is included in transaction serialization via serialization parameter rather than the stream version. See #25284 and #19477 for previous context.\r\n\r\nWhy is this draft?\r\n * This touches consensus code. Might make sense to merge it shortly after the 26.0 release, so it can bake for as long a time as possible before being included in released code?",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 37,
        "changed_files": 9,
        "created_at": "2023-09-08T21:59:35Z",
        "closed_at": "2023-09-15T11:09:00Z",
        "merged_at": null,
        "body": "This removes the non consensus-critical `solver.h` header from the kernel headers by stripping out the `TxoutType` enum (needed by `policy.h`) into its own header.\r\n\r\nIt's only a small gain but it's also pretty straightforward. Figured i'd PR it directly to gather whether people think that's worth it.",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 47,
        "changed_files": 6,
        "created_at": "2023-09-08T19:25:57Z",
        "closed_at": "2023-09-11T08:44:54Z",
        "merged_at": "2023-09-11T08:44:54Z",
        "body": "This addresses a few remaining comments on #28196:\r\n\r\n* Deduplicate the `V2Transport` constructors (https://github.com/bitcoin/bitcoin/pull/28196#discussion_r1318573111)\r\n* Do not use the send buffer to store garbage (https://github.com/bitcoin/bitcoin/pull/28196#discussion_r1319134141)\r\n* Fix typo (https://github.com/bitcoin/bitcoin/pull/28196#discussion_r1315179378)\r\n\r\nIn addition, also fix an incorrect description in `V2Transport::SendState` (it claimed garbage was sent in the `READY` state, but it's in the `AWAITING_KEY` state).",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 172,
        "changed_files": 16,
        "created_at": "2023-09-08T09:54:37Z",
        "closed_at": "2023-09-20T11:40:57Z",
        "merged_at": "2023-09-20T11:40:57Z",
        "body": "It is https://github.com/bitcoin/bitcoin/pull/27099 revived with addressed [comments](https://github.com/bitcoin/bitcoin/pull/27099#issuecomment-1708705686).\r\n\r\nFrom https://github.com/bitcoin/bitcoin/pull/27099#issue-1584429885:\r\n> Reviving the discussion around using a `.zip` for the distributed macOS binaries, as opposed to a `.dmg`.\r\n>\r\n> Given we only had a single report of the \"no finder window\" issue (#26176), I wonder if that means macOS users were able to figure it out, they gave up/didn't report, or, we just have very few macOS users.\r\n>\r\n> Related to #18128.\r\n\r\nThat's how it looks on macOS:\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/baa637bb-256b-4b24-8645-8c2754c2ae64)\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-08T09:20:09Z",
        "closed_at": "2023-09-09T10:45:22Z",
        "merged_at": "2023-09-09T10:45:22Z",
        "body": "Introduced in #26567. My bad. Thanks AJ for noticing.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-08T03:16:21Z",
        "closed_at": "2023-09-12T08:12:11Z",
        "merged_at": null,
        "body": "A simple increment so that when the mutation is successfully found, the break already exits the for to avoid an unnecessary continuation.\r\n\r\nThe concept is simple, this change should improve the performance of this function, providing a faster completion when meeting the given objective.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-07T18:46:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "...per the IRC discussion around https://www.erisian.com.au/bitcoin-core-dev/log-2023-09-03.html#l-345.\r\n\r\nRationale for not logging the bip61 reject messages (as unknown commands):\r\n\r\n- they are not unknown and were valid before v20; see ##15437\r\n\r\n- peers have been observed that send a high number of these messages (I've seen 10k-20k messages per day from a single peer), thereby flooding the log when `-debug=net`\r\n\r\n- another option would be to continue logging bip61 reject messages, but with the `trace` log level instead\r\n\r\nRationale for improving the log output when receiving unknown commands:\r\n\r\n- logging only a peer id isn't of much help after the fact in understanding the source of the message and debugging what/why\r\n\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 8,
        "changed_files": 8,
        "created_at": "2023-09-07T15:58:38Z",
        "closed_at": "2023-09-09T10:31:11Z",
        "merged_at": "2023-09-09T10:31:11Z",
        "body": "This is also a much simpler replacement for #28327.\r\n\r\nThere are version fields in `CBlockLocator` and `CDiskBlockIndex` that have always been written but discarded when read.\r\n\r\nI intended to convert them to use SerParams as introduced by #25284, which [ended up looking like this](https://github.com/theuni/bitcoin/commit/3e3af451652322c92e8e41cf918e69d608ec7c77). However because we don't currently have any definition of what a hash value would mean for either one of those, and we've never assigned the version field any meaning, I think it's better to just not worry about them.\r\n\r\nIf we ever need to assign meaning in the future, we can introduce `SerParams` as was done for `CAddress`.\r\n\r\nAs for the dummy values chosen:\r\n\r\n`CDiskBlockIndex::DUMMY_VERSION` was easy as the highest ever client version, and I don't expect any objection there.\r\n\r\n`CBlockLocator::DUMMY_VERSION` is hard-coded to the higest _PROTOCOL_ version ever used. This is to avoid a sudden bump that would be visible on the network if CLIENT_VERSION were used instead. In the future, if we ever need to use the value, we can discard anything in the CLIENT_VERSION range (for a few years as needed), as it's quite a bit higher.\r\n\r\nWhile reviewing, I suggest looking at the throwaway `SerParams` commit above as it shows where the call-sites are. I believe that should be enough to convince one's self that hashing is never used.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-09-07T15:17:43Z",
        "closed_at": "2023-09-12T08:45:05Z",
        "merged_at": "2023-09-12T08:45:05Z",
        "body": "Found it while reviewing https://github.com/bitcoin/bitcoin/pull/24230#discussion_r1310863359.\r\n\r\nDuring a reorg, continuing execution when a block cannot be reversed leaves the\r\ncoinstats index in an inconsistent state.\r\nThis was surely overlooked when 'CustomRewind' was implemented.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-07T08:53:29Z",
        "closed_at": "2023-09-07T10:24:28Z",
        "merged_at": "2023-09-07T10:24:27Z",
        "body": "https://guix.gnu.org/manual/en/html_node/Common-Build-Options.html",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 53,
        "changed_files": 31,
        "created_at": "2023-09-06T19:58:47Z",
        "closed_at": "2023-09-14T10:12:08Z",
        "merged_at": "2023-09-14T10:12:08Z",
        "body": "This removes the non-consensus critical `protocol.h` and `netaddress.h` headers from the kernel headers. With this patch, they are no longer required to include in order to use the libbitcoinkernel library. This also allows for the removal of the `compat.h` header from the kernel headers.\r\n\r\nAs an added future benefit it also reduces the number of of kernel headers that include the platform specific `bitcoin-config.h`.\r\n\r\nFor those interested, the currently required kernel headers can be inspected visually with the [sourcetrail](https://github.com/CoatiSoftware/Sourcetrail) tool by looking at the required includes of `bitcoin-chainstate.cpp`.\r\n\r\n---\r\n\r\nThis is part of the [libbitcoinkernel project](https://github.com/bitcoin/bitcoin/issues/27587), namely its stage 1 step 3: Decouple most non-consensus headers from libbitcoinkernel.\r\n",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 35,
        "changed_files": 4,
        "created_at": "2023-09-06T15:45:10Z",
        "closed_at": "2023-09-07T14:30:30Z",
        "merged_at": "2023-09-07T14:30:30Z",
        "body": "Update [libtapi to `1300.0.6.5`](https://github.com/tpoechtrager/apple-libtapi/tree/1300.6.5), [cctools to `986` & ld64 to `711`](https://github.com/tpoechtrager/cctools-port/commits/986-ld64-711).\r\n\r\nUpdating these dependencies fixes the macOS build failures in #27897, when using a native GCC 12 toolchain, which means after this change, we can use use GCC 12 for all HOSTS, rather than splitting between 12 & 10 (for macOS).\r\n\r\nGuix Build (x86_64):\r\n```bash\r\na684a3e7668250610d653e5160115fb50b477339423335b185bd4716c8420e14  guix-build-7d5815293ed8/output/aarch64-linux-gnu/SHA256SUMS.part\r\n9c66b82e2c5b6dbdcabdd962481485f71af5770e8bb573eaefb55d45e85e2875  guix-build-7d5815293ed8/output/aarch64-linux-gnu/bitcoin-7d5815293ed8-aarch64-linux-gnu-debug.tar.gz\r\n63f82714a93e7a3c0e922cdcce7d3b27789d63cdf136dc3a71b74d61b0910ce8  guix-build-7d5815293ed8/output/aarch64-linux-gnu/bitcoin-7d5815293ed8-aarch64-linux-gnu.tar.gz\r\ndcc79295462e0f585753959247ec02b273f5a933fadc5d528c266d56bbdaaf44  guix-build-7d5815293ed8/output/arm-linux-gnueabihf/SHA256SUMS.part\r\n044fc0ad2a8615dd004579b5003fa981ebc4e3bfaacf5eba8a33cea02a9ba518  guix-build-7d5815293ed8/output/arm-linux-gnueabihf/bitcoin-7d5815293ed8-arm-linux-gnueabihf-debug.tar.gz\r\na032899be14fa2987dfd5a21865567d3beea703e778a2f91ec17eddb099d0c46  guix-build-7d5815293ed8/output/arm-linux-gnueabihf/bitcoin-7d5815293ed8-arm-linux-gnueabihf.tar.gz\r\n27d43a97ea6c4ed2e84d9a9dd6c240e8e199174f4491ee1fb62abb1d950a96bd  guix-build-7d5815293ed8/output/arm64-apple-darwin/SHA256SUMS.part\r\n029347186cc55c15152e8c255493ed457e58127ffa536982f3a632fc416b6662  guix-build-7d5815293ed8/output/arm64-apple-darwin/bitcoin-7d5815293ed8-arm64-apple-darwin-unsigned.dmg\r\n791399447c33f7d3ed4d77fd22fde69aa7c87adda9291fca9508237b69b05b80  guix-build-7d5815293ed8/output/arm64-apple-darwin/bitcoin-7d5815293ed8-arm64-apple-darwin-unsigned.tar.gz\r\nb9c72b7f37068889a83384598b6de97c8e39e7a097b661152084a5e69236541d  guix-build-7d5815293ed8/output/arm64-apple-darwin/bitcoin-7d5815293ed8-arm64-apple-darwin.tar.gz\r\n6a249cc6d02d7398b9ed70b251422bf4bb1c2acdaafb5a885870e8ef20d43a89  guix-build-7d5815293ed8/output/dist-archive/bitcoin-7d5815293ed8.tar.gz\r\n064e5e0df21aa177eaf8d67254ad5166b190559f69da68d34174a323d8c975c6  guix-build-7d5815293ed8/output/powerpc64-linux-gnu/SHA256SUMS.part\r\n6aee00585bdd680d42f3341df523b7173dc06defa8f51f98af38c8518ddf4532  guix-build-7d5815293ed8/output/powerpc64-linux-gnu/bitcoin-7d5815293ed8-powerpc64-linux-gnu-debug.tar.gz\r\nd6e51b521c84276d5c9606a96ee36b94bc235370064cf75148d15d3a4011ed9d  guix-build-7d5815293ed8/output/powerpc64-linux-gnu/bitcoin-7d5815293ed8-powerpc64-linux-gnu.tar.gz\r\ne0a133afe0e0e7894d3c6110b7b1895efff8f45abbe473d95100d3c5615dc855  guix-build-7d5815293ed8/output/powerpc64le-linux-gnu/SHA256SUMS.part\r\n8d62884b81fca76720284ae4d5b2a0d0ebfcbcf533d9936c8aa8ab04739540e9  guix-build-7d5815293ed8/output/powerpc64le-linux-gnu/bitcoin-7d5815293ed8-powerpc64le-linux-gnu-debug.tar.gz\r\nc4c90dd3c83a84aa074ab5dc77b82fd2a26d872547037ef2a8a2d11abba1db98  guix-build-7d5815293ed8/output/powerpc64le-linux-gnu/bitcoin-7d5815293ed8-powerpc64le-linux-gnu.tar.gz\r\ndd28d196e89f74cf7666b347e1cbdd16eb90bfe0d5b054ac2edbf0e4f755bd9a  guix-build-7d5815293ed8/output/riscv64-linux-gnu/SHA256SUMS.part\r\n8d3ace8a17d4c1a13786adb3669b1d929485b164c59efb1fe7cf8fe3aad90f73  guix-build-7d5815293ed8/output/riscv64-linux-gnu/bitcoin-7d5815293ed8-riscv64-linux-gnu-debug.tar.gz\r\nbf530b7944dfdd9ffd03b2be541fa349e8598cb39ee5e1bd4be0b5b48bdfcc31  guix-build-7d5815293ed8/output/riscv64-linux-gnu/bitcoin-7d5815293ed8-riscv64-linux-gnu.tar.gz\r\n6172224f94d52eb22a3749b1e3c0639476dfdaff47d15c6a8ec3e6dbf8763f9b  guix-build-7d5815293ed8/output/x86_64-apple-darwin/SHA256SUMS.part\r\nf59f68ad4783ff1ecb09cd84f15bbfc803c856971de5a131fbb1777cf8f1b79a  guix-build-7d5815293ed8/output/x86_64-apple-darwin/bitcoin-7d5815293ed8-x86_64-apple-darwin-unsigned.dmg\r\nac31df20d1e5f3a73aadb5455e804af053b179ca6471b5a57afe3c7df0f09128  guix-build-7d5815293ed8/output/x86_64-apple-darwin/bitcoin-7d5815293ed8-x86_64-apple-darwin-unsigned.tar.gz\r\na33f661386d415f621ab17edf7fe3efa61f0c2b0c3003fecd4f5f6898129992d  guix-build-7d5815293ed8/output/x86_64-apple-darwin/bitcoin-7d5815293ed8-x86_64-apple-darwin.tar.gz\r\n03104057b86de994258587ff5a8de16f48354a7493527e5bb2559714c0e2bf39  guix-build-7d5815293ed8/output/x86_64-linux-gnu/SHA256SUMS.part\r\na9c3f233629038978b9fa11c1353b4e686406851c0e84a5539cf3bc90722d98b  guix-build-7d5815293ed8/output/x86_64-linux-gnu/bitcoin-7d5815293ed8-x86_64-linux-gnu-debug.tar.gz\r\n61db7ec4aa306a6f79628b217c05387b69002d123fcf07d6784cce03d9a8574d  guix-build-7d5815293ed8/output/x86_64-linux-gnu/bitcoin-7d5815293ed8-x86_64-linux-gnu.tar.gz\r\n7f5b42d02d8c026492376b644a94a45613155a0ccc1d3ef9f067b3370d45c4d2  guix-build-7d5815293ed8/output/x86_64-w64-mingw32/SHA256SUMS.part\r\nde23de0fb32c77f9ff91ffe554347c7ddc77fae22212d0e609389b4b7a1d6e29  guix-build-7d5815293ed8/output/x86_64-w64-mingw32/bitcoin-7d5815293ed8-win64-debug.zip\r\n2131ce905aa3452883a9f47b6618506a6cb90c2a1725818084bc4e08856ff8d3  guix-build-7d5815293ed8/output/x86_64-w64-mingw32/bitcoin-7d5815293ed8-win64-setup-unsigned.exe\r\n5555d28d9ea14a50ab296c2b1f1db7f7acde933009334999b6be29a2ed469bc0  guix-build-7d5815293ed8/output/x86_64-w64-mingw32/bitcoin-7d5815293ed8-win64-unsigned.tar.gz\r\n7dc29c317c140ae8a8f487d2d66761c3fae90a5521dd4bfd0d071adbfafb30ef  guix-build-7d5815293ed8/output/x86_64-w64-mingw32/bitcoin-7d5815293ed8-win64.zip\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 32,
        "changed_files": 7,
        "created_at": "2023-09-05T21:20:22Z",
        "closed_at": "2023-09-07T10:20:22Z",
        "merged_at": "2023-09-07T10:20:22Z",
        "body": "In the course of reviewing BIP324 related PRs I noticed a frequent pattern of creating private keys (`CKey` instances) with data consumed from the fuzz data provider:\r\n```\r\n    auto key_data = provider.ConsumeBytes<unsigned char>(32);\r\n    key_data.resize(32);\r\n    CKey key;\r\n    key.Set(key_data.begin(), key_data.end(), /*fCompressedIn=*/true);\r\n```\r\nThis PR introduces a corresponding helper `ConsumePrivateKey` in order to deduplicate code. The compressed flag can either be set to a fixed value, or, if `std::nullopt` is passed (=default), is also consumed from the fuzz data provider via `.ConsumeBool()`.\r\n\r\nNote that this is not a pure refactor, as some of the replaced call-sites previously consumed a random length (`ConsumeRandomLengthByteVector`) instead of a fixed size of 32 bytes for key data. As far as I can see, there is not much value in using a random size, as in all those cases we can only proceed or do something useful with a valid private key, and key data with sizes other than 32 bytes always lead to invalid keys.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 45,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-09-05T21:18:26Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently the verify-binaries script will accept \"wildcards\" such as \"linux\" or \"darwin\" as binary specifiers.\r\n\r\nBuilders however usually only want to verify for their specific architecture-platform that they want to use, or verify everything. Update the script to accept single full architecture-platform specifiers as used by the binary repositories.\r\n\r\nPreviously if you tried to use a complete specifier, e.g. 25.0-x86_64-linux-gnu it would download all `linux-gnu` platform binaries as this is parsed into 4 parts, and so `version_rc` and `version_os` are [unspecified](https://github.com/bitcoin/bitcoin/blob/9d3b216e009a53ffcecd57e7f10df15cccd5fd6d/contrib/verify-binaries/verify.py#L107-L114).\r\n\r\nWith the new parser it's still possible to specify \"25.0-linux\" or \"25.0-x86_64\" to verify multiple builds if so desired.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 174,
        "deletions": 134,
        "changed_files": 2,
        "created_at": "2023-09-05T16:12:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Refactors the code a bunch, and adds `--poolnum` / `--poolid` options so that signers can tag their coinbases in a way that explorers can recognise (see also https://github.com/bitcoin-data/mining-pools/pull/82 and https://github.com/mempool/mempool/issues/2903).\r\n\r\nThe refactoring in particular helps enable the \"try using inquisition's getblocktemplate, and if that doesn't work fall back to core's getblocktemplate\" logic, as described/implemented in https://github.com/bitcoin-inquisition/bitcoin/pull/7",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 46,
        "changed_files": 8,
        "created_at": "2023-09-05T13:03:59Z",
        "closed_at": "2023-09-12T16:28:31Z",
        "merged_at": "2023-09-12T16:28:31Z",
        "body": "See https://github.com/bitcoin/bitcoin/pull/28363#discussion_r1315753887\r\n\r\n`walletprocesspsbt` currently returns a base64-encoded PSBT and a boolean indicating if the tx is \"complete\". If it is complete, the base64 PSBT can be finalized with `finalizepsbt` which returns the hex-encoded transaction suitable for `sendrawtransaction`.\r\n\r\nWith this patch, `walletprocesspsbt` return object will ALSO include the broadcast-able hex string if the tx is already final. This saves users the extra step of calling `finalizepsbt` assuming they have already inspected and approve the transaction from earlier steps.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-05T12:12:47Z",
        "closed_at": "2023-09-07T15:10:23Z",
        "merged_at": "2023-09-07T15:10:23Z",
        "body": null,
        "comments": 8
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-05T11:46:18Z",
        "closed_at": "2023-09-05T14:40:07Z",
        "merged_at": "2023-09-05T14:40:07Z",
        "body": "Resolves build failures under Python 3.12, i.e building on rawhide:\r\n```bash\r\nmake[3]: Nothing to be done for 'install-exec-am'.\r\n /usr/bin/mkdir -p '/bitcoin/depends/work/staging/aarch64-unknown-linux-gnu/xcb_proto/1.14.1-4a91ac9dc41/bitcoin/depends/aarch64-unknown-linux-gnu/lib/python3.12/site-packages/xcbgen'\r\n /usr/bin/install -c -m 644 __init__.py error.py expr.py align.py matcher.py state.py xtypes.py '/bitcoin/depends/work/staging/aarch64-unknown-linux-gnu/xcb_proto/1.14.1-4a91ac9dc41/bitcoin/depends/aarch64-unknown-linux-gnu/lib/python3.12/site-packages/xcbgen'\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 2, in <module>\r\nModuleNotFoundError: No module named 'imp'\r\nmake[3]: *** [Makefile:271: install-pkgpythonPYTHON] Error 1\r\n```\r\n\r\n`imp` was removed in 3.12: https://docs.python.org/3/library/imp.html.\r\n\r\nGithub-Pull: #28097\r\nRebased-From: 7cb88c8b46723d306b96953a6a60c90a4ab211e3\r\n\r\nAlso being backported for 25.x in #28047.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 16,
        "changed_files": 8,
        "created_at": "2023-09-05T10:13:28Z",
        "closed_at": "2023-09-06T16:08:43Z",
        "merged_at": "2023-09-06T16:08:43Z",
        "body": "This reduces bloat, complexity, and makes tests less fragile to intermittent failures, see https://github.com/bitcoin/bitcoin/pull/27675#discussion_r1315648343.\r\n\r\nThis should not cause any noticeable slowdown, or may even be faster, because active polling will be done at most once.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 385,
        "deletions": 4,
        "changed_files": 7,
        "created_at": "2023-09-05T03:02:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Updates `-datacarriersize` to be effective with newer datacarrying styles.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-04T23:35:41Z",
        "closed_at": "2023-09-04T23:39:19Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-04T18:52:28Z",
        "closed_at": "2023-09-04T18:53:25Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1476,
        "deletions": 694,
        "changed_files": 29,
        "created_at": "2023-09-04T16:53:07Z",
        "closed_at": "2023-09-05T09:38:30Z",
        "merged_at": "2023-09-05T09:38:30Z",
        "body": "We had previously pulled in a non-released commit along with #27479. The necessary changes have now been released in version 0.4.0, so update to that.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 15,
        "changed_files": 6,
        "created_at": "2023-09-04T14:57:02Z",
        "closed_at": "2023-10-05T15:19:49Z",
        "merged_at": "2023-10-05T15:19:49Z",
        "body": "This bumps all timeouts for all `walletpassphrase` to avoid intermittent issues in `valgrind` (or other sanitizers).\r\n\r\nAs an idea for a follow-up, `walletpassphrase` could be changed to treat `0` as \"no timeout\" instead of \"instant timeout\".\r\n\r\nExample failure:\r\n\r\n```\r\n node0 2023-09-03T22:44:38.374955Z [httpworker.3] [rpc/server.cpp:594] [RPCRunLater] [rpc] queue run of timer lockwallet(w6) in 60 seconds (using HTTP) \r\n test  2023-09-03T22:44:40.173000Z TestFramework.bitcoincli (DEBUG): Running bitcoin-cli ['-rpcwallet=w6', 'getnewaddress', '', 'legacy'] \r\n node0 2023-09-03T22:44:59.810893Z [http] [httpserver.cpp:255] [http_request_cb] [http] Received a POST request for /wallet/w6 from 127.0.0.1:48928 \r\n node0 2023-09-03T22:44:59.813132Z [httpworker.1] [rpc/request.cpp:181] [parse] [rpc] ThreadRPCServer method=getnewaddress user=__cookie__ \r\n node0 2023-09-03T22:44:59.837183Z [httpworker.1] [wallet/sqlite.cpp:53] [TraceSqlCallback] [/ci_container_base/ci/scratch/test_runner/test_runner_\u20bf_\ud83c\udfc3_20230903_183350/wallet_createwallet_171/node0/regtest/w6/wallet.dat] SQLite Statement: INSERT or REPLACE into main values(?, ?) \r\n node0 2023-09-03T22:44:59.929735Z [httpworker.1] [wallet/sqlite.cpp:53] [TraceSqlCallback] [/ci_container_base/ci/scratch/test_runner/test_runner_\u20bf_\ud83c\udfc3_20230903_183350/wallet_createwallet_171/node0/regtest/w6/wallet.dat] SQLite Statement: INSERT or REPLACE into main values(?, ?) \r\n node0 2023-09-03T22:44:59.934484Z [httpworker.1] [wallet/sqlite.cpp:53] [TraceSqlCallback] [/ci_container_base/ci/scratch/test_runner/test_runner_\u20bf_\ud83c\udfc3_20230903_183350/wallet_createwallet_171/node0/regtest/w6/wallet.dat] SQLite Statement: INSERT or REPLACE into main values(?, ?) \r\n node0 2023-09-03T22:44:59.935467Z [httpworker.1] [wallet/sqlite.cpp:53] [TraceSqlCallback] [/ci_container_base/ci/scratch/test_runner/test_runner_\u20bf_\ud83c\udfc3_20230903_183350/wallet_createwallet_171/node0/regtest/w6/wallet.dat] SQLite Statement: INSERT or REPLACE into main values(?, ?) \r\n test  2023-09-03T22:45:02.328000Z TestFramework.bitcoincli (DEBUG): Running bitcoin-cli ['-rpcwallet=w6', 'signmessage', 'mqatqH4VQmrZ81nxUfrnfcLnxgbzhZb4PC', 'test'] \r\n node0 2023-09-03T22:45:20.269375Z [http] [httpserver.cpp:255] [http_request_cb] [http] Received a POST request for /wallet/w6 from 127.0.0.1:44618 \r\n node0 2023-09-03T22:45:20.270670Z [httpworker.2] [rpc/request.cpp:181] [parse] [rpc] ThreadRPCServer method=signmessage user=__cookie__ \r\n test  2023-09-03T22:45:23.490000Z TestFramework.bitcoincli (DEBUG): Running bitcoin-cli ['-rpcwallet=w6', 'keypoolrefill', '1'] \r\n node0 2023-09-03T22:45:40.244603Z [http] [httpserver.cpp:255] [http_request_cb] [http] Received a POST request for /wallet/w6 from 127.0.0.1:32854 \r\n node0 2023-09-03T22:45:40.293021Z [httpworker.0] [rpc/request.cpp:181] [parse] [rpc] ThreadRPCServer method=keypoolrefill user=__cookie__ \r\n test  2023-09-03T22:45:41.852000Z TestFramework (ERROR): JSONRPC error \r\n                                   Traceback (most recent call last):\r\n                                     File \"/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py\", line 131, in main\r\n                                       self.run_test()\r\n                                     File \"/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/wallet_createwallet.py\", line 156, in run_test\r\n                                       w6.keypoolrefill(1)\r\n                                     File \"/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_node.py\", line 732, in __call__\r\n                                       return self.cli.send_cli(self.command, *args, **kwargs)\r\n                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n                                     File \"/ci_container_base/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_node.py\", line 795, in send_cli\r\n                                       raise JSONRPCException(dict(code=int(code), message=message))\r\n                                   test_framework.authproxy.JSONRPCException: Error: Please enter the wallet passphrase with walletpassphrase first. (-13)\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-04T14:21:07Z",
        "closed_at": "2023-09-05T08:44:00Z",
        "merged_at": "2023-09-05T08:43:59Z",
        "body": "See: https://github.com/actions/checkout/releases/tag/v4.0.0.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 180,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-09-04T08:04:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### Overview\r\nThis pr introduces additional conditionals into ```IsUnspendable()``` to remove provably unspendable P2PK and P2MS tx outpoints from the UTXO set. This is done by using ```IsFullyValid()``` to check that the public key(s) for the outpoints script are valid. This trims nearly 20K outpoints from the UTXO set at height 805618. https://gist.github.com/russeree/85fb9519e0a1fc166177a6d5e0e15be2  \r\n\r\nA side effect of this PR is it removes the use case for uncompressed public keys through standard tx types to store arbitrary data in the UTXO set.\r\n\r\n### P2PK\r\nP2PK outpoints with a single pubkey that is invalid can by flagged as unspendable becuase the public key does not exist on the SECP256K1 curve and thus no private key exists to make OP_CHECKSIG evaluate to true. \r\n\r\nScript must be in the format of ```OP_PUSHBBYTES PUBKEY OP_CHECKSIG(VERIFY)```\r\n\r\n### P2MS\r\nP2MS outpoints that do not have enough valid public keys to meet the threshold. where (n-k < m) where k is the number of invalid public keys. \r\n\r\nScript must be in the format of ```OP_(N) PUBKEY1 .... OP_(N) OP_CHECKMULTISIG(VERIFY)```",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-03T21:05:54Z",
        "closed_at": "2023-09-04T08:30:55Z",
        "merged_at": null,
        "body": "For some reason cirrus's /tmp permissions are set to only allow write access by the root user, causing apt-get to fail.",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-03T12:29:53Z",
        "closed_at": "2023-09-05T08:58:58Z",
        "merged_at": "2023-09-05T08:58:58Z",
        "body": "This simple PR adds missing test coverage for ignoring repeated `getaddr` requests (introduced in #7856, commit 66b07247a7a9e48e082502338176cc06edf61474):\r\nhttps://github.com/bitcoin/bitcoin/blob/6f03c45f6bb5a6edaa3051968b6a1ca4f84d2ccb/src/net_processing.cpp#L4642-L4648",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 48,
        "deletions": 9,
        "changed_files": 5,
        "created_at": "2023-09-02T22:57:54Z",
        "closed_at": "2023-10-01T22:30:42Z",
        "merged_at": null,
        "body": "As BnB is an algorithm specialized in seeking changeless solutions, the\r\nfinal selection amount (the sum of all the selected UTXOs amount) can be\r\nas high as one unit below the amount where the transaction creation\r\nprocess starts creating a change output. Which is: target + min_viable_change - 1.\r\n\r\nIn other words, the range of the possible solutions is:\r\ntarget <= solution_amount < target + min_viable_change - 1.\r\n\r\nCode level description:\r\nWe have a discrepancy on the threshold at which we create, or not, \"change\" between the BnB\r\nalgorithm and the, higher level, transaction creation process.\r\n\r\nBnB selection upper bound uses `cost_of_change`, while the transaction creation process uses\r\nthe `min_viable_change` variable to obtain the resulting change amount from the coin selection\r\nsolution ([here](https://github.com/bitcoin/bitcoin/blob/6f03c45f6bb5a6edaa3051968b6a1ca4f84d2ccb/src/wallet/spend.cpp#L987)).\r\n\r\nEssentially, this means that under certain circumstances; when the BnB solution excess is\r\nin-between `min_viable_change` and `cost_of_change`, the BnB algorithm returns a\r\nsuccessful solution which, under the transaction creation process perspective, requires to create\r\nchange output. This, isn't an expected behavior as BnB is specialized to only return a changeless\r\nsolution.\r\n\r\nThis can happen when min_viable_change <= BnB_solution_amount - target < cost_of_change.\r\n\r\nNote:\r\nThis should solve the issue presented in #28372.\r\n\r\nTesting Note:\r\nI have decoupled the test in a standalone commit so it can be easily cherry-picked on top of master to\r\nverify the test failure vs the test passing here after the changes.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 1104,
        "deletions": 749,
        "changed_files": 84,
        "created_at": "2023-09-02T15:29:44Z",
        "closed_at": "2023-09-02T15:33:32Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 138,
        "deletions": 168,
        "changed_files": 22,
        "created_at": "2023-09-02T12:40:05Z",
        "closed_at": "2023-10-11T18:08:34Z",
        "merged_at": "2023-10-11T18:08:34Z",
        "body": "In reference to issue  #28362  refactoring of functional tests to use pathlib over os.path to reduce verbosity and increase the intuitiveness of managing file access.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 99,
        "deletions": 80,
        "changed_files": 14,
        "created_at": "2023-09-02T09:47:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Motivation\r\n* It seems preferable to use stdlib data structures instead of boost if they can achieve close to the same thing.\r\n* Code external to mempool should ideally use its public helper methods instead of accessing `mapTx` directly.\r\n* Reduce the number of complex boost multi index type interactions\r\n* Also see #28335 for further context/motivation. This PR together with #28385 simplifies that one.\r\n\r\nOverview of things done in this PR:\r\n* Make `vTxHashes` a vector of transaction references instead of a pair of transaction hash and iterator. The trade off here is that the iterator is retrieved on the fly with `get_iter_from_wtxid` instead of being cached in `vTxHashes`.\r\n* Replace `mapTx` access with `CTxMemPool` helper methods\r\n  * Please note when reviewing that `infoAll` is already in other places that grab all mempool transactions as well, such as in net_processing when responding to bip35 messages.\r\n* Simplify `checkChainLimits` call in `node/interfaces.cpp`\r\n* Make `MiniMinerMempoolEntry` ctor more explicit\r\n* Make `CTxMemPoolEntry`s `lockPoints`mutable such that they can be changed with a const iterator directly instead of going through `mapTx`\r\n* Make `BlockAssembler`'s `inBlock` and `failedTx` sets of transaction hashes.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 432,
        "deletions": 462,
        "changed_files": 54,
        "created_at": "2023-09-01T23:47:15Z",
        "closed_at": "2023-09-02T03:40:35Z",
        "merged_at": null,
        "body": "In reference to issue #28362 refactoring of functional tests to use pathlib over os.path to reduce verbosity and increase the intuitiveness of managing file access.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-01T18:59:42Z",
        "closed_at": "2023-09-05T08:59:41Z",
        "merged_at": "2023-09-05T08:59:40Z",
        "body": "Fixes #28290\r\n\r\nThese fixed timeouts aren't affected by the `timeout_factor` option and can therefore cause timeouts in slow environments.\r\nThey are also unnecessary for the test because they measure the wrong thing:\r\nWhile there is an internal waiting time of 60s within `ThreadOpenConnections` (beginning only when that thread is started) for fixed seeds querying, the timeouts here don't measure that but the time from startup until a debug log message is encountered, during which many other things happen in init, so they don't make much sense to me in the first place.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 319,
        "deletions": 129,
        "changed_files": 9,
        "created_at": "2023-09-01T15:52:38Z",
        "closed_at": "2023-09-23T17:42:56Z",
        "merged_at": "2023-09-23T17:42:56Z",
        "body": "Motivation\r\n- I think it's preferable to use stdlib data structures instead of depending on boost if we can achieve the same thing.\r\n- Also see #28335 for further context/motivation. This PR simplifies that one.\r\n\r\nThings done in this PR:\r\n- Add a bench for `DisconnectedBlockTransactions` where we reorg and the new chain has {100%, 90%, 10%} of the same transactions. AFAIU in practice, it's usually close to 100%.\r\n- Rewrite `DisconnectedBlockTransactions` as a `std::list` + `unordered_map` instead of a boost multi index container.\r\n  - On my machine, the bench suggests the performance is very similar.\r\n- Move `DisconnectedBlockTransactions` from txmempool.h to its own kernel/disconnected_transactions.h. This struct isn't used by txmempool and doesn't have much to do with txmempool. My guess is that it's been living there for convenience since the boost includes are there.\r\n",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-01T08:55:49Z",
        "closed_at": "2023-09-01T12:55:29Z",
        "merged_at": "2023-09-01T12:55:29Z",
        "body": "This PR aims to reduce the frequency of functional test failures on Windows like this [one](https://github.com/bitcoin/bitcoin/actions/runs/6040229997):\r\n```\r\n\r\n2023-09-01T01:05:01.850000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 552, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_node.py\", line 296, in wait_for_rpc_connection\r\n    self._raise_assertion_error(\"Unable to connect to bitcoind after {}s\".format(self.rpc_timeout))\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_node.py\", line 177, in _raise_assertion_error\r\n    raise AssertionError(self._node_msg(msg))\r\nAssertionError: [node 1] Unable to connect to bitcoind after 2400s\r\n```\r\n\r\nThis code has had zero failures in my personal repository in more than 25 runs (and is still counting).\r\n\r\n---\r\n\r\nThe second commit is a minor improvement to avoid \"Cache save failed.\" warnings during job re-runs. For [example](https://github.com/bitcoin/bitcoin/actions/runs/5998688759):\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/d8a049df-fccd-4395-99c9-4be01d0ea706)\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 155336,
        "deletions": 91848,
        "changed_files": 113,
        "created_at": "2023-09-01T07:10:43Z",
        "closed_at": "2023-09-02T17:46:46Z",
        "merged_at": "2023-09-02T17:46:46Z",
        "body": "This PR follows our [Release Process](https://github.com/bitcoin/bitcoin/blob/master/doc/release-process.md).\r\n\r\nRequired to open Transifex translations for 26.0 on 2023-09-01 as it's [planned](https://github.com/bitcoin/bitcoin/issues/27758).\r\n\r\nThe previous similar PR: https://github.com/bitcoin/bitcoin/pull/27169.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-31T22:45:38Z",
        "closed_at": "2023-08-31T23:22:25Z",
        "merged_at": null,
        "body": "\u2026_test.json\r\n\r\nThis is the only spot in the codebase that uses the capitalization as \"BitCoin\" so I assume it to be incorrect. Let me know if I am wrong.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-08-31T17:06:28Z",
        "closed_at": "2023-09-21T16:31:16Z",
        "merged_at": "2023-09-21T16:31:16Z",
        "body": "Remove the m_is_test_chain bool\r\nCompiled and run tests locally\r\n\r\n#28376",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 1104,
        "deletions": 749,
        "changed_files": 84,
        "created_at": "2023-08-31T13:01:51Z",
        "closed_at": "2023-08-31T13:03:24Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 568,
        "deletions": 120,
        "changed_files": 19,
        "created_at": "2023-08-31T10:14:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "split off from #24748 to keep commits related to cryptography and functional test framework changes separate.\r\n\r\nThis PR adds python implementation and unit tests for HKDF, ChaCha20, Poly1305, ChaCha20Poly1305 AEAD, FSChaCha20 and FSChaCha20Poly1305 AEAD.\r\n\r\nThey're based on https://github.com/bitcoin/bips/blob/cc177ab7bc5abcdcdf9c956ee88afd1052053328/bip-0324/reference.py for easy review.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-30T20:03:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "closes: #27414\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-08-30T18:48:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Instead of \"randomly\" fuzzing `min_viable_change` and `change_output_size`, and since they're correlated, this PR changes the approach to fuzz them according to the logic in `CreateTransactionInternal`.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 28,
        "changed_files": 2,
        "created_at": "2023-08-30T12:22:44Z",
        "closed_at": "2023-08-30T15:20:08Z",
        "merged_at": "2023-08-30T15:20:07Z",
        "body": "Fixed upstream in 3.06.\r\nSee https://github.com/kichik/nsis/commit/229b6136c41ba5caba25936f4927476d20aa283f and https://sourceforge.net/p/nsis/bugs/1248/.\r\n\r\nSplit from #27897, as that is still WIP, and GCC 12 isn't required to make this change.\r\nThis commit could have gone in with #28328.\r\n\r\nGuix Build (same for x86_64 & aarch64):\r\n```bash\r\n81a565bc5c719d04cb6640cf7593d7fdd6e37935dc2ac9280f638e625c1c5f87  guix-build-588068d5a12b/output/aarch64-linux-gnu/SHA256SUMS.part\r\n6f1ed3a2a053c3e90f1511fe33239378fc2631f46d795a955807ab39e2b93dfc  guix-build-588068d5a12b/output/aarch64-linux-gnu/bitcoin-588068d5a12b-aarch64-linux-gnu-debug.tar.gz\r\nc8a2904c651b862d9dce3f4094b59b66be5e745111b75c420452bd04ab9cdbe3  guix-build-588068d5a12b/output/aarch64-linux-gnu/bitcoin-588068d5a12b-aarch64-linux-gnu.tar.gz\r\n654bb5d89e12f936e63e2c910c78842c43db7048a895052295f613a50b639857  guix-build-588068d5a12b/output/arm-linux-gnueabihf/SHA256SUMS.part\r\n8a1b67f3c12b579b374c559f59d709bd83bcd3cff3ec5a4274119c0e5f6c388f  guix-build-588068d5a12b/output/arm-linux-gnueabihf/bitcoin-588068d5a12b-arm-linux-gnueabihf-debug.tar.gz\r\n7d8a3327599702a94be4b8d49eda7857f732c290773a775c6de507da656e271b  guix-build-588068d5a12b/output/arm-linux-gnueabihf/bitcoin-588068d5a12b-arm-linux-gnueabihf.tar.gz\r\n215786257409612206db7ff4008dbcb6a60dcf6cc92a1a437124a1483612f699  guix-build-588068d5a12b/output/arm64-apple-darwin/SHA256SUMS.part\r\ne36b41c531d34ca843028b778163bed4ce4c52310ed8056eff8a1a1b47b61fb7  guix-build-588068d5a12b/output/arm64-apple-darwin/bitcoin-588068d5a12b-arm64-apple-darwin-unsigned.dmg\r\necb488625bdf566e7c63781795f296ec4f630ef90edf7e6073591ed1d9b90bda  guix-build-588068d5a12b/output/arm64-apple-darwin/bitcoin-588068d5a12b-arm64-apple-darwin-unsigned.tar.gz\r\nd8f9759a903cd052ea3e562d1ef186c9dad38089205650d1bcb218e7506c378f  guix-build-588068d5a12b/output/arm64-apple-darwin/bitcoin-588068d5a12b-arm64-apple-darwin.tar.gz\r\n385084fe6d80d0b563b1b20d558b29681fd5bf624bc70c403e831cd8aae45dc0  guix-build-588068d5a12b/output/dist-archive/bitcoin-588068d5a12b.tar.gz\r\n89504c8be28482d4f70740d6865aa26db0e1854d0b35598c43462cd35f0b49c4  guix-build-588068d5a12b/output/powerpc64-linux-gnu/SHA256SUMS.part\r\n5836bfb4c9a11318362a89db25e4cd9363688ae6be18a6abfd1974a52c0b2759  guix-build-588068d5a12b/output/powerpc64-linux-gnu/bitcoin-588068d5a12b-powerpc64-linux-gnu-debug.tar.gz\r\n3e6f4481a594316ab08ea946c5fac6055ca8a81a91ce0a20c44976b3bc4f8d0d  guix-build-588068d5a12b/output/powerpc64-linux-gnu/bitcoin-588068d5a12b-powerpc64-linux-gnu.tar.gz\r\n4e753efe5a20cf6f1e83e604d9f8ba0d79b3c96fc5d5487ec7ed0f33c819b99a  guix-build-588068d5a12b/output/powerpc64le-linux-gnu/SHA256SUMS.part\r\n9d29e49b519ce1d683531699dd15e72495052151b21404affc50e7b228155eb1  guix-build-588068d5a12b/output/powerpc64le-linux-gnu/bitcoin-588068d5a12b-powerpc64le-linux-gnu-debug.tar.gz\r\n511179d90bbf6beb45b6168575a78600d38a060891dc1aa8f11f0adc5ba51f87  guix-build-588068d5a12b/output/powerpc64le-linux-gnu/bitcoin-588068d5a12b-powerpc64le-linux-gnu.tar.gz\r\nd46184105524d59a75066b067b63df6bfd2203d8003c343a5898ee7d4e4f78e5  guix-build-588068d5a12b/output/riscv64-linux-gnu/SHA256SUMS.part\r\nb6434ec5a4a046b9448f36f5596f6db0f8cd71a3e4383827869fcbaa25e005e4  guix-build-588068d5a12b/output/riscv64-linux-gnu/bitcoin-588068d5a12b-riscv64-linux-gnu-debug.tar.gz\r\n237e37ccae4095a1d8aa34d6b967655561ba0a524dfb79e3dcd4c18ad8f8a222  guix-build-588068d5a12b/output/riscv64-linux-gnu/bitcoin-588068d5a12b-riscv64-linux-gnu.tar.gz\r\ndb28897936262e344da8011d37afde97ed53ba4f5ce1a3f935d258284b22e649  guix-build-588068d5a12b/output/x86_64-apple-darwin/SHA256SUMS.part\r\n8d71763fc748cde1f68785eef4b1a498c1ec4c13cf94f02ad8727debe0d94a1d  guix-build-588068d5a12b/output/x86_64-apple-darwin/bitcoin-588068d5a12b-x86_64-apple-darwin-unsigned.dmg\r\n1e0bf2ef0f65f2e7fe5439fe0a15a4803e06d7c42dae06133be5d1b67fa30657  guix-build-588068d5a12b/output/x86_64-apple-darwin/bitcoin-588068d5a12b-x86_64-apple-darwin-unsigned.tar.gz\r\n2d71083593583f3a3ed2e83d4a05f67338e9cb51cb730d238827eef7d3e9007e  guix-build-588068d5a12b/output/x86_64-apple-darwin/bitcoin-588068d5a12b-x86_64-apple-darwin.tar.gz\r\ncc3cc2c1077a04d5643ca21a43b8b7f233b8c743eb73f066643ddfd4a1e1ce27  guix-build-588068d5a12b/output/x86_64-linux-gnu/SHA256SUMS.part\r\ne18c1c0c1cf836c9e540edd969d2657afd3847345b1e0a6e5a9bebfd35782c47  guix-build-588068d5a12b/output/x86_64-linux-gnu/bitcoin-588068d5a12b-x86_64-linux-gnu-debug.tar.gz\r\n4c88aa50227ccd7bb9069369cfc2196de42212f5d0553902155346ae39ef2401  guix-build-588068d5a12b/output/x86_64-linux-gnu/bitcoin-588068d5a12b-x86_64-linux-gnu.tar.gz\r\n51f9f0d9c21598d9d37132e21c786378468c50c393b46e084d81c504186238cd  guix-build-588068d5a12b/output/x86_64-w64-mingw32/SHA256SUMS.part\r\na4a0b55a40ba17b70c93eaba132e31c94cb2380cad0fe4e2ebe199c68a49c293  guix-build-588068d5a12b/output/x86_64-w64-mingw32/bitcoin-588068d5a12b-win64-debug.zip\r\n75495c9a00ee7401b96afa51c93fe56d8b10a531ce0526f5b4713b9e8aaab9a5  guix-build-588068d5a12b/output/x86_64-w64-mingw32/bitcoin-588068d5a12b-win64-setup-unsigned.exe\r\na6e8416846ebea253d2b3c5c40f60a227bd5cfb2272a477cf364a085fea140e4  guix-build-588068d5a12b/output/x86_64-w64-mingw32/bitcoin-588068d5a12b-win64-unsigned.tar.gz\r\n2bbd6cd49ad0297a5b3279a5cfbcbb35586cfdd72388e5e1ef2d87e1c8a9cf97  guix-build-588068d5a12b/output/x86_64-w64-mingw32/bitcoin-588068d5a12b-win64.zip\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-30T12:05:23Z",
        "closed_at": "2023-08-31T12:37:19Z",
        "merged_at": "2023-08-31T12:37:19Z",
        "body": "Compiling and running the tests is always required, so fill it in to avoid having to type it manually every time.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 329,
        "deletions": 121,
        "changed_files": 18,
        "created_at": "2023-08-30T10:45:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is an attempt to  #11775 \r\n\r\nThis Pr will enable fee estimator to listen to ValidationInterface notifications to process new transactions added and removed from the mempool.\r\n\r\nThis PR includes the following changes:\r\n\r\n- Added a new callback to the Validation Interface `MempoolTransactionsRemovedForConnectedBlock`, which notifies listeners about the transactions that have been removed due to a new block being connected, along with the height at which the transactions were removed.\r\n- Modified the `TransactionAddedToMempool` callback parameter to include additional information about the transaction needed for fee estimation.\r\n- Updated `CBlockPolicyEstimator` to process transactions using` CTransactionRef` instead of `CTxMempoolEntry.`\r\n- Implemented the `CValidationInterface` interface in `CBlockPolicyEstimater` and overridden the `TransactionAddedToMempool`, `TransactionRemovedFromMempool`, and `MempoolTransactionsRemovedForConnectedBlock` methods to receive updates from their notifications.\r\n\r\nPrior to this PR, the fee estimator updates from the mempool, i.e whenever a new block is connected all transactions in the block that are in our mempool are going to be removed using the `removeForBlock` function in `txmempool.cpp`. \r\n\r\nThis removal triggered updates to the fee estimator. As a result, the fee estimator would block mempool's `cs` until it finished updating every time a new block was connected.\r\nInstead of being blocked only on mempool tx removal, we were blocking on both tx removal and fee estimator updating.\r\nIf we want to further improve fee estimation, or add heavy-calulation steps to it, it is currently not viable as we would be slowing down block relay in the process\r\n\r\nThis PR is smaller in terms of the changes made compared to #11775, as it focuses solely on enabling fee estimator updates from the validationInterface/cscheduler thread notifications.\r\n\r\nI have not split the validation interface because, as I understand it, the rationale behind the split in #11775 was to have `MempoolInterface` signals come from the mempool and `CValidationInterface` events come from validation. I believe this separation can be achieved in a separate refactoring PR when the need arises.\r\n\r\nAlso left out some commits from #11775\r\n- Some refactoring which are no longer needed.\r\n- Handle reorgs much better in fee estimator. \r\n- Track witness hash malleation in fee estimator \r\n\r\nI believe they are a separate change that can come in a follow-up after this.\r\n\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 75,
        "deletions": 90,
        "changed_files": 5,
        "created_at": "2023-08-29T22:17:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "PR #26152 moved waste calculation into SelectionResult to be able to correct the waste score on basis of the bump_fee_group_discount for overlapping ancestries. This left two functions with largely overlapping purpose, where one was simply a wrapper of the other. This PR cleans up the overlap, and fixes the double-meaning of `change_cost` where the `GetChange()` function assumed that no change was created when `change_cost` was set to 0. This behavior was exploited in a bunch of tests, but is problematic, because a `change_cost` of 0 is permitted with custom settings for feerate and discard_feerate (i.e. when they\u2019re both 0).\r\n\r\nRequires #26152, only last two commits are new.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 35,
        "changed_files": 6,
        "created_at": "2023-08-29T13:32:45Z",
        "closed_at": "2023-08-31T16:55:55Z",
        "merged_at": "2023-08-31T16:55:55Z",
        "body": "This was taken from #28031 (see #27463 for project tracking).\r\n\r\n- Log wtxids in addition to txids when possible. This allows us to track the fate of a transaction from inv to mempool accept/reject through logs.\r\n- Additional orphan-related logging to make testing and debugging easier. Suggested in https://github.com/bitcoin/bitcoin/pull/28031#pullrequestreview-1531022386 and https://github.com/bitcoin/bitcoin/pull/28031#discussion_r1269622220\r\n- Add `TXPACKAGES` category for logging.\r\n- Move a nearby comment block that was in the wrong place.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 256,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-29T12:24:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR adds offline signing tutorial, as requested on #9492\r\n\r\nAlthough there currently exists tutorials on external-signer and on multisig implemented on #24519  . The external-signer tutorial assumes a connected device and the multisig tutorial is only for multisig transactions and does not include using an offline wallet\r\n\r\n- The tutorial uses signet(instead of regtest) to be as close as possible to mainnet",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-08-29T08:12:15Z",
        "closed_at": "2023-09-07T15:22:26Z",
        "merged_at": "2023-09-07T15:22:26Z",
        "body": "In https://github.com/bitcoin/bitcoin/pull/28246 and https://github.com/bitcoin/bitcoin/pull/28122 , we add a `PubKeyDestination` and a `V0SilentPaymentsDestination`. Both of these PRs update `fuzz/util.cpp` and need a way to create well-formed pubkeys. Currently in `fuzz/util.cpp`, we have some logic for creating pubkeys in the multisig data provider. This logic is duplicated in #28246 and duplicated again in #28122. Seems much better to have a `ConstructPubKeyBytes` function that both PRs (and any future work) can reuse.\r\n\r\nThis PR introduces a function to do this and has the existing code use it. While the purpose is to introduce a utility function, the previous multisig code used `ConsumeIntegralInRange(4, 7)` which would have created some uncompressed pubkeys with the prefix 0x05, which is incorrect (see https://bitcoin.stackexchange.com/questions/57855/c-secp256k1-what-do-prefixes-0x06-and-0x07-in-an-uncompressed-public-key-signif)\r\n\r\ntldr; using `PickValueFromArray` is more correct as it limits to the set of defined prefixes for compressed and uncompressed pubkeys.",
        "comments": 22
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-28T23:11:29Z",
        "closed_at": "2023-08-30T15:15:58Z",
        "merged_at": "2023-08-30T15:15:58Z",
        "body": "This PR is intended to speed up the CI feedback for pull requests:\r\n\r\n- a [PR](https://github.com/bitcoin/bitcoin/actions/runs/6019964104?pr=28196) opened against the current master branch:\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/481a70eb-13f3-40c9-8f6a-ca2f06350158)\r\n\r\n- this PR:\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/2582307f-7b72-4816-b5be-e84d5e4a3016)\r\n\r\n\r\nSuggested in https://github.com/bitcoin/bitcoin/pull/28173#discussion_r1302929493:\r\n\r\n> An alternative would be to run them on non-pr pushes only. Failures should be rare enough to deal with them post-merge.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-28T19:29:46Z",
        "closed_at": "2023-09-05T09:08:02Z",
        "merged_at": "2023-09-05T09:08:02Z",
        "body": "This makes memory bugs deterministic. `-ftrivial-auto-var-init=pattern` is incompatible with other memory sanitizers (like valgrind and msan), but that is irrelevant here, because the address sanitizer in this fuzz CI config is already incompatible with them.\r\n\r\n`-ftrivial-auto-var-init=pattern` goes well with `-fsanitize=bool` and `-fsanitize=enum`, but those are already enabled via `-fsanitize=undefined`. See https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#available-checks\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-08-28T15:57:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Due to recent UTXO set growth, the current maximum value for `-dbcache` of 16GB is just months away from being insufficient.\r\n\r\nThis PR increases the maximum to 32GB. It also adds a warning that it's up to users to check that they have enough RAM.\r\n\r\nFinally, we make startup abort if the value provided is too high, rather than quietly rounding it down. This doubling seems like a safe time to do that, so that users who picked a reasonable, but too previously high, round number like 20,000 won't encounter this error.\r\n\r\nFixes #28249.",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-08-28T05:24:06Z",
        "closed_at": "2023-08-29T08:27:42Z",
        "merged_at": "2023-08-29T08:27:42Z",
        "body": "Changes `-acceptnonstxtxn` to default to 0 on testnet, matching the other chains. Allowing non-standard txs on testnet by default contributed to the difficulties RSK described in #26348: \"We see that there are two script paths and, to reduce the script size, a single CHECKMULTISIG is used for the two paths, separating the signer count from the CHECKMULTISIG opcode. This script worked on testnet, because it lacks the standard checks performed in Mainnet.\"",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-08-27T20:53:18Z",
        "closed_at": "2023-08-30T15:23:48Z",
        "merged_at": "2023-08-30T15:23:48Z",
        "body": "Remove some CI stuff no longer needed.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-27T20:28:45Z",
        "closed_at": "2023-08-30T15:16:54Z",
        "merged_at": "2023-08-30T15:16:54Z",
        "body": "To test: `test/get_previous_releases.py -b -t /tmp/prev_releases v22.0`\r\n\r\nOn master: `Not sure which binary to download for powerpc64le-unknown-linux-gnu`\r\nHere: (pass)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-27T11:29:15Z",
        "closed_at": "2023-09-01T17:25:14Z",
        "merged_at": "2023-09-01T17:25:14Z",
        "body": "While doing manual testing on assumeutxo this week I managed to put the coindb into an inconsistent state twice. For a normal user, this can also happen if their computer crashes during a flush or if they try to stop their node during a flush and then get tired of waiting and just shut their computer down or kill the process. It's an edge case but I wouldn't be surprised if this does happen more often when assumeutxo gets used more widely because there might be multiple flushes happening during loading of the UTXO set in the beginning and users may think something is going wrong because of the unexpected wait or they forgot some configs and want to start over quickly. \r\n\r\nThe problem is, when this happens at first the node starts up normally until it's time to flush again and then it hits an assert that the user can not understand.\r\n\r\n```\r\n2023-08-25T16:31:09Z [httpworker.0] [snapshot] 52000000 coins loaded (43.30%, 6768 MB)\r\n2023-08-25T16:31:16Z [httpworker.0] Cache size (7272532192) exceeds total space (7256510300)\r\n2023-08-25T16:31:16Z [httpworker.0] FlushSnapshotToDisk: flushing coins cache (7272 MB) started\r\nAssertion failed: (old_heads[0] == hashBlock), function BatchWrite, file txdb.cpp, line 126.\r\nAbort trap: 6\r\n```\r\n\r\nWe should at least log an error message that gives users a hint of what the problem is and what they can do to resolve it. I am keeping this separate from the assumeutxo project since this issue can also happen during any regular flush.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 44,
        "changed_files": 8,
        "created_at": "2023-08-27T08:56:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "C++20 allows to write safer code, because it allows to enforce more stuff at compile time (`constinit`, `conteval`, `constexpr`, `std::span`, ...).\r\n\r\nAlso, it allows to write less verbose and easier to understand code (C++ 20 Concepts).\r\n\r\nSee https://github.com/bitcoin/bitcoin/issues/23363 and https://en.cppreference.com/w/cpp/compiler_support#cpp20\r\n\r\nWith g++-10 (https://github.com/bitcoin/bitcoin/pull/28348) and clang-13 (https://github.com/bitcoin/bitcoin/pull/28210), there is broad support for almost all features of C++20.\r\n\r\nIt should be fine to require a C++20 compiler for Bitcoin Core 27.0 in 2024 (next year), not the soon upcoming 26.0 next month.\r\n\r\nThis pull request includes three small cleanups to make use of C++20 features. If any issues are detected before or after merge, this should be easy to revert. If no issues arise, it should be fine to make use of more involved C++20 features later on.",
        "comments": 37
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 21,
        "changed_files": 6,
        "created_at": "2023-08-27T07:59:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "All supported operating systems ship with g++ 10 (or later), so bumping the minimum should not cause any issues. The bump allows to drop some now-unused workarounds.\r\n\r\nFor reference:\r\n* https://packages.debian.org/bullseye/g++ (`g++-10`)\r\n* https://packages.ubuntu.com/focal/g++-10\r\n* FreeBSD 12/13 ships with g++ 12\r\n* CentOS-like 9 ships with g++ 11\r\n* OpenSuse Tumbleweed ships with g++ 13 https://software.opensuse.org/package/gcc13-c++ (No idea about OpenSuse Leap)\r\n\r\nThis is for Bitcoin Core 27.0 in 2024 (next year), not the soon upcoming 26.0 next month.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-08-26T22:44:56Z",
        "closed_at": "2023-08-29T08:42:48Z",
        "merged_at": "2023-08-29T08:42:48Z",
        "body": "Running our python linter with a recent python and the latest release of setuptools [v68.1.2](https://setuptools.pypa.io/en/stable/history.html):\r\n\r\n```\r\n$ python3 --version\r\nPython 3.11.5\r\n$ ./test/lint/lint-python.py:12: DeprecationWarning: pkg_resources is deprecated as an API.\r\n  See https://setuptools.pypa.io/en/latest/pkg_resources.html\r\n  import pkg_resources\r\n```\r\n\r\nUsing `pkg_resources` was [deprecated](https://github.com/pypa/setuptools/pull/3843) earlier in [v67.5.0](https://setuptools.pypa.io/en/stable/history.html#id55): \"Although pkg_resources has been discouraged for use, some projects still consider pkg_resources viable for usage. This change makes it clear that pkg_resources should not be used, emitting a DeprecationWarning when imported.\"\r\n\r\nThe `importlib.metadata` library requires Python 3.8, which is currently our minimum-supported Python version.\r\n\r\nFor more details about `importlib.metadata` and the two methods imported and used here, see: \r\n\r\n- https://docs.python.org/3/library/importlib.metadata.html\r\n- https://importlib-metadata.readthedocs.io/en/latest/api.html#importlib_metadata.metadata\r\n- https://importlib-metadata.readthedocs.io/en/latest/api.html#importlib_metadata.PackageNotFoundError",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 45,
        "deletions": 22,
        "changed_files": 23,
        "created_at": "2023-08-26T21:46:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "`GetVirtualTransactionSize(CTransaction&)` passes by default 0 sigops and 0 `-bytespersigop`, which is incorrect. In many cases (ie, wallet), this is harmless since we have control over the transactions and don't do anything absurd in normal usage. But in other cases (including wallet *received* transactions), this isn't safe. To avoid invisible bugs like this, I delete (or rather, move to `bitcoin_test`) the function signature that allows for omitting sigop inputs.\r\n\r\nThis also then fixes the new package relay code to use the correct virtual sizes for its checks, and documents calling locations where the behaviour is broken or safe.\r\n\r\nIn particular, note that the `sendrawtransaction` RPC and GUI transaction details remain buggy and not fixed in this PR.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-26T16:00:22Z",
        "closed_at": "2023-09-27T09:05:10Z",
        "merged_at": null,
        "body": "`_FORTIFY_SOURCE=3` [requires](https://developers.redhat.com/blog/2021/04/16/broadening-compiler-checks-for-buffer-overflows-in-_fortify_source) `__builtin_dynamic_object_size`. If the latter is not supported, the fortification level fallbacks to 2.\r\n\r\nHowever, the user is misled by the `./configure` script:\r\n```\r\nchecking whether C++ preprocessor accepts -D_FORTIFY_SOURCE=3... yes\r\n```\r\n\r\nThis PR avoids misleading the user.\r\n\r\nAdditionally, it prevents warnings like this:\r\n```\r\nwarning: #warning Using _FORTIFY_SOURCE=2 (level 3 requires __builtin_dynamic_object_size support) [-Wcpp]\r\n```",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 15,
        "changed_files": 4,
        "created_at": "2023-08-25T15:14:38Z",
        "closed_at": "2023-08-28T15:21:00Z",
        "merged_at": "2023-08-28T15:21:00Z",
        "body": "`HashWriter` is a slim and less confusing version of `CHashWriter`, so use it in all places where it compiles.\r\n\r\nThis should be correct, if it compiles.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-24T21:15:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[As noted here](https://www.freedesktop.org/software/systemd/man/systemd.exec.html#MemoryDenyWriteExecute=), it's a good idea to pair `MemoryDenyWriteExecute=true` with `SystemCallArchitectures=native` because `MemoryDenyWriteExecute` can be circumvented in some operating systems which support multiple ABIs like x86/x86-64.\r\nThis helps restrict the possible application binary interfaces (ABIs) that can be used when running bitcoind through systemd, reducing the attack surface area.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 49,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-08-24T18:18:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "`CheckBlockIndex() ` are consistency checks that are currently enabled by default on regtest.\r\n\r\nThe function is rather slow, which is annoying if you\r\n* attempt to run it on other networks, especially if not fully synced\r\n* want to generate a long chain on regtest and see block generation slow down because you forgot to disable `-checkblockindex` or don't know it existed.\r\n\r\nOne reason why it's slow\u00a0is that in order to be able to traverse the block tree depth-first from genesis, it inserts pointers to all block indices into a `std::multimap` - for which inserts and lookups become slow once there are hundred thousands of entries.\r\nHowever, typically the block index is mostly chain-like with just a few forks so a multimap isn't really needed for the most part. This PR suggests to store the block\u00a0indices of the chain ending in the best header in a vector instead, and store only the rest of the indices in a multimap. This does not change the actual consistency checks that are being performed for each index, just the way the block index tree is stored and traversed.\r\n\r\nThis adds a bit of complication to make sure each block is visited (note that there are asserts that check it), making sure that the two containers are traversed correctly, but it speeds up the function considerably:\r\n\r\nOn master, a single invocation of `CheckBlockIndex` takes ~1.4s on mainnet for me (4.9s on testnet which has >2.4 million blocks).\r\nWith this branch, the runtime goes down to ~0.27s (0.85s on testnet).This is a speedup by a factor ~5.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-08-24T15:31:43Z",
        "closed_at": "2023-08-27T13:54:59Z",
        "merged_at": "2023-08-27T13:54:59Z",
        "body": "This will end up being a blocker for #28210, and is already part of #21778, even though an even newer LLVM/Clang combination is required (and still missing from upstream Guix). Seems straight-forward enough to just bump the macOS compiler to a more modern Clang.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 39,
        "changed_files": 8,
        "created_at": "2023-08-24T15:14:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Parsing legacy public keys can fail for three reasons (in this order):\r\n- pubkey is not in hex\r\n- pubkey has an invalid length (not 33 or 65 bytes for compressed/uncompressed, respectively)\r\n- pubkey is crytographically invalid, i.e. is not on curve (`CPubKey.IsFullyValid()` check)\r\n\r\nMany RPCs currently perform these checks manually with different error messages, even though we already have a `HexToPubKey` helper. This PR puts all three checks in this helper (the length check was done on the call-sites before), adds specific error messages for each case, and consequently uses it for all RPCs that parse legacy pubkeys. This leads to deduplicated code and also to more consistent and detailed error messages for the user.\r\n\r\nAffected RPC calls are `createmultisig`, `addmultisigaddress`, `importpubkey`, `importmulti`, `fundrawtransaction`, `walletcreatefundedpsbt`, `send` and `sendall`.\r\n\r\nNote that the error code (-5 a.k.a. `RPC_INVALID_ADDRESS_OR_KEY`) doesn't change in any of the causes, so the changes are not breaking RPC API compatibility. Only the messages are more specific.\r\n\r\nThe last commits adds test coverage for the cryptographically invalid (not-on-curve) pubkey case which wasn't exercised before.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 976,
        "deletions": 797,
        "changed_files": 20,
        "created_at": "2023-08-24T05:46:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Similarly to #28327 I wanted to open this PR to receive some opinions and better approaches.\r\n\r\nThe kernel library is currently at the stage where unwanted headers are removed from its set of headers. In practice, this means we are reducing the number of includes that are required for compiling the experimental `bitcoin-chainstate` binary. This is described in stage 1 step 3 of the [project tracking issue](https://github.com/bitcoin/bitcoin/issues/27587).\r\n\r\nCurrently the mempool is part of the kernel library. The mempool headers include the boost multi index headers. Thus any application wanting to use the kernel library and its headers will have to include the boost headers too. This is not only undesirable because of the sheer size of these headers, but also might lead to conflicts if the including application uses a different boost version.\r\n\r\nIn the approach laid out by this PR, mempool member variables and methods are declared in the header without having to include boost by either wrapping them in a struct and [pimpling](https://en.cppreference.com/w/cpp/language/pimpl) them, or making methods static implementation functions. The boost definitions are gathered into separate header (`mempool_set_definitions.h`) that is only included by implementation files that require definitions of the boost types. This allows us to retain the current architecture with roughly the same interfaces. \r\n\r\nThe approach laid out by this PR also has some, albeit small, compilation speed and size benefits. Averaged over a few of compilation runs I consistently observe faster compilation by a couple of seconds and some smaller pre-processed and compiled object sizes. The main detractor of this method is obviously the number of lines touched. However it also has the benefit of inventorizing all the files that require direct access to the mempool data structures as well getting rid of boost multi index includes in non-kernel implementation files that include the mempool, but don't directly manipulate its data structures (e.g. wallet.cpp).\r\n\r\nA much simpler alternative approach, at least on the surface, would be removing all `txmempool.h` includes from kernel library headers (see [this branch](https://github.com/TheCharlatan/bitcoin/tree/mempoolBoostSimple)). Currently this is only `validation.h`.  Due to the mutex member of `CTxMemPool` and the correspondingly defined lock decorators on the chainstate methods this becomes a bit more complicated though and I am not sure how this might be possible with the current architecture.\r\n\r\nA discussion of how and if to remove the mempool from the kernel library has so far been intentionally punted to the next stage of the kernel library development. Pimpling the mempool itself precludes this discussion, since the library could never be shipped with the `CTxMemPool` headers. Pimpling the mempool members (like done in this PR) might also make a future splitting of block and mempool validation logic into separate compilation units easier.\r\n\r\nThis PR is based on #28391 which simplifies some of the required refactors.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-08-24T04:30:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR changes `-acceptnonstdtxn=1` so that it also skips the `non-mandatory` script checks, allowing txs that (eg) use OP_NOPx or OP_SUCCESS into the mempool. This remains only available on test nets.",
        "comments": 18
    },
    {
        "merged": false,
        "additions": 156,
        "deletions": 172,
        "changed_files": 7,
        "created_at": "2023-08-24T02:55:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Instead of constructing ScriptPubKeyMans with no data, and then loading data as we find it, we should gather everything first and then load it all on construction. If there actually is no data and we want to setup generation, then that should also occur in a constructor rather than afterwards.\r\n\r\nThis change is only applied to DescriptorScriptPubKeyMan and ExternalSignerScriptPubKeyMan, and should be done for any ScriptPubKeyMans added in the future. I don't think it's really worth it to do this for LegacyScriptPubKeyMan since it would make loading performance worse (or cause layer violations) and it's (supposed to be) going away soon.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-08-24T00:40:12Z",
        "closed_at": "2023-08-24T09:37:50Z",
        "merged_at": "2023-08-24T09:37:50Z",
        "body": "For the sake of building previous releases, fetching the whole history of the repository for each version seems to be overkill as it takes much more time, bandwidth and disk space than necessary. Create a shallow clone instead with history truncated to the one commit of the version tag, which is directly checked out in the same command. This has the nice side-effect that we can remove the extra `git checkout` step after as it's not needed anymore.\r\n\r\nNote that it might look confusing to pass a _tag_ to a parameter named `--branch`, but the git-clone manpage explicitly states that this is supported.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 540,
        "deletions": 83,
        "changed_files": 22,
        "created_at": "2023-08-24T00:25:16Z",
        "closed_at": "2023-10-03T09:13:13Z",
        "merged_at": "2023-10-03T09:13:13Z",
        "body": "Part of #27634.\r\n\r\nThis makes BIP324 support feature complete, through a (default off) `-v2transport` option for enabling V2 connections. If it is enabled:\r\n* The `NODE_P2P_V2` service flag (*1 << 11*) is advertized.\r\n* Inbound connections can use V1 or V2 (automatically detected based on the protocol used by the peer)\r\n* V2 connections are used on outbound when the `NODE_P2P_V2` service is available (or the new `use_v2` parameter is set on the `addnode` RPC).\r\n* V2 outbound connections that instantly fail get retried as V1.\r\n\r\nThere are two new RPC fields, `\"transport_protocol_type\"` and `\"session_id\"`, in `getpeerinfo`.\r\n",
        "comments": 35
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 22,
        "changed_files": 11,
        "created_at": "2023-08-23T20:40:18Z",
        "closed_at": "2023-08-24T09:56:12Z",
        "merged_at": "2023-08-24T09:56:12Z",
        "body": "Currently, the CI system may pick the wrong (non-native) architecture due to the missing prefix.\r\n\r\nFor example, assuming the CI_IMAGE_NAME_TAG is `debian:bookworm` and the user has previously pulled an s390x image:\r\n\r\n```\r\n$ podman run --rm 'docker.io/s390x/debian:bookworm' dpkg --print-architecture\r\nexec /usr/bin/dpkg: exec format error\r\n```\r\n\r\nNow, `debian:bookworm` will refer to the same image:\r\n\r\n```\r\n$ podman run --rm 'debian:bookworm' dpkg --print-architecture\r\nexec /usr/bin/dpkg: exec format error\r\n```\r\n\r\nHowever, `docker.io/debian:bookworm` works fine:\r\n\r\n```\r\n $ podman run --rm 'docker.io/debian:bookworm' dpkg --print-architecture\r\narm64\r\n",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 35,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-23T18:28:06Z",
        "closed_at": "2023-08-23T18:28:59Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 263,
        "deletions": 118,
        "changed_files": 6,
        "created_at": "2023-08-23T13:08:37Z",
        "closed_at": "2023-08-26T07:49:45Z",
        "merged_at": "2023-08-26T07:49:45Z",
        "body": "Bumps our Guix time-machine to [160f78a4d92205df986ed9efcce7d3aac188cb24](https://git.savannah.gnu.org/cgit/guix.git/commit/?id=160f78a4d92205df986ed9efcce7d3aac188cb24), which includes:\r\n\r\nGCC 10.3.0 -> 10.4.0\r\nBinutils 2.37 -> 2.38\r\nAutomake 1.16.3 -> 1.16.5\r\nCoreutils 8.32 -> 9.1\r\nFindutils 4.8.2 -> 4.9.0\r\nLibtool 2.4.6 -> 2.4.7\r\nLinux Libre Headers 5.15.37 -> 5.15.127\r\nGit 2.36.0 -> 2.41.0\r\nMingw-w64 8.0.0 -> 11.0.1\r\nNSIS 3.05 -> 3.09\r\nXorriso 1.5.2 -> 1.5.6.pl02\r\nPython 3.9 -> 3.10.7\r\nPython-asn1crypto 1.4.0 -> 1.5.1\r\n\r\nGCC 12.3.0 becomes available. See #27897.\r\nLLVM 15.0.7 becomes available. Sadly not quite new enough for #21778.\r\n\r\nSplit from #27897 for easier review, and to make it clear which changes are part of the time-machine bump vs changing to GCC 12.\r\n\r\nGuix Build:\r\n```bash\r\n1e4aab93de36b47cbbfc5882d3d2a598e54a9c3604b3be1891ddac70cdc46547  guix-build-6cbedc3d9b67/output/aarch64-linux-gnu/SHA256SUMS.part\r\n278206bddf166ce507ab2ae4742ffbe6ec4256dbc6beee7e42ea040ec3d5b679  guix-build-6cbedc3d9b67/output/aarch64-linux-gnu/bitcoin-6cbedc3d9b67-aarch64-linux-gnu-debug.tar.gz\r\n261974753869297a480db24733f057aa58e33a0ce08754bea74984a00f8c376f  guix-build-6cbedc3d9b67/output/aarch64-linux-gnu/bitcoin-6cbedc3d9b67-aarch64-linux-gnu.tar.gz\r\n13bde7d903665f7699e2aa42a23ddc5ece9fab450437ae641d8ebfe6f6b084e1  guix-build-6cbedc3d9b67/output/arm-linux-gnueabihf/SHA256SUMS.part\r\ndf951e4b23db34d1248f7ee9837594645acea8e2de1ed03b23ee002579a4c653  guix-build-6cbedc3d9b67/output/arm-linux-gnueabihf/bitcoin-6cbedc3d9b67-arm-linux-gnueabihf-debug.tar.gz\r\n5839bb71cca6aafa662f3c7e1c09393dce1c3fd13241726796bf3e681a0a34f0  guix-build-6cbedc3d9b67/output/arm-linux-gnueabihf/bitcoin-6cbedc3d9b67-arm-linux-gnueabihf.tar.gz\r\n637b1aa49db0cab1bc35064d068f1a5fdee5ab2ceba30b7f6d2c80bbf174c107  guix-build-6cbedc3d9b67/output/arm64-apple-darwin/SHA256SUMS.part\r\nbe87c1ad41f06bcaa8c940fc8d881eca41c531d250ce114325b0e042e603c257  guix-build-6cbedc3d9b67/output/arm64-apple-darwin/bitcoin-6cbedc3d9b67-arm64-apple-darwin-unsigned.dmg\r\n632956e64d2baf9329ee086781b9268786f37b7c3c5f5232e2394ef2839d6d40  guix-build-6cbedc3d9b67/output/arm64-apple-darwin/bitcoin-6cbedc3d9b67-arm64-apple-darwin-unsigned.tar.gz\r\n1b23548a94aee5e03a8aec1e63938d9c8505005b87fa832ed112af60861c42a6  guix-build-6cbedc3d9b67/output/arm64-apple-darwin/bitcoin-6cbedc3d9b67-arm64-apple-darwin.tar.gz\r\ne4056df68bac0bdc0a54899af8f8178e78bfb7d170750f2296fd512d0c6c20db  guix-build-6cbedc3d9b67/output/dist-archive/bitcoin-6cbedc3d9b67.tar.gz\r\n9f149c82f30eed35e2c217dc57cab37745db27f0a3205e66b4535c247dffc500  guix-build-6cbedc3d9b67/output/powerpc64-linux-gnu/SHA256SUMS.part\r\nef91dce0a735ce0633fd273d9e1d6599d74c18280a866c1d6b71c2c3434af9c3  guix-build-6cbedc3d9b67/output/powerpc64-linux-gnu/bitcoin-6cbedc3d9b67-powerpc64-linux-gnu-debug.tar.gz\r\ndfb60f13b9a7435f608f6d09585de37f789b055c77a0ee729e5723b0ef0550fe  guix-build-6cbedc3d9b67/output/powerpc64-linux-gnu/bitcoin-6cbedc3d9b67-powerpc64-linux-gnu.tar.gz\r\n0ae916b95617042330166e20a27399c14abbc20638ae3e5e5f9f812146d4a07e  guix-build-6cbedc3d9b67/output/powerpc64le-linux-gnu/SHA256SUMS.part\r\n180d9c29da1efd21fba6be8a670b6ed01d71a5e90991da3c543f6720273831a2  guix-build-6cbedc3d9b67/output/powerpc64le-linux-gnu/bitcoin-6cbedc3d9b67-powerpc64le-linux-gnu-debug.tar.gz\r\n9753408e3b4c10b19dba30ecb12ee2ae065c08e7c88be25599e1fdffe81bddbe  guix-build-6cbedc3d9b67/output/powerpc64le-linux-gnu/bitcoin-6cbedc3d9b67-powerpc64le-linux-gnu.tar.gz\r\nb1f09baec636a3bbaff1be629c95e75767c4ae3d96f0ebe63dcefb6fdb4953fb  guix-build-6cbedc3d9b67/output/riscv64-linux-gnu/SHA256SUMS.part\r\n09149283880c39c76f73ce83848f266f93777f6d9d389c2448ef0a9af9339b30  guix-build-6cbedc3d9b67/output/riscv64-linux-gnu/bitcoin-6cbedc3d9b67-riscv64-linux-gnu-debug.tar.gz\r\n788ce14925fec9861c78e16a57a1fd25d0f2ddf3f4e10f3c795bac534d339197  guix-build-6cbedc3d9b67/output/riscv64-linux-gnu/bitcoin-6cbedc3d9b67-riscv64-linux-gnu.tar.gz\r\nf357a0522c779d1953f37f4cab0160622cbf89ed3fe49cb5abea2509dba1d76f  guix-build-6cbedc3d9b67/output/x86_64-apple-darwin/SHA256SUMS.part\r\nbe5c797a3e4dc969fd9116dede0cb27bda5180e653bb63d1ef3dbcc3de983bf0  guix-build-6cbedc3d9b67/output/x86_64-apple-darwin/bitcoin-6cbedc3d9b67-x86_64-apple-darwin-unsigned.dmg\r\n7364b2d0223b39debd386b521a5c5d1b26a446331f347b4d4e8fc58bf5b4439e  guix-build-6cbedc3d9b67/output/x86_64-apple-darwin/bitcoin-6cbedc3d9b67-x86_64-apple-darwin-unsigned.tar.gz\r\n7e873165d4ed785381b6e461a81a947814d14fdd41ae65bc82134c03b3ac0471  guix-build-6cbedc3d9b67/output/x86_64-apple-darwin/bitcoin-6cbedc3d9b67-x86_64-apple-darwin.tar.gz\r\nbf03ca15a885330ed0c91b3137dcc4ec1102570898360cc3f1073f03b792d729  guix-build-6cbedc3d9b67/output/x86_64-linux-gnu/SHA256SUMS.part\r\n0707b0e4d8529fc5f7567d1ff029b4b6fdf0bb46f1eb227d70c3aaa2018d65e5  guix-build-6cbedc3d9b67/output/x86_64-linux-gnu/bitcoin-6cbedc3d9b67-x86_64-linux-gnu-debug.tar.gz\r\n5f1e3713cf856f884d305ad12f43254be3871d9020cc514194fc0a6efd0867b1  guix-build-6cbedc3d9b67/output/x86_64-linux-gnu/bitcoin-6cbedc3d9b67-x86_64-linux-gnu.tar.gz\r\nc0d5e284903dbb55e4ad3d43db9b1e5d211c5259c3fae43bf4cddedea2e02c01  guix-build-6cbedc3d9b67/output/x86_64-w64-mingw32/SHA256SUMS.part\r\nd16f61c78b784b664d558a9a537e15da432ef9c18de0754dd7fd19682ab0569f  guix-build-6cbedc3d9b67/output/x86_64-w64-mingw32/bitcoin-6cbedc3d9b67-win64-debug.zip\r\n617010c1ac295bc692e0a4074acc19ebbc9561a01c8e5365428cfe61dc50fe3c  guix-build-6cbedc3d9b67/output/x86_64-w64-mingw32/bitcoin-6cbedc3d9b67-win64-setup-unsigned.exe\r\na48961c49edf9f8988b902d874f47918f6716053be6c3bc263932834cb896510  guix-build-6cbedc3d9b67/output/x86_64-w64-mingw32/bitcoin-6cbedc3d9b67-win64-unsigned.tar.gz\r\n0cd95e8f919ac694dfd88a14fda37c57f0534cb890acc73f70aff71937fa1a8e  guix-build-6cbedc3d9b67/output/x86_64-w64-mingw32/bitcoin-6cbedc3d9b67-win64.zip\r\n```",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 4,
        "changed_files": 8,
        "created_at": "2023-08-22T19:57:54Z",
        "closed_at": "2023-09-07T12:48:56Z",
        "merged_at": null,
        "body": "RFC because this is rather hackish and I'd like to know if anyone has a better idea.\r\n\r\nI'm working on trimming out headers that libbitcoinkernel should not export. To be clear: the problem is not what headers libbitcoinkernel itself uses, but what headers it requires users to use. Basically.. the headers used directly and indirectly by `bitcoin-chainstate.cpp`.\r\n\r\nTopping the list of headers we definitely don't want to require for users are `bitcoin-config.h` and `clientversion.h`. The former is somewhat complicated, but `clientversion.h` only comes from one place: `dbwrapper.h`.\r\n\r\nThis PR gets rid of that include by creating a new constructor that sets the version in the cpp file, working around the problem.\r\n\r\nAnother potential solution would be to create a `MakeClientVersionCDataStream()` function which just creates a stream and sets the version, and relies on the caller to do the rest.\r\n\r\nAny better ideas? Otherwise I'll undraft and ask for review.",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-08-22T15:46:33Z",
        "closed_at": "2023-08-22T15:55:13Z",
        "merged_at": null,
        "body": "If it's easy, why not?\r\n\r\nI know test_framework isn't meant for anything but regtest testing, but I could see someone naively copying the `ECKey` class and using it elsewhere.\r\n\r\nWill benchmark to make sure this isn't noticeably slower.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-08-22T15:17:21Z",
        "closed_at": "2023-08-24T09:31:07Z",
        "merged_at": "2023-08-24T09:31:07Z",
        "body": "Aiming to fix #25652.\r\n\r\nThe failure arises because the test expects `init_wallet()` (the test framework function) to create a wallet with no keys. However, the function also imports the deterministic private key used to receive the coinbase coins.\r\n\r\nThis causes a race within the \"restore using dumped wallet\" case, where we intend to have a new wallet (with no existing keys) to test the 'importwallet()' RPC result.\r\nThe reason why this failure is intermittent is that it depends on other peers delivering the chain right after node2 startup and prior to the test 'node2.getbalance()' call and also the synchronization of the validation queue.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 61,
        "deletions": 57,
        "changed_files": 1,
        "created_at": "2023-08-22T14:05:46Z",
        "closed_at": "2023-08-24T08:20:10Z",
        "merged_at": "2023-08-24T08:20:10Z",
        "body": "This is some refactoring to the Linux Guix build that facilitates bumping our Guix time-machine. Namely, avoiding `package-with-extra-configure-variable`, which is non-functional in the newer time-machine, see https://issues.guix.gnu.org/64436.\r\n\r\nAt the same time, consolidate our Linux GCC build into `linux-base-gcc`. Now that we only use `building-on`, remove `explicit-cross-configure`.\r\n\r\nSplit out of https://github.com/bitcoin/bitcoin/pull/27897. Most of the [[WIP] Linux commit](https://github.com/bitcoin/bitcoin/pull/27897/commits/8335fc47754bce435375d1fb35649342ddd63462), minus anything GCC 12 related.\r\n\r\nI'll also be splitting out the other changes we can do pre-timemachine bump, for easier review.\r\n\r\nSimilar/followup to #28294. Requirement for #28328.\r\n\r\nGuix Build:\r\n```bash\r\n17463110d4b4721a7c188e71b1fc00c9b5b82227aa8342471390c17678e04a9a  guix-build-806b75b21340/output/aarch64-linux-gnu/SHA256SUMS.part\r\n0ca919ce568e7d4ffe44dda871d48963ca2988516068e75b1f30ca342d853d20  guix-build-806b75b21340/output/aarch64-linux-gnu/bitcoin-806b75b21340-aarch64-linux-gnu-debug.tar.gz\r\n134afa263e4da6c8d7df79a7dd8e59911c1e643b53b7c285de9418d97fb06d5f  guix-build-806b75b21340/output/aarch64-linux-gnu/bitcoin-806b75b21340-aarch64-linux-gnu.tar.gz\r\n22ce318241084829e57f064bf47de57752151863aac545e643eea5dd8eee96fe  guix-build-806b75b21340/output/arm-linux-gnueabihf/SHA256SUMS.part\r\na26fecfeb821040704ca70ea056bff796789ed9500d9575d8fa13a85b32143f6  guix-build-806b75b21340/output/arm-linux-gnueabihf/bitcoin-806b75b21340-arm-linux-gnueabihf-debug.tar.gz\r\n213c84494835c81a40ebc5d38a62bb19cbee5b214b2a8aaed6d28746b245108e  guix-build-806b75b21340/output/arm-linux-gnueabihf/bitcoin-806b75b21340-arm-linux-gnueabihf.tar.gz\r\nce1efcf6d3ca0e7422c5ce35f5e45e0770a3ae48173e061137daa7dc551e9d48  guix-build-806b75b21340/output/arm64-apple-darwin/SHA256SUMS.part\r\nfc01aaeb4e4722d21fd60c78f1b5322c9875ec6fb4d244f4547a354e91a33ed7  guix-build-806b75b21340/output/arm64-apple-darwin/bitcoin-806b75b21340-arm64-apple-darwin-unsigned.dmg\r\n632e4a243d3e4144313f53047499f91b7c9380a1a50f5846e1635d0a00fd202a  guix-build-806b75b21340/output/arm64-apple-darwin/bitcoin-806b75b21340-arm64-apple-darwin-unsigned.tar.gz\r\n8e694e4cd1bf45e6a586a0d8c19b675014f168f342f881a9ae0c4fbbda796914  guix-build-806b75b21340/output/arm64-apple-darwin/bitcoin-806b75b21340-arm64-apple-darwin.tar.gz\r\ndad6e8475f13dac6c4f0b182f53dc330997e9e1e5cf4d46413655f319dcd9bff  guix-build-806b75b21340/output/dist-archive/bitcoin-806b75b21340.tar.gz\r\n32e8b6c7e7a7561e132c5f15e2151a51aad1c5004ab90a36a7e80f92c200ef6f  guix-build-806b75b21340/output/powerpc64-linux-gnu/SHA256SUMS.part\r\n9033e85e03bd12a3a19599735cfd44fcfdfb1bf1b632733341cec6a4f75ff86f  guix-build-806b75b21340/output/powerpc64-linux-gnu/bitcoin-806b75b21340-powerpc64-linux-gnu-debug.tar.gz\r\n72698691b27ec0ac17f21dce8551de0ca683dd00b5b9442ea7616fb56cca8c6b  guix-build-806b75b21340/output/powerpc64-linux-gnu/bitcoin-806b75b21340-powerpc64-linux-gnu.tar.gz\r\nef7c6d7184249eb59fa67d6df91d1a567570b9fb026dbb8682763029decaacca  guix-build-806b75b21340/output/powerpc64le-linux-gnu/SHA256SUMS.part\r\nfc6bb5619ee76899a88c1dd62640b429ad8957bbdf821238038b41fc87d18eca  guix-build-806b75b21340/output/powerpc64le-linux-gnu/bitcoin-806b75b21340-powerpc64le-linux-gnu-debug.tar.gz\r\n0eceb969f41f6b8dba88f641e268590de7edf0008318c8051d9cb208fb15e7f7  guix-build-806b75b21340/output/powerpc64le-linux-gnu/bitcoin-806b75b21340-powerpc64le-linux-gnu.tar.gz\r\n6f51a4791d87a610abd81cee83efa7f469e905829797bc2edac4fb95a2e0f3e4  guix-build-806b75b21340/output/riscv64-linux-gnu/SHA256SUMS.part\r\nc978706988f31e65a7991ff7582d79b3d1df44249c14d9807d93c01bf3f5080d  guix-build-806b75b21340/output/riscv64-linux-gnu/bitcoin-806b75b21340-riscv64-linux-gnu-debug.tar.gz\r\n93aefe058025067550692adae59ead14228ac252a9e7cf8b55c8fb4189ece545  guix-build-806b75b21340/output/riscv64-linux-gnu/bitcoin-806b75b21340-riscv64-linux-gnu.tar.gz\r\n862a53f6023bd1ca98a078ea540bba8ca9bfa335a9560f3d8d62ac873c2d5848  guix-build-806b75b21340/output/x86_64-apple-darwin/SHA256SUMS.part\r\n8f632b42c94d061fa30364087e75bb8b04eb2ac5a0a988eacc37c5983669f01b  guix-build-806b75b21340/output/x86_64-apple-darwin/bitcoin-806b75b21340-x86_64-apple-darwin-unsigned.dmg\r\nce62e76ca446a6316b31490e12463c0a641e15beef9bdae7acc8e5db057b433a  guix-build-806b75b21340/output/x86_64-apple-darwin/bitcoin-806b75b21340-x86_64-apple-darwin-unsigned.tar.gz\r\nf57b014818e3b1ec07d27c8224ec4ac0e5786dacd00639513b599c6138790ece  guix-build-806b75b21340/output/x86_64-apple-darwin/bitcoin-806b75b21340-x86_64-apple-darwin.tar.gz\r\n70e75f6f13795f968f91719d221673b687bf747f90d77912cbcb2c1ee45ec623  guix-build-806b75b21340/output/x86_64-linux-gnu/SHA256SUMS.part\r\n30dec525364bb21a26cfe8bfff061d013c4ce849165aa67b06eb154019444862  guix-build-806b75b21340/output/x86_64-linux-gnu/bitcoin-806b75b21340-x86_64-linux-gnu-debug.tar.gz\r\nd8b3a996f25fb948b3555d5750852aaf82f7051848586b9ba0f4d0d223226e4b  guix-build-806b75b21340/output/x86_64-linux-gnu/bitcoin-806b75b21340-x86_64-linux-gnu.tar.gz\r\n4259adec77912bab6494f71a2a95d98093b116c05fc9ad03069e92de4ce0248c  guix-build-806b75b21340/output/x86_64-w64-mingw32/SHA256SUMS.part\r\n0a2d5cab3fe94a86def0cc1b6efe9ac871839cbcdc05ad92686df1d2bdd154ea  guix-build-806b75b21340/output/x86_64-w64-mingw32/bitcoin-806b75b21340-win64-debug.zip\r\nd2a1876333bdb1cd5b8b1d4a52bccd756ea2e992c291dac233e65beeb0c905fd  guix-build-806b75b21340/output/x86_64-w64-mingw32/bitcoin-806b75b21340-win64-setup-unsigned.exe\r\n192ea38d70e12c23327ff811ea930b50ac31c9fb2bc8dcc9391ad585112322ff  guix-build-806b75b21340/output/x86_64-w64-mingw32/bitcoin-806b75b21340-win64-unsigned.tar.gz\r\n474f88a1f4cc8900a7d8967909336d4122e449ce98cacaf2cacec340780ede0b  guix-build-806b75b21340/output/x86_64-w64-mingw32/bitcoin-806b75b21340-win64.zip\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-22T10:19:02Z",
        "closed_at": "2023-08-24T09:17:23Z",
        "merged_at": "2023-08-24T09:17:23Z",
        "body": "This PR is an amendment for https://github.com/bitcoin/bitcoin/pull/28282.\r\n\r\nIt avoids skipping builds when some pushes were done consequentially:\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/977e9ead-1856-4020-82eb-d16dbead5753)\r\n\r\nFrom GitHub Actions [docs](https://docs.github.com/en/actions/using-jobs/using-concurrency):\r\n\r\n> When a concurrent ... workflow is queued, if another ... workflow using the same concurrency group in the repository is in progress, the queued ... workflow will be pending. **Any previously pending ... workflow in the concurrency group will be canceled.**\r\n\r\nNo behavior change for pull requests:\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/4865ae04-fc42-4028-b91e-500c0b36bce6)\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-08-22T09:10:07Z",
        "closed_at": "2023-08-24T09:16:27Z",
        "merged_at": "2023-08-24T09:16:27Z",
        "body": "Currently the test case may fail intermittently, see https://github.com/bitcoin/bitcoin/issues/28313\r\n\r\nFix this by changing a number and reducing the failure rate a bit.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-22T08:36:17Z",
        "closed_at": "2023-08-22T09:35:21Z",
        "merged_at": "2023-08-22T09:35:21Z",
        "body": "To test: `test/get_previous_releases.py -b -t /tmp/prev_releases v0.18.1`\r\n\r\nOn master: `Not sure which binary to download for riscv64-unknown-linux-gnu`\r\nHere: (pass)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 135,
        "deletions": 54,
        "changed_files": 10,
        "created_at": "2023-08-22T04:46:11Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Replace `LogPrint*` functions with severity based logging functions:\r\n\r\n * `LogInfo(...)`, `LogWarning(...)`, `LogError(...)` for unconditional (uncategorised) logging (replaces `LogPrintf`)\r\n * `LogDebug(CATEGORY, ...)` and `LogTrace(CATEGORY, ...)` for conditional logging (replaces `LogPrint`)\r\n * `LogPrintLevel(CATEGORY, LEVEL, ...)` for when the level isn't known in advance, or a category needs to be added for an info/warning/error log message (mostly unchanged, but rarely needed)\r\n\r\nLogs look roughly as they do now with `LogInfo` not having an `[info]` prefix, and `LogDebug` having a `[cat]` prefix, rather than a `[cat:debug]` prefix. This removes `BCLog::Level::None` entirely -- for `LogFlags::NONE` just use `Level::Info`, for any actual category, use `Level::Debug`.\r\n\r\nAdds docs to developer-notes about when to use which level.\r\n\r\nAdds `-loglevelalways=1` option so that you get `[net:debug]`, `[all:info]`, `[all:warning]` etc, which might be helpful for automated parsing, or just if you like everything to be consistent. Defaults to off to reduce noise in the default config, and to avoid unnecessary changes on upgrades.\r\n\r\nChanges the behaviour of `LogPrintLevel(CATEGORY, BCLog::Level::Info, ...)` to be logged unconditionally, rather than only being an additional optional logging level in addition to trace and debug. Does not change the behaviour of `LogPrintLevel(NONE, Debug, ...)` and `LogPrintLevel(NONE, Trace, ...)` being no-ops.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-22T02:55:52Z",
        "closed_at": "2023-09-12T10:56:44Z",
        "merged_at": null,
        "body": "On mainnet, the error message:\r\n\r\n```\r\nFee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\r\n```\r\n\r\nis helpful, because if you aren't able to set a fee based on an external source or the internal fee estimation code, then you're likely to either waste money when the default is too high, or have a tx that won't confirm if the default is too low. On regtest and friends it's not help, and the advice may well be wrong: particularly on regtest, mining additional empty blocks won't help at all.\r\n\r\nBut for test net's there is an easy default available that is quite reliable: just use the minimum tx fee.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-22T02:22:16Z",
        "closed_at": "2023-08-22T02:46:09Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-22T02:03:45Z",
        "closed_at": "2023-08-22T02:26:39Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-08-22T01:33:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "While reviewing #28307, I noticed that the test framework's `key_to_multisig_script` helper (introduced in #23305) is broken for pubkey count (n) and threshold (k) values larger than 16. This is due to the implementation currently enforcing a direct single-byte data push (using `CScriptOp.encode_op_n`), which obviously fails for values 17+. Fix that by passing the numbers directly to the CScript list, where it's automatically converted to minimally-encoded pushes (see class method `CScript.__coerce_instance`, branch `isinstance(other, int)`). \r\n\r\n\r\n\r\nThe second commit adds a unit test to ensure that the encoding  is correct.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 814,
        "deletions": 65,
        "changed_files": 25,
        "created_at": "2023-08-22T01:17:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is a (rough draft) clean rewrite of BIP300 (Drivechain) consensus-level code.\r\n\r\nInstead of a separate sidechain database (which may be prone to hard-to-review/test consistency issues), instead the unusable 8 MSB of the UTXO index are reserved for non-UTXO database entries, and the existing UTXO db and caching layer is shared. This can be refactored in the future, but I think it is the cleanest and most reviewable approach initially - open to other ideas, though. There's also some ugliness in the undo data to handle restoring the new data, but it's abstracted and shouldn't be too hard to reason about.\r\n\r\nUsing these new primitives, Drivechains can be reimplemented with a UTXO-like model. Note that there is zero activation logic in the current PR: the protocol changes are *always* active. Therefore, this will *not* work (at least not safely) on Bitcoin today, and cannot be deployed without significant additional changes to handle an activation.\r\n\r\nA new `SERIALIZE_TRANSACTION_FOR_WEIGHT` serialization flag is also added, that is meant only for weight counting. This allows for adjusting weight (upward) to fit additional resource requirements by new functionality. In this case, several Drivechain \"messages\" are expected to have a larger burden than their `OP_RETURN` encoding would otherwise weigh. However, the specific adjustments are not implemented in this draft.\r\n\r\nAs a consensus change, this can only be implemented with community support. Many people seem to have opinions, but please keep them to other forums. Despite providing and continuing this implementation, I myself do not thereby endorse or otherwise comment on the proposal itself.\r\n\r\nTherefore, not looking for concept ACKs/NACKs (ie, about Drivechains), just *Approach* ACKs / constructive criticism (ie, about *how* I'm implementing it).",
        "comments": 30
    },
    {
        "merged": false,
        "additions": 168,
        "deletions": 140,
        "changed_files": 11,
        "created_at": "2023-08-21T23:18:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixing https://github.com/bitcoin/bitcoin/issues/28250#issuecomment-1674830104 and more.\r\n\r\nCurrently, redeem scripts longer than 520 bytes, which are technically valid under segwit rules, have flaws in the following processes:\r\n1) The multisig creation process fails to deduce the output descriptor, resulting in the generation of an incorrect descriptor. Additionally, the accompanying user warning is also inaccurate.\r\n2) The `signrawtransactionwithkey` RPC command fail to sign them.\r\n3) The legacy wallet `addmultisigaddress` wrongly discards them.\r\n\r\nThe issue arises because most of these flows are utilizing the legacy spkm keystore, which imposes\r\nthe [p2sh max redeem script size rule](https://github.com/bitcoin/bitcoin/blob/ded687334031f4790ef6a36b999fb30a79dcf7b3/src/script/signingprovider.cpp#L160) on all scripts. Which blocks segwit redeem scripts longer than\r\nthe max element size in all the previously mentioned processes (`createmultisig`, `addmultisigaddress`, and\r\n`signrawtransactionwithkey`).\r\n\r\nThis PR fixes the problem, enabling the creation of multisig output descriptors involving more than 15 keys and\r\nallowing the signing of these scripts, along with other post-segwit redeem scripts that surpass the 520-byte\r\np2sh limit.\r\n\r\nImportant note:\r\nInstead of adding support for these longer redeem scripts in the legacy wallet, an \"unsupported operation\"\r\nerror has been added. The reasons behind this decision are:\r\n\r\n1) The introduction of this feature brings about a compatibility-breaking change that requires downgrade\r\n    protection; older wallets would be unable to interact with these \"new\" legacy wallets.\r\n\r\n2) Considering the ongoing deprecation of the legacy spkm, this issue provides another compelling\r\n    reason to transition towards descriptors.\r\n\r\nTesting notes:\r\nTo easily verify each of the fixes, I decoupled the tests into standalone commits. So they can be\r\ncherry-picked on top of master. Where `rpc_createmultisig.py` (with and without the `--legacy-wallet`\r\narg) will fail without the bugs fixes commits.\r\n\r\nExtra note:\r\nThe initial commits improves the `rpc_createmultisig.py` test in many ways. I found this test very\r\nantiquated, screaming for an update and cleanup.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-08-21T12:56:11Z",
        "closed_at": "2023-10-03T09:44:30Z",
        "merged_at": "2023-10-03T09:44:30Z",
        "body": "The `assert()` documentation and linter are redundant and confusing:\r\n\r\n* The source code already refuses to compile with `assert()` disabled.\r\n* They violate the assumptions about `Assert()`, which *requires* side effects.\r\n* The existing linter doesn't enforce the guideline, only checking for `++` and `--` side effects.\r\n\r\nFix all issues by removing the docs and the linter. See also https://github.com/bitcoin/bitcoin/pull/26684#discussion_r1287370102\r\n\r\nGoing forward everyone is free to use whatever code in this regard they think is the easiest to read. Also, everyone is still free to share style-nits, if they think it is a good use of their time and of the pull request author. Finally, the author is still free to dismiss or ignore this style-nit, or any other style-nit.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-08-18T12:15:56Z",
        "closed_at": "2023-08-18T12:59:32Z",
        "merged_at": "2023-08-18T12:59:32Z",
        "body": "GitHub is frequently down and this is causing many intermittent issues. For example, from today: https://cirrus-ci.com/task/5740122163904512?logs=ci#L398\r\n\r\n\r\nTry to fix it with a retry.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-08-18T12:05:52Z",
        "closed_at": "2023-08-18T13:42:11Z",
        "merged_at": "2023-08-18T13:42:11Z",
        "body": "Currently the task will fail if run on non-`x86_64`.\r\n\r\nFix this by adding the missing `amd64`, similar to \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/7bf078f2b7d4a0339d053144b4fb35fe020dac25/ci/test/00_setup_env_i686_multiprocess.sh#L11",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 28,
        "changed_files": 2,
        "created_at": "2023-08-18T11:52:09Z",
        "closed_at": "2023-08-22T14:00:59Z",
        "merged_at": "2023-08-22T14:00:58Z",
        "body": "This is some refactoring to the Windows Guix build that facilitates bumping our Guix time-machine. Namely, avoiding `package-with-extra-configure-variable`, which is non-functional in the newer time-machine, see https://issues.guix.gnu.org/64436.\r\n\r\nAt the same time, consolidate our Windows GCC build into `mingw-w64-base-gcc`.\r\nRename `gcc-10-remap-guix-store.patch` to avoid changing it whenever GCC changes.\r\n\r\nWe move the old `building-on` inside `explicit-cross-configure`, so that non-windows builds continue to work. Note that `explicit-cross-configure` will be going away entirely (see #27897), so this is only temporary duplication.\r\n\r\nSplit out of #27897. Most of the [[WIP] Windows commit](https://github.com/bitcoin/bitcoin/pull/27897/commits/e50d5f8953225ce68c18de7b892ee53d4ee0e5d5), minus the gcov change, as it's not-yet needed, and any gexp changes, which need the newer time-machine.\r\n\r\nI'll also be splitting out the other changes we can do pre-timemachine bump, for easier review.\r\n\r\nGuix Build:\r\n```bash\r\n9cff4df245df0b8e92d102bda786eb13a1f10be58940b98a16e119d9d4859d7f  guix-build-51324c9517a2/output/aarch64-linux-gnu/SHA256SUMS.part\r\ndbe6a5fe2e6152cd114b1d549a383384cd3325ed4625ad93f8d824ba457ae9cd  guix-build-51324c9517a2/output/aarch64-linux-gnu/bitcoin-51324c9517a2-aarch64-linux-gnu-debug.tar.gz\r\ne36409cd7287e4da62806168ee21ef764e607a11685bb36b7642381060291789  guix-build-51324c9517a2/output/aarch64-linux-gnu/bitcoin-51324c9517a2-aarch64-linux-gnu.tar.gz\r\n0721a4b61ad991ec97d09281eda223ed7bad32cb2b4812e05bc5e64772756be7  guix-build-51324c9517a2/output/arm-linux-gnueabihf/SHA256SUMS.part\r\nf2aa9412ff77bfc3092404533ec669a610c3fa95711b514abd6cd8ae6918aca1  guix-build-51324c9517a2/output/arm-linux-gnueabihf/bitcoin-51324c9517a2-arm-linux-gnueabihf-debug.tar.gz\r\ncda70b7df940dcc1fdeb25e2d3cc6ecce45732fdd741881e2b0384e35897b6d5  guix-build-51324c9517a2/output/arm-linux-gnueabihf/bitcoin-51324c9517a2-arm-linux-gnueabihf.tar.gz\r\n15b5d30336bcaf75db4138c59716af93b9660511222c5f1ad814fc9d7c48c852  guix-build-51324c9517a2/output/arm64-apple-darwin/SHA256SUMS.part\r\na29b327e4d869629af3625d6b7fe44e029e98ac4fedb265133e0d88e045ef933  guix-build-51324c9517a2/output/arm64-apple-darwin/bitcoin-51324c9517a2-arm64-apple-darwin-unsigned.dmg\r\nb1af35290051da64462987e32f215464c5e2376afbe5b5bff272f74f160a3461  guix-build-51324c9517a2/output/arm64-apple-darwin/bitcoin-51324c9517a2-arm64-apple-darwin-unsigned.tar.gz\r\n6c3815392377a8497cab15f534cfdb749dbe31e39ca2ae7e53a55b37acfe069d  guix-build-51324c9517a2/output/arm64-apple-darwin/bitcoin-51324c9517a2-arm64-apple-darwin.tar.gz\r\nefff276305c36ccf2e6eeca56928e6284965d0d08b05565b0bfc94a3dc30cec4  guix-build-51324c9517a2/output/dist-archive/bitcoin-51324c9517a2.tar.gz\r\n0d70106907ac873bd31603b58183ef2cd3b0820ce20b27e3a8d00044b876835c  guix-build-51324c9517a2/output/powerpc64-linux-gnu/SHA256SUMS.part\r\n9a6cbc010d08c26c5bc587ed9c42383a6d004ac20426508e67364848aa099154  guix-build-51324c9517a2/output/powerpc64-linux-gnu/bitcoin-51324c9517a2-powerpc64-linux-gnu-debug.tar.gz\r\ne39ca22d186bad00119a740279b046a0040628847bea76db0b5d5345efa2312d  guix-build-51324c9517a2/output/powerpc64-linux-gnu/bitcoin-51324c9517a2-powerpc64-linux-gnu.tar.gz\r\n945ab751f65d5333b259fd169b280a5fabd35cae89a8f777bc6019f2ac011073  guix-build-51324c9517a2/output/powerpc64le-linux-gnu/SHA256SUMS.part\r\n1c33b4385d5759e4a38cd42e6af99c1224788d03e15b8abd3df48caef3ebcb0a  guix-build-51324c9517a2/output/powerpc64le-linux-gnu/bitcoin-51324c9517a2-powerpc64le-linux-gnu-debug.tar.gz\r\n3b4d0f6d874d600095b90eb19ad568ab08c105762c4ba285c6b1a4dc8d9fc2db  guix-build-51324c9517a2/output/powerpc64le-linux-gnu/bitcoin-51324c9517a2-powerpc64le-linux-gnu.tar.gz\r\n6d4f508256747841f9b099370cc7da2a97687f7b182683fce0369b524388e952  guix-build-51324c9517a2/output/riscv64-linux-gnu/SHA256SUMS.part\r\n34a474abaf833664448f3643d572eef284037535685af3f3928d9f859e7353e6  guix-build-51324c9517a2/output/riscv64-linux-gnu/bitcoin-51324c9517a2-riscv64-linux-gnu-debug.tar.gz\r\nb91a2209d360fe97d3d04cee4ff52271d45c2e47044e4f196dde4585cf61a273  guix-build-51324c9517a2/output/riscv64-linux-gnu/bitcoin-51324c9517a2-riscv64-linux-gnu.tar.gz\r\n88a40ee878a6340a4c5dd4bb82effaff814328e6b6f1345c5824170ba7498279  guix-build-51324c9517a2/output/x86_64-apple-darwin/SHA256SUMS.part\r\n0714092f76e32a1e8484651aed349ccdb5acc38f54dc2ac3ae3031111b5050eb  guix-build-51324c9517a2/output/x86_64-apple-darwin/bitcoin-51324c9517a2-x86_64-apple-darwin-unsigned.dmg\r\nab66d04ea3e9304155e66b0e2899b8325fd609c3fed27c74fe1b53f1b9efea15  guix-build-51324c9517a2/output/x86_64-apple-darwin/bitcoin-51324c9517a2-x86_64-apple-darwin-unsigned.tar.gz\r\n222b688ef72b657c0701c8b4660240833e7c516fbbdcc4df8e9a006f5aa9b3bb  guix-build-51324c9517a2/output/x86_64-apple-darwin/bitcoin-51324c9517a2-x86_64-apple-darwin.tar.gz\r\n340e73e1697ae5cc1984771ce6e5caf22361ba4d063cbc4073236b210f1754dc  guix-build-51324c9517a2/output/x86_64-linux-gnu/SHA256SUMS.part\r\na967753c192b8cb28cc644ce9d239da88ef8faaebc2094e21b7580616a0b8415  guix-build-51324c9517a2/output/x86_64-linux-gnu/bitcoin-51324c9517a2-x86_64-linux-gnu-debug.tar.gz\r\n7d77b14a2c94091a2d68dd9cdb0d878348da323c67eeeb5600273814db1b0e10  guix-build-51324c9517a2/output/x86_64-linux-gnu/bitcoin-51324c9517a2-x86_64-linux-gnu.tar.gz\r\nfbfb10b13b7bc5a1ed33578dcdd9483360cad47fd744ac99a9aecdf2a8ac14c2  guix-build-51324c9517a2/output/x86_64-w64-mingw32/SHA256SUMS.part\r\n925bf5f88e907ddc4567acecfc634ef3570b0576499c6427225a52e1f6209d1e  guix-build-51324c9517a2/output/x86_64-w64-mingw32/bitcoin-51324c9517a2-win64-debug.zip\r\nb3d19a25df2dbd913814e74471da585e629187a19a6afede5890a7df2dd0101f  guix-build-51324c9517a2/output/x86_64-w64-mingw32/bitcoin-51324c9517a2-win64-setup-unsigned.exe\r\n96b03fa66e294e95c0cee5d4c9869ac377e739d2da2e87c0c9d35eddd25e6ceb  guix-build-51324c9517a2/output/x86_64-w64-mingw32/bitcoin-51324c9517a2-win64-unsigned.tar.gz\r\n95d7f52622c534e40dceb89f150b3f2e0061c56768bcf7399aac3f24b937983b  guix-build-51324c9517a2/output/x86_64-w64-mingw32/bitcoin-51324c9517a2-win64.zip\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-08-18T06:24:23Z",
        "closed_at": "2023-08-21T15:59:45Z",
        "merged_at": "2023-08-21T15:59:45Z",
        "body": "This PR disable cache save for pull requests in GitHub Actions.\r\n\r\nOtherwise, multiple pull requests fill GitHub Actions cache quota shortly.\r\n\r\nSee a discussion [here](https://github.com/bitcoin/bitcoin/pull/28187#discussion_r1295459732).\r\n\r\n---\r\n\r\n**NOTE** for the maintainers with \"owner\" permissions.\r\n\r\nThis PR needs the `actions/cache/restore@*` and `actions/cache/save@*` acrions to be explicitly allowed in the repository's Actions permissions.",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-08-18T02:57:59Z",
        "closed_at": "2023-09-05T08:41:14Z",
        "merged_at": "2023-09-05T08:41:13Z",
        "body": "This PR rectifies an unnecessary set of quotes delimiting the contents of  ```StrFormatInternalBug```. This is a follow up to MarcoFalke https://github.com/bitcoin/bitcoin/pull/28123#discussion_r1297191493.  The method of action was to remove the escaped quotes that were a part of strprintf. A single functional test case was modified to reflect the new output format.\r\n\r\n```STR_INTERNAL_BUG``` was applied to https://github.com/bitcoin/bitcoin/pull/28123 in ```std::string RPCArg::ToString(const bool oneline)``` in ```rpc/util.cpp```\r\n\r\nThe results can be seen below. \r\n\r\nPreviously \r\n![image](https://github.com/bitcoin/bitcoin/assets/3104223/53f9ea59-317f-4c62-9fc1-04255eeb4641)\r\n\r\nThis PR \r\n![image](https://github.com/bitcoin/bitcoin/assets/3104223/5c6a3110-f1f3-4b3c-8e8a-9c8f1c3176e7)\r\n\r\nAdditional context can be found here.\r\nhttps://github.com/bitcoin/bitcoin/pull/28123#discussion_r1271871716\r\n\r\nThank you.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-17T20:25:26Z",
        "closed_at": "2023-08-18T09:01:33Z",
        "merged_at": "2023-08-18T09:01:33Z",
        "body": "This fixes a silent conflict between https://github.com/bitcoin/bitcoin/pull/28123 (which removed all `\\\"options\\\"`) and https://github.com/bitcoin/bitcoin/pull/27460 (which added a new one). \r\n\r\nIt should fix the current CI failures.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-08-17T19:04:49Z",
        "closed_at": "2023-08-22T09:15:46Z",
        "merged_at": "2023-08-22T09:15:46Z",
        "body": "This PR removes loop when testing an unknown named parameter. They don't have any effect.",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 121,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2023-08-17T18:29:55Z",
        "closed_at": "2023-08-24T21:35:09Z",
        "merged_at": "2023-08-24T21:35:09Z",
        "body": "This adds a `sendmsgtopeer` rpc (for testing only) that allows a node to send a message (provided in hex) to a peer.\r\nWhile we would usually use a `p2p` object instead of a node for this in the test framework, that isn't possible in situations where this message needs to trigger an actual interaction of multiple nodes.\r\n\r\nUse this rpc to add test coverage for the bug fixed in #27981 (that just got merged):\r\nThe test lets two nodes (almost) simultaneously send a single large (4MB) p2p message to each other, which would have caused a deadlock previously (making this test fail), but succeeds now.\r\n\r\nAs can be seen from the discussion in #27981, it was not easy to reproduce this bug without `sendmsgtopeer`. I would imagine that `sendmsgtopeer` could also be helpful in various other test constellations.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-17T17:24:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Running tests with non-English locale set in Linux terminal makes system tests (`system_tests/run_command`) fail. Setting the locale in failing test explicitly to 'C' fixes the failure.\r\n\r\n_How to reproduce test failure:_\r\nSetting LC_ALL=cs_CZ.UTF-8 (`export LC_ALL=cs_CZ.UTF-8`) in terminal and then running `make check` should be enough.\r\n\r\n_Fix:_\r\nMy terminal is by default set to non-English locale and the test failed because it checks for English error message, but the terminal produces error message in the language set by locale. Then I manually set `export LC_ALL=C` in my terminal and all tests passed. So I explicitly set env variable 'LC_ALL' to 'C' in the code of failing test.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-17T17:07:10Z",
        "closed_at": "2023-08-18T05:56:58Z",
        "merged_at": null,
        "body": "Looks like this causes all CI builds to be red, and doesn't work anyway, see https://github.com/bitcoin/bitcoin/issues/27593 . Temporarily disable it to allow for more time to rework it from scratch.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-08-17T13:59:46Z",
        "closed_at": "2023-08-22T13:46:19Z",
        "merged_at": "2023-08-22T13:46:19Z",
        "body": "It seems confusing to use `static_cast<uint160>(bla)` to call the constructor of `uint160`. The normal and common way to call a constructor is by simply calling it. (`uint160{bla}`).\r\n\r\nDo this, and also drop the constructor completely where the existing `const&` reference is enough.\r\n\r\nAlso, add missing includes while touching the file.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-17T12:48:40Z",
        "closed_at": null,
        "merged_at": null,
        "body": "clarifying when the .cookie file is generated\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-17T10:24:01Z",
        "closed_at": "2023-08-17T13:03:23Z",
        "merged_at": "2023-08-17T13:03:23Z",
        "body": "This PR ensures that only a single workflow processes any push or pull request at a time.\r\n\r\nA new push will be queued (including the master branch).\r\n\r\nFor a new pull request update, the previous in-progress one will be cancelled.\r\n\r\nAddress https://github.com/bitcoin/bitcoin/pull/28187#discussion_r1295144563.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 338,
        "deletions": 65,
        "changed_files": 10,
        "created_at": "2023-08-16T22:38:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Since https://github.com/bitcoin/bitcoin/pull/17487 we no longer need to clear the coins cache when syncing to disk. A warm coins cache significantly speeds up block connection, and only needs to be fully flushed when nearing the `dbcache` limit.\r\n\r\nFor frequent pruning flushes there's no need to empty the cache and kill connect block speed. However, simply using `Sync` in place of `Flush` actually slows down a pruned full IBD with a high `dbcache` value. This is because as the cache grows, sync takes longer since every coin in the cache is scanned to check if it's dirty. For frequent prune flushes and a large cache this constant scanning starts to really slow IBD down, and just emptying the cache on every prune becomes faster.\r\n\r\nTo fix this, we can add two pointers to each cache entry and construct a doubly linked list of dirty entries. We can then only iterate through all dirty entries on each `Sync`, and simply clear the pointers after.\r\n\r\nWith this approach a full IBD with `dbcache=16384` and `prune=550` was 32% faster than master. For default `dbcache=450` speedup was ~9%. All benchmarks were run with `stopatheight=800000`.\r\n\r\n|  | prune | dbcache | time | max RSS | speedup |\r\n|-----------:|----------:|------------:|--------:|-------------:|--------------:|\r\n| master | 550 | 16384 | 8:52:57 | 2,417,464k | - |\r\n| branch | 550 | 16384 | 6:01:00 | 16,216,736k | 32% |\r\n| branch | 550 | 450 | 8:05:08 | 2,818,072k | 8.8% |\r\n| master | 10000 | 5000 | 8:19:59 | 2,962,752k | - |\r\n| branch | 10000 | 5000| 5:56:39 | 6,179,764k | 28.8% |\r\n| master | 0 | 16384 | 4:51:53 | 14,726,408k | - |\r\n| branch | 0 | 16384 | 4:43:11 | 16,526,348k | 2.7% |\r\n| master | 0 | 450 | 7:08:07 | 3,005,892k | - |\r\n| branch | 0 | 450 | 6:57:24 | 3,013,556k |2.6%|\r\n\r\nWhile the 2 pointers add memory to each cache entry, it did not slow down IBD. For non-pruned IBD results were similar for this branch and master. A non-pruned IBD with full `dbcache` to tip ended up using 12% more memory, but it was also 2.7% faster somehow. For smaller `dbcache` values the `dbcache` limit is respected so does not consume more memory, and the potentially more frequent flushes were not significant enough to cause any slowdown.\r\n\r\nInspired by [this comment](https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-457720636).\r\n\r\nFixes https://github.com/bitcoin/bitcoin/issues/11315.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-16T14:23:10Z",
        "closed_at": "2023-09-14T09:15:02Z",
        "merged_at": "2023-09-14T09:15:02Z",
        "body": "Currently, if a pull request has more than one commit, previous commits may fail to compile, or may fail the tests. This is problematic, because it breaks git-bisect, or worse.\r\n\r\nFix this by adding a CI task for this.",
        "comments": 18
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-08-16T12:41:11Z",
        "closed_at": "2023-08-17T13:17:51Z",
        "merged_at": "2023-08-17T13:17:51Z",
        "body": "Seems odd to use `CI_USE_APT_INSTALL == no` as an alias for `CI_OS_NAME == macos`. Fix this by removing the alias.\r\n\r\nAlso, for github CI:\r\n* restore MAKEJOBS to the same value as in cirrus.yml.\r\n* remove cirrus-only PACKAGE_MANAGER_INSTALL.\r\n* remove redundant TEST_RUNNER_TIMEOUT_FACTOR\r\n* Add M1 link",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-08-16T08:53:50Z",
        "closed_at": "2023-08-16T08:54:43Z",
        "merged_at": null,
        "body": "This commit updates the documentation for the Bitcoin Core integration/staging tree. The changes include minor text edits and formatting improvements to enhance readability and clarity.\r\n\r\n- Updated the formatting of headings for consistency.\r\n- Added missing punctuation in the \"License\" section.\r\n- Clarified the role of the master branch and its stability in the \"Development Process\" section.\r\n- Clarified the purpose of the https://github.com/bitcoin-core/gui repository.\r\n- Improved the description of the contribution workflow.\r\n- Emphasized the importance of testing and code review in the \"Testing\" section.\r\n- Clarified the command to run unit tests.\r\n- Updated the command to run integration tests for accuracy.\r\n- Enhanced the language around manual quality assurance testing.\r\n- Made minor adjustments to sentence structure and wording throughout the document.\r\n- These changes are aimed at improving the overall documentation quality and ensuring that contributors and developers have clear and accurate information about the Bitcoin Core integration/staging tree.\r\n\r\nNo functional code changes have been made in this commit.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 12,
        "changed_files": 5,
        "created_at": "2023-08-15T15:28:27Z",
        "closed_at": "2023-08-16T12:11:08Z",
        "merged_at": "2023-08-16T12:11:08Z",
        "body": "This should fix the macOS-cross build on Cirrus CI containers.\r\n\r\nLocally this was already working, because the SDK was cached in\r\n`/ci_container_base/` in the image, which is also the folder used for a\r\nlater CI run.\r\n\r\nHowever, on Cirrus CI, when using an image *and* a custom `BASE_ROOT_DIR`,\r\nthe SDK will not be found in `/ci_base_install/`, nor in `BASE_ROOT_DIR`.\r\n\r\nFix this by normalizing *all* folders to `/ci_container_base/`.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-08-14T15:51:42Z",
        "closed_at": "2023-08-15T10:13:53Z",
        "merged_at": "2023-08-15T10:13:53Z",
        "body": "It has been cached in the Docker image since https://github.com/bitcoin/bitcoin/pull/27028.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 12,
        "changed_files": 7,
        "created_at": "2023-08-14T03:50:46Z",
        "closed_at": "2023-08-15T10:12:05Z",
        "merged_at": "2023-08-15T10:12:05Z",
        "body": "follow-up to #28008.\r\n* move `dummy_tag` variable in FSChaCha20Poly1305 crypto_tests outside of the loop to be reused every time\r\n* use easy to read `cipher.last()` in `AEADChaCha20Poly1305::Decrypt()`\r\n* comment for initiator in `BIP324Cipher::Initialize()`\r\n* systematically damage ciphertext with bit positions in bip324_tests\r\n* use 4095 max bytes for `aad` in bip324 fuzz test",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 11,
        "changed_files": 5,
        "created_at": "2023-08-13T23:41:36Z",
        "closed_at": "2023-08-13T23:42:22Z",
        "merged_at": null,
        "body": "Simple fix for #748.\r\n\r\nWhen '-min' is enabled, no loading dialog should\r\nbe presented on screen during startup.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 88,
        "deletions": 15,
        "changed_files": 2,
        "created_at": "2023-08-13T20:27:04Z",
        "closed_at": "2023-08-17T12:44:44Z",
        "merged_at": null,
        "body": "In response to upcoming [limiting free usage of Cirrus CI](https://cirrus-ci.org/blog/2023/07/17/limiting-free-usage-of-cirrus-ci/), suggesting to move the \"macOS 11.0 [gui, no tests] [jammy]\" task from Cirrus CI to [GitHub Actions](https://docs.github.com/actions) (GHA).\r\n\r\n(See slightly related discussion in https://github.com/bitcoin/bitcoin/issues/28098)\r\n\r\nBuilds in my personal repo:\r\n- unpopulated caches: https://github.com/hebasto/bitcoin/actions/runs/5849385308/attempts/1\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/d817b2ff-0491-4251-a58c-96f3e5fc99df)\r\n\r\n- populated caches: https://github.com/hebasto/bitcoin/actions/runs/5849385308/attempts/2\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/59c92adc-1336-4fe8-8c5f-9da267ac696a)\r\n\r\nA list of the used actions for the \"Actions permissions\" repository settings:\r\n```\r\nactions/cache@*,\r\nactions/checkout@*,\r\ndocker/build-push-action@*,\r\ndocker/setup-buildx-action@*,\r\n```\r\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 89,
        "deletions": 118,
        "changed_files": 10,
        "created_at": "2023-08-13T14:18:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "In wallet-related functional tests we often want to send funds to an address and  use the resulting (non-change) UTXO directly after as input for another transaction. Doing that is currently tedious, as it involves finding the index part of the outpoint manually by calling helpers like `find_vout_for_address` or `find_output` first.  This results in two different txid/vout variables which then again have to be combined to a single dictionary `{\"txid\": ..., \"vout\": ...}` in order to be specified as input for RPCs like `createrawtransaction` or `createpsbt`. For example:\r\n\r\n```\r\ntxid1 = node1.sendtoaddress(addr1, value1)\r\nvout1 = find_vout_for_address(node1, txid1, addr1)\r\ntxid2 = node2.sendtoaddress(addr2, value2)\r\nvout2 = find_vout_for_address(node2, txid2, addr2)\r\nnode.createrawtransaction([{'txid': txid1, 'vout': vout1}, {'txid': txid2, 'vout': vout2}], .....)\r\n```\r\n\r\nThis PR introduces a helper `create_outpoints` to immediately return the outpoint as\r\nUTXO dictionary in the common format, making the tests more readable and avoiding unnecessary duplication:\r\n\r\n```\r\nutxo1 = self.create_outpoints(node1, outputs=[{addr1: value1}])[0]\r\nutxo2 = self.create_outpoints(node2, outputs=[{addr2: value2}])[0]\r\nnode.createrawtransaction([utxo1, utxo2], .....)\r\n```\r\n\r\nTests are switched to work with UTXO-objects rather than two individual txid/vout variables accordingly.\r\n\r\nThe `find_output` helper is removed, as it seems generally a bad idea to search for an outpoint only based on the output value. If that's really ever needed in the future, it makes probably more sense to add it as an additional parameter to `find_vout_of_address`. Note that `find_output` supported specifying a block-hash for where to look for the transaction (being passed on to the `getrawtransaction` RPC). This seems to be unneeded, as txids are always unique and for the only test that used that parameter (rpc_psbt.py) there was no observed difference in run-time, so it was not reintroduced in the new helper.\r\n\r\nThere are still some `find_vout_of_address` calls remaining, used for detecting change outputs or for whenever the sending happens via `sendrawtransaction` instead, so this PR tackles not all, but the most common case.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 130,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-13T07:00:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR adds fuzz tests for `AEADChaCha20Poly1305` and `FSChaCha20Poly1305` introduced in #28008.\r\n\r\nRun using:\r\n```\r\n$ FUZZ=crypto_aeadchacha20poly1305 src/test/fuzz/fuzz\r\n$ FUZZ=crypto_fschacha20poly1305 src/test/fuzz/fuzz\r\n```",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 45716,
        "deletions": 14588,
        "changed_files": 177,
        "created_at": "2023-08-12T07:59:47Z",
        "closed_at": "2023-08-12T08:34:26Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-08-11T16:55:06Z",
        "closed_at": "2023-08-14T11:40:01Z",
        "merged_at": null,
        "body": "Previously we had an unnamed namespace with two functions, one static the other not static. When briefly reading the code this might be slightly misleading and could make the reader think that not both functions are translation unit local, even though they are.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-11T13:03:22Z",
        "closed_at": "2023-08-14T12:10:24Z",
        "merged_at": "2023-08-14T12:10:24Z",
        "body": "[LLVM uses these options](https://github.com/llvm/llvm-project/blob/main/llvm/cmake/modules/HandleLLVMOptions.cmake#L178) for building as well, so there's precedent.\r\n\r\nAlso fix the shared library extension which was incorrectly being set to dylib.\r\n\r\nThanks to jonatack for reporting and debugging.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-11T12:46:05Z",
        "closed_at": "2023-08-16T11:56:35Z",
        "merged_at": "2023-08-16T11:56:35Z",
        "body": "`migratewallet` migrates the wallet to a descriptor one. During the process, it generates a backup file of the wallet in case of an incorrect migration. This PR adds test to check if the backup file can be successfully restored.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-10T21:57:04Z",
        "closed_at": "2023-10-06T12:51:55Z",
        "merged_at": "2023-10-06T12:51:55Z",
        "body": "Making it easier to debug errors in the CI environment,\r\nparticularly in scenarios where it's not immediately clear\r\nwhat happened nor which node crashed (or shutdown abruptly).\r\n\r\nA bit of context:\r\nCurrently, the test framework redirects each node's stderr output\r\nstream to a different temporary file inside each node's data directory.\r\nWhile this is sufficient for storing the error, it isn't very helpful for\r\nunderstanding what happened just by reading the CI console output.\r\n\r\nMost of the time, reading the stderr file in the CI environment is not\r\npossible, because people don't have access to it.\r\n\r\nTesting Note:\r\nThe displayed error difference can be observed by cherry-picking this\r\ncommit https://github.com/furszy/bitcoin-core/commit/9cc5393c0f24c774b4a59706fc7c7873a59573e7 on top of this branch and running any\r\nfunctional test.",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 3095,
        "deletions": 1767,
        "changed_files": 36,
        "created_at": "2023-08-10T16:30:56Z",
        "closed_at": "2023-09-28T20:05:53Z",
        "merged_at": null,
        "body": "This PR is supposed to provide context for some of the refactoring PRs I've been working on (#25268, #26621, etc).\r\n\r\nThe aim is to completely decouple CConnman and its internals from PeerManager to allow for isolated testing of our message processing code (isolated from net only as isolating from validation is another can of worms). To get there, this work refactors CConnman's API to use `NodeId` as the primary handle for managing connections and defines a new interface `ConnectionsInterface` that describes the interface between PeerManager and CConnman. The result is that CNode is no longer part of this interface and access to it is no longer needed within net processing.\r\n\r\nMost of the API simply shifts from `CConnman::DoX(CNode*)` to `CConnman::DoX(NodeId)` and where possible the PR minimizes the need for new methods on `CConnman` to avoid the slight overhead of (internally) locking `m_nodes_mutex` to look up the right `CNode` by its id.\r\n\r\nSome steps this PR is taking:\r\n\r\n- [ ] We can't test PeerManager in isolation if it is not the owner of its own state. Therefore this PR moves all the remaining application layer data from net to net processing.\r\n- [ ] Some use of CNode in net processing only accesses constant data that is available from the time of connection establishment. This PR introduces `ConnectionContext` which is meant to hold all this constant connection data and for each connection a copy is stored on the corresponding `Peer` instance. This reduces the need for accessing CNode in net processing and avoids some `For{Each}Node` calls (which are a horrible layer violation).\r\n- [ ] Some use of CNode in net processing directly modifies eviction related members of CNode. Instead of wrapping access to these members in CConnman methods, this PR creates a new manager (EvictionManager) that encapsulates the eviction logic as well as the required per-peer data (entirely removing the relevant CNode members).\r\n- [ ] To disconnect a peer , PeerManager directly sets the disconnection flag `CNode::fDisconnect` to true. This PR wraps access to that flag on `CConnman`, i.e. `CConnman::IsDisconnected` & `CConnman::DisconnectNode(NodeId)`.\r\n\r\nFinally, the PR also introduces initial unit tests for PeerManager that make use of a mocked `ConnectionsInterface` instead of the actual CConnman.\r\n\r\nLooking for conceptual & approach review.\r\n\r\n---\r\n\r\nThis is not super polished so I would expect the CI to fail but I will break this up and polish if there is enough conceptual support. I will not keep this rebased as the general architectural direction this is taking should be clear in any case.",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 392,
        "deletions": 95,
        "changed_files": 9,
        "created_at": "2023-08-10T13:04:18Z",
        "closed_at": "2023-09-13T16:51:49Z",
        "merged_at": "2023-09-13T16:51:49Z",
        "body": "While we are evaluating a package, we split it into \"subpackages\" for evaluation (currently subpackages all have size 1 except the last one). If a subpackage has size 1, we may add a tx to mempool and call `LimitMempoolSize()`, which evicts transactions if the mempool gets full. We handle the case where the just-submitted transaction is evicted immediately, but we don't handle the case in which a transaction from a previous subpackage (either just submitted or already in mempool) is evicted. Mainly, since the coins created by the evicted transaction are cached in `m_view`, we don't realize the UTXO has disappeared until `CheckInputsFromMempoolAndCache` asserts that they exist. Also, the returned `PackageMempoolAcceptResult` reports that the transaction is in mempool even though it isn't anymore.\r\n\r\nFix this by not calling `LimitMempoolSize()` until the very end, and editing the results map with \"mempool full\" if things fall out.\r\n\r\nPointed out by instagibbs in https://github.com/bitcoin/bitcoin/commit/faeed687e5cde5e32750d93818dd1d4add837f24 on top of the v3 PR.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 186,
        "deletions": 79,
        "changed_files": 7,
        "created_at": "2023-08-09T20:46:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This pull proposes to fix a number of peer connection issues, along with the logging that uncovered them:\r\n\r\nFix detection of inbound peer connections in `GetAddedNodeInfo`.\r\n\r\nFix addnode CJDNS peers not detected in `GetAddedNodeInfo`, causing `ThreadOpenAddedConnections` to continually retry to connect to them and RPC `getaddednodeinfo` incorrectly showing them as not connected.\r\n\r\nFix `ThreadOpenConnections` not detecting inbound CJDNS connections and making automatic outbound connections to them.\r\n\r\nFix detection of already-connected peers when making outbound connections in `ConnectNode`.\r\n\r\nIn `CreateNodeFromAcceptedSocket`, don't accept inbound connections from peers already connected to us.\r\n\r\nDo not make automatic outbound connections in `ThreadOpenConnections` to addnode peers, in order not to allocate our limited outbound slots to them and to ensure addnode connections benefit from their intended protections. Our addnode logic usually connects the addnode peers before the automatic outbound logic does, but not always, as a connection race can occur (see the commit message for further details and mainnet examples). When an addnode peer is connected as an automatic outbound peer and is the only connection we have to a network, it can be protected by our new outbound network-specific eviction logic and persist in the \"wrong role\". Fix these issues by checking if the selected address is an addnode peer in our automatic outbound connection logic.\r\n\r\nUpdate the p2p logging with the improvements that allowed seeing/understanding/debugging the current behavior. Please see the commit messages for details.\r\n\r\nSimplify `MaybePickPreferredNetwork` to return `std::optional`, make it a const class method, and add Clang thread-safety analysis annotation and related assertions.\r\n",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 160,
        "deletions": 90,
        "changed_files": 19,
        "created_at": "2023-08-09T15:16:28Z",
        "closed_at": "2023-09-19T16:49:00Z",
        "merged_at": "2023-09-19T16:49:00Z",
        "body": "For silent payments, we want to provide a `SilentPaymentsDestination` to be used as the recipient, which requires `CRecipient` to use something other than just the `scriptPubKey` as we cannot know the output script for a silent payment prior to transaction creation. `CTxDestination` seems like the obvious place to add a `SilentPaymentsDestination` as it is our internal representation of an address.\r\n\r\nIn order to still allow paying to arbitrary scriptPubKeys (e.g. for data carrier outputs, or the user hand crafted a raw transaction that they have given to `fundrawtransaction`), `CNoDestination` is changed to contain raw scripts.\r\n\r\nAdditionally, P2PK scripts are now interpreted as a new `PubKeyDestination` rather than `PKHash`. This results in some things that would have given an address for P2PK scripts to no longer do so. This is arguably more correct.\r\n\r\n`ExtractDestination`'s behavior is slightly changed for the above. It now returns `true` for those destinations that have addresses, so P2PK scripts now result in `false`. Even though it returns false for `CNoDestination`, the script will now be included in that `CNoDestination`.\r\n\r\nBuilds on #28244",
        "comments": 21
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-09T12:07:02Z",
        "closed_at": "2023-08-11T09:36:48Z",
        "merged_at": "2023-08-11T09:36:48Z",
        "body": "An LLVM installation will have `llvm-config` available to query for info. Ask it for the `--cmakedir`, and use that in our bitcoin-tidy example, rather than listing multiple different (potential) paths per distro/OS etc.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1096,
        "deletions": 1053,
        "changed_files": 83,
        "created_at": "2023-08-09T11:43:57Z",
        "closed_at": "2023-08-17T11:54:27Z",
        "merged_at": "2023-08-17T11:54:27Z",
        "body": "Some future work needs to touch things in script/standard.{h/cpp}, however it is unclear if it is safe to do so as they are included in several different places that could effect standardness and consensus. It contains a mix of policy parameters, consensus parameters, and utilities only used by the wallet. This PR breaks up the various components and renames the files to clearly separate everything.\r\n\r\n* `CTxDestination` is moved to a new file `src/addresstype.{cpp/h}`\r\n* `TaprootSpendData` and `TaprootBuilder` (and their utility functions and structs) are moved to `SigningProvider` as these are used only during signing.\r\n* `CScriptID` is moved to `script/script.h` to be next to `CScript`.\r\n* `MANDATORY_SCRIPT_VERIFY_FLAGS` is moved to `interpreter.h`\r\n* The parameters `DEFAULT_ACCEPT_DATACARRIER` and `MAX_OP_RETURN_RELAY` are moved to `policy.h`\r\n* `standard.{cpp/h}` is renamed to `solver.{cpp/h}` since that's all that's left in the file after the above moves",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 143,
        "deletions": 88,
        "changed_files": 13,
        "created_at": "2023-08-09T11:05:20Z",
        "closed_at": "2023-08-12T08:36:21Z",
        "merged_at": null,
        "body": "GH has introduced new \"Alert\" syntax for md files (a.k.a \"Admonitions\" in other languages).\r\n\r\nWhilst being wary of changing documentation just for the sake of \"shiny\" new features, in my opinion this is worthwhile in this case as we can use it to draw user attention to particularly important sections of docs.\r\n\r\nThe format is relatively backwards-compatible (i.e outside of GH), as the syntax is effectively a multi-block quotation, where the first line includes the alert type. This means the text still renders fine outside of GH, but is improved on GH. Samples below:\r\n\r\nGitHub render:\r\n![image](https://github.com/bitcoin/bitcoin/assets/6606587/34282644-bf21-42d8-bbe6-6f18069a3081)\r\n\r\nHackmd render:\r\n![image](https://github.com/bitcoin/bitcoin/assets/6606587/d88a98a8-e9c0-4dce-abf1-58f59de9c6a5)\r\n\r\nSee e.g. https://github.com/willcl-ark/bitcoin/blob/2023-08-gh-alerts/doc/managing-wallets.md for a doc containing a few alerts.\r\n\r\nOpening as draft for now to see if others would consider such a change worthwhile, not interested in bike-shedding over which alert level is used where, for now :) But for reference GH provides [documentation](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#alerts) with _their_ recommended usage of alert levels, which I did try to roughly use in this draft. \r\n\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 27,
        "changed_files": 13,
        "created_at": "2023-08-09T09:55:16Z",
        "closed_at": "2023-08-09T10:13:42Z",
        "merged_at": null,
        "body": "This reverts commit fa940f41eaffa4b2a28c465a10a4c12d4b8976b8.\r\n\r\nWith this commit produce the following compilation error.\r\n\r\n```\r\nMaking all in src\r\nmake[1]: Entering directory '/home/vincent/Github/bitcoin/src'\r\nmake[2]: Entering directory '/home/vincent/Github/bitcoin/src'\r\nmake[3]: Entering directory '/home/vincent/Github/bitcoin'\r\nmake[3]: Leaving directory '/home/vincent/Github/bitcoin'\r\n  GEN      obj/build.h\r\n  CXX      libbitcoin_util_a-clientversion.o\r\n  AR       libbitcoin_util.a\r\n  CXXLD    bitcoind\r\n  CXXLD    bitcoin-cli\r\n  CXXLD    bitcoin-tx\r\n  CXXLD    bitcoin-wallet\r\n  CXXLD    bitcoin-util\r\n  CXX      test/test_bitcoin-base58_tests.o\r\ntest/base58_tests.cpp: In member function \u2018void base58_tests::base58_EncodeBase58::test_method()\u2019:\r\ntest/base58_tests.cpp:26:44: error: invalid initialization of reference of type \u2018const std::string&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019} from expression of type \u2018const unsigned char [1462]\u2019\r\n   26 |     UniValue tests = read_json(json_tests::base58_encode_decode);\r\n      |                                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\r\nIn file included from test/base58_tests.cpp:8:\r\n./test/util/json.h:12:39: note: in passing argument 1 of \u2018UniValue read_json(const std::string&)\u2019\r\n   12 | UniValue read_json(const std::string& jsondata);\r\n      |                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~\r\ntest/base58_tests.cpp: In member function \u2018void base58_tests::base58_DecodeBase58::test_method()\u2019:\r\ntest/base58_tests.cpp:46:44: error: invalid initialization of reference of type \u2018const std::string&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019} from expression of type \u2018const unsigned char [1462]\u2019\r\n   46 |     UniValue tests = read_json(json_tests::base58_encode_decode);\r\n      |                                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\r\n./test/util/json.h:12:39: note: in passing argument 1 of \u2018UniValue read_json(const std::string&)\u2019\r\n   12 | UniValue read_json(const std::string& jsondata);\r\n      |                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~\r\nmake[2]: *** [Makefile:18253: test/test_bitcoin-base58_tests.o] Error 1\r\nmake[2]: Leaving directory '/home/vincent/Github/bitcoin/src'\r\nmake[1]: *** [Makefile:20006: all-recursive] Error 1\r\nmake[1]: Leaving directory '/home/vincent/Github/bitcoin/src'\r\nmake: *** [Makefile:815: all-recursive] Error 1\r\n```\r\n\r\nThe main problem is that we can not auto-convert an unsigned char string to a std::string.\r\n\r\nBut why the CI did not catch this?\r\n\r\ncc: @MarcoFalke, @stickies-v @TheCharlatan\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2810,
        "deletions": 15,
        "changed_files": 34,
        "created_at": "2023-08-09T09:13:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR adds an index with the silent payment tweak for every transaction. It builds on top of #28122.\r\n\r\nIt also adds a `getsilentpaymentblockdata` RPC that returns an array of silent payment tweaked public keys, one for each qualifying transaction. \r\n\r\nThis index serves two purposes:\r\n1. Light client support, see [BIP 352](https://github.com/josibake/bips/blob/silent-payments-bip/bip-0352.mediawiki#user-content-Tweak_Data)\r\n2. A more thorough check than the test vectors; e.g. by comparing a checksum of the index for all of mainnet.\r\n\r\nBased on the index that was originally part of #24897.\r\n\r\nTODO:\r\n- [ ] check correctness against another implementation\r\n- [ ] make `-silentpaymentindex=0` mean off (default), `-silentpaymentindex=v0` on\r\n- [ ] figure out how to do versioning (make the index flexible enough, or just rebuild the index at the next version)\r\n- [ ] remove dependency on wallet (move `GetSilentPaymentsTweakDataFromTxInputs` and everything it needs out of the wallet)\r\n- [ ] cleanup various TODO's in the code\r\n- [ ] brainstorm updating index when outputs are spent\r\n- add tests\r\n  - [ ] that a reorg adds the new blocks (and it's fine to keep the old one) ",
        "comments": 19
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 24,
        "changed_files": 3,
        "created_at": "2023-08-08T12:56:17Z",
        "closed_at": "2023-08-15T21:22:07Z",
        "merged_at": "2023-08-15T21:22:07Z",
        "body": "Remove unused boost, and other includes, and other legacy functions from torcontrol.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 19,
        "changed_files": 8,
        "created_at": "2023-08-08T07:16:38Z",
        "closed_at": "2023-08-18T10:38:48Z",
        "merged_at": "2023-08-18T10:38:48Z",
        "body": "All fmt functions only accept a raw C-string as argument.\r\n\r\nThere should never be a need to pass a format string that is not a compile-time string literal, so disallow it in `WalletLogPrintf()` to avoid accidentally introducing it.\r\n\r\nApart from consistency, this also fixes the clang-tidy plugin bug https://github.com/bitcoin/bitcoin/pull/26296#discussion_r1286821141.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 261,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-07T21:25:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR adds fuzz coverage for `wallet/spend`.\r\n\r\nMotivation: Issue [27272](https://github.com/bitcoin/bitcoin/issues/27272#issue-1628327906)\r\n\r\nThis PR adds Fuzz\u00a0coverage to\u00a0the whole\u00a0concept\u00a0of Creating a New Transaction as well as other sections of the Spend file.  Because `CreateTransaction` is one of the most frequently used functions\u00a0in the wallet codebase, merging this PR will significantly improve the wallet codebase's Fuzz testing!\r\n\r\nI also used the `Singleton Class` concept for creating Wallet instances because it assures that only one instance of it is created during all Fuzz runs, which significantly boosts the file's `exec/sec`.\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-07T21:20:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "If we receive a valid block that passes the anti-DoS threshold but doesn't advance the tip, the BlockChecked callback won't be called. This is because ActivateBestChain will return early since pindexMostWork is equal to m_chain.Tip(). Since the BlockChecked callback isn't called, mapBlockSource won't be removed from. Fix that by always removing from mapBlockSource in ProcessBlock.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-08-07T15:22:23Z",
        "closed_at": "2023-08-10T13:38:37Z",
        "merged_at": null,
        "body": "bad opcode err msg includes `reserved`, because reserved opcode is evaluated as BAD_OPCODE(and it's wrong to state `missing or not undestood` for it).",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-07T14:44:40Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Since https://github.com/bitcoin/bitcoin/pull/17487 we no longer need to clear the coins cache when syncing to disk. [A warm coins cache significantly speeds up block connection](https://github.com/bitcoin/bitcoin/pull/18941#issuecomment-633684774), and only needs to be fully flushed when nearing the `dbcache` limit.\r\n\r\nPeriodic flushes occur every 24 hours, which empties the cache and causes block connection to slow down. By keeping the cache through periodic flushes a node can run for several days with an increasingly hotter cache and connect blocks much more quickly.\r\n\r\nAlso note that this still clears the cache for pruning flushes. Having frequent pruning flushes with a large cache that doesn't clear is less performant than the status quo https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-458657451. See https://github.com/bitcoin/bitcoin/pull/28280.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-07T13:49:51Z",
        "closed_at": "2023-08-14T15:18:21Z",
        "merged_at": "2023-08-14T15:18:21Z",
        "body": "Coming from https://github.com/bitcoin/bitcoin/pull/28139#discussion_r1284563239.\r\n\r\nNo test case in this file is meant to exercise fee estimation. All default wallets have a\r\ncustom tx fee set [here](https://github.com/bitcoin/bitcoin/blob/b7138252ace6d21476964774e094ed1143cd7a1c/test/functional/wallet_fundrawtransaction.py#L100). The only one missing is the one created for `locked_wallet`.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-08-07T12:21:42Z",
        "closed_at": "2023-08-07T16:55:54Z",
        "merged_at": "2023-08-07T16:55:53Z",
        "body": "These are no-longer installable on any recent Fedora (last working version was 32). \r\nRemove the install instructions, and consolidate this section to be the same as the\r\nUbuntu & Debian BDB install instructions.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 113,
        "deletions": 8,
        "changed_files": 5,
        "created_at": "2023-08-07T11:14:00Z",
        "closed_at": "2023-08-24T10:57:22Z",
        "merged_at": "2023-08-24T10:57:22Z",
        "body": "Currently the RPC method implementations have many issues:\r\n\r\n* Default RPC argument values (and their optionality state) are duplicated in the documentation and the C++ code, with no checks to prevent them from going out of sync.\r\n* Getting an optional RPC argument is verbose, using a ternary operator, or worse, a multi-line `if`.\r\n\r\nFix all issues by adding default helper that can be called via `self.Arg<int>(0)`. The helper needs a few lines of code in the `src/rpc/util.h` header file. Everything else will be implemented in the cpp file once and if an RPC method needs it.\r\n\r\nThere is also an `self.MaybeArg<int>(0)` helper that works on any arg to return the argument, the default, or a falsy value.",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 26,
        "changed_files": 7,
        "created_at": "2023-08-07T07:54:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Moving the kernel sanity check code to kernel context instantiation time ensures that it is impossible to create an invalid kernel context. This is based on a suggestion made in a [comment](https://github.com/bitcoin/bitcoin/pull/25065#discussion_r882182549) by @theuni in the [original pull request](https://github.com/bitcoin/bitcoin/pull/25065) first introducing the `kernel::Context`.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 19,
        "changed_files": 1,
        "created_at": "2023-08-06T17:55:06Z",
        "closed_at": "2023-10-02T09:58:06Z",
        "merged_at": "2023-10-02T09:58:06Z",
        "body": "This PR checks for specific disconnect reasons using `assert_debug_log` in the functional test `p2p_blockfilters.py`. With that we ensure that the disconnect happens for the expected reason and also makes it easier to navigate between implementation and test code, i.e. both the questions \"do we have test coverage for this disconnect cause?\" (from an implementation reader's perspective) and \"where is the code handling this disconnect cause?\" (from a test reader's perspective) can be answered simply by grep-ping the corresponding debug message.\r\n\r\nAlso, based on that, missing coverage for the (start height > stop height) disconnect case is added:\r\nhttps://github.com/bitcoin/bitcoin/blob/b7138252ace6d21476964774e094ed1143cd7a1c/src/net_processing.cpp#L3050-L3056\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 84,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-08-06T05:38:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "TLDR: \r\n* Adds a `TRACE_RAII` macro to easily trace runtime of a code block.\r\n* Switch to `CBufferedFile` in `BlockManager::ReadBlockFromDisk` is slightly faster:\r\n* 9% faster unserialization =>  1.2% faster `-reindex-chainstate`\r\n\r\n---\r\nWhile profiling `-reindex-changestate` I saw lots of `fread()` calls in in `BlockManager::ReadBlockFromDisk`. This replaces the use of `CAutoFile` with `CBufferedFile` with a small buffer, leading to much fewer calls to\r\n`fread()`, which gives a little speedup.\r\n\r\nI measured runtime of the synchronization with the `TRACE_RAII` macro. I ran this command which took about 30 minutes on my PC, with and without CBufferedFile:\r\n\r\n```sh\r\nsync && sudo /sbin/sysctl vm.drop_caches=3 && ~/git/github.com/martinus/bitcoin/src/bitcoind -dbcache=20000 -reindex-chainstate -printtoconsole=0 -stopatheight=500000\r\n```\r\n\r\nThe measured time spent in unserializing blocks are:\r\n* 308.227s `CAutoFile`\r\n* 277.827s `CBufferedFile`\r\n\r\nIt is a bit hard to measure the total effect on `-reindex-chainstate` due to random fluctuations in the benchmark. For somewhat reliable results I've run the benchmark 10 times, using [hyperfine](https://github.com/sharkdp/hyperfine):\r\n\r\n```sh\r\nhyperfine \\                                                                                                                                                                                                                                                                                         --parameter-list commit 0f3a6a74a2889817df0f52e19c37de19c664daac,ce26cb6025c47bb4b3e51a579689635da7ca1f6b \\\r\n--setup 'git checkout {commit} && make -j$(nproc)' \\\r\n--prepare 'sync; sudo /sbin/sysctl vm.drop_caches=3' \\\r\n'./bitcoind -dbcache=20000 -reindex-chainstate -printtoconsole=0 -stopatheight=500000'\r\n```\r\n\r\nThe results are:\r\n\r\n```\r\nBenchmark 1: ./bitcoind -dbcache=20000 -reindex-chainstate -printtoconsole=0 -stopatheight=500000 (CAutoFile)\r\n  Time (mean \u00b1 \u03c3):     1847.622 s \u00b1 13.448 s    [User: 1702.768 s, System: 54.059 s]\r\n  Range (min \u2026 max):   1835.319 s \u2026 1877.065 s    10 runs\r\n\r\nBenchmark 2: ./bitcoind -dbcache=20000 -reindex-chainstate -printtoconsole=0 -stopatheight=500000 (CBufferedFile)\r\n  Time (mean \u00b1 \u03c3):     1824.660 s \u00b1 14.394 s    [User: 1679.417 s, System: 53.965 s]\r\n  Range (min \u2026 max):   1798.764 s \u2026 1848.940 s    10 runs\r\n```\r\n\r\nSo the 9% improvement in unserializing seems to translate to roughly 1.2% total runtime improvement in `-reindex-chainstate` on my machine.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-05T20:29:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The destruction/resetting of node context members in the tests should roughly follow the behavior of the `Shutdown` function in `init.cpp`.\r\n\r\nThis was originally requested by MarcoFalke in this [comment](https://github.com/bitcoin/bitcoin/pull/25065#discussion_r890161249) in response to the [original pull request](https://github.com/bitcoin/bitcoin/pull/25065) introducing the `kernel::Context`. ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 348,
        "deletions": 383,
        "changed_files": 10,
        "created_at": "2023-08-05T09:45:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Switch to using smart pointers to `CNode`s inside of `CConnman`.\r\n\r\nCurrently we are manually refcounting CNodes which is potentially error-prone and makes operations such as deleting them from multiple threads difficult without introducing new locks or other synchronisation operations (see https://github.com/bitcoin/bitcoin/pull/27912).\r\n\r\nSwitch to using `std::shared_ptr` references to `CNode`s inside of `m_nodes` and `m_nodes_disconnected` to give us better memory safety today, and in the future allow `AttemptToEvictConnection` (and optionally other sites) to safely synchronously disconnect nodes when needed.\r\n\r\nOpening as draft for now as I want to both gauge feedback on the approach, and see which PRs this may conflict with (#27213?) before moving it forwards.\r\n\r\nCC @vasild ",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 175,
        "deletions": 43,
        "changed_files": 5,
        "created_at": "2023-08-05T03:34:40Z",
        "closed_at": "2023-09-27T16:27:30Z",
        "merged_at": null,
        "body": "This PR proposes to introduce a new interface to allow applications and second layers protocols to verify that their unconfirmed and non-propagated transactions are valid under Bitcoin Core transaction relay policy.\r\n\r\nThis new `libstandardness` interface is designed at the image of the `bitcoinconsensus` library, which already exposes some of the script verification internals to other applications. A new method is introduced `libstandard_verify_transaction` which indicate to the caller if the transaction is valid, i.e can propagate at current chain tip. For now, the policy rules as considered as a \"black box\", there is no detail (i.e `TxValidationState::m_reject_reason`) on thepolicy rule violated.\r\n\r\nThis interface allows second layers like contracting protocols relying on pre-signed transactions and efficient propagation over the network mempools for the security of user funds. E.g for the Lightning Network, counterparties are exchanging signatures for the commitment transaction and second-stage HTLCs during the BOLT2's `commitment_signed` message dance. A policy invalid commitment transaction with pending HTLC outputs not propagating on the network can be source of failure, a serious vulnerability for a Lightning implementation as [CVE-2020-26895](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html) showed it. Beyond being source of loss of funds, a policy rule violation can be a source of [liquidity griefing](https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003920.html) for a Lightning node participating in a collaborative transaction flow (dual-funding / splicing), where inputs/outputs are freely added by the counterparties.\r\n\r\nFor some contracting protocols, where the pre-signed txn are malleable by the counterparty it doesn't seem computationally plausible to `testmempoolaccept` all the combinationd valid under the protocol template and this would still assume some changes in our current transaction validation interface to bypass some stateful checks such as timelocks and mempool min fee.\r\n\r\nAs of today, there is no straightforward software tooling for applications and second-layers to verify the validity of the policy rules of their transactions, and most of implementations to the best of my knwoledge are re-implementing the policy rules in their backend, or delegate this verification to their bitcoin libraries. Such re-implementation is sometimes imperfect, must be updated at each Bitcoin Core policy rules changes (e.g packages policy rules) and be adapted for each protocol transaction templates (e.g for Lightning, commitment tx, second-stage tx, closing_tx, collaborative tx, legacy/anchor/taproot).\r\n\r\nThe proposed interface is introduced as a shared library rather than a RPC interface, as ideally policy rules could be enforced on embedded / resource constrained platforms such as L2 signers enforcing security rule validation of the second layer state machine (and from where one should be able to extract propagating pre-signed transactions in case of emergency recovery) and generally allow for more flexibility for applications and second layers, e.g on mobile phone where a full-node is not assumed (all caveats reserved on the lower security model in that latter case).\r\n\r\nThis interface has been proposed in the past, see previous PRs\r\n- https://github.com/bitcoin/bitcoin/pull/18797\r\n- https://github.com/bitcoin/bitcoin/pull/21413\r\n- https://github.com/bitcoin/bitcoin/pull/25434\r\n\r\nOpening the PR for now to collect conceptual and implementation-approach feedbacks. If the new interface is judged as relevant and useful, I'll add bindings in rust-bitcoin to test the interface end-to-end with adequate Lightning software.\r\n\r\nTODO:\r\n- write documentation for language bindings write in `doc/shared-libraries.md` and maybe in `doc/policy/`\r\n- integrate as a config flag only feature in build system (e.g `BUILD_BITCOIN_LIBSTANDARDNESS` in `src/Makefile.am` and `configure.ac`)\r\n- initialize the chainstate and its associated mempool with the spent utxos\r\n- some other things",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-05T01:43:49Z",
        "closed_at": "2023-08-05T01:55:13Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 79,
        "deletions": 66,
        "changed_files": 14,
        "created_at": "2023-08-04T21:14:06Z",
        "closed_at": "2023-08-21T09:55:55Z",
        "merged_at": "2023-08-21T09:55:54Z",
        "body": "This change makes `IsInitialBlockDownload` and `NotifyHeaderTip` functions no longer tied to individual `Chainstate` objects. It makes them work with the `ChainstateManager` object instead so code is simpler and it is no longer possible to call them incorrectly with an inactive `Chainstate`.\r\n\r\nThis change also makes `m_cached_finished_ibd` caching easier to reason about, because now there is only one cached value instead of two (for background and snapshot chainstates) so the cached IBD state now no longer gets reset when a snapshot is loaded.\r\n\r\nThere should be no change in behavior because these functions were always called on the active `ChainState` objects.\r\n\r\nThese changes were discussed previously https://github.com/bitcoin/bitcoin/pull/27746#discussion_r1246868905 and https://github.com/bitcoin/bitcoin/pull/27746#discussion_r1237552792 as possible followups for that PR.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-08-04T18:37:55Z",
        "closed_at": "2023-10-05T16:37:37Z",
        "merged_at": null,
        "body": "The default activation of the `permitbaremultisig=0` option proposes an enhancement for the Bitcoin network. By refusing non-P2SH multisignature transactions from the outset, this modification would contribute to reducing spam attempts and maintaining a healthy decentralization by discouraging undesirable activities.",
        "comments": 87
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-08-04T12:31:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Similarly to #28209, this introduces a fuzz target for `CCoinsViewDb` by using an in-memory LevelDB. We reuse the body of the existing fuzz target for `coins_view`.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-04T11:59:14Z",
        "closed_at": "2023-08-15T10:05:53Z",
        "merged_at": "2023-08-15T10:05:53Z",
        "body": "The `coins_view` fuzz target would assert in two places that the cache is consistent with the backend. But it's never the case (that's the whole point of using a cache).\r\n\r\nThe only reason this didn't result in a crash was that we would never actually hit these assertions. I ran into this while introducing a new target with an in-memory `CCoinsViewDB` as the backend view (see https://github.com/bitcoin/bitcoin/pull/28216) which made the code paths with those assertions actually reachable.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 18,
        "changed_files": 1,
        "created_at": "2023-08-04T09:54:17Z",
        "closed_at": "2023-08-17T10:21:16Z",
        "merged_at": "2023-08-17T10:21:16Z",
        "body": "Cirrus CI will be capping the free compute soon. For now, switch more tasks to persistent worker, as recommended by Cirrus CI.\r\n\r\n(See slightly related discussion in https://github.com/bitcoin/bitcoin/issues/28098)\r\n\r\nAlso, add more docs.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-08-03T19:48:45Z",
        "closed_at": "2023-08-04T13:09:45Z",
        "merged_at": "2023-08-04T13:09:45Z",
        "body": "On Windows, it is the accepted practice to use `py.exe` launcher:\r\n- https://learn.microsoft.com/en-us/windows/python/faqs#what-is-py-exe-\r\n- https://docs.python.org/3/using/windows.html#python-launcher-for-windows\r\n\r\nOne of its features is the correct handling of shebang lines like the one we use: `#!/usr/bin/env python3`.\r\n\r\nHowever, Windows OS app execution aliases might [interfere](https://learn.microsoft.com/en-us/windows/python/faqs#why-does-running-python-exe-open-the-microsoft-store-) with the launcher's behaviour. Such aliases are enabled on Windows 11 by default:\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/32963518/407837ec-e89a-4bc1-98b1-db983002065a)\r\n\r\nFor example, on a fresh Windows 11 Pro installation with the Python installed from the [Chocolatey](https://community.chocolatey.org/packages/python/3.11.4) package manager, one will get the following error:\r\n```\r\n>py -3 test\\functional\\rpc_signer.py\r\n2023-08-03T19:41:13.353000Z TestFramework (INFO): PRNG seed is: 2694758731106548661\r\n2023-08-03T19:41:13.353000Z TestFramework (INFO): Initializing test directory C:\\Users\\hebasto\\AppData\\Local\\Temp\\bitcoin_func_test_mldbzzw3\r\n2023-08-03T19:41:14.538000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\hebasto\\bitcoin\\test\\functional\\test_framework\\util.py\", line 140, in try_rpc\r\n    fun(*args, **kwds)\r\n  File \"C:\\Users\\hebasto\\bitcoin\\test\\functional\\test_framework\\coverage.py\", line 50, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\hebasto\\bitcoin\\test\\functional\\test_framework\\authproxy.py\", line 129, in __call__\r\n    raise JSONRPCException(response['error'], status)\r\ntest_framework.authproxy.JSONRPCException: RunCommandParseJSON error: process(py C:\\Users\\hebasto\\bitcoin\\test\\functional\\mocks\\signer.py enumerate) returned 9009: Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.\r\n (-1)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\hebasto\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 131, in main\r\n    self.run_test()\r\n  File \"C:\\Users\\hebasto\\bitcoin\\test\\functional\\rpc_signer.py\", line 72, in run_test\r\n    assert_raises_rpc_error(-1, 'fingerprint not found',\r\n  File \"C:\\Users\\hebasto\\bitcoin\\test\\functional\\test_framework\\util.py\", line 131, in assert_raises_rpc_error\r\n    assert try_rpc(code, message, fun, *args, **kwds), \"No exception raised\"\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\hebasto\\bitcoin\\test\\functional\\test_framework\\util.py\", line 146, in try_rpc\r\n    raise AssertionError(\r\nAssertionError: Expected substring not found in error message:\r\nsubstring: 'fingerprint not found'\r\nerror message: 'RunCommandParseJSON error: process(py C:\\Users\\hebasto\\bitcoin\\test\\functional\\mocks\\signer.py enumerate) returned 9009: Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.\r\n'.\r\n2023-08-03T19:41:14.592000Z TestFramework (INFO): Stopping nodes\r\n2023-08-03T19:41:14.799000Z TestFramework (WARNING): Not cleaning up dir C:\\Users\\hebasto\\AppData\\Local\\Temp\\bitcoin_func_test_mldbzzw3\r\n2023-08-03T19:41:14.799000Z TestFramework (ERROR): Test failed. Test logging available at C:\\Users\\hebasto\\AppData\\Local\\Temp\\bitcoin_func_test_mldbzzw3/test_framework.log\r\n2023-08-03T19:41:14.799000Z TestFramework (ERROR):\r\n2023-08-03T19:41:14.799000Z TestFramework (ERROR): Hint: Call C:\\Users\\hebasto\\bitcoin\\test\\functional\\combine_logs.py 'C:\\Users\\hebasto\\AppData\\Local\\Temp\\bitcoin_func_test_mldbzzw3' to consolidate all logs\r\n2023-08-03T19:41:14.799000Z TestFramework (ERROR):\r\n2023-08-03T19:41:14.799000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2023-08-03T19:41:14.799000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2023-08-03T19:41:14.799000Z TestFramework (ERROR):\r\n\r\n```\r\n\r\nThis PR resolves this issue by explicitly specifying the Python major version and makes testing of self-compiled binaries more straightforward.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-08-03T16:26:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Verify that a 999-of-999 taproot multisig wallet is possible and can spend from it, and that neither a 1-of-0 nor 1-of-1000 is allowed.\r\n\r\nThe tests will require some time to run. On my Mac M1 the new tests run in about 40 seconds.\r\n\r\nHad to bump fee rate to resolve assertions in sendtoaddress and psbt methods:\r\n- code -5: assert rpc_online.gettransaction(txid)[\"confirmations\"] > 0\r\n- code -26: min relay fee not met\r\n\r\nFixes #28179 ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 18,
        "changed_files": 8,
        "created_at": "2023-08-03T12:49:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "All supported operating systems ship with python 3.9 (or later), so bumping the minimum should not cause any issues. A bump will allow new code to use new python 3.9 features.\r\n\r\nFor reference:\r\n* https://packages.debian.org/bullseye/python3\r\n* https://packages.ubuntu.com/focal/python3.9\r\n* FreeBSD 12/13 also ships with 3.9\r\n* CentOS-like 8/9 also ships with 3.9 (and 3.11)\r\n* OpenSuse Leap also ships with 3.9 (and 3.11) https://software.opensuse.org/package/python311-base\r\n\r\nThis is for Bitcoin Core 27.0 in 2024 (next year), not the soon upcoming 26.0 next month.",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 13,
        "changed_files": 6,
        "created_at": "2023-08-03T12:32:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "All supported operating systems ship with clang-13 (or later), so bump the minimum to that and remove now unused workarounds for previous clang bugs.\r\n\r\nFor reference:\r\n* https://packages.debian.org/bullseye/clang-13\r\n* https://packages.ubuntu.com/jammy/clang (`clang-14`) and https://packages.ubuntu.com/jammy/clang-15\r\n* CentOS-like 8/9 Stream: All Clang versions from 13 to 15\r\n* FreeBSD 12/13: All Clang version from 13 to 16\r\n* OpenSuse Tumbleweed ships with https://software.opensuse.org/package/clang (`clang16`); No idea about OpenSuse Leap\r\n\r\nThis is for Bitcoin Core 27.0 in 2024 (next year), not the soon upcoming 26.0 next month.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 133,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-03T10:50:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This introduces a small fuzz target for `CBlockTreeDB` which asserts a few invariants by using an in-memory LevelDb.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-08-03T09:12:13Z",
        "closed_at": "2023-08-03T09:54:19Z",
        "merged_at": null,
        "body": "`pkg_resources` is deprecated, and warns with newer Python:\r\n```bash\r\n/bitcoin/test/lint/lint-python.py:12: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\r\n  import pkg_resources\r\n```\r\n\r\nSwitch to using `importlib.metadata`, which has existed since Python 3.8.\r\n\r\nSee: https://docs.python.org/3/library/importlib.metadata.html#module-importlib.metadata.\r\nSee: https://setuptools.pypa.io/en/latest/pkg_resources.html",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 58,
        "deletions": 13,
        "changed_files": 8,
        "created_at": "2023-08-03T09:09:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently the `mempool.dat` file stores data received from remote peers as-is. This may be problematic when a program other than Bitcoin Core tries to interpret them by accident. For example, an anti-virus program or other program may scan the file and move it into quarantine, or delete it, or corrupt it.\r\n\r\nWhile the local wallet is expected to re-submit any pending transactions, unrelated transactions may be missing from the mempool after a restart. This may cause fee estimates to be off, or may cause block relay to be slower.\r\n\r\nFix this, similar to https://github.com/bitcoin/bitcoin/pull/6650, by rolling a random XOR pattern over the dat file when writing or reading it.\r\n\r\nObviously this can only protect against programs that accidentally and unintentionally are trying to mess with the dat file. Any program that intentionally wants to mess with the dat file can still trivially do so.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-02T23:40:51Z",
        "closed_at": "2023-08-19T00:11:09Z",
        "merged_at": null,
        "body": "Since commit ed6cddd98e32263fc116a4380af6d66da20da990 (PR #25717) incoming BLOCK messages have to pass an anti-DoS check in order to be accepted. Passing this check is currently only possible if there's a previous block available, which is obviously not the case for the genesis block, so it is denied:\r\n\r\n`ERROR: ProcessNewBlock: AcceptBlock FAILED (too-little-chainwork)`\r\n    \r\nFix that by adding the special case for the genesis block, so fetching it via `getblockfrompeer` on pruned nodes (which was possible pre v24.0) is working again. Inspiration for looking into this was the following twitter post: https://twitter.com/colemaktypo/status/1686423428155297796 as I vaguely remembered that this was possible in the past. The practical relevance of all this is of course debatable; on the long-term it might make more sense to put an exception on the `getblock` RPC to return the genesis block directly as embedded in the code, rather than trying to read it from disk, so fetching it from other peers is not needed in the first place (if we care about having it available on pruned nodes at all).",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-02T18:34:07Z",
        "closed_at": "2023-08-03T09:02:54Z",
        "merged_at": "2023-08-03T09:02:54Z",
        "body": "This PR is a follow-up for https://github.com/bitcoin/bitcoin/pull/26462 that introduced a bug on Windows:\r\n```\r\n>test\\functional\\wallet_descriptor.py\r\n...\r\nPermissionError: [WinError 32] The process cannot access the file because it is being used by another process:\r\n...\r\n```\r\n\r\nFrom `sqlite3` Python module [docs](https://docs.python.org/3/library/sqlite3.html#how-to-use-the-connection-context-manager):\r\n> `Connection` object used as context manager only commits or rollbacks transactions, so the connection object should be closed manually.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 124,
        "changed_files": 1,
        "created_at": "2023-08-02T18:20:46Z",
        "closed_at": "2023-08-04T12:51:00Z",
        "merged_at": "2023-08-04T12:51:00Z",
        "body": "This simplifies the serialization code a bit and should also make it a bit faster.\r\n\r\n* use fold expressions instead of recursive calls. This simplifies the code, makes it most likely faster because it reduces the number of function calls, and compiles faster because there are fewer template instantiations.\r\n\r\n* use `if constexpr` instead of unnecessarily creating a temporary object only to call the right overload. This is used for `std::vector` and `prevector` serialization.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 3096,
        "deletions": 53,
        "changed_files": 38,
        "created_at": "2023-08-02T16:42:41Z",
        "closed_at": "2023-09-26T11:58:54Z",
        "merged_at": null,
        "body": "This PR is a child of https://github.com/bitcoin/bitcoin/pull/27827 and only implements the receiving logic. For the rest:\r\n\r\n* #28122 - implement the silent payments scheme\r\n* #28201 - implements sending\r\n* #27827 - all three PRs together - this PR is meant for tracking progress and is useful for reviewers who want to compile all three PRs at once for testing\r\n\r\nThis PR depends on #28122 and is marked as a draft until it is merged. Commits up to https://github.com/bitcoin/bitcoin/commit/8ee791e7b34a354ce6835b968fe12924b8908d7c belong to #28122; please review those commits on #28122\r\n\r\n## Receiving \r\n\r\n_Description coming soon_",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 3351,
        "deletions": 255,
        "changed_files": 41,
        "created_at": "2023-08-02T16:37:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR is part of integrating silent payments into Bitcoin Core. Status and tracking for the project is managed in https://github.com/bitcoin/bitcoin/issues/28536\r\n\r\nThis PR depends on #28122 and is marked as a draft until it is merged. If interested in those commits, please review on #28122\r\n\r\n## Sending \r\n### Silent Payments logic\r\n\r\nThe main focus of this PR is:\r\n\r\n* Applying the Taptweak to a taproot internal private key (this is a copy-paste of the code for applying the taptweak in the signing process)\r\n* Getting a private key from a given `scriptPubKey`\r\n* Creating silent payment outputs\r\n* Applying the created scriptPubKeys back to the vector of `CRecipients`\r\n\r\nThe functions are then used together to create silent payment outputs during `CreateTransactionInternal`.\r\n\r\n### Final steps\r\n\r\nThe last commits ensure that:\r\n\r\n* Coin selection is silent payments aware and knows to exclude taproot script path spends and inputs with unknown witness when funding a transaction which pays to a silent payment address\r\n* The change output type is correctly chosen when paying to a silent payment address\r\n* Functional tests\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 161,
        "deletions": 74,
        "changed_files": 18,
        "created_at": "2023-08-02T14:29:39Z",
        "closed_at": "2023-08-22T09:34:19Z",
        "merged_at": "2023-08-22T09:34:19Z",
        "body": "This makes compilation of wallet.cpp use a few % less memory and time, locally.\r\n\r\nCreated in the context of https://github.com/bitcoin/bitcoin/issues/28109, but I don't think it is enough to actually fix this problem.",
        "comments": 18
    },
    {
        "merged": true,
        "additions": 441,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-08-02T11:14:20Z",
        "closed_at": "2023-08-22T21:03:56Z",
        "merged_at": "2023-08-22T21:03:56Z",
        "body": "I was doing some mutation testing (through reckless refactoring) locally and found some specific behaviors in orphan handling that weren't picked up by tests. Adding some of these test cases now can maybe help with reviewing refactors like #28031.\r\n\r\n- Parent requests aren't sent immediately. A delay is added and the requests are filtered by AlreadyHaveTx before they are sent, which means you can't use fake orphans to probe precise arrival timing of a tx.\r\n- Parent requests include all that are not AlreadyHaveTx. This means old confirmed parents may be requested.\r\n- The node does not give up on orphans if the peer responds to a parent request with notfound. This means that if a parent is an old confirmed transaction (in which notfound is expected), the orphan should still be resolved.\r\n- Rejected parents can cause an orphan to be dropped, but it depends on the reason and only based on txid.\r\n- Rejected parents can cause an orphan to be rejected too, by both wtxid and txid.\r\n- Requests for orphan parents should be de-duplicated with \"regular\" txrequest. If a missing parent has the same hash as an in-flight request, it shouldn't be requested.\r\n- Multiple orphans with overlapping parents should not cause duplicated parent requests.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 82,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-02T08:10:10Z",
        "closed_at": "2023-08-02T08:11:59Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/extracoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nextracoin Core user experience or extracoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of extracoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nextracoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1558,
        "deletions": 59,
        "changed_files": 9,
        "created_at": "2023-08-01T17:56:58Z",
        "closed_at": "2023-09-08T09:24:15Z",
        "merged_at": "2023-09-08T09:24:15Z",
        "body": "This is part of #27634.\r\n\r\nThis implements the BIP324 v2 transport (which implements all of what the BIP calls transport layer *and* application layer), though in a non-exposed way. It is tested through an extensive fuzz test, which verifies that v2 transports can talk to v2 transports, and v1 transports can talk to v2 transports, and a unit test that exercises a number of unusual scenarios. The transport is functionally complete, including:\r\n* Autodetection of incoming V1 connections.\r\n* Garbage, both sending and receiving.\r\n* Short message type IDs, both sending and receiving.\r\n* Ignore packets (receiving only, but tested in a unit test).\r\n* Session IDs are visible in `getpeerinfo` output (for manual comparison).\r\n\r\nThings that are not included, left for future PRs, are:\r\n* Actually using the v2 transport for connections.\r\n* Support for the `NODE_P2P_V2` service flag.\r\n* Retrying downgrade to V1 when attempted outbound V2 connections immediately fail.\r\n* P2P functional and unit tests\r\n",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 160,
        "deletions": 179,
        "changed_files": 14,
        "created_at": "2023-08-01T10:29:42Z",
        "closed_at": "2023-09-05T10:37:45Z",
        "merged_at": "2023-09-05T10:37:45Z",
        "body": "The only reason for the check was to print a warning about an increase in storage use. Now that 22.x is EOL and everyone should have migrated (or decided to not care about storage use), remove the check.\r\n\r\nAlso, a move-only commit is included. (Rebased from https://github.com/bitcoin/bitcoin/pull/22242)",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-07-31T18:29:57Z",
        "closed_at": "2023-08-01T08:42:17Z",
        "merged_at": "2023-08-01T08:42:17Z",
        "body": "Update our functional tests per [E721](https://www.flake8rules.com/rules/E721.html) enforced by [flake8 6.1.0](https://flake8.pycqa.org/en/latest/release-notes/6.1.0.html), and update our CI lint task to use that release.  This makes the following linter output on current master with flake8 6.1.0 green.\r\n\r\n```\r\n$ ./test/lint/lint-python.py ; ./test/lint/lint-spelling.py \r\ntest/functional/p2p_invalid_locator.py:35:16: E721 do not compare types, for exact checks use `is` / `is not`, for instance checks use `isinstance()`\r\ntest/functional/test_framework/siphash.py:34:12: E721 do not compare types, for exact checks use `is` / `is not`, for instance checks use `isinstance()`\r\ntest/functional/test_framework/siphash.py:64:12: E721 do not compare types, for exact checks use `is` / `is not`, for instance checks use `isinstance()`\r\nsrc/test/fuzz/descriptor_parse.cpp:88: occurences ==> occurrences\r\n^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in test/lint/spelling.ignore-words.txt\r\n```\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-31T15:22:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR adds unit test coverage for the script compression functions `{Compress,Decompress}Script` in the special case of uncompressed P2PK outputs (scriptPubKey: OP_PUSH65 <0x04 ....> OP_CHECKSIG) with [pubkeys that are not fully valid](https://github.com/bitcoin/bitcoin/blob/44b05bf3fef2468783dcebf651654fdd30717e7e/src/pubkey.cpp#L297-L302), i.e. where the encoded point is not on the secp256k1 curve. For those outputs, script compression is not possible, as the y coordinate of the pubkey can't be recovered (see also call-site of `IsToPubKey`):\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/44b05bf3fef2468783dcebf651654fdd30717e7e/src/compressor.cpp#L49-L50\r\n\r\nLikewise, for a compressed script of an uncompressed P2PK script (i.e. compression ids 4 and 5) where the x coordinate is not on the curve, decompression fails:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/44b05bf3fef2468783dcebf651654fdd30717e7e/src/compressor.cpp#L122-L129\r\n\r\nNote that the term \"compression\" is used here in two different meanings (though they are related), which might be a little confusing. The encoding of a pubkey can either be compressed (33-bytes with 0x02/0x03 prefixes) or uncompressed (65-bytes with 0x04 prefix). On the other hand there is also compression for whole output scripts, which is used for storing scriptPubKeys in the UTXO set in a compact way (and also for the `dumptxoutset` result, accordingly). P2PK output scripts with uncompressed pubkeys get compressed by storing only the x-coordinate and the sign as a prefix (0x04 = even, 0x05 = odd). Was diving deeper into the subject while working on https://github.com/bitcoin/bitcoin/pull/27432, where the script decompression of uncompressed P2PK needed special handling (see also https://github.com/bitcoin/bitcoin/issues/24628#issuecomment-1108798536).\r\n\r\nTrivia: as of now (block 801066), there are 13 uncompressed P2PK outputs in the UTXO set with a pubkey not on the curve (which obviously means they are unspendable).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 29,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-07-31T13:12:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "BIP32 allows both `'` and `h` as hardened derivation marker. Our legacy wallet uses `'`. Since #26076 our descriptor wallets use `h` by default.\r\n\r\n`ParseHDKeypath` only supports `'`. It's currently only used in the legacy wallet context, so this doesn't cause any problems. But it will once #22341 uses it (to parse the RPC `path` argument for `getxpub`). Might as well fix it now.\r\n\r\nI added a restriction for not combining `h` and `'`. Afaik this currently isn't enforced anywhere else in the codebase, including for descriptors, but it seems sane. I've occasionally messed that up in the past.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2023-07-31T12:34:53Z",
        "closed_at": "2023-08-07T08:57:51Z",
        "merged_at": "2023-08-07T08:57:51Z",
        "body": "Seems odd to expose these for mocking, when it is not needed.\r\n\r\nFix this by removing the the unused parameters and use the already existing member field instead.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-30T23:22:26Z",
        "closed_at": "2023-08-09T17:12:03Z",
        "merged_at": "2023-08-09T17:12:03Z",
        "body": "release notes for #27213",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 10,
        "changed_files": 9,
        "created_at": "2023-07-30T20:50:32Z",
        "closed_at": "2023-07-31T10:20:06Z",
        "merged_at": "2023-07-31T10:20:06Z",
        "body": "This PR aims to:\r\n1) Remove our own `CCACHE_SIZE` environment variable that violates Ccache's `CCACHE_*` namespace.\r\n2) Introduce the `CCACHE_MAXSIZE` environment variable that is documented since [v3.3](https://ccache.dev/manual/3.3.html), which makes its usage consistent with other ones, such as `CCACHE_DIR` and `CCACHE_NOHASHDIR`.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 62,
        "deletions": 20,
        "changed_files": 3,
        "created_at": "2023-07-30T19:15:09Z",
        "closed_at": "2023-08-15T21:03:51Z",
        "merged_at": "2023-08-15T21:03:51Z",
        "body": "From https://github.com/bitcoin/bitcoin/issues/28098:\r\n> Thus, someone would have to sponsor an amount of roughly 5kUSD/mo for those two tasks.\r\n\r\n> If the goal is to stay on a free plan, I think the only option is GitHub Actions CI.\r\n\r\n---\r\n\r\n**IMPORTANT NOTE**. We currently ship macOS release binaries for both architectures: `x86_64` and `arm64`. If this PR gets merged, only `x86_64` architecture will be tested on CI, which implies some [drawbacks](https://github.com/bitcoin/bitcoin/pull/28187#issuecomment-1658077549).\r\n\r\nHowever, it has never been the case that our CI tested both architectures simultaneously. And we hope that GitHub Actions will soon host macOS `arm64` runners.\r\n\r\nHistorically, we moved from `x86_64` to `arm64` in https://github.com/bitcoin/bitcoin/pull/26388 less than a year ago.\r\n\r\n---\r\n\r\nSecurity concerns:\r\n- https://github.com/bitcoin/bitcoin/issues/28098#issuecomment-1651432106\r\n- https://github.com/bitcoin/bitcoin/issues/28098#issuecomment-1651688197\r\n\r\n`GITHUB_TOKEN` permissions (from the build log in my personal repo):\r\n```\r\n2023-07-27T07:30:17.8313534Z ##[group]GITHUB_TOKEN Permissions\r\n2023-07-27T07:30:17.8314113Z Contents: read\r\n2023-07-27T07:30:17.8314608Z Metadata: read\r\n2023-07-27T07:30:17.8314957Z Packages: read\r\n2023-07-27T07:30:17.8315233Z ##[endgroup]\r\n```\r\n\r\nComparison of resources:\r\n\r\n| Resource | Current, Cirrus CI | Suggested, GitHub Actions |\r\n|---|:-:|:-:|\r\n| CPU | 4 | 4 \\*\\* |\r\n| RAM, GB | 8 | 14 |\r\n\r\n**\\*\\* NOTE**: However, [docs](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources) are mentioning:\r\n> 3-core CPU (x86_64)",
        "comments": 32
    },
    {
        "merged": true,
        "additions": 254,
        "deletions": 159,
        "changed_files": 15,
        "created_at": "2023-07-30T15:10:03Z",
        "closed_at": "2023-08-07T20:31:57Z",
        "merged_at": "2023-08-07T20:31:57Z",
        "body": "Leveldb headers are currently included in the `dbwrapper.h` file and thus available to many of Bitcoin Core's source files. However, leveldb-specific functionality should be abstracted by the `dbwrapper` and does not need to be available to the rest of the code. Having leveldb included in a widely-used header such as `dbwrapper.h` bloats the entire project's header tree.\r\n\r\nThe `dbwrapper` is a key component of the libbitcoinkernel library. Future users of this library would not want to contend with  having the leveldb headers exposed and potentially polluting their project's namespace.\r\n\r\nFor these reasons, the leveldb headers are removed from the `dbwrapper` by moving leveldb-specific code to the implementation file and creating a [pimpl](https://en.cppreference.com/w/cpp/language/pimpl) where leveldb member variables are indispensable. As a final step, the leveldb include flags are removed from the `BITCOIN_INCLUDES` and moved to places where the dbwrapper is compiled.\r\n\r\n---\r\n\r\nThis pull request is part of the [libbitcoinkernel project](https://github.com/bitcoin/bitcoin/issues/27587), and more specifically its stage 1 step 3 \"Decouple most non-consensus headers from libbitcoinkernel\".",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 39,
        "changed_files": 5,
        "created_at": "2023-07-30T09:56:39Z",
        "closed_at": "2023-08-15T10:17:54Z",
        "merged_at": "2023-08-15T10:17:54Z",
        "body": "Currently the CI system will fail if the git folder that holds the Bitcoin Core source is moved from one location to another.\r\n\r\nFix this by using a single hard-coded root path *inside* the CI system containers.\r\n\r\nSteps to test:\r\n\r\n* Run the CI system: `MAKEJOBS=\"-j$(nproc)\" FILE_ENV=\"./ci/test/00_setup_env_win64.sh\" ./ci/test_run_all.sh`\r\n* Move the git folder: `pwd && cd .. && mv bitcoin_core_folder_1 bitcoin_core_folder_2 && cd ./bitcoin_core_folder_2 && pwd`\r\n* Run the CI system again: (same cmd as above)\r\n\r\nOn master (error):\r\n\r\n```\r\nSTRIPPROG=\"x86_64-w64-mingw32-strip\" /bin/bash /bitcoin_core_folder_2/ci/scratch/build/bitcoin-x86_64-w64-mingw32/build-aux/install-sh -c -s ./src/qt/bitcoin-qt.exe ./release\r\n/bitcoin_core_folder_2/ci/scratch/build/bitcoin-x86_64-w64-mingw32/build-aux/install-sh: ./src/qt/bitcoin-qt.exe does not exist.\r\nmake: *** [Makefile:1258: bitcoin-25.99.0-win64-setup.exe] Error 1\r\n```\r\n\r\nOn this pull: (pass).\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-30T09:24:50Z",
        "closed_at": "2023-10-02T09:19:18Z",
        "merged_at": "2023-10-02T09:19:18Z",
        "body": "fixes #28183\r\n\r\nThe custom cache dir for `mypy` can only be set via an environment variable, setting the `MYPY_CACHE_DIR` variable in the program is not sufficient. This error was introduced while translating the shell script to python.\r\n\r\nSee also the mypy documentation: https://mypy.readthedocs.io/en/stable/config_file.html#confval-cache_dir",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-29T11:48:17Z",
        "closed_at": "2023-07-31T09:52:01Z",
        "merged_at": "2023-07-31T09:52:00Z",
        "body": "This PR is a follow-up for:\r\n- https://github.com/bitcoin/bitcoin/pull/9956\r\n- https://github.com/bitcoin/bitcoin/pull/10096",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-28T08:45:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Sometimes a libFuzzer setting like `-use_value_profile=1` helps [0], sometimes it hurts [1].\r\n\r\n[0] https://github.com/bitcoin/bitcoin/pull/20789#issuecomment-752961937\r\n[1] https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1645976254\r\n\r\nBy picking a random value, it is ensured that at least some of the runs will have the beneficial configuration set.\r\n\r\nAlso, randomize `-max_len=` to possibly get some runs with faster iterations, or to produce smaller reduced fuzz inputs over time.\r\n\r\nAlso, randomize `-mutate_depth`, as lower values seem to be beneficial as well. [2]\r\n\r\n[2] https://github.com/bitcoin/bitcoin/pull/27888#issuecomment-1655477388\r\n\r\nAlso, set `-max_total_time` to prevent slow fuzz targets from getting a larger time share, or possibly peg to a single core for a long time and block the python script from exiting for a long time. This can be improved in the future. For example, the python script can exit after some time (https://github.com/bitcoin/bitcoin/pull/20752#discussion_r549248791). Alternatively, it can measure if coverage progress was made and run for less time if no progress has been made recently anyway, so that more time can be spent on targets that are new or still make progress.\r\n\r\nThis picks up the work started in commit https://www.github.com/bitcoin/bitcoin/pull/20752/commits/1ff0dc525f051bbc7a93312dd622340ca8f4f52c ",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 82,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-28T08:42:41Z",
        "closed_at": "2023-07-28T08:45:33Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/extracoin/\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nextracoin user experience or extracoin developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of extracoin, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nextracoin has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-07-28T04:35:33Z",
        "closed_at": "2023-10-02T13:07:30Z",
        "merged_at": "2023-10-02T13:07:30Z",
        "body": "I added two new tests that will cover the nNew and nTried tests which add coverage to the if block by checking values larger than our range since we only check for negative values now\r\n\r\nadding coverage to these lines\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/addrman.cpp#L273\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/addrman.cpp#L280\r\n\r\nour test seem to only cover the `nTried < 0` and `nNew < 0` scenarios",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-27T23:05:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "There's been at least a few instances where someone tried to contribute LLM-generated content, but such content has a dubious copyright status.\r\n\r\nOur contributing policy already implicitly rules out such contributions, but being more explicit here might help.",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 22,
        "changed_files": 1,
        "created_at": "2023-07-27T21:28:33Z",
        "closed_at": "2023-07-28T11:31:48Z",
        "merged_at": null,
        "body": "The current README is pretty bland and I believe it could need a few improvements to enhance its value and appeal. \r\n\r\nThis pull request updates the README to make it more appealing. The changes are the following:\r\n* Adding emojis \ud83d\ude80 which makes the document more vibrant\r\n* Use a more casual and interactive language to engage the reader\r\n\r\nAll the original technical contents were preserved, and the structure of the document remains the same to ensure that users still find the information they're accustomed to. \r\n\r\nThese changes aim not only to keep the document detailed and informative but also to make it easy-to-read and engaging, especially to users who may be new to the Bitcoin Core project and attract new contributors.\r\n\r\nSee preview: https://github.com/aureleoules/bitcoin/blob/2023-07-update-readme/README.md.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 196,
        "deletions": 97,
        "changed_files": 3,
        "created_at": "2023-07-27T21:10:23Z",
        "closed_at": "2023-08-28T10:28:03Z",
        "merged_at": "2023-08-28T10:28:03Z",
        "body": "From https://github.com/bitcoin/bitcoin/issues/28098:\r\n> Thus, someone would have to sponsor an amount of roughly 5kUSD/mo for those two tasks.\r\n\r\n> If the goal is to stay on a free plan, I think the only option is GitHub Actions CI.\r\n\r\nHistorical context:\r\n- https://github.com/bitcoin/bitcoin/pull/17697\r\n- https://github.com/bitcoin/bitcoin/issues/17803\r\n- https://github.com/bitcoin/bitcoin/pull/18031\r\n\r\nSecurity concerns:\r\n- https://github.com/bitcoin/bitcoin/issues/28098#issuecomment-1651432106\r\n- https://github.com/bitcoin/bitcoin/issues/28098#issuecomment-1651688197\r\n\r\n`GITHUB_TOKEN` permissions (from the build log in my personal repo):\r\n```\r\n2023-07-27T07:30:17.8313534Z ##[group]GITHUB_TOKEN Permissions\r\n2023-07-27T07:30:17.8314113Z Contents: read\r\n2023-07-27T07:30:17.8314608Z Metadata: read\r\n2023-07-27T07:30:17.8314957Z Packages: read\r\n2023-07-27T07:30:17.8315233Z ##[endgroup]\r\n```\r\n\r\nComparison of resources:\r\n\r\n| Resource | Current, Cirrus CI | Suggested, GitHub Actions |\r\n|---|:-:|:-:|\r\n| CPU | 6 | 2 |\r\n| RAM, GB | 12 | 7 |\r\n\r\nThe `TEST_RUNNER_TIMEOUT_FACTOR` variable is set to the current default value for all CI tasks: https://github.com/bitcoin/bitcoin/blob/64440bb733896a7a2caf902825e0406cb993e666/ci/test/00_setup_env.sh#L48\r\n",
        "comments": 27
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-07-27T19:54:21Z",
        "closed_at": null,
        "merged_at": null,
        "body": "as `string_view` is optimized to be trivially copiable, whereas the current code creates a `std::string` copy at each call.\r\n\r\nThese utility methods are called by quite a few RPCs and tests, as well as by each other.\r\n\r\n```\r\n$ git grep \"ParseHashV\\|ParseHashO\\|ParseHexV\\|ParseHexO\" | wc -l\r\n61\r\n```\r\n\r\nAlso remove an out-of-date external link.\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 126,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-07-27T16:00:19Z",
        "closed_at": "2023-07-28T06:16:29Z",
        "merged_at": null,
        "body": "alternative to https://github.com/bitcoin/bitcoin/pull/27850\r\n\r\nsee https://github.com/bitcoin/bitcoin/pull/27850#issuecomment-1650601548\r\n\r\njust testing ci for now",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 77,
        "deletions": 61,
        "changed_files": 8,
        "created_at": "2023-07-27T15:34:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Derived from #28120 discussion.\r\n\r\nBy relocating the peer desirable services flags into the peer manager, we\r\nallow the connections acceptance process to handle post-IBD potential\r\nstalling scenarios.\r\n\r\nThe peer manager will be able to dynamically adjust the services flags\r\nbased on the node's proximity to the tip (back and forth). Allowing the node\r\nto recover from the following post-IBD scenario:\r\nSuppose the node has successfully synced the chain, but later experienced\r\ndropped connections and remained inactive for a duration longer than the limited\r\npeers threshold (the timeframe within which limited peers can provide blocks). In\r\nsuch cases, upon reconnecting to the network, the node might only establish\r\nconnections with limited peers, filling up all available outbound slots. Resulting\r\nin an inability to synchronize the chain (because limited peers will not provide\r\nblocks older than the `NODE_NETWORK_LIMITED_MIN_BLOCKS` threshold).",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-07-27T10:30:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Edit: throw the existing disabled err for op_ver and its variants following feedback from @achow101, rather than creating new err case(which was the initial idea of PR described below)\r\n\r\n1. As opcodes rejected even in an unexecuted branch, are checked and throw error with an appropriate message(like disabled and codeseperator in non-segwit) to identify in top level, op_verif and op_vernotif(which are rejected even in an unexecuted branch as well) should be treated in same way which is clear to debug\r\n2. ~~It still makes script invalid now as both opcodes' values are in between op_if and op_endif, and go through all cases to default error, but it's such an inefficient to go through all cases even if it does not need to~~\r\n3. The message of  `BAD_OPCODE` is `\"Opcode missing or not understood\"`, which isn't accurate and confusing\r\n\r\nAdditonal update: add \"reserved\" in bad opcode err message as reserved opcodes are evaluated as BAD_OPCODE, and for reserved opcodes changing err message would be good enough.",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 26,
        "changed_files": 13,
        "created_at": "2023-07-27T10:21:48Z",
        "closed_at": "2023-07-28T11:05:02Z",
        "merged_at": "2023-07-28T11:05:02Z",
        "body": "The helpers are unused outside of tests and redundant with the existing `bool read(std::string_view raw);`.\r\n\r\nFix both issues by removing them.\r\n\r\nAlso, simplify the tests code by removing a `std::string` constructor where possible.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 61,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-07-27T09:52:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR picks up #26088 by aureleoules and adds a bitcoind launch option `-rpccookieperms` to configure the file permissions of the cookie generated by bitcoin core.\r\n\r\nExample usage: `./src/bitcoind -rpccookieperms=0640`.\r\n\r\nI added a length check to `StringToOctal()` to address luke-jr's review comment [here](https://github.com/bitcoin/bitcoin/pull/26088#discussion_r1275362802) and swapped the ordering of the permission setting and data writing in `GenerateAuthCookie()` as per his other [suggestion](https://github.com/bitcoin/bitcoin/pull/26088#discussion_r1275365847). I think this is pretty safe, considering our umask used (0077) when opening the file.\r\n\r\nI think this is a pretty helpful (and generally sought-after?) change. Perhaps it also warrants a release note?",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 33,
        "changed_files": 7,
        "created_at": "2023-07-26T23:40:40Z",
        "closed_at": "2023-08-01T15:56:26Z",
        "merged_at": "2023-08-01T15:56:26Z",
        "body": "Add test coverage for passing an invalid sighashtype to RPCs signrawtransactionwithwallet, signrawtransactionwithkey, walletprocesspsbt, and descriptorprocesspsbt. ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 578,
        "deletions": 138,
        "changed_files": 8,
        "created_at": "2023-07-26T20:04:07Z",
        "closed_at": "2023-08-24T12:55:51Z",
        "merged_at": "2023-08-24T12:55:51Z",
        "body": "This PR furthers the P2P message serialization/deserialization abstraction introduced in #16202 and #16562, in preparation for introducing the BIP324 v2 transport (making this part of #27634). However, nothing in this PR is BIP324-specific, and it contains a number of independently useful improvements.\r\n\r\nThe overall idea is to have a single object in every `CNode` (called `m_transport`) that is responsible for converting sent messages to wire bytes, and for converting received wire bytes back to messages, while having as little as possible knowledge about this conversion process in higher-level net code. To accomplish that, there is an abstract `Transport` class with (currently) a single `V1Transport` implementation.\r\n\r\nStructurally, the above is accomplished by:\r\n* Merging the `TransportDeserializer` and `TransportSerializer` classes into a single `Transport` class, which encompasses both the sending and receiving side. For `V1Transport` these two sides are entirely separate, but this assumption doesn't hold for the BIP324 transport where e.g. the sending encryption key depends on the DH key negotiation data received from the other side. Merging the two means a future `V2Transport` can handle all this interaction without callers needing to be aware.\r\n* Removing the assumption that each message is sent using a computed header followed by (unmodified) data bytes. To achieve that, the sending side of `Transport` mirrors what the receiver side does: callers can set a message to be sent, then ask what bytes must be sent out, and then allowing them to transition to the next message.\r\n* Adding internal locks to protect the sending and receiving state of the `V1Transport` implementation. I believe these aren't strictly needed (opinions welcome) as there is no real way to use `Transport` objects in a multi-threaded fashion without some form of external synchronization (e.g. \"get next bytes to send\" isn't meaningful to call from multiple threads at the same time without mechanism to control the order they'll actually get sent). Still, I feel it's cleaner to make the object responsible for its own consistency (as we definitely do not want the entire object to be under a single external GUARDED_BY, as that'd prevent simultaneous sending and receiving).\r\n* Moving the conversion of messages to bytes on the sending side from `PushMessage` to `SocketSendData`, which is needed to deal with the fact that a transport may not immediately be able to send messages.\r\n\r\nThis PR is not a refactor, though some commits are. Among the semantic changes are:\r\n* Changing the send buffer pushback mechanism to trigger based on the memory usage of the buffer rather than the amount of bytes to be sent. This is both closer to the desired behavior, and makes the buffering independent from transport details (which is why it's included here).\r\n* When optimistic send is not applicable, the V1 message checksum calculation now runs in the net thread rather than the message handling thread. I believe that's generally an improvement, as the message handling thread is far more computationally bottlenecked already.\r\n* The checksum calculation now runs under the `CNode::cs_vSend` lock, which does mean no two checksum calculations for messages sent to the same node can run in parallel, even if running in separate threads. Despite that limitation, having the checksum for non-optimistic sends moved in the net thread is still an improvement, I believe.\r\n* Statistics for per-message-type sent bytes are now updated when the bytes are actually handed to the OS rather than in `PushMessage`. This is because the actual serialized sizes aren't known until they've gone through the transport object.\r\n\r\nA fuzz test of the entire `V1Transport` is included. More elaborate rationale for each of the changes can be found in the commit messages.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-07-26T19:17:37Z",
        "closed_at": "2023-07-27T11:25:27Z",
        "merged_at": "2023-07-27T11:25:27Z",
        "body": "This PR removes in `wallet_fundrawtransaction`:\r\n- unecessary variables/calls to `decoderawtransaction`\r\n- unused `totalOut` variable and its related code (`totalOut` is used in some functions to test change, in other ones its value is not used)",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-07-26T09:52:46Z",
        "closed_at": "2023-07-28T11:30:12Z",
        "merged_at": "2023-07-28T11:30:12Z",
        "body": "This is a follow up for #28113.\r\n\r\nThe string type check is already done by the rpc parser / RPCHelpMan. Re-doing it is adding dead code. Instead, throwing an exception when the assumption does not hold is the already correct behavior. Pointed out in this [comment](https://github.com/bitcoin/bitcoin/pull/28113/files#r1274568557).\r\n\r\nAlso correct the release note for the correct sighashtype exception change. There is no change in the handling of non-string sighashtype arugments. Pointed out in this [comment](https://github.com/bitcoin/bitcoin/pull/28113/files#r1274567555).",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 19,
        "changed_files": 4,
        "created_at": "2023-07-26T09:01:24Z",
        "closed_at": "2023-08-03T17:03:48Z",
        "merged_at": "2023-08-03T17:03:48Z",
        "body": "To run the USDT functional tests, the ASan task currently requires the container host to run the Ubuntu Lunar Linux kernel (or later). Cirrus CI is the only provider that allows to spin up full VMs with Ubuntu Lunar, however they will start to charge for all tasks (See slightly related discussion in https://github.com/bitcoin/bitcoin/issues/28098).\r\n\r\nSince it is cheaper and recommended by Cirrus CI to just run a persistent worker, do that.\r\n\r\nAlso, using a persistent worker allows to make use of the docker image cache.",
        "comments": 13
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-07-26T07:53:32Z",
        "closed_at": "2023-09-06T20:46:48Z",
        "merged_at": null,
        "body": "### Summary \r\n\r\nAdd a \"Bech32 string too short\" case to Bech32.cpp LocateErrors to reduce ambiguity and collisions with \"Invalid separator position\" case.\r\n\r\n### Problem\r\n\r\nError representation when calling LocateErrors within ```src/test/bech32_tests.cpp``` is ambiguous and incorrect in some cases because of a missing bech32 string to short case. Not having a too short case causes a fall though into the conditions of ```\"Invalid separator position\" || \"Missing separator\"```\r\n\r\n### Solution\r\n\r\nSimply add a check for a minimum Bech32 string size after or during the check for the maximum size which is already implemented.\r\n\r\nCascading effects of this would be seen in DecodeDestination if https://github.com/bitcoin/bitcoin/blob/32c15237b656209b932c5d6d2e20736c0e3d5a34/src/key_io.cpp#L85-L86 was patched to not consider bech32 invalid then attempt to Base58Decode it becuase of the incorrect HRP for the current chain.\r\n\r\nReferenced in \r\nhttps://github.com/bitcoin/bitcoin/issues/26290\r\n\r\nPR \r\nhttps://github.com/bitcoin/bitcoin/pull/27260\r\n\r\n### Alternatives\r\n\r\nYou could case this into other logic on a case by case basis in code. Example make a speical case inside DecodeDestination to display the correct error message to the user by if LocateErrors returns 'Invalid ```\"separator position\" || \"Missing separator\"``` then you check to see if the string is to short.\r\n\r\n### Additional Context\r\n\r\nAs an aside there is already a check for string length greater than 90 (MAX LEN)\r\n\r\nin src/test/bech32_tests.cpp both [\"10a06t8\",\"1qzzfhee\"] produce ```{\"Invalid separator position\", {0}}``` The former is non conformant to BIP173 due not even having enough chars to represent a BASE32 string and the second genuinely has a wrong separator position. \r\n\r\nAdding this case would make DecodeDestination more accurate for anyone who wants to to implement bech32.{cpp,h}\r\n\r\n\r\n### A comparison of this PRs error vs the current 25.99 error for Bech32 string that does not meet the minimum length requirement.\r\n\r\n![image](https://github.com/bitcoin/bitcoin/assets/3104223/2b975904-3a65-46b9-bee2-99c64eae59b9)\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-07-25T22:15:48Z",
        "closed_at": "2023-08-22T08:18:04Z",
        "merged_at": "2023-08-22T08:18:04Z",
        "body": "This PR Follow up comments from [#27622](https://github.com/bitcoin/bitcoin/pull/27622) \r\n\r\nIt test that the new `regtest-only` option `acceptstalefeeestimates` is not supported on [main, signet and test chains](https://github.com/bitcoin/bitcoin/pull/27622/files#r1235218268), removes an unnecessary [comment](https://github.com/bitcoin/bitcoin/pull/27622/files#r1235204323), and update fee estimator  `MAXFILEAGE` [description comment](https://github.com/bitcoin/bitcoin/pull/27622/files#r1233887314).",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 32,
        "changed_files": 5,
        "created_at": "2023-07-25T20:47:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Rationale\r\n\r\nCurrently, `addnode` has a couple of corner cases that allow it to either connect to the same peer more than once, hence wasting outbound connection slots, or add redundant information to `m_added_nodes`, hence making Bitcoin iterate through useless data on a regular basis.\r\n\r\n### Connecting to the same node more than once\r\n\r\nIn general, connecting to the same node more than once is something we should try to prevent. Currently, this is possible via `addnode` in two different ways:\r\n\r\n1. Calling `addnode` more than once in a short time period, using two equivalent but distinct addresses\r\n2. Calling `addnode add` using an IP, and `addnode onetry` after with an address that resolved to the same IP\r\n\r\nFor the former, the issue boils down to `CConnman::ThreadOpenAddedConnections` calling `CConnman::GetAddedNodeInfo` once, and iterating over the result to open connections (`CConman::OpenNetworkConnection`) on the same loop for all addresses.`CConnman::ConnectNode` only checks a single address, at random, when resolving from a hostname, and uses it to check whether we are already connected to it.\r\n\r\nAn example to test this would be calling:\r\n\r\n```\r\nbitcoin-cli addnode \"127.0.0.1:port\" add\r\nbitcoin-cli addnode \"localhost:port\" add\r\n```\r\n\r\nAnd check how it allows us to perform both connections some times, and some times it fails.\r\n\r\nThe latter boils down to the same issue, but takes advantage of `onetry` bypassing the `CConnman::ThreadOpenAddedConnections` logic and calling `CConnman::OpenNetworkConnection` straightaway. A way to test this would be:\r\n\r\n```\r\nbitcoin-cli addnode \"127.0.0.1:port\" add\r\nbitcoin-cli addnode \"localhost:port\" onetry\r\n```\r\n\r\n### Adding the same peer with two different, yet equivalent, addresses\r\n\r\nThe current implementation of `addnode` is pretty naive when checking what data is added to `m_added_nodes`. Given the collection stores strings, the checks at `CConnman::AddNode()` basically check wether the exact provided string is already in the collection. If so, the data is rejected, otherwise, it is accepted. However, ips can be formatted in several ways that would bypass those checks. \r\n\r\nTwo examples would be `127.0.0.1` being equal to `127.1` and `[::1]` being equal to `[0:0:0:0:0:0:0:1]`. Adding any pair of these will be allowed by the rpc command, and both will be reported as connected by `getaddednodeinfo`, given they map to the same `CService`. \r\n\r\nThis is less severe than the previous issue, since even tough both nodes are reported as connected by `getaddednodeinfo`, there is only a single connection to them (as properly reported by `getpeerinfo`). However, this adds redundant data to `m_added_nodes`, which is undesirable.\r\n\r\n\r\n### Parametrize `CConnman::GetAddedNodeInfo`\r\nFinally, this PR also parametrizes `CConnman::GetAddedNodeInfo` so it returns either all added nodes info, or only info about the nodes we are **not** connected to. This method is used both for `rpc`, in `getaddednodeinfo`, in which we are reporting all data to the user, so the former applies, and to check what nodes we are not connected to, in `CConnman::ThreadOpenAddedConnections`, in which we are currently returning more data than needed and then actively filtering using `CService.fConnected()`\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2023-07-25T20:31:57Z",
        "closed_at": "2023-09-20T17:51:00Z",
        "merged_at": "2023-09-20T17:51:00Z",
        "body": "This PR is a simple follow-up for #28025. It introduces a `signing_input_segwitv0` helper in order to deduplicate the following steps needed to create a segwitv0 ECDSA signature:\r\n1. calculate the `SegwitV0SignatureHash` with the desired sighash type\r\n2. create the actual digital signature by calling ECKey.sign_ecdsa on the signature message hash calculated above\r\n3. put the DER-encoded result (plus sighash byte) at the bottom of the witness stack",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 101,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-25T20:03:44Z",
        "closed_at": "2023-09-20T17:19:01Z",
        "merged_at": null,
        "body": "This PR adds target for `{Legacy}ScriptPubKeyMan`. I'm working on a descriptor one and will do it in a separate file. I tried to focus here on functions that we use directly and we may have in some unit tests.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 82,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-25T16:36:07Z",
        "closed_at": "2023-08-28T15:01:57Z",
        "merged_at": null,
        "body": "Directly ripped off from the fuzztest\r\n\r\nIdeally used to inform design decisions for package relay work: https://github.com/bitcoin/bitcoin/pull/26711#issuecomment-1647523520",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-25T16:25:22Z",
        "closed_at": "2023-09-05T12:45:10Z",
        "merged_at": "2023-09-05T12:45:10Z",
        "body": "We currently work around a longstanding GCC issue with aligned vector instructions, by patching the behaviour we want into GCC (see discussion in #24736). Possibly in response to the GCC thread (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412#c40), a new option was [introduced into the binutils assembler](https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=c8480b58e1968f209b6365af7422678f348222c2) with the 2.38 release:\r\n```\r\nx86: Add -muse-unaligned-vector-move to assembler\r\n\r\nUnaligned load/store instructions on aligned memory or register are as\r\nfast as aligned load/store instructions on modern Intel processors.  Add\r\na command-line option, -muse-unaligned-vector-move, to x86 assembler to\r\nencode encode aligned vector load/store instructions as unaligned\r\nvector load/store instructions.\r\n```",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-25T15:34:27Z",
        "closed_at": "2023-07-26T08:58:43Z",
        "merged_at": "2023-07-26T08:58:43Z",
        "body": "Currently the tests have many issues:\r\n\r\n* They setup the genesis block, even though it is not needed\r\n* They queue an async `UpdatedBlockTip` even, which causes intermittent issues: https://github.com/bitcoin/bitcoin/issues/28146#issuecomment-1650064645\r\n\r\nFix all issues by trimming down the setup to just `ChainTestingSetup`.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-07-25T14:59:52Z",
        "closed_at": "2023-08-09T12:26:49Z",
        "merged_at": "2023-08-09T12:26:49Z",
        "body": "Avoid out-of-bounds user input for `PeerManager::Options` by safely clamping `-maxorphantx` and `-blockreconstructionextratxn`, and avoid platform-specific behaviour by changing `PeerManager::Options::max_extra_txs` from `size_t` to a `uint32_t`. Addresses https://github.com/bitcoin/bitcoin/pull/27499#pullrequestreview-1544114932.\r\n\r\nAlso documents all `PeerManager::Options` members, addressing https://github.com/bitcoin/bitcoin/pull/27499#discussion_r1272302469.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-07-25T13:42:03Z",
        "closed_at": "2023-07-27T15:34:09Z",
        "merged_at": "2023-07-27T15:34:09Z",
        "body": "Consistently use `ApplyArgsManOptions` for `PeerManager::Options`, and initialize `PeerManager::Options` early to avoid reading `\"-blocksonly\"` twice. Suggested in https://github.com/bitcoin/bitcoin/pull/27499#discussion_r1268400386 and also requested in https://github.com/bitcoin/bitcoin/pull/27499#discussion_r1273346189.\r\n\r\nNo behaviour change, but the [`TestingSetup`](https://github.com/bitcoin/bitcoin/blob/e35fb7bc48d360585b80d0c7f89ac5087c1d405e/src/test/util/setup_common.cpp#L255-L256) is now also able to access `\"-blocksonly\"`.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-07-25T12:33:59Z",
        "closed_at": "2023-07-26T08:43:01Z",
        "merged_at": "2023-07-26T08:43:01Z",
        "body": "Now that the symbolizer is back in play, suppressions can once-again be targeted to functions, rather than file-wide.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-25T09:23:52Z",
        "closed_at": "2023-07-26T08:36:33Z",
        "merged_at": "2023-07-26T08:36:33Z",
        "body": "Now that https://bugs.kde.org/show_bug.cgi?id=472219 has been fixed upstream in:\r\n\r\nhttps://sourceware.org/git/?p=valgrind.git;a=commit;h=6ce0979884a8f246c80a098333ceef1a7b7f694d\r\n\r\nAdd a supression to ignore the bug until we are using a fixed version of Valgrind.\r\n\r\nRelated to #28072.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-07-25T01:01:57Z",
        "closed_at": "2023-08-01T15:59:47Z",
        "merged_at": "2023-08-01T15:59:47Z",
        "body": "Fixes #28133\r\n\r\nIn the consistency check, it's not enough to check that our address/port is unique, only the combination of source and target must be unique. Otherwise, the OS may reuse ports for connections to different `-addrbind`, which was happening in the failed runs.\r\n\r\nWhile at it, the second commit cleans up duplicate `getaddr` messages in `p2p_getaddr_caching.py` that do nothing but generate `Ignoring repeated \"getaddr\"` log messages (and cleans up some whitespace the python linter complains about).",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 826,
        "deletions": 36,
        "changed_files": 20,
        "created_at": "2023-07-24T21:15:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "A couple of users have requested that we support wallets that encrypt everything, even if the wallet is watch-only, in order to have better privacy if the wallet is stolen. This PR introduces an `EncryptedDatabase` backend for the wallet which encrypts/decrypts each key-value record individually before reading from or writing to the database.\r\n\r\n`EncryptedDatabase` is only supported for SQLite databases and descriptor wallets. This was done in order to have an easier way to get downgrade protection that also does not involve writing an existing record in plaintext (e.g. `minversion` or `flags`). SQLite has a fixed field \"application id\" that we already use for cross-network protection. This is reused to detect if a sqlite database is an encrypted wallet, and thus it prevents older software from attempting to open such wallets.\r\n\r\nIn order to read records from the database, `EncryptedDatabase` will cache the decrypted key in memory so that it can lookup the encrypted key in the database. Values will always be decrypted when read.\r\n\r\nThe encryption scheme is the same one that we use for encrypting private keys. It's not that great, but I didn't feel like re-implementing it, and it seems good enough. The encryption key itself is encrypted with the passphrase and stored in a new record.\r\n\r\nWallets with encrypted databases cannot be loaded on start. They can only be loaded by explicit user action through `loadwallet` which now has a `db_passphrase` parameter to allow the decryption of these wallets. `createwallet` also has a `db_passphrase` to create these wallets. For now, there is no way to encrypt the database after it has been created, nor is there a way to change the passphrase.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-07-24T19:42:48Z",
        "closed_at": "2023-07-24T19:43:09Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-07-24T19:39:17Z",
        "closed_at": "2023-07-24T19:40:09Z",
        "merged_at": null,
        "body": "<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 22,
        "changed_files": 1,
        "created_at": "2023-07-24T13:56:05Z",
        "closed_at": "2023-07-26T09:20:06Z",
        "merged_at": "2023-07-26T09:20:06Z",
        "body": "Coming from https://github.com/bitcoin/bitcoin/pull/28089#discussion_r1265478128.\r\n\r\nSeveral test cases are relying on the node1 default wallet, which thanks to 'test_locked_wallet' is encrypted.\r\nAnd can be only accessed within a specific timeframe (100ms), a duration internally set by the same test.\r\n\r\nThis situation introduces a potential race condition, where other tests must complete their operations within\r\nthe specified 100ms window to pass (otherwise the wallet gets re-locked and they fail).\r\n\r\nThis can be seen running the test in valgrind (https://github.com/bitcoin/bitcoin/pull/28089), where other test cases fail due the wallet re-locking\r\nitself after the 100ms.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-07-24T13:16:54Z",
        "closed_at": "2023-07-28T15:04:14Z",
        "merged_at": "2023-07-28T15:04:13Z",
        "body": "This fixes a bug where the `$PATH` from the host is used inside the container. This will lead to bugs when the `$PATH` is different. For example on a host of Fedora 38, and a container of `debian:bullseye`.\r\n\r\nThis can be tested with the `FILE_ENV=./ci/test/00_setup_env_arm.sh` CI env. On master:\r\n\r\n```\r\nError: crun: executable file `bash` not found in $PATH: No such file or directory: OCI runtime attempted to invoke a command that was not found\r\n```\r\n\r\nOn this pull:\r\n\r\n(everything passes)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 16,
        "changed_files": 6,
        "created_at": "2023-07-24T01:34:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Move `GetServicesNames()` from `rpc/util` to `rpc/net.cpp`, as it is only called from that compilation unit and there is no reason for other ones to need it.\r\n\r\nRemove the `protocol.h` include in `rpc/util.h`, as it was only needed for `GetServicesNames()`, drop an unneeded forward declaration (the other IWYU suggestions would require more extensive changes in other files), and add 3 already-missing include headers in other translation units that are needed to compile without `protocol.h` in `rpc/util.h`, as `protocol.h` includes `netaddress.h`, which in turn includes `util/strencodings.h`.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 42,
        "changed_files": 10,
        "created_at": "2023-07-23T21:18:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "It makes sense to deduplicate this logic and merge it to a single point of truth.\r\n\r\nReviewers mentioned this in the thread at https://github.com/bitcoin/bitcoin/pull/19092#discussion_r436443371, where I wanted to use `AmountFromValue()` in `bitcoin-cli.cpp`, making yet another (third) copy of that same function.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-07-23T15:44:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": "In addition to Luxor (3.3% hash power), the following pools are have enabled full-rbf:\r\n\r\n- [Antpool, 21%](https://mempool.space/tx/53cec64b52989c531550ac4606bedf1ff83d5bfd90efdc4006f122ac6b1b7643)\r\n- [Binance Pool, 8.2%](https://mempool.space/tx/64a26f750c7c58812bd475d054a9aa05248b6a8a2d53c0db38c0624197a4c68a)\r\n- [KuCoinPool, 1.4%](https://mempool.space/tx/8df183b087d433eac4d8e44eca5c7162a2540ee078a28ca04316fd82e12ec435)\r\n- [Poolin, 1.4%](https://mempool.space/tx/d14956420077974d8d28c2fcd005cd9f4aa65b2501b469f3f324f83f57d51c79)\r\n- [EMCDPool, 1.1%](https://mempool.space/tx/82785474f46717bcb3598e847bed0636271467a2f708fac59102cb74561a0676)\r\n- [ULTIMUSPOOL, 0.3%](https://mempool.space/tx/9d77b522919efaa97ca7509ff2d7733432e9fc8cc93e49fa56024819edeee816)\r\n- MARA Pool, 4.8%, according to [mempool.space](https://github.com/mempool/mempool/pull/3867). Though probably only with a portion of their total hash power as I've only seen a few potential full-rbf replacements mined by them.\r\n\r\nThat's 37% (+ MARA Pool) of total hash power regularly mining full-rbf transactions.\r\n\r\nObviously, with this much support of full-rbf, arguments against it on the basis that unconfirmed transactions are safe are even more clearly invalid. Secondly, on the basis of mempool consistency with miners, since full-rbf is the compatible policy in almost all cases, we should be supporting it by default if you take the position that we want to optimize for consistency with miners. (CC: @achow101) Thirdly, all previous arguments in favor of full-rbf, such as multiparty transactions, wallets, user-expectations, etc. still apply.\r\n\r\nThis simplification of mempool policy is well overdue. Let's get this merged and this silly debate over with. Miners and node operators who choose to disable full-rbf still can with a simple configuration change.\r\n\r\n",
        "comments": 98
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-23T13:59:02Z",
        "closed_at": "2023-08-01T08:40:48Z",
        "merged_at": "2023-08-01T08:40:47Z",
        "body": "Required for https://github.com/bitcoin/bitcoin/pull/27991 (see the [comment](https://github.com/bitcoin/bitcoin/pull/27991#issuecomment-1611472816)) and for the upcoming CMake-based build system.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 69,
        "deletions": 48,
        "changed_files": 9,
        "created_at": "2023-07-23T01:33:30Z",
        "closed_at": "2023-08-10T13:18:36Z",
        "merged_at": null,
        "body": "Any number or size of data-carrying OP_RETURN outputs are allowed, and the `-datacarrier` option is removed. For those who want to limit data carrying outputs, `-datacarriersize` is still supported, and has the functionality of applying the specified data carrier limit as well as limiting the number of data carrying OP_RETURN outputs to one. If `-datacarriersize=0` is set, no data carrying output is allowed.\r\n    \r\nRational: there's lots of ways for people to publish data in the Bitcoin chain, and lots of data has been published.  There's no reason for us to place artificial limits on this particular method.\r\n\r\nReplaces https://github.com/bitcoin/bitcoin/pull/27261\r\n",
        "comments": 107
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 53,
        "changed_files": 5,
        "created_at": "2023-07-22T14:21:53Z",
        "closed_at": "2023-07-26T15:03:50Z",
        "merged_at": "2023-07-26T15:03:50Z",
        "body": "Using a C-style cast to convert pointer types to a byte-like pointer type has many issues:\r\n\r\n* It may accidentally and silently throw away `const`.\r\n* It forces reviewers to check that it doesn't accidentally throw away `const`.\r\n\r\nFor example, on current master a `const char*` is cast to `unsigned char*` (without `const`), see https://github.com/bitcoin/bitcoin/blob/d23fda05842ba4539b225bbab01b94df0060f697/src/span.h#L273 . This can lead to UB, and the only reason why it didn't lead to UB is because the return type added back the `const`. (Obviously this would break if the return type was deduced via `auto`)\r\n\r\nFix all issues by adding back the `const` and using `reinterpret_cast` where appropriate.",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2023-07-22T14:04:38Z",
        "closed_at": "2023-09-21T14:18:02Z",
        "merged_at": null,
        "body": "E.g. we're currently allowing to import scripts with several\r\nsh levels.\r\n\r\nThese scripts are not being watched by the wallet;\r\n`IsMine` returns `ISMINE_NO` for them (same as if they\r\nweren't stored at all..).\r\n\r\nSo, there is no reason to accept them in the first\r\nplace.\r\n\r\nNote:\r\nTo verify this, can run the test commit on top of master.\r\n`wallet_basic.py --legacy-wallet` will fail without the\r\nbugfix commit.\r\n\r\nPrior to this PR, let's focus on #28125.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-07-22T14:02:24Z",
        "closed_at": "2023-09-19T17:11:24Z",
        "merged_at": "2023-09-19T17:11:24Z",
        "body": "Fixing #28057.\r\n\r\nThe legacy wallet allows to import any raw script (#28126), without\r\nchecking if it was valid or not. Appending it to the watch-only set.\r\n\r\nThis causes a crash in the migration process because we are only\r\nexpecting to find valid scripts inside the legacy spkm.\r\n\r\nThese stored scripts internally map to `ISMINE_NO` (same as if they\r\nweren't stored at all..).\r\n\r\nSo we need to check for these special case, and take into account that\r\nthe legacy spkm could be storing invalid not watched scripts.\r\n\r\nWhich, in code words, means `IsMineInner()` returning\r\n`IsMineResult::INVALID` for them.\r\n\r\nNote:\r\nTo verify this, can run the test commit on top of master.\r\n`wallet_migration.py` will crash without the bugfix commit.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-22T06:28:16Z",
        "closed_at": "2023-07-25T09:47:16Z",
        "merged_at": "2023-07-25T09:47:16Z",
        "body": "Looks like this fixed itself somehow and is no longer reproducible?",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 8,
        "changed_files": 5,
        "created_at": "2023-07-22T01:07:32Z",
        "closed_at": "2023-08-17T12:58:43Z",
        "merged_at": "2023-08-17T12:58:42Z",
        "body": "Various JSON Object parameters had a `oneline_description` with quote characters. Fix those, and extend `rpcdoccheck` to detect them.\r\n\r\nAlso, slightly improve GBT's oneline description for template_request.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2523,
        "deletions": 15,
        "changed_files": 25,
        "created_at": "2023-07-21T18:36:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR is part of integrating silent payments into Bitcoin Core. The project is tracked in https://github.com/bitcoin/bitcoin/issues/28536\r\n\r\n## BIP352\r\n\r\nThis PR focuses strictly on the BIP logic and attempts to separate it from the wallet and transaction implementation details. This is accomplished by working directly with public and private keys, instead of needing a wallet backend and transactions for testing. Labels for the receiver are optional and thus deferred for a later PR.\r\n\r\nTest vectors from the BIP are included as unit tests.\r\n\r\nBefore reviewing, it is strongly recommended you read https://github.com/bitcoin/bips/pull/1458 and take a look at the reference python implementation on the BIP.\r\n",
        "comments": 22
    },
    {
        "merged": false,
        "additions": 54,
        "deletions": 24,
        "changed_files": 5,
        "created_at": "2023-07-21T14:47:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Expands the `reject-reason` field in `testmempoolaccept` responses to include `m_debug_message` from `ValidationState`. This compound string is also the complete error message thrown by the mempool in resposne to `sendrawtransaction`.\r\n\r\nThe extra verbosity is helpful to consumers of `testmempoolaccept`, which is sort of a debug tool anyway. The beginning of these messages remains the same (`m_reject_reason`) and so although this may be a breaking API change for consumers who expect exact strings, that should be easy to fix (after reading the release notes \ud83d\ude2c). \r\n\r\nold: `insufficient fee`\r\nnew: `insufficient fee, rejecting replacement dafc2bb343e7598c625de0c83ae9594eecab2c6252d08dd19b9d39e5b5402800; less fees than conflicting txs; 3.00 < 4.00`\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 76,
        "deletions": 16,
        "changed_files": 2,
        "created_at": "2023-07-21T13:55:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Even when the node believes it has IBD completed, need to avoid\r\nrequesting historical blocks from network-limited peers.\r\nOtherwise, the limited peer will disconnect right away.\r\n\r\nThe simplest scenario could be a node that gets synced, drops\r\nconnections, and stays inactive for a while. Then, once it re-connects\r\n(IBD stays completed), the node tries to fetch all the missing blocks\r\nfrom any peer, getting disconnected by the limited ones.\r\n\r\nNote:\r\nCan verify the behavior by cherry-picking the test commit alone on\r\nmaster. It will fail there.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-07-21T13:10:41Z",
        "closed_at": "2023-07-30T10:21:51Z",
        "merged_at": "2023-07-30T10:21:50Z",
        "body": "There should be no risk or downside in adding a call to `SyncWithValidationInterfaceQueue` here. In fact, it will make tests less brittle. For example,\r\n\r\n* If one sets the timeouts in `test/functional/feature_fee_estimation.py` to `0`, on `master` the test will fail and here it will pass.\r\n* It may avoid a rare (theoretic) intermittent issue in https://github.com/bitcoin/bitcoin/pull/28108/files#r1268966663",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 80,
        "deletions": 70,
        "changed_files": 4,
        "created_at": "2023-07-20T18:56:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "1. Create file permission utilities in the functional test framework based on #27850 and #15687.\r\n\r\n2. PR #15687 added test coverage in `test/functional/tool_wallet.py` to reproduce unexpected writes to the wallet file, as described in issue https://github.com/bitcoin/bitcoin/issues/15608:\r\n\r\n    - wallet tool info unexpectedly writes to the wallet file if the wallet file permissions are read/write\r\n    - wallet tool info raises if the wallet file permissions are read-only\r\n\r\n    Update these tests/docs for the following changes:\r\n\r\n    - addition of descriptor wallets\r\n    - CI migration away from Appveyor\r\n    - allow running tests that need to change file permissions on Linux using chattr\r\n\r\n    Instead of describing the error messages for legacy BDB wallets and descriptor SQLite wallets in a comment, check that the error message is thrown at runtime and document that it shouldn't throw.\r\n\r\n3. Update `feature_reindex_readonly.py` to use the file permission utilities.\r\n4. Improve `wallet_multiwallet.py` coverage, while updating to use the file permission utilities, which enables the test to work on Linux and provides logging and error handling.  Also add a log entry for the test.",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 43,
        "changed_files": 8,
        "created_at": "2023-07-20T14:06:16Z",
        "closed_at": "2023-07-25T22:13:57Z",
        "merged_at": "2023-07-25T22:13:57Z",
        "body": "Besides the build system changes, this is a mostly move-only change for moving the few UniValue-related functions out of kernel files.\r\n\r\nUniValue is not required by any of the kernel components and a JSON library should not need to be part of a consensus library.",
        "comments": 28
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-20T13:23:36Z",
        "closed_at": "2023-07-20T13:31:12Z",
        "merged_at": null,
        "body": "https://github.com/bitcoin/bitcoin/pull/27997 but for Script parsing.\r\n\r\nI've added a test demonstrating the behaviour despite the descriptor parsing also currently being incorrect (`wsh(raw())`, see #28067). I guess whichever comes after the other between this PR and #28067 would be trivial to rebase on to fix it.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-20T10:50:28Z",
        "closed_at": "2023-07-20T15:54:52Z",
        "merged_at": "2023-07-20T15:54:52Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-19T18:35:39Z",
        "closed_at": "2023-07-20T15:39:42Z",
        "merged_at": "2023-07-20T15:39:42Z",
        "body": "Fixes #28094\r\n\r\nThe test bumps the mocktime for ~2 weeks and then triggers eviction from the mempool. But this bump will also cause a new resubmit, and if the timing is such that this resubmit happens right after the eviction and before the check that the tx was evicted, the test can fail as in #28094:\r\n\r\n```\r\nnode0 2023-07-17T21:31:23.809483Z (mocktime: 2023-08-02T09:46:27Z) [httpworker.1] [validation.cpp:267] [LimitMempoolSize] [mempool] Expired 2 transactions from the memory pool\r\nnode0 2023-07-17T21:31:23.810079Z (mocktime: 2023-08-02T09:46:27Z) [scheduler] [wallet/wallet.h:895] [WalletLogPrintf] [default wallet] ResubmitWalletTransactions: resubmit 2 unconfirmed transactions\r\nnode0 2023-07-17T21:31:23.810474Z (mocktime: 2023-08-02T09:46:27Z) [httpworker.2] [rpc/request.cpp:181] [parse] [rpc] ThreadRPCServer method=getmempoolentry user=__cookie__ \r\n2023-07-17T21:31:23.811000Z TestFramework (ERROR): Assertion failed (...) AssertionError: No exception raised\r\n```\r\nFix this by flushing out the current resubmit call before triggering mempool eviction.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 139,
        "deletions": 61,
        "changed_files": 12,
        "created_at": "2023-07-19T14:10:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "We currently have two different identifiers for transactions: `txid` (refering to the hash of a transaction without witness data) and `wtxid` (referring to the hash of a transaction including witness data). Both are typed as `uint256` which could lead to type-safety bugs in which one transaction identifier type is passed where the other would be expected.\r\n\r\nThis PR introduces explicit `Txid` and `Wtxid` types that (if used) would cause compilation errors for such type confusion bugs.\r\n\r\n(Only the orphanage is converted to use these types in this PR)",
        "comments": 26
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-07-19T13:02:21Z",
        "closed_at": "2023-07-20T19:54:42Z",
        "merged_at": null,
        "body": "Currently this is only done by OSS-Fuzz. As a fallback add it to the valgrind fuzz task as well.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-07-19T11:27:20Z",
        "closed_at": "2023-09-12T14:00:37Z",
        "merged_at": "2023-09-12T14:00:37Z",
        "body": "This is a follow-up to commit 7b850bc2a1cd8547a2dbb5a18173f53439601220. While the test case no longer reproduces, the general class of `-fstack-reuse` bugs still exists in all versions of GCC. The workaround can never be removed, unless the whole class of bugs is fixed.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 2,
        "changed_files": 5,
        "created_at": "2023-07-19T09:43:56Z",
        "closed_at": "2023-07-20T16:03:38Z",
        "merged_at": "2023-07-20T16:03:38Z",
        "body": "Requested in https://github.com/bitcoin/bitcoin/pull/28083#pullrequestreview-1535304219.\r\n\r\nAlso, one doc commit.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-19T09:26:36Z",
        "closed_at": "2023-07-19T10:36:14Z",
        "merged_at": null,
        "body": "This doesn't produce any additional warnings for me under GCC 13 or Clang 16, so it'd seem useful to use the less restricted unused code warning.\r\n\r\n`-Wno-unused-parameter` is still required.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-07-19T03:07:33Z",
        "closed_at": "2023-09-12T16:41:45Z",
        "merged_at": "2023-09-12T16:41:45Z",
        "body": "Right now when we get the help for -torcontrol it says that there is a default ip and port we dont specify if there is a specified ip that we would also use port 9051 as default\r\n\r\nAlso I create a new const instead of using 9051 directly in the function\r\n\r\nlinking this PR because this was discussed here https://github.com/bitcoin/bitcoin/pull/28018",
        "comments": 8
    }
]