[
    {
        "merged": false,
        "additions": 69,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-18T07:11:43Z",
        "closed_at": "2023-10-18T07:12:16Z",
        "merged_at": null,
        "body": "\u2026 tests.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-18T07:04:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 126,
        "deletions": 3,
        "changed_files": 6,
        "created_at": "2023-10-18T04:12:42Z",
        "closed_at": "2023-10-18T06:39:22Z",
        "merged_at": "2023-10-18T06:39:22Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-18T02:40:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34903\r\n\r\nI think this is better than reverting 2128a73713735fb794ca6565fd5d7792293f5cfa \ud83e\udd14\r\n\r\nAdditionally I attempted to trace the cause of workers attempting to open non-existent databases as that *should* have been solved already, but I couldn't recreate the issue on my Windows setup (Windows 11, Python 3.12).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 817,
        "deletions": 8,
        "changed_files": 9,
        "created_at": "2023-10-17T01:51:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Ticket: https://code.djangoproject.com/ticket/34901\r\nForum discussions: https://forum.djangoproject.com/t/asyncifying-django-contrib-auth-and-signals-and-maybe-sessions/18770\r\n\r\nThis adds an async interface and implementation to `django.contrib.sessions`. This is based on the implementation from Andrew-Chen-Wang which was posted to the Django forum thread about asyncifying contrib modules.\r\n\r\n~~TODO:~~\r\n- [x] ~~Tests: I couldn't find any tests of the existing sessions system (besides the tests I updated to be natively async).  Where should the test cases for this go?~~",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 19,
        "changed_files": 1,
        "created_at": "2023-10-16T23:21:15Z",
        "closed_at": "2023-10-17T03:49:56Z",
        "merged_at": "2023-10-17T03:49:56Z",
        "body": "Related to https://github.com/django/django/pull/17194#issuecomment-1712352486\r\n\r\nDeleted the `_saveasnew` condition from `response_change` method as it is never reached",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 103,
        "deletions": 22,
        "changed_files": 3,
        "created_at": "2023-10-16T18:49:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "ticket-34899\r\n\r\nSo the challenge was that adding the blank choice was performed eagerly. The easiest solution is, therefore, to make the addition of the blank entry lazy. Unfortunately this also means that we need to extract the handling of flattening of choices into a helper function -- `flatten_choices()` (which is done in the first commit). From there, a `BlankChoiceIterator` falls out quite nicely...\r\n\r\n...but then we have a handful of issues in testing. It seems that these can be overcome by implementing `__eq__()` and `__getitem__()` on `BaseChoiceIterator`. Alternatively we could use 7e35b749c5add17ba58bc2e40a0183d8b33e4b16 to only use `BlankChoiceIterator` where we encounter a `BaseChoiceIterator` subclass, but then we're duplicating logic which is not so nice... And it also means that comparisons against or subscript access for lazy choices will still fail.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-16T02:03:37Z",
        "closed_at": "2023-10-16T04:15:01Z",
        "merged_at": "2023-10-16T04:15:01Z",
        "body": "Regression in 59bea9e, complements e5c844d.\r\n\r\nRefs #28477, #34551.\r\n\r\nThanks Haldun Komsuoglu for the report.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 188,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-15T20:07:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/10941\r\nhttps://forum.djangoproject.com/t/adding-a-template-tag-to-generate-query-strings/24521/4\r\n\r\nI was unsure about `query_string` vs `querystring` as most template tags don't have underscores, but I do prefer with the underscore, personally.\r\n\r\nWe could also simplify the logic a bit if we say we _only_ allow lists (or nothing at all) when setting something to a list, but it seems nicer to allow any iterable to work.\r\n\r\nCredit to Carsten Fuchs for the initial implementation.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T18:18:21Z",
        "closed_at": "2023-10-16T04:27:28Z",
        "merged_at": "2023-10-16T04:27:28Z",
        "body": "Python 3.12.1+ no longer includes skipped tests in the number of running tests. Check out:\r\n\r\nhttps://github.com/python/cpython/issues/110890#issuecomment-1763458686\r\nhttps://github.com/python/cpython/pull/106588",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-15T12:22:49Z",
        "closed_at": "2023-10-16T03:23:27Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/33647\r\n\r\nApproach :  Introduce a new parameter to the `Cast()` so that we can specify if we do not want to cast charfield with max length.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T02:35:40Z",
        "closed_at": "2023-10-15T06:02:39Z",
        "merged_at": null,
        "body": "Refactor: Replace double quotes with single quotes in admin forms stylesheet link\r\n\r\nThis commit updates the stylesheet link in the admin forms block from double quotes to single quotes for consistency with the existing codebase. The change enhances code readability and aligns with the project's coding conventions.\r\n\r\nChanged:\r\n{% block extrastyle %}{{ block.super }}<link rel=\"stylesheet\" href=\"{% static \"admin/css/forms.css\" %}\">{% endblock %}\r\n\r\nTo:\r\n{% block extrastyle %}{{ block.super }}<link rel=\"stylesheet\" href=\"{% static 'admin/css/forms.css' %}\">{% endblock %}",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-14T17:04:06Z",
        "closed_at": "2023-10-14T17:04:37Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-10-14T15:43:16Z",
        "closed_at": "2023-10-14T17:31:49Z",
        "merged_at": null,
        "body": "Ticket : [#33647](https://code.djangoproject.com/ticket/33647)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-14T05:03:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When styling the body background color, it will be chopped off beyond one viewport height. This is a legacy hack to make the height at least 100% viewport height, but breaks the usual document flow in terms of styling.\r\n\r\nhttps://greggod.medium.com/css-do-not-put-height-100-on-the-body-html-e36bda3551b3",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T22:44:01Z",
        "closed_at": "2023-10-15T08:46:13Z",
        "merged_at": null,
        "body": "For e.g. when email is used as username, we need to pass email param in authenticate method. To make it flexible we can pass UserModel.USERNAME_FIELD as param while authentication.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 168,
        "deletions": 139,
        "changed_files": 3,
        "created_at": "2023-10-13T08:22:40Z",
        "closed_at": "2023-10-16T09:18:17Z",
        "merged_at": "2023-10-16T09:18:17Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-12T18:02:51Z",
        "closed_at": "2023-10-15T08:27:12Z",
        "merged_at": "2023-10-15T08:27:12Z",
        "body": "ticket-34840\r\n\r\nFollowing [discussion on django-developers](https://groups.google.com/g/django-developers/c/U_piffxKlPM), I decided to dig into this and came up with this improvement.\r\n\r\n`TextField`s are actually unaffected, since PostgreSQL optimizes away the `::text` at index creation time. Using this query to find affected indexes seems the most robust solution.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-12T17:22:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Override `log_request` as `log_request` is called by `log_response` and format the message to include time for request completion plus some WSGI server overhead. ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 114,
        "deletions": 31,
        "changed_files": 9,
        "created_at": "2023-10-12T17:21:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Following up on https://github.com/django/django/pull/16726\r\n\r\nI rebased the PR, changed the wording slightly (still not very sure about it, it's quite a long sentence), used a sentinel, and added a test for when the check fails, which I think addresses everything in the original PR.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T15:53:12Z",
        "closed_at": "2023-10-12T18:01:45Z",
        "merged_at": "2023-10-12T18:01:45Z",
        "body": "Thanks Tim Graham for the report.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-11T08:12:19Z",
        "closed_at": "2023-10-11T09:07:30Z",
        "merged_at": null,
        "body": "I wrote this pull request based on this thread https://forum.djangoproject.com/t/startproject-command-context/24445\r\n\r\n> Imagine that, I am using docker and I want to overwrite in there the version of python to build. I want to specify the version (or another info, this is just an example) when I create the template. Something like this:\r\n> `python manage.py startproject --template xxx -e py,yml,toml -c python_version=3.11 -c using_drf=true ...`\r\n> This makes the templating much more powerful and this can be applied to startapp command too.\r\n\r\nI leave this ready so you can discuss if this feature is valid and, if you agree, we can start the reviews and discuss if this solution is valid and how we can improve it.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-11T06:49:21Z",
        "closed_at": "2023-10-11T08:58:11Z",
        "merged_at": "2023-10-11T08:58:11Z",
        "body": "This uses an example with the same precision for all databases.\r\n\r\nFollow up to 96e7a752b6c44a84e18d82d37524c1df64b32e12.\r\n\r\nCheck out [logs](https://djangoci.com/job/django-oracle/database=oragis19,label=oracle,python=python3.11/1172/testReport/gis_tests.geoapp.test_functions/GISFunctionsTests/test_asgeojson_option_0/).",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 10,
        "changed_files": 5,
        "created_at": "2023-10-10T16:31:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Hey there, recently I came across an outdated (old) resource link in the Django documentation, and I had a little discussion about it on the mailing list and the Discord server to replace it with the Python documentation. And I got a positive response from both places.\r\n\r\nKindly check the discussion here - https://groups.google.com/g/django-developers/c/j28iN_WdTRA\r\n\r\nAs you can see from the image, I've used `ripgrep` to locate the resource that I wanted to replace, i.e, *Dive Into Python*. From `docs/intro/index.txt`, I've replaced Dive Into Python with `Python Documentation` and from `docs/intro/contributing.txt`, I've removed `Dive Into Python` resource, followed by a few words.\r\n\r\nI've tested the changes locally using Sphinx, and everything seems to be working fine.\r\n\r\n![DiveInto](https://github.com/django/django/assets/35860305/932c2708-c3eb-425e-8b08-d96a8b45b637)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-10T14:15:46Z",
        "closed_at": "2023-10-10T14:35:40Z",
        "merged_at": null,
        "body": "Hey there, recently I came across an outdated (old) resource link in the Django documentation, and I had a little discussion about it on the mailing list and the Discord server to replace it with the Python documentation. And I got a positive response from both places.\r\n\r\nKindly check the discussion here  - https://groups.google.com/g/django-developers/c/j28iN_WdTRA\r\n\r\nAs you can see from the image, I've used `ripgrep` to locate the resource that I wanted to replace, i.e, `Dive Into Python`. From `docs/intro/index.txt`, I've replaced `Dive Into Python` with 'Python Documentation` and from `docs/intro/contributing.txt`, I've removed `Dive Into Python` resource, followed by a few words. \r\n\r\nI've tested the changes locally using `Sphinx`, and everything seems to be working fine.\r\n\r\n![DiveInto](https://github.com/django/django/assets/35860305/34a62fc3-9757-43c6-b8f7-c3a3e0bc3210)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T07:00:43Z",
        "closed_at": "2023-10-10T08:28:24Z",
        "merged_at": "2023-10-10T08:28:24Z",
        "body": "Addition of the `stacklevel` argument shows the source of the deprecated call, making updating the client code simpler.\r\n\r\nTargeting 5.0.x, since this code is no longer in `main`. Should also be applied to 4.2.x if accepted. \r\n\r\nI bumped into this looking at: \r\n\r\n* https://github.com/django-compressor/django-compressor/issues/1187\r\n\r\nticket-26029",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1006812,
        "deletions": 51503,
        "changed_files": 6943,
        "created_at": "2023-10-09T12:09:02Z",
        "closed_at": "2023-10-09T12:35:40Z",
        "merged_at": null,
        "body": "{% load static %}\r\n<html>\r\n<head>\r\n    <title>{% block title %}{% endblock %}</title>\r\n</head>\r\n<body>\r\n    <img src=\"{% static \"images/sitelogo.png\" %}\" alt=\"Logo\" />\r\n    {% block content %}{% endblock %}\r\n</body>\r\n</html>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-09T08:47:07Z",
        "closed_at": "2023-10-09T09:51:48Z",
        "merged_at": "2023-10-09T09:51:48Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-10-09T06:52:46Z",
        "closed_at": "2023-10-09T07:55:53Z",
        "merged_at": "2023-10-09T07:55:53Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-10-07T20:44:09Z",
        "closed_at": "2023-10-08T12:55:11Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34886",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-07T20:13:23Z",
        "closed_at": "2023-10-07T20:13:55Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34886\r\nFixed #34886 -- Used Django's mark_safe(gettext_lazy(...)) instead of custom helper in lazy sample code to mark a lazy translation as \"safe\"",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-06T14:56:08Z",
        "closed_at": "2023-10-07T04:53:54Z",
        "merged_at": "2023-10-07T04:53:54Z",
        "body": "Maybe I missed it but I believe the documentation hasn't explicitly shown you how to import `GenericPrefetch`. You can click on the anchor of the class and look at the address bar to get it, but I don't think that's very obvious.\r\n\r\nI added this to the Python console example, following the documentation for other classes.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 92,
        "deletions": 12,
        "changed_files": 7,
        "created_at": "2023-10-06T11:21:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The original pull request was #17273. Unfortunately, I removed my previous forked project.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-06T07:41:03Z",
        "closed_at": "2023-10-06T18:18:41Z",
        "merged_at": "2023-10-06T18:18:41Z",
        "body": "Thanks Matt Westcott for the report.\r\n\r\nRegression in cac94dd8aa2fb49cd2e06b5b37cf039257284bb0.\r\n\r\nticket-34889",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-06T04:36:03Z",
        "closed_at": "2023-10-06T07:52:45Z",
        "merged_at": "2023-10-06T07:52:45Z",
        "body": "Hello.\r\nWhile reading the documentation, I have identified an issue.\r\n\r\nSince django4.0 Scrypt is included by default in PASSWORD_HASHERS, but this document was missing it.\r\n\r\nref: Added scrypt password hasher\r\nhttps://github.com/django/django/pull/13799 \r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T10:00:22Z",
        "closed_at": "2023-10-05T13:26:02Z",
        "merged_at": "2023-10-05T13:26:02Z",
        "body": "`Lookup.prepare_rhs` was added in 388bb5bd9aa3cd43825cd8a3632a57d8204f875f and it's quite important when you want to implement custom lookups. IMO, we should document it.\r\n\r\n![image](https://github.com/django/django/assets/2865885/d900cbe1-0a4a-4a04-b713-1f728b85a094)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 154,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-05T06:43:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Builds upon #17338. Please ignore the new content in `/writing-code/` and review it in #17338 \u2013 only the changes in [writing-documentation.txt](https://github.com/django/django/compare/main...thibaudcolas:django:accessibility-documentation-guidelines?expand=1#diff-02de6414e64dc44e54a76d70d9f1f0ccec53c6b4ccf24a6b6c25428472b7dcc2) are specific to this PR.\r\n\r\nI chose to push this as a separate PR as I thought this could use scrutiny from different reviewers, and I don\u2019t want baseline accessibility guidelines to be held up by documentation-specific ones.\r\n\r\n---\r\n\r\nFor documentation specifically, it\u2019s important we guide Django users towards accessible patterns. This is right in the spirit of the [ATAG 2.0 standard](https://www.w3.org/TR/ATAG20/), in particular [B.4.2. Ensure that documentation promotes the production of accessible content](https://www.w3.org/TR/ATAG20/#gl_b42).\r\n\r\nI chose to keep those documentation guidelines as concise as possible, with basic principles, and a few examples. From there, there\u2019s quite a bit of work to review and rework existing docs.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T06:19:09Z",
        "closed_at": null,
        "merged_at": null,
        "body": "See also #17338. I thought it was important to separately acknowledge what the goals and current state are for the Django admin, similarly to the FAQ entry about browser support. \r\n\r\nCompared to contributing docs, this is for a very different audience of Django users so I chose to have this completely separate (and much more digestible), though the information is similar.\r\n\r\n---\r\n\r\nLike #17338, this is heavily based on:\r\n\r\n\r\n- [Wagtail\u2019s Assistive technologies support](https://guide.wagtail.org/en-latest/reference/browser-compatibility/#assistive-technologies)\r\n- The UK Government Digital Services\u2019 guidance on [Testing with assistive technologies](https://www.gov.uk/service-manual/technology/testing-with-assistive-technologies), itself based on one of the most comprehensive public [survey of assistive technology users](https://accessibility.blog.gov.uk/2016/11/01/results-of-the-2016-gov-uk-assistive-technology-survey/) I\u2019m aware of.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 115,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-05T05:30:11Z",
        "closed_at": null,
        "merged_at": null,
        "body": "As per discussions with @django/accessibility, and [DEP-11](https://github.com/django/deps/pull/69), and  the initial (already-closed) [#31617 \"Improve overall admin accessibility\"](https://code.djangoproject.com/ticket/31617).\r\n\r\nI chose to go with what I think is close to the most minimal set of guidelines possible. In particular,\r\n\r\n- This almost only relies on resources from the W3C directly Those are the most authoritative so they should be easy for us to agree on. But in the future we might want to complement them with more contributor-friendly resources.\r\n- The testing guidelines are as minimal as it gets while also attempting covering the most demanding scenarios  \u2013 so we don\u2019t overwhelm contributors with lots of checklists.\r\n\r\nI see a few issues with this as-is which I chose to leave unresolved for now, so we get something \"live\" and iterate on it later:\r\n\r\n- Accessibility guidance should be dispersed alongside all relevant areas of the contributor docs, rather than being tucked away in the one page.\r\n- This is within the \"writing code\" sub-section, which sells those guidelines way short of what they can be useful for (and Django \"product\" contributions more widely?)\r\n- The specific testing targets are established on the best possible info in this space, but that info is both dated and has a heavy bias on the developing world.\r\n\r\nIt did feel like the right place within the current setup based on how the \"[Work on the Django framework](https://docs.djangoproject.com/en/dev/internals/contributing/#work-on-the-django-framework)\" docs are described.\r\n\r\n---\r\n\r\nThose docs as produced are heavily based on:\r\n\r\n- [Wagtail\u2019s Accessibility targets](https://docs.wagtail.org/en/stable/contributing/developing.html#accessibility-targets)\r\n- The UK Government Digital Services\u2019 guidance on [Testing with assistive technologies](https://www.gov.uk/service-manual/technology/testing-with-assistive-technologies), itself based on one of the most comprehensive public [survey of assistive technology users](https://accessibility.blog.gov.uk/2016/11/01/results-of-the-2016-gov-uk-assistive-technology-survey/) I\u2019m aware of.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T16:26:41Z",
        "closed_at": "2023-10-04T17:53:16Z",
        "merged_at": "2023-10-04T17:53:16Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-04T16:23:40Z",
        "closed_at": "2023-10-04T19:30:50Z",
        "merged_at": "2023-10-04T19:30:50Z",
        "body": "Thanks Tobias Bengfort for the report.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-04T07:43:04Z",
        "closed_at": "2023-10-04T07:59:28Z",
        "merged_at": null,
        "body": "- Add unlimited CharField support for SQLite like Django does for PostgreSQL. \r\n- Allows max_length to be unspecified, which makes more sense for SQLite users.\r\n\r\nRelevant PostgreSQL PR: #16302",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-03T14:18:29Z",
        "closed_at": "2023-10-04T19:00:17Z",
        "merged_at": "2023-10-04T19:00:17Z",
        "body": "Updated the scope of what a valid GML string output looks like in the test_asgml function. \r\nFindings on why the \"new\" GML output is valid and other info about the problem: https://docs.google.com/document/d/1MKw2OnhmoWP4h00tCo85oziGBv1g747RxaBIaYwmctc/edit?addon_store\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-03T06:53:48Z",
        "closed_at": "2023-10-03T08:25:32Z",
        "merged_at": "2023-10-03T08:25:32Z",
        "body": null,
        "comments": 6
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-03T04:03:05Z",
        "closed_at": "2023-10-03T07:25:48Z",
        "merged_at": "2023-10-03T07:25:48Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 13,
        "changed_files": 6,
        "created_at": "2023-10-02T19:01:53Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[\u200bhttps://www.python.org/downloads/release/python-3120/](https://www.python.org/downloads/release/python-3120/)",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-10-02T18:27:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34865",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-01T15:58:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[ticket-28900](https://code.djangoproject.com/ticket/28900)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 108,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-30T20:55:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I've introduced an option that enables the deletion of the original files after they've been processed, a step that occurs following the \"post_process\" method. This deletion process involves either renaming the file to incorporate a content-based hash for cache invalidation purposes or making adjustments to files containing references to other files.\r\n\r\nTo ensure that only files meeting specific criteria are removed, I've implemented certain checks. These checks involve examining the file's creation date and the date of its last modification. Files that haven't been modified or haven't undergone hashing are retained and not subjected to removal.\r\n\r\nI will work on test cases and commit it soon.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-30T18:11:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Inputs that uses the type=\"date\" attribute cannot be localized by Django.\r\n\r\nI spent a lot of hours discovering this the hard way which could have been mitigated by a quick notice/warning - hence the addition.\r\n\r\nFor more info, see last comment of this ticket: https://code.djangoproject.com/ticket/34853",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 34,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-30T02:25:32Z",
        "closed_at": "2023-09-30T18:14:10Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34533",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-09-29T17:38:27Z",
        "closed_at": "2023-10-02T14:47:58Z",
        "merged_at": "2023-10-02T14:47:58Z",
        "body": "By setting a value in the `parser.extra_data` mapping, template tags pass additional data out of the parsing context.\r\n\r\nAny extra data set is exposed on the template via the matching ` .extra_data` attribute.\r\n\r\nLibrary authors should use a key to namespace extra data. The 'django' namespace is reserved for internal use.\r\n\r\nticket-34883",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-29T14:03:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": "https://forum.djangoproject.com/t/updating-the-default-startapp-template/24193/5\r\n\r\nI wasn't sure if there was test coverage for this or not, so initially just submitting without.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 183,
        "deletions": 108,
        "changed_files": 58,
        "created_at": "2023-09-29T10:17:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "ticket-34233\r\n\r\nNow that we're on Python 3.10+ we can use the `strict` flag for the `zip()` builtin.\r\n\r\nUsing the `strict=True` can help avoid any potential bugs as a result of arguments of differing length being passed to `zip()`. It is also useful to pass `strict=False` to explicitly make clear that it is expected that a call to `zip()` may have arguments of different length.\r\n\r\nI've split into fixup commits for review, but they can be squashed later. The first commit sets `strict=True` for all the cases that support it. The first fixup sets `strict=False` for those that (currently) rely on the arguments being of differing length, and the second fixup alters some cases to allow use of `strict=True` by slicing arguments.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-29T08:21:26Z",
        "closed_at": "2023-09-29T11:18:51Z",
        "merged_at": null,
        "body": "Replaced list with deque because it's faster to use.\r\n\r\nMain drawback is memory usage.\r\n\r\n```\r\nimport sys\r\nfrom collections import deque\r\nsys.getsizeof(deque())\r\n# 760\r\nsys.getsizeof([])\r\n# 56\r\n```\r\nI searched around the github for \"def process_view\" with \"path:**middleware**\", found that on avg people have 1-2 middleware per project.\r\n\r\nIf it's not a good idea to put deque here, maybe it can be considered to replace other instances of `list.insert(0, ...)` with deque",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-29T07:53:26Z",
        "closed_at": "2023-09-29T08:50:13Z",
        "merged_at": "2023-09-29T08:50:13Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-29T07:44:23Z",
        "closed_at": "2023-10-06T03:25:33Z",
        "merged_at": "2023-10-06T03:25:33Z",
        "body": "When calling AssGeoJSON, if bbox and crs are both false, then options = 0, there fore not added to the expression. \r\n\r\nIn [Postgis](https://code.djangoproject.com/changeset/1/), with geometries, the default is not 0 but 8, meaning the CRS is returned, not respecting the original call arguments.\r\n\r\n\r\nfixes #34882 https://code.djangoproject.com/ticket/34882#ticket",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 23,
        "changed_files": 7,
        "created_at": "2023-09-28T22:13:31Z",
        "closed_at": "2023-10-02T09:49:26Z",
        "merged_at": "2023-10-02T09:49:26Z",
        "body": "fixes ticket_32602\r\n\r\n## what was issue\r\nWording was not clear between test case and test case class in documentation and some comments in code .\r\n\r\n## solution\r\nUpdated docs and also code comment\r\n\r\n\r\n-   [x] Do the tests still pass",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-28T19:53:27Z",
        "closed_at": "2023-09-29T04:36:51Z",
        "merged_at": "2023-09-29T04:36:51Z",
        "body": "See https://code.djangoproject.com/ticket/34878",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 828,
        "deletions": 472,
        "changed_files": 40,
        "created_at": "2023-09-28T19:39:10Z",
        "closed_at": "2023-09-28T19:39:40Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-28T19:01:28Z",
        "closed_at": "2023-09-28T19:36:12Z",
        "merged_at": null,
        "body": "This checks that the renderer has an engine property and is a DjangoTemplates instance before calling reset() on its loaders.\r\n\r\nSee https://code.djangoproject.com/ticket/34878 add suggested change by @felixxm ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-09-28T08:20:50Z",
        "closed_at": "2023-09-29T06:54:14Z",
        "merged_at": "2023-09-29T06:54:14Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-27T19:45:40Z",
        "closed_at": "2023-09-28T06:13:03Z",
        "merged_at": "2023-09-28T06:13:03Z",
        "body": "Ref https://code.djangoproject.com/ticket/34877",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-09-27T17:20:11Z",
        "closed_at": "2023-09-27T17:25:23Z",
        "merged_at": "2023-09-27T17:25:23Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-27T11:34:40Z",
        "closed_at": "2023-09-27T13:51:53Z",
        "merged_at": "2023-09-27T13:51:52Z",
        "body": "This was fixed by 9953c804a9375956a542da94665662d306dff48d (`main`, `stable/5.0.x`) and crashes since MariaDB was bumped to 10.5 on Jenkins, check out [logs](https://djangoci.com/view/Main/job/django-mariadb-4.2/lastCompletedBuild/testReport/).\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-27T09:01:43Z",
        "closed_at": "2023-09-27T17:09:10Z",
        "merged_at": "2023-09-27T17:09:10Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-09-26T08:49:47Z",
        "closed_at": "2023-09-26T10:05:27Z",
        "merged_at": "2023-09-26T10:05:26Z",
        "body": "ticket-34873",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-09-26T02:57:37Z",
        "closed_at": "2023-09-26T07:50:16Z",
        "merged_at": "2023-09-26T07:50:16Z",
        "body": "Hello,\r\n\r\nI noticed that after the modification of the changelist filter from div to nav, a couple of tests were impacted:\r\n\r\n1. test_limited_filter\r\n2. test_named_group_field_choices_filter\r\n3. test_relation_spanning_filters\r\n\r\nI have made modifications on the tests above as part of this PR, please review and suggest necessary improvements.\r\n\r\nThanks,\r\nLem",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-09-25T10:34:17Z",
        "closed_at": "2023-10-11T19:09:40Z",
        "merged_at": "2023-10-11T19:09:40Z",
        "body": "Documented aggregate default argument and notified possible return of None when aggregate functions\r\nare used with empty querysets or groups.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 196,
        "deletions": 21,
        "changed_files": 12,
        "created_at": "2023-09-25T09:45:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implement a new QuerySet.update_returning() that executes a QuerySet.update() and returns modified rows on databases that support UPDATE RETURNING (SQLite, PostgreSQL, Oracle)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-24T14:13:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The current example for TimezoneMiddleware in the Django documentation uses sessions to store the user's time zone. With Django 4.0, the framework has deprecated the use of sessions for storing the user's language preference, opting for cookies instead. It seems logical to align the handling of time zones with this change for consistency and the advantages it offers.\r\n\r\nSee https://docs.djangoproject.com/en/dev/internals/deprecation/#deprecation-removed-in-4-0 and https://docs.djangoproject.com/en/dev/releases/3.0/#id3",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-24T09:41:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Refactored the ValidationError messages raised by GenericIPAddressField to include a protocol param to avoid using the shared instance of `default_error_messages` to track the message for different protocols",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 49,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-22T20:41:57Z",
        "closed_at": "2023-09-23T07:06:40Z",
        "merged_at": null,
        "body": "Ref https://code.djangoproject.com/ticket/34868",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 187,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-22T16:40:37Z",
        "closed_at": "2023-09-22T17:37:15Z",
        "merged_at": null,
        "body": "Adding some functions to have different paths with different states and access.\r\nAlso adding nested group paths functionality with different accesses and modes.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 166,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-22T16:19:10Z",
        "closed_at": "2023-09-22T16:34:47Z",
        "merged_at": null,
        "body": "Adding some functions to have different paths with different states and access.\r\nAlso adding nested group paths functionality with different accesses and modes.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-22T08:26:31Z",
        "closed_at": "2023-09-22T19:36:10Z",
        "merged_at": "2023-09-22T19:36:10Z",
        "body": "Ref https://code.djangoproject.com/ticket/34861",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-09-22T06:27:02Z",
        "closed_at": "2023-09-25T07:13:55Z",
        "merged_at": "2023-09-25T07:13:55Z",
        "body": "https://code.djangoproject.com/ticket/34849",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-22T04:39:22Z",
        "closed_at": "2023-09-22T08:09:08Z",
        "merged_at": "2023-09-22T08:09:08Z",
        "body": "* Math operations involving two `PositiveIntegerField`s should resolve to an output of `PositiveIntegerField` instead of an `IntegerField`. This was a regression introduced in ticket #33397.\r\n* Add my name to AUTHORS.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 22,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-09-22T04:37:46Z",
        "closed_at": "2023-09-22T06:25:21Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34862\r\n\r\nTODO:\r\n\r\n- [x] Replace template name & references html -> txt\r\n- [x] Add deprecation warnings & comments\r\n- [ ] ~Update language files~ Aren't these updated upon release?\r\n- [x] Document deprecation",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-22T00:16:29Z",
        "closed_at": "2023-09-22T04:25:18Z",
        "merged_at": "2023-09-22T04:25:18Z",
        "body": "Failure observed on CockroachDB.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 43,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-09-21T22:56:08Z",
        "closed_at": "2023-09-22T04:27:16Z",
        "merged_at": null,
        "body": "* Math operations involving two `PositiveIntegerField`s should resolve to an output of `PositiveIntegerField` instead of an `IntegerField`. This was a regression introduced in ticket #33397.\r\n* Add my name to AUTHORS.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 12,
        "changed_files": 6,
        "created_at": "2023-09-21T10:37:08Z",
        "closed_at": "2023-09-22T04:01:11Z",
        "merged_at": "2023-09-22T04:01:11Z",
        "body": "Thanks Alex Vandiver for the report.\r\n\r\nRegression in 09ffc5c1212d4ced58b708cbbf3dfbfb77b782ca.\r\n\r\nticket-34840.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-21T03:20:21Z",
        "closed_at": "2023-09-21T06:10:52Z",
        "merged_at": "2023-09-21T06:10:52Z",
        "body": "Follow up to 2c6ebb65c9eb6b11347d907127b82d31e04569e5.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-20T20:45:00Z",
        "closed_at": "2023-09-22T06:55:06Z",
        "merged_at": "2023-09-22T06:55:06Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-20T20:09:08Z",
        "closed_at": "2023-09-21T03:54:43Z",
        "merged_at": null,
        "body": "Ticket Number : [34846](https://code.djangoproject.com/ticket/34846)\r\n\r\nContinued From : #16342 \r\n\r\nAdded Copy button functionality to Code Blocks in the documentation\r\n\r\n# Before\r\n\r\n![image](https://github.com/django/django/assets/94912101/41775287-6666-40f5-93fd-77e7bcba8efe)\r\n\r\n# After\r\n\r\n![image](https://github.com/django/django/assets/94912101/0d994792-1b59-4c67-a0bf-f38d624942b6)\r\n![image](https://github.com/django/django/assets/94912101/045ea130-5fb4-408e-bab3-f726ac7e26e0)\r\n![image](https://github.com/django/django/assets/94912101/c812c88f-53df-4cf5-b3d9-5190a5d1f694)\r\n\r\nActual [Link](https://docs.djangoproject.com/en/4.2/intro/tutorial01/) where these example changes would be reflected",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-20T19:50:06Z",
        "closed_at": "2023-09-21T11:46:08Z",
        "merged_at": "2023-09-21T11:46:08Z",
        "body": "https://code.djangoproject.com/ticket/34857\r\n\r\n## CSS variables\r\n\r\nIn `widget.css` (admin) the colors for the date picker cancel buttons are hard-coded leading to a light theme of (only) the cancel button irrespectively of user preferences. \r\n\r\nThis \u00b5-PR replaces the hard-coded colors with the appropriate CSS variables:\r\n* `--button-fg`\r\n* `--close-button-bg`\r\n* `--close-button-hover-bg`\r\n\r\nThis affects versions 3.2, 4.2, 5.0a1.\r\n\r\n## Before patch\r\nThe cancel button has a fixed bright colour (which almost hurts if you've got a dark theme).\r\n\r\n<img width=\"400\" alt=\"image\" src=\"https://github.com/django/django/assets/16904477/93f6fb1e-70a2-41e9-92bd-1ddb014cfa14\">  <img width=\"400\" alt=\"image\" src=\"https://github.com/django/django/assets/16904477/28c518b2-d8ee-4a4e-9214-656ca27c1745\">\r\n\r\n## After patch\r\nColours are defined by the theme (which changes both dark and light theme).\r\n\r\n<img width=\"400\" alt=\"image\" src=\"https://github.com/django/django/assets/16904477/c7599893-1dce-4899-890f-456ce53dc35b\"><img width=\"400\" alt=\"image\" src=\"https://github.com/django/django/assets/16904477/a243ade4-591a-4fa0-9d0a-a7348bff0945\">\r\n\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-09-20T13:59:38Z",
        "closed_at": "2023-09-21T16:17:01Z",
        "merged_at": "2023-09-21T16:17:01Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-20T11:47:41Z",
        "closed_at": "2023-09-20T11:52:37Z",
        "merged_at": null,
        "body": "Wrapped decode(\"utf-8\") with a try...catch that yields a UnicodeDecodeError exception if the file fails to decode from UTF-8.\r\n\r\nThis change is in response to unhandled error when attempting to decode files not encoded with UTF-8 under manage.py collectstatic. Discovered after upgrading to django 4. Previous versions (2 and 3) had not thrown an error for the files with different encoding.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 47,
        "changed_files": 12,
        "created_at": "2023-09-20T08:04:26Z",
        "closed_at": "2023-09-20T11:45:51Z",
        "merged_at": "2023-09-20T11:45:51Z",
        "body": "ticket-34851",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-20T05:12:06Z",
        "closed_at": "2023-09-20T06:06:43Z",
        "merged_at": null,
        "body": "a brief explanation of what `models.CASCADE` do in Django This lack of document once confused me, so I decided to edit it. (I don't know if I have written well or concise or ... but I don't have any experiences)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-19T20:46:06Z",
        "closed_at": "2023-09-20T04:16:41Z",
        "merged_at": "2023-09-20T04:16:41Z",
        "body": "`auth_tests.test_views.ChangelistTests.test_view_user_password_is_readonly` depends on the password hasher having the three components `algorithm`, `salt` and `hash`.\r\n\r\nThe default password hasher (`PBKDF2PasswordHasher`) has an extra `iterations` component, breaking the test.\r\n\r\nThe `MD5PasswordHasher` fits this requirement and is recommended in the `test_sqlite.py` example settings file for test performance.\r\n\r\nOverride settings for the entire test class because the hasher is used in `setUpTestData`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-19T13:03:25Z",
        "closed_at": "2023-09-20T07:00:30Z",
        "merged_at": "2023-09-20T07:00:30Z",
        "body": "Adds GeneratedField code sample, as for database-computed default values",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 34,
        "changed_files": 7,
        "created_at": "2023-09-19T10:15:16Z",
        "closed_at": "2023-09-19T13:06:06Z",
        "merged_at": "2023-09-19T13:06:06Z",
        "body": "ticket-34850",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-19T08:14:09Z",
        "closed_at": "2023-10-05T17:32:40Z",
        "merged_at": "2023-10-05T17:32:40Z",
        "body": "This came up in https://code.djangoproject.com/ticket/31435 and again in https://code.djangoproject.com/ticket/34847 where people were doing\r\n\r\n```\r\nclass Foo(Model):\r\n    foo = <some model field>\r\n\r\n    def __init__(self, \u2026):\r\n        super().__init__(\u2026)\r\n        \r\n        self._old_foo = self.foo\r\n```\r\n\r\nwhich potentially leads to infinite recursion in some cases.\r\n\r\nATM the docs only warn against modifying the signature. Also mentioning refraining from accessing model fields may be a worthy addition.\r\n\r\nSimon's recommendation was to access the fields like `self.__dict__.get(field_name)` if it was a must to use `__init__()` - this could also be something to add.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-19T06:28:49Z",
        "closed_at": "2023-09-19T07:27:28Z",
        "merged_at": "2023-09-19T07:27:28Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-19T06:25:42Z",
        "closed_at": "2023-09-19T11:23:59Z",
        "merged_at": "2023-09-19T11:23:58Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-19T04:00:22Z",
        "closed_at": "2023-09-19T06:09:03Z",
        "merged_at": "2023-09-19T06:09:03Z",
        "body": "Test regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.\r\n\r\nCheck out [logs](https://djangoci.com/view/Main/job/django-oracle/database=oracle19,label=oracle,python=python3.11/1156/).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 608,
        "deletions": 35,
        "changed_files": 14,
        "created_at": "2023-09-18T22:48:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/373\r\nContinued from #16075.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-18T21:54:14Z",
        "closed_at": "2023-09-19T03:25:35Z",
        "merged_at": "2023-09-19T03:25:35Z",
        "body": "This is a bit more idiomatic and I think easier to understand.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 501,
        "deletions": 410,
        "changed_files": 5,
        "created_at": "2023-09-18T14:42:33Z",
        "closed_at": "2023-09-18T22:04:14Z",
        "merged_at": "2023-09-18T22:04:14Z",
        "body": "This is the result of running:\r\n\r\n```\r\ndjango-admin makemessages -l en\r\n```",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 155,
        "changed_files": 2,
        "created_at": "2023-09-18T12:12:36Z",
        "closed_at": "2023-09-18T14:23:55Z",
        "merged_at": "2023-09-18T14:23:55Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1206,
        "deletions": 204,
        "changed_files": 17,
        "created_at": "2023-09-18T09:52:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Hello, first of all I apologize if this is not the appropriate place to have this discussion, if not please direct me to the correct place.\r\n\r\nThis is a try to start discussing the ability yo have asynchronous backends (e.g. psycopg3) and thus being able to use the ORM asynchronously. This proposal is backwards compatible.\r\n\r\nUse the `django.db.backends.postgresql_async` backend to try, do not use `runserver`, not all `Query` methods where migrated but these will work:\r\n\r\n- `prefetch_related`\r\n- `acount`\r\n- `afirst`\r\n- `alast`\r\n- `async for`\r\n\r\nThe approach was:\r\n- added foundations: `BaseDatabaseWrapperAsync`, `CursorWrapperAsync`, `CursorDebugWrapperAsync` - same interface but with async methods when needed;\r\n- migrated PostgresSQL backend to psycopg3 async interface;\r\n- migrate `Query` async methods to use the new async interface;\r\n- call `async_to_sync` on sync methods when using an async backend;\r\n- call `sync_to_async` on async methods when using a sync backend;\r\n\r\nDoes not investigated yet:\r\n\r\n- `runserver` shenanigans;\r\n- migrations;\r\n\r\nProblems:\r\n\r\n- is created one database connection for each operation done on a sync view when using an async backend. That is expected since database connections are \"bind\" to threads+coroutines. To fix this we will need to find a way to \"bind\" the connections to a theard+request, that should also facilitate the implementation of connection pools (https://github.com/django/django/pull/16881);\r\n- for the same motives of previous point, the connections are not closed. On async views the workaround, which is not always feasible, is closing the connection at the end of the view;\r\n- ?\r\n\r\nTy for your feedback.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-17T08:23:42Z",
        "closed_at": "2023-09-18T07:23:46Z",
        "merged_at": null,
        "body": "fixed:#34840 Correct value format for CharArrayModel in test_isnull_lookup_cast\r\n\r\nIn the test_isnull_lookup_cast method, the CharArrayModel instance was created with an incorrect value format for the 'field' attribute. This caused a PostgreSQL error when trying to create the instance. \r\n\r\nThis commit fixes the issue by using a list to represent an array and encloses the value properly in curly braces, ensuring the correct format for the 'field' attribute.\r\n\r\nResolves: #34840",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 95,
        "deletions": 12,
        "changed_files": 7,
        "created_at": "2023-09-16T11:32:18Z",
        "closed_at": "2023-10-06T10:58:18Z",
        "merged_at": null,
        "body": "Added formatted description to highlight different operations in makemigrations output.\r\n\r\n \r\nI wasn't sure whether to add color style to the output or not as it wasn't determined in the ticket discussions too. I have added it now. If you feel it's too noisy, I can remove it and we can have just text formatting. Plus, I think letting the `describe()` method return two parameters is a clean way to implement such a feature without too overengineering.\r\n\r\nHere are sample outputs:\r\n<a href=\"https://imgbb.com/\"><img src=\"https://i.ibb.co/FwNJj8f/Screenshot-from-2023-08-03-17-13-42.png\" alt=\"Screenshot-from-2023-08-03-17-13-42\" border=\"0\"></a>\r\n<a href=\"https://imgbb.com/\"><img src=\"https://i.ibb.co/PQWRW6Z/Screenshot-from-2023-08-03-17-12-59.png\" alt=\"Screenshot-from-2023-08-03-17-12-59\" border=\"0\"></a>",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-16T03:23:37Z",
        "closed_at": "2023-09-16T05:40:11Z",
        "merged_at": "2023-09-16T05:40:11Z",
        "body": "removed duplicate word",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 99,
        "deletions": 14,
        "changed_files": 7,
        "created_at": "2023-09-16T02:13:05Z",
        "closed_at": "2023-09-16T02:26:42Z",
        "merged_at": null,
        "body": "Added formatted description to highlight different operations in makemigrations output.\r\n\r\n \r\nI wasn't sure whether to add color style to the output or not as it wasn't determined in the ticket discussions too. I have added it now. If you feel it's too noisy, I can remove it and we can have just text formatting. Plus, I think letting the `describe()` method return two parameters is a clean way to implement such a feature without too overengineering.\r\n\r\nHere are sample outputs:\r\n<a href=\"https://imgbb.com/\"><img src=\"https://i.ibb.co/FwNJj8f/Screenshot-from-2023-08-03-17-13-42.png\" alt=\"Screenshot-from-2023-08-03-17-13-42\" border=\"0\"></a>\r\n<a href=\"https://imgbb.com/\"><img src=\"https://i.ibb.co/PQWRW6Z/Screenshot-from-2023-08-03-17-12-59.png\" alt=\"Screenshot-from-2023-08-03-17-12-59\" border=\"0\"></a>",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-15T21:53:56Z",
        "closed_at": "2023-09-16T04:54:34Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-15T12:18:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The redirect_field_name of redirect_to_login contains the URL to redirect to after login, not after logout.\r\n\r\nUse redirect_to_login and request.get_full_path() in example code in documenation that redirects to login. This will also include the query parameters in the url and does not hardcode the login url in the second example.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-15T11:46:21Z",
        "closed_at": "2023-09-16T04:57:38Z",
        "merged_at": "2023-09-16T04:57:38Z",
        "body": "`GenericRelation` is a reverse generic relationship so it's always homogeneous. Mentioning this as a restriction is confusing.\r\n\r\nNoticed while reviewing #17136.\r\n\r\nAfter:\r\n\r\n![image](https://github.com/django/django/assets/2865885/cb9b0a39-b5e0-4065-83e5-9d2f137aec16)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-09-15T10:57:28Z",
        "closed_at": "2023-09-16T18:52:05Z",
        "merged_at": "2023-09-16T18:52:05Z",
        "body": "Ref. https://code.djangoproject.com/ticket/34842",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-14T18:06:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34841",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-14T14:23:21Z",
        "closed_at": "2023-09-14T17:49:07Z",
        "merged_at": "2023-09-14T17:49:06Z",
        "body": "Follow up to 6c57c08ae52f86df843fccb5a3c1c6c45a10a26f.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-14T13:41:47Z",
        "closed_at": "2023-09-14T13:47:38Z",
        "merged_at": null,
        "body": "KeyError: '1' error",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2023-09-14T12:13:13Z",
        "closed_at": "2023-09-16T19:52:45Z",
        "merged_at": "2023-09-16T19:52:45Z",
        "body": "Fixes [#31556](https://code.djangoproject.com/ticket/31558)\r\n\r\nRefs #17092 ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-14T06:44:41Z",
        "closed_at": "2023-09-14T06:44:54Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-14T02:42:46Z",
        "closed_at": "2023-09-14T19:15:51Z",
        "merged_at": "2023-09-14T19:15:51Z",
        "body": "Added 'search' role on the admin changelist form for screen reader users.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-13T22:24:17Z",
        "closed_at": "2023-09-14T04:15:58Z",
        "merged_at": "2023-09-14T04:15:58Z",
        "body": "Main tag was changed to `<main>` to get the landmark main for accessibility.\r\n\r\nResult:\r\n<img width=\"1512\" alt=\"Capture d\u2019e\u0301cran 2023-09-14 a\u0300 00 04 43\" src=\"https://github.com/django/django/assets/17890338/1874bd83-adef-48ad-ab40-958df8d4173c\">\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-13T20:13:25Z",
        "closed_at": "2023-09-14T20:03:47Z",
        "merged_at": "2023-09-14T20:03:46Z",
        "body": "Ref https://code.djangoproject.com/ticket/34838",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 9,
        "changed_files": 5,
        "created_at": "2023-09-13T19:32:08Z",
        "closed_at": "2023-09-15T04:14:43Z",
        "merged_at": "2023-09-15T04:14:43Z",
        "body": "Header tag was changed to `<header>` get the landmark banner for accessibility.\r\n\r\n\r\nNote: I remove the `overflow: hidden`, here is why :\r\n\r\nWithout the overflow \u2b07\ufe0f \r\n<img width=\"1508\" alt=\"Capture d\u2019e\u0301cran 2023-09-13 a\u0300 22 37 16\" src=\"https://github.com/django/django/assets/17890338/cb2bbd61-bcff-4333-ac59-52a06886b3f7\">\r\n\r\n\r\nWith the overflow \u2b07\ufe0f \r\n<img width=\"757\" alt=\"Capture d\u2019e\u0301cran 2023-09-13 a\u0300 22 43 38\" src=\"https://github.com/django/django/assets/17890338/77f8992b-2466-4581-adf4-5d9579495182\">\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 77,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-09-13T16:20:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[Ticket 32263](https://code.djangoproject.com/ticket/32263)\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-09-13T14:53:26Z",
        "closed_at": "2023-09-13T19:28:16Z",
        "merged_at": "2023-09-13T19:28:16Z",
        "body": "ticket-34822",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 32,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-09-13T09:23:07Z",
        "closed_at": "2023-09-13T09:30:42Z",
        "merged_at": null,
        "body": "Added optional argument to `forms.MultipleChoiceField` and `forms.ModelMultipleChoiceField` to ignore invalid choices.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T08:48:49Z",
        "closed_at": "2023-09-13T11:49:01Z",
        "merged_at": "2023-09-13T11:49:01Z",
        "body": "Logger was changed in 55fec16aafed30a9daa06d6ecdf8ca3ad361279e.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3275,
        "deletions": 5192,
        "changed_files": 202,
        "created_at": "2023-09-13T08:41:47Z",
        "closed_at": "2023-09-24T17:17:52Z",
        "merged_at": null,
        "body": "Documented the aggregate default argument used to provide a default value to be returned when aggregate functions are used with an empty query-set. Feedback is welcome.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 111,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-09-13T08:16:29Z",
        "closed_at": "2023-09-13T08:48:05Z",
        "merged_at": "2023-09-13T08:48:05Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 23556,
        "deletions": 10324,
        "changed_files": 935,
        "created_at": "2023-09-13T05:19:43Z",
        "closed_at": "2023-09-13T07:40:44Z",
        "merged_at": null,
        "body": "Documented the use of aggregate default argument to provide a default value for aggregate functions, except Count. \r\nAny feedback welcome.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T11:49:03Z",
        "closed_at": "2023-09-14T10:30:12Z",
        "merged_at": "2023-09-14T10:30:12Z",
        "body": "This PR documents attribute `HttpRequest.cookies`.\r\n\r\n- only cookie-setting is currently documented as `HttpResponse.set_cookie()`, making cookies controllable but not observable\r\n- cookies are also concealed from the lower-level `HttpResponse.headers` and `HttpResponse.items()` interfaces (no `Set-Cookie`)\r\n- this makes it impossible to test the cookie logic of django applications with the current interface. This is particularly problematic when working with modern Single Page Applications which rely on `httpOnly` cookies for authentication.\r\n\r\nThis PR was solicited in IRC, and its content got a superficial review there. It does the following:\r\n\r\n- mention and describe `HttpResponse.cookies` in the \"Request and response objects\" page.\r\n- mention that `Set-Cookie` headers are omitted from `HttpResponse.headers`\r\n\r\nAs a side note, the current code is asymmetric: `HttpRequest` uses attribute `HttpRequest.COOKIES`, but `HttpResponse` uses `HttpResponse.cookies`. A perfectionist with deadlines might alias the existing `HttpResponse.cookies` to `HttpResponse.COOKIES` and document the latter \u2013 so both interfaces are symmetric and intuitive.\r\n\r\nComments welcome.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-09-12T10:05:27Z",
        "closed_at": "2023-09-12T10:48:09Z",
        "merged_at": "2023-09-12T10:48:09Z",
        "body": "This also uses enum.EnumType for Python 3.11+ as Python 3.11 renamed EnumMeta to EnumType. While the former is still available as an alias of the latter for now, let's prefer the canonical name for this.\r\n\r\nCheck out https://docs.python.org/3/library/enum.html#enum.EnumType",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-12T08:20:15Z",
        "closed_at": "2023-09-12T09:31:49Z",
        "merged_at": "2023-09-12T09:31:49Z",
        "body": "In Python 3.12 it is possible to check containment using member values, not just the members themselves.\r\n\r\nhttps://docs.python.org/3/library/enum.html#enum.EnumType.__contains__",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 78,
        "deletions": 58,
        "changed_files": 2,
        "created_at": "2023-09-12T03:37:00Z",
        "closed_at": "2023-09-12T03:38:11Z",
        "merged_at": null,
        "body": "I changed the rst file to md and made some changes to Readme \r\n\r\n1. Arranged them in a specific order\r\n2. Hided all the links with appropriate words 3.Added a banner ( I found it on the internet ) its not the official banner\r\n\r\nThank you !",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 437,
        "deletions": 3300,
        "changed_files": 123,
        "created_at": "2023-09-11T20:01:14Z",
        "closed_at": "2023-09-18T20:12:41Z",
        "merged_at": "2023-09-18T20:12:41Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-11T16:24:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This means that when using a formatter inherited `django.utils.log.ServerFormatter` to log responses, in addition to logging the status_code, you can also log the body (`response.body`) or some other attribute of a `Response` object.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1085777,
        "deletions": 0,
        "changed_files": 4056,
        "created_at": "2023-09-11T09:37:16Z",
        "closed_at": "2023-09-11T09:37:52Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T07:37:10Z",
        "closed_at": "2023-09-11T07:37:23Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-10T17:44:49Z",
        "closed_at": "2023-09-25T09:10:26Z",
        "merged_at": "2023-09-25T09:10:26Z",
        "body": "https://code.djangoproject.com/ticket/34825\r\n\r\nI'm new to poking around with the test framework but afaict the workers shouldn't have been creating the \"other_n.sqlite3\" databases. It appears to happen in this method when it tries to clone from nonexistent \"other_n.sqlite3\" files because `sqlite3.connect()`'s default mode is `rwc` - read, write & create.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-10T08:29:33Z",
        "closed_at": "2023-09-10T09:03:26Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/33647",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 49,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-09T13:25:25Z",
        "closed_at": "2023-09-09T20:17:21Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34820",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-09T12:15:06Z",
        "closed_at": "2023-09-10T08:07:22Z",
        "merged_at": "2023-09-10T08:07:22Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-09T06:48:02Z",
        "closed_at": "2023-09-11T07:31:35Z",
        "merged_at": "2023-09-11T07:31:35Z",
        "body": "Change the from_fields and to_fields of ForeignObject\u2019s existing migration records to tuple types",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-09-08T23:30:39Z",
        "closed_at": "2023-09-22T09:46:37Z",
        "merged_at": "2023-09-22T09:46:37Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-09-08T08:00:21Z",
        "closed_at": "2023-09-11T11:04:33Z",
        "merged_at": "2023-09-11T11:04:33Z",
        "body": "ticket-34821, check out [logs](https://djangoci.com/job/main-random/database=mysql,label=focal,python=python3.11/).\r\n\r\nRegression in 6b965c600054f970bdf94017ecf2e0e6e0a4326b.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-08T05:38:51Z",
        "closed_at": "2023-09-08T06:46:32Z",
        "merged_at": null,
        "body": "\u2026 execute migrate to report an error\r\n\r\nIf the models.ForeignObject attribute is used, changing null or blank to generate a new migration record will result in an error message when executing the migrate again\r\n\r\n```\r\n  File \"/Users/donghao/test/test_migations/manage.py\", line 22, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/core/management/__init__.py\", line 436, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/core/management/base.py\", line 412, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/core/management/base.py\", line 458, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/core/management/base.py\", line 106, in wrapper\r\n    res = handle_func(*args, **kwargs)\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/core/management/commands/migrate.py\", line 356, in handle\r\n    post_migrate_state = executor.migrate(\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/migrations/executor.py\", line 135, in migrate\r\n    state = self._migrate_all_forwards(\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/migrations/executor.py\", line 167, in _migrate_all_forwards\r\n    state = self.apply_migration(\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/migrations/executor.py\", line 252, in apply_migration\r\n    state = migration.apply(state, schema_editor)\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/migrations/migration.py\", line 132, in apply\r\n    operation.database_forwards(\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/migrations/operations/fields.py\", line 235, in database_forwards\r\n    schema_editor.alter_field(from_model, from_field, to_field)\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/backends/base/schema.py\", line 785, in alter_field\r\n    if not self._field_should_be_altered(old_field, new_field):\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/backends/base/schema.py\", line 1530, in _field_should_be_altered\r\n    return self.quote_name(old_field.column) != self.quote_name(\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/backends/base/schema.py\", line 204, in quote_name\r\n    return self.connection.ops.quote_name(name)\r\n  File \"/Users/donghao/.virtualenvs/simpleui/lib/python3.9/site-packages/django/db/backends/mysql/operations.py\", line 184, in quote_name\r\n    if name.startswith(\"`\") and name.endswith(\"`\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\nA pre judgment has been added here to avoid this issue\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-09-07T14:20:06Z",
        "closed_at": "2023-09-08T06:47:12Z",
        "merged_at": "2023-09-08T06:47:12Z",
        "body": "Following the suggestion in [ticket/34816](https://code.djangoproject.com/ticket/34816), changed the logic while accessing a GenericForeignKey to **skip** checking PK match if ContentType IDs do not match.\r\n\r\nTest function is placed in `tests/generic_relations_regress.py`.\r\n\r\nUnit test output before the patch:\r\n```\r\nTesting against Django installed in '/Users/oguzhanakan/Desktop/oakan/django/django' with up to 8 processes\r\nFound 27 test(s).\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\n..........................E\r\n======================================================================\r\nERROR: test_ticket_34816_generic_fk_crash (generic_relations_regress.tests.GenericRelationTests.test_ticket_34816_generic_fk_crash)\r\nEnsure pk type change is handled when using GenericForeignKey.\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"../django/django/db/models/fields/__init__.py\", line 2135, in to_python\r\n    return int(value)\r\n           ^^^^^^^^^^\r\nValueError: invalid literal for int() with base 10: 'some test'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"../tests/generic_relations_regress/tests.py\", line 351, in test_ticket_34816_generic_fk_crash\r\n    self.assertEqual(type(charlink.content_object), Board)\r\n                          ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"../django/contrib/contenttypes/fields.py\", line 245, in __get__\r\n    pk_match = rel_obj._meta.pk.to_python(pk_val) == rel_obj.pk\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"../django/db/models/fields/__init__.py\", line 2137, in to_python\r\n    raise exceptions.ValidationError(\r\ndjango.core.exceptions.ValidationError: ['\u201csome test\u201d value must be an integer.']\r\n```\r\n\r\nEverything seems to be working, thanks to [rlaager](https://github.com/rlaager) for the suggestion and @felixxm for the test function.\r\n\r\nP.S. This is my first contribution so please let me know if I missed anything. Thanks-",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-07T13:37:02Z",
        "closed_at": "2023-09-07T13:50:50Z",
        "merged_at": null,
        "body": "Added myself as a contributor.\r\n\r\nWill submit a patch for https://code.djangoproject.com/ticket/34816 if I could be added to the list. \r\n\r\nThanks in advance!",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-07T12:20:59Z",
        "closed_at": "2023-09-07T16:54:34Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-07T08:28:02Z",
        "closed_at": "2023-09-07T08:51:25Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-06T20:05:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 14,
        "changed_files": 6,
        "created_at": "2023-09-05T08:07:58Z",
        "closed_at": "2023-09-05T08:52:17Z",
        "merged_at": "2023-09-05T08:52:17Z",
        "body": "https://github.com/actions/checkout/releases/tag/v4.0.0",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-04T23:12:43Z",
        "closed_at": "2023-09-05T03:15:14Z",
        "merged_at": null,
        "body": "Relatively new to Django (the app, not the guitarist).\r\n\r\nFor me was getting `object has no attribute 'assertQuerySetEqual'` error when subclassing `TestCase`.\r\n\r\nCame across [TransactionTestCase.assertQuerysetEqual](https://docs.djangoproject.com/en/4.1/topics/testing/tools/#django.test.TransactionTestCase.assertQuerysetEqual) in the docs.\r\n\r\nHopefully this isn't just annoying spam.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-04T18:33:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "After insourcing external references (jquery / bootstrap in this case), I forgot to remove the integrity-attributes and by using ManifestStaticFilesStorage the integrity got broken, the browsers got upset and rendering was broken. When googleing for the errors I received, I could not find a direct match in the reference, hence the ticket #34813 and this pull request.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-04T16:39:14Z",
        "closed_at": "2023-09-07T20:45:13Z",
        "merged_at": "2023-09-07T20:45:13Z",
        "body": "Improve code coverage calculation for django-admin commands.\r\n\r\nticket-34810\r\n\r\n#### Demo ####\r\n```sh\r\ncoverage run ./runtests.py\r\ncoverage combine\r\ncoverage html\r\n```\r\nBefore, this was 12%.\r\n<img width=\"1351\" alt=\"templates-coverage\" src=\"https://github.com/django/django/assets/38668450/3b7ad73f-d118-4dd4-af66-f66edd1fe1e7\">\r\n\r\n\r\n\r\n#### Resources ####\r\n[1] https://coverage.readthedocs.io/en/stable/subprocess.html\r\nConfiguration for measuring test coverage on subprocesses: suggests using sitecustomize.py and being defensive in case coverage is not installed. Any folder on the python path can be used, and `tests` meets that criterion.\r\n[2] https://github.com/nedbat/coveragepy/issues/1093#issuecomment-769480418\r\nThis coverage.py issue thread describes how to cope with subprocesses run from different working directories: the trick suggested by Ned Batchelder is to use environment variable-substitution in the coveragerc file.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 7,
        "changed_files": 5,
        "created_at": "2023-09-04T16:14:14Z",
        "closed_at": "2023-09-04T20:57:16Z",
        "merged_at": "2023-09-04T20:57:16Z",
        "body": "`docutils.io` [resolved](https://sourceforge.net/p/docutils/code/8228/) their deprecation warning for `'u'` mode in 2018.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-04T09:27:00Z",
        "closed_at": "2023-09-04T12:58:34Z",
        "merged_at": "2023-09-04T12:58:34Z",
        "body": "ticket-34814",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-04T08:48:54Z",
        "closed_at": "2023-09-04T11:56:50Z",
        "merged_at": "2023-09-04T11:56:50Z",
        "body": "Some third-party applications, e.g. `django-filter`, already define their own `ChoiceIterator`, so renaming this `BaseChoiceIterator` will be a better fit and avoid any potential confusion. _(It also makes more sense because this doesn't provide any implementation, but is a helper base class for things to extend when they want to avoid premature normalization.)_\r\n\r\nSee https://github.com/carltongibson/django-filter/pull/1607.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-03T17:06:47Z",
        "closed_at": "2023-09-04T17:50:55Z",
        "merged_at": "2023-09-04T17:50:55Z",
        "body": "Hi. Django Authors.\r\n\r\nI'm a contributor to the following ticket.\u3000\r\nI would like to have me added to AUTHORS.\r\n\r\nhttps://code.djangoproject.com/ticket/34788\r\n\r\nI have also just signed and sent you the Individual Contributor License Agreement.\r\n\r\nPlease feel free to merge it.\r\nThanks.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-09-03T12:32:51Z",
        "closed_at": "2023-09-03T14:27:04Z",
        "merged_at": null,
        "body": "Hello everyone.\r\n\r\nAs described in [the tracker](https://code.djangoproject.com/ticket/34812), Django users may get slightly confusing errors about circular imports when they try to `include()` URLConf modules that lack the `urlpatterns` attribute.\r\n\r\nThis PR modifies the `django.urls.include()` function to check if the `arg` argument is a module without a `urlpatterns` attribute, and raises `ImproperlyConfigured` if that is the case.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 37,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-09-03T02:49:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[ticket_34806](https://code.djangoproject.com/ticket/34806)\r\n\r\nI have added a MemoryError handling to ensure that it doesn't crash and logged the issue to let the user know.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 99,
        "deletions": 44,
        "changed_files": 10,
        "created_at": "2023-09-01T21:21:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Updated query selectors to targe source options which will prevent duplication in \"Chosen\" column.\r\nTicket Link: https://code.djangoproject.com/ticket/34789#comment:8\r\n\r\n<img width=\"602\" alt=\"Screenshot 2023-09-02 at 2 46 09 AM\" src=\"https://github.com/django/django/assets/20266220/75891dc8-377a-4290-8925-92a7c3e10fe7\">\r\n<img width=\"1354\" alt=\"Screenshot 2023-09-02 at 2 46 29 AM\" src=\"https://github.com/django/django/assets/20266220/e3964a06-f405-4752-95a7-02b6fad24f2f\">\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-01T17:29:39Z",
        "closed_at": "2023-09-03T08:11:15Z",
        "merged_at": "2023-09-03T08:11:15Z",
        "body": "Check out [comment](https://code.djangoproject.com/ticket/34768#comment:9).",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2023-09-01T02:20:23Z",
        "closed_at": "2023-09-01T09:25:14Z",
        "merged_at": "2023-09-01T09:25:14Z",
        "body": "fix issue [#34803](https://code.djangoproject.com/ticket/34803)\r\n\r\nadding a new model to mock the minimal reproducible case in [thread discussion](https://code.djangoproject.com/ticket/34803)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-09-01T00:17:56Z",
        "closed_at": "2023-09-01T12:28:14Z",
        "merged_at": "2023-09-01T12:28:14Z",
        "body": "ticket-34778\r\n\r\n[Forum discussion](https://forum.djangoproject.com/t/check-for-name-clashes-in-startproject-without-importing-modules/23091)\r\n\r\nAvoid side effects from importing modules by using `find_spec()`. That method might still import parent modules if given a dotted path, but startproject checks for dotted paths just a bit earlier than this block.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-31T20:06:11Z",
        "closed_at": "2023-09-01T03:44:38Z",
        "merged_at": "2023-09-01T03:44:38Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 101,
        "deletions": 31,
        "changed_files": 9,
        "created_at": "2023-08-31T12:11:20Z",
        "closed_at": "2023-09-14T14:11:08Z",
        "merged_at": "2023-09-14T14:11:08Z",
        "body": "This is a follow up of PR #16943 ([ticket-31262](https://code.djangoproject.com/ticket/31262)). Most of the ground work was done in that PR, this branch removes the system check and adds some tests to ensure the feature works as expected.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-31T10:41:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 9
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-31T07:59:54Z",
        "closed_at": "2023-08-31T08:27:33Z",
        "merged_at": "2023-08-31T08:27:33Z",
        "body": "options.test_name_patterns is always defined.\r\n\r\nFollow up to ec0ff406311de88f4e2a135d784363424fe602aa.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 7,
        "changed_files": 6,
        "created_at": "2023-08-31T03:05:08Z",
        "closed_at": "2023-09-01T09:55:28Z",
        "merged_at": "2023-09-01T09:55:28Z",
        "body": "Fixed #34768 -- Added platform check before installing colorama.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-08-31T02:39:58Z",
        "closed_at": "2023-08-31T02:50:19Z",
        "merged_at": null,
        "body": "colorama will not be installed if the user is not on Windows.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-31T01:23:51Z",
        "closed_at": "2023-08-31T04:07:05Z",
        "merged_at": null,
        "body": "errors in internationalization  \"\u4f59\" should \"\u4e0e\u201c",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-30T09:35:00Z",
        "closed_at": "2023-08-30T10:22:18Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34804\r\n\r\nfix: picking default algorithm value from settings instead of hardcoded value.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 16,
        "changed_files": 3,
        "created_at": "2023-08-29T15:11:16Z",
        "closed_at": "2023-09-07T11:59:34Z",
        "merged_at": "2023-09-07T11:59:34Z",
        "body": "Changed the cache name used for singly related objects to be the to_attr parameter passed to a Prefetch object. This fixes issues with checking if values have already been fetched in cases where the Field already has some prefetched value, but not for the same model attr.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 824,
        "deletions": 1067,
        "changed_files": 4,
        "created_at": "2023-08-29T04:41:09Z",
        "closed_at": "2023-09-18T06:54:45Z",
        "merged_at": "2023-09-18T06:54:45Z",
        "body": "ticket-34560\r\n\r\nMerge just before the future freeze on September 18, 2023.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-28T18:34:54Z",
        "closed_at": "2023-08-30T12:17:47Z",
        "merged_at": "2023-08-30T12:17:47Z",
        "body": "# Problem\r\n\r\nWe use `inspectdb` to generate models for a legacy MySQL database whose tables include cross-schema foreign keys (the MySQL instance uses schemas to namespace tables, but they all belong to the same system).\r\n\r\nA change to the inspectdb command that was released in Django 4.1 broke generating models for these tables: [\u200bhttps://github.com/django/django/commit/aaf9b558583d9bb75a0c9d53b135dc8c1b75b6a2#diff-e4bb601306bc4dba91357e4235d394d008c9e582f5b4d146b9c93c80924a75d4R124](https://github.com/django/django/commit/aaf9b558583d9bb75a0c9d53b135dc8c1b75b6a2#diff-e4bb601306bc4dba91357e4235d394d008c9e582f5b4d146b9c93c80924a75d4R124)\r\n\r\nMore details in the ticket: [#34799](https://code.djangoproject.com/ticket/34799#ticket)\r\n\r\n# Solution\r\n\r\nModify the MySQL backend's introspection code to ignore cross-schema foreign keys. I've added a test that runs when the DB connection is on MySQL. Example settings and docker-compose here:\r\nhttps://gist.github.com/johnjameswhitman/f500d385486b529fa4d1616a6cc9175d",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 157,
        "deletions": 31,
        "changed_files": 5,
        "created_at": "2023-08-27T15:13:54Z",
        "closed_at": "2023-10-03T09:52:23Z",
        "merged_at": "2023-10-03T09:52:23Z",
        "body": "This PR adds the feature of showing the haystack on failure for these methods. \r\n\r\n  - django.test.SimpleTestCase.assertContains\r\n  - django.test.SimpleTestCase.assertNotContains\r\n  - django.test.SimpleTestCase.assertInHtml\r\n\r\nFixes: [ticket](https://code.djangoproject.com/ticket/34657)",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-08-26T14:40:07Z",
        "closed_at": "2023-08-28T11:26:39Z",
        "merged_at": "2023-08-28T11:26:39Z",
        "body": "@jp-larose can you confirm whether this change would fix the issue as described in your ticket? https://code.djangoproject.com/ticket/34787 :pray: ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-26T08:18:37Z",
        "closed_at": "2023-08-26T08:22:23Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 49,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-08-26T04:46:10Z",
        "closed_at": "2023-08-26T06:19:40Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 48,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-08-25T19:19:17Z",
        "closed_at": "2023-09-08T03:53:38Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/26836",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-25T17:42:05Z",
        "closed_at": "2023-08-25T19:06:02Z",
        "merged_at": null,
        "body": "from django.db import models\r\nfrom datetime import date\r\n\r\nclass User(models.Model):\r\n    username = models.CharField(max_length=50)\r\n    birthdate = models.DateField()\r\n\r\n    def calculate_age(self):\r\n        \"\"\"\r\n        Calculate the age of the user based on the birthdate.\r\n\r\n        Returns:\r\n            int: The calculated age of the user.\r\n\r\n        Example:\r\n            >>> user = User.objects.get(id=1)\r\n            >>> user.calculate_age()\r\n            30\r\n\r\n        This method calculates the age of the user by taking the difference between the current\r\n        year and the birth year. It considers the birth month and day to adjust the age if the\r\n        birthdate hasn't occurred yet this year.\r\n\r\n        Returns the calculated age as an integer.\r\n        \"\"\"\r\n        today = date.today()\r\n        age = today.year - self.birthdate.year - ((today.month, today.day) < (self.birthdate.month, self.birthdate.day))\r\n        return age\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-08-25T08:25:26Z",
        "closed_at": "2023-08-25T09:24:21Z",
        "merged_at": "2023-08-25T09:24:21Z",
        "body": "Follow up to 7cd187a5ba58d7769039f487faeb9a5a2ff05540.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 18,
        "changed_files": 1,
        "created_at": "2023-08-25T07:33:50Z",
        "closed_at": "2023-08-25T07:54:17Z",
        "merged_at": null,
        "body": "In file: expressions.py, class: `Combinable`, there is six special methods (`__xor__`, `__and__`, `__or__`,`__rxor__`, `__rand__`, `__ror__`, etc.,) that raises a [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError). If a special method supporting a binary operation is not implemented it should return [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented). On the other hand, `NotImplementedError` should be raised from abstract methods inside user defined base classes to indicate that derived classes should override those methods. I suggested that the special methods should return `NotImplemented` instead of raising an exception. An example of how `NotImplemented` helps the interpreter support a binary operation is [here](https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations). \r\n\r\nSponsorship and Support:\r\n\r\nThis work is done by the security researchers from OpenRefactory and is supported by the Open Source Security Foundation (OpenSSF)(https://openssf.org/): Project Alpha-Omega(https://alpha-omega.dev/). Alpha-Omega is a project partnering with open source software project maintainers to systematically find new, as-yet-undiscovered vulnerabilities in open source code - and get them fixed \u2013 to improve global software supply chain security.\r\n\r\nThe bug is found by running the Intelligent Code Repair (iCR) tool by OpenRefactory and then manually triaging the results.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 12,
        "changed_files": 7,
        "created_at": "2023-08-25T04:56:54Z",
        "closed_at": "2023-08-25T05:37:28Z",
        "merged_at": "2023-08-25T05:37:28Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-25T03:26:11Z",
        "closed_at": "2023-08-25T04:16:19Z",
        "merged_at": null,
        "body": "Update the URL converter `UUIDConverter` to handle more valid uuid formats (hex, urn, and int)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-08-24T22:11:56Z",
        "closed_at": "2023-10-11T10:45:07Z",
        "merged_at": "2023-10-11T10:45:07Z",
        "body": "Fix for [ticket 12241](https://code.djangoproject.com/ticket/12241) to ensure the query string is preserved when clicking \"Save and add another\" or \"Save and continue\"\r\n\r\nAdded tests for query string with changelist filters\r\n\r\n_Based on @matthewn's patch [pr/16206](https://github.com/django/django/pull/16206)_",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-08-24T10:21:09Z",
        "closed_at": "2023-08-25T04:39:35Z",
        "merged_at": "2023-08-25T04:39:35Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-24T07:54:07Z",
        "closed_at": "2023-08-24T08:31:52Z",
        "merged_at": "2023-08-24T08:31:52Z",
        "body": "All `AsyncRequestFactory` methods are still [synchronous callables](https://docs.djangoproject.com/en/4.2/topics/testing/advanced/#asyncrequestfactory).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-08-24T04:16:54Z",
        "closed_at": "2023-08-24T04:17:35Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-23T19:22:40Z",
        "closed_at": "2023-08-24T03:19:53Z",
        "merged_at": "2023-08-24T03:19:53Z",
        "body": "Follow up to ad6bb20557f5c87de26aeb3afb061af942a8cc17.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-23T16:40:01Z",
        "closed_at": "2023-08-24T03:23:01Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34795#ticket",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-23T15:32:24Z",
        "closed_at": "2023-08-24T09:08:34Z",
        "merged_at": null,
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 96,
        "deletions": 8,
        "changed_files": 7,
        "created_at": "2023-08-23T15:27:24Z",
        "closed_at": "2023-08-29T03:52:29Z",
        "merged_at": "2023-08-29T03:52:29Z",
        "body": null,
        "comments": 7
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 16,
        "changed_files": 2,
        "created_at": "2023-08-23T12:03:41Z",
        "closed_at": "2023-09-13T07:12:55Z",
        "merged_at": "2023-09-13T07:12:55Z",
        "body": "This series of commits updates to more modern enum usage available in newer versions of Python.\r\nIt also makes clearer when backward compatible shims can be removed by use of the `PY311`, etc. constants.\r\n\r\nA small \"bug\" in the handling of `do_not_call_in_templates` is also fixed for Python 3.11+.\r\n\r\nPlease see each commit in isolation. Commit messages provide context.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 20,
        "changed_files": 1,
        "created_at": "2023-08-23T04:45:34Z",
        "closed_at": "2023-08-23T04:50:01Z",
        "merged_at": null,
        "body": "Implementing 'assertDictEqual' method checks if the dictionaries have the same keys and values, making it more efficient and less error-prone when changes are made to the default settings. Improving readability.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2023-08-22T20:43:35Z",
        "closed_at": "2023-08-25T19:27:22Z",
        "merged_at": "2023-08-25T19:27:22Z",
        "body": "ticket-34709\r\n\r\nThanks Eki Xu for the report.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-08-22T17:28:27Z",
        "closed_at": "2023-08-22T20:29:12Z",
        "merged_at": null,
        "body": "Fixed the styling of `<input>` elements that have the `type=text` attribute removed by HTML minifiers (for example, [minify-html](https://github.com/wilsonzlin/minify-html)). The problem occurs because the current CSS selectors do not handle the missing `type` attribute in the same way as `type=text`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 77,
        "deletions": 58,
        "changed_files": 1,
        "created_at": "2023-08-22T16:49:50Z",
        "closed_at": "2023-08-23T06:05:15Z",
        "merged_at": "2023-08-23T06:05:15Z",
        "body": "related to https://github.com/django/django/pull/17168#discussion_r1299188864\r\n\r\nmove test client follow redirect logic to ClientMixin so that it can be used as well for the AsyncClient\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 18,
        "changed_files": 11,
        "created_at": "2023-08-22T10:05:52Z",
        "closed_at": "2023-08-22T10:42:57Z",
        "merged_at": "2023-08-22T10:42:57Z",
        "body": "Some statements in the test cases contain trailing commas, which turns them into tuple expressions even if they were meant to be only a regular expression statements:\r\n\r\n```python\r\nUserAttributeSimilarityValidator().validate(\"testclient\", user=user),\r\n```\r\nvs.\r\n```python\r\nUserAttributeSimilarityValidator().validate(\"testclient\", user=user)\r\n```\r\n\r\nI'd consider those trivial typo fixes.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-21T23:18:08Z",
        "closed_at": "2023-08-22T03:31:57Z",
        "merged_at": "2023-08-22T03:31:57Z",
        "body": "Fixed [ticket #34788](https://code.djangoproject.com/ticket/34788).\r\ncorrect NUMBER_GROUPING in Japan.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-21T14:58:19Z",
        "closed_at": "2023-08-21T15:30:24Z",
        "merged_at": null,
        "body": "Use the difference set of list_display and list_editable as link",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 18,
        "changed_files": 4,
        "created_at": "2023-08-21T12:04:32Z",
        "closed_at": "2023-08-23T07:09:23Z",
        "merged_at": "2023-08-23T07:09:23Z",
        "body": "- `backends.sqlite.tests.ThreadSharing.test_database_sharing_in_threads`\r\n- `backends.tests.ThreadTests.test_default_connection_thread_local:` on SQLite, `close()` doesn't explicitly close in-memory connections.\r\n- `servers.tests.LiveServerInMemoryDatabaseLockTest`\r\n- `test_runner.tests.SQLiteInMemoryTestDbs.test_transaction_support`\r\n\r\nCheck out https://github.com/python/cpython/pull/108015.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-21T09:22:08Z",
        "closed_at": "2023-08-24T01:24:43Z",
        "merged_at": "2023-08-24T01:24:43Z",
        "body": "In the formset validation official example, we decrease the computational complexity from O(n^2) to O(n log n) simply by using a set instead of a list.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-21T09:15:44Z",
        "closed_at": "2023-08-21T09:17:17Z",
        "merged_at": null,
        "body": "Simply by using a set instead of a list, we decrease the computational complexity of the official example from O(n^2) to O(n log n). Let's promote good programming practices :-)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-20T15:59:52Z",
        "closed_at": "2023-08-20T19:53:41Z",
        "merged_at": "2023-08-20T19:53:40Z",
        "body": "Empty string should be considered an in-memory SQLite database:\r\n```bash\r\n$ /runtests.py backends.sqlite.test_creation.TestDbSignatureTests.test_get_test_db_clone_settings_not_supported\r\nTesting against Django installed in '/django/django' with up to 8 processes\r\nFound 1 test(s).\r\nSystem check identified no issues (0 silenced).\r\nF\r\n======================================================================\r\nFAIL: test_get_test_db_clone_settings_not_supported (backends.sqlite.test_creation.TestDbSignatureTests.test_get_test_db_clone_settings_not_supported)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/cpython/Lib/unittest/mock.py\", line 1417, in patched\r\n    return func(*newargs, **newkeywargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/django/tests/backends/sqlite/test_creation.py\", line 42, in test_get_test_db_clone_settings_not_supported\r\n    with self.assertRaisesMessage(NotSupportedError, msg):\r\n  File \"/cpython/Lib/contextlib.py\", line 148, in __exit__\r\n    next(self.gen)\r\n  File \"/django/django/test/testcases.py\", line 739, in _assert_raises_or_warns_cm\r\n    with func(expected_exception) as cm:\r\nAssertionError: NotSupportedError not raised\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.003s\r\n\r\nFAILED (failures=1)\r\n```\r\n\r\nThis only fails when running in isolation, because when creating a test database, an empty string in the connection name is changed to `file:memorydb_default?mode=memory&cache=shared`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-20T13:23:01Z",
        "closed_at": "2023-08-20T14:09:08Z",
        "merged_at": "2023-08-20T14:09:08Z",
        "body": "`SimpleLazyObjectPickleTestCase` executes database queries so it must inherit from `django.test.TestCase`:\r\n\r\n```bash\r\n$ ./runtests.py utils_tests.test_lazyobject\r\n\r\nTesting against Django installed in '/django/django' with up to 8 processes\r\nFound 69 test(s).\r\nSystem check identified no issues (0 silenced).\r\n...................................................................E.\r\n======================================================================\r\nERROR: test_pickle_model (utils_tests.test_lazyobject.SimpleLazyObjectPickleTestCase)\r\nTest on an actual model, based on the report in #25426.\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/django/django/db/backends/utils.py\", line 89, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/django/django/db/backends/sqlite3/base.py\", line 328, in execute\r\n    return super().execute(query, params)\r\nsqlite3.OperationalError: no such table: utils_tests_category\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.10/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/usr/local/lib/python3.10/unittest/case.py\", line 591, in run\r\n    self._callTestMethod(testMethod)\r\n  File \"/usr/local/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\r\n    method()\r\n  File \"/django/tests/utils_tests/test_lazyobject.py\", line 492, in test_pickle_model\r\n    category = Category.objects.create(name=\"thing1\")\r\n  File \"/django/django/db/models/manager.py\", line 87, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/django/django/db/models/query.py\", line 676, in create\r\n    obj.save(force_insert=True, using=self.db)\r\n  File \"/django/django/db/models/base.py\", line 814, in save\r\n    self.save_base(\r\n  File \"/django/django/db/models/base.py\", line 901, in save_base\r\n    updated = self._save_table(\r\n  File \"/django/django/db/models/base.py\", line 1058, in _save_table\r\n    results = self._do_insert(\r\n  File \"/django/django/db/models/base.py\", line 1099, in _do_insert\r\n    return manager._insert(\r\n  File \"/django/django/db/models/manager.py\", line 87, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/django/django/db/models/query.py\", line 1842, in _insert\r\n    return query.get_compiler(using=using).execute_sql(returning_fields)\r\n  File \"/django/django/db/models/sql/compiler.py\", line 1822, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/django/django/db/backends/utils.py\", line 67, in execute\r\n    return self._execute_with_wrappers(\r\n  File \"/django/django/db/backends/utils.py\", line 80, in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n  File \"/django/django/db/backends/utils.py\", line 84, in _execute\r\n    with self.db.wrap_database_errors:\r\n  File \"/django/django/db/utils.py\", line 91, in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n  File \"/django/django/db/backends/utils.py\", line 89, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/django/django/db/backends/sqlite3/base.py\", line 328, in execute\r\n    return super().execute(query, params)\r\ndjango.db.utils.OperationalError: no such table: utils_tests_category\r\n\r\n----------------------------------------------------------------------\r\nRan 69 tests in 0.025s\r\n\r\nFAILED (errors=1)\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-08-18T16:56:06Z",
        "closed_at": "2023-09-11T06:10:40Z",
        "merged_at": "2023-09-11T06:10:40Z",
        "body": "Refactored Django File.open to support the full signature of Python builtin open",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-18T11:48:27Z",
        "closed_at": "2023-08-23T01:43:18Z",
        "merged_at": "2023-08-23T01:43:18Z",
        "body": "Ticket is [https://code.djangoproject.com/ticket/34781](https://code.djangoproject.com/ticket/34781).\r\n\r\nI've not touched the `django.request` equivalent, though I _presume_ that **always** receives an `HttpRequest` subclass instance, in the same way I am _presuming_ that the `.request` under `django.server` is **always** the [raw socket](https://github.com/python/cpython/blob/f51f0466c07eabc6177c2f64f70c952dada050e8/Lib/socketserver.py#L756) ... \ud83e\udd37\r\n\r\n--------\r\n\r\nOf course, if anyone can figure out a way to get the _actual_ request, that'd be a much better win ;)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 2,
        "changed_files": 5,
        "created_at": "2023-08-18T10:18:12Z",
        "closed_at": "2023-08-31T05:14:07Z",
        "merged_at": "2023-08-31T05:14:07Z",
        "body": "[Ticket #34547](https://code.djangoproject.com/ticket/34547)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 133,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-08-18T07:24:56Z",
        "closed_at": "2023-08-18T16:11:25Z",
        "merged_at": "2023-08-18T16:11:25Z",
        "body": "Thanks Petr Dlouh\u00fd for the report.\r\n\r\nBug in 32940d390a00a30a6409282d314d617667892841.\r\n\r\nticket-34773",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 79,
        "deletions": 59,
        "changed_files": 13,
        "created_at": "2023-08-16T21:13:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 18
    },
    {
        "merged": true,
        "additions": 252,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-08-16T19:14:38Z",
        "closed_at": "2023-08-30T04:50:18Z",
        "merged_at": "2023-08-30T04:50:18Z",
        "body": "Fix for https://code.djangoproject.com/ticket/34757\r\n\r\nDid my best to factor the \"follow redirect\" logic and prevent code duplication.\r\n\r\nCheers",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-08-16T18:20:22Z",
        "closed_at": "2023-08-22T05:56:04Z",
        "merged_at": "2023-08-22T05:56:03Z",
        "body": "While reviewing PR #16943, I had to debug an issue with model field's choices being callables and how that was generating [endless migrations](https://github.com/django/django/pull/16943#issuecomment-1673899018) for the field/model that declared them. In that effort, I realized we could have a few extra tests to ensure the behavior in `main` is respected in the referenced PR.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 205,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-08-16T16:56:03Z",
        "closed_at": "2023-08-18T07:23:50Z",
        "merged_at": null,
        "body": "Hope many people dream for websockets in django, and after all async changes it is very close to have it. Here propesed implementation of websockets protocol I use in my pet project. It is very small itself, and not includes docs tests and test utils (if you like general approach, I will add it)\r\n\r\nHow it works: two ways to use. Easy one, websocket view:\r\n\r\n```python\r\nfrom django.core.handlers import websocket\r\n\r\nasync def websocket_view(request, ws: websocket.WebSocket):\r\n    while True:\r\n        data = await ws.receive_text()\r\n        await ws.send_text(data + '_pong')\r\n```\r\n        \r\nMore \"expert\" way, that gives possibility to not accept connection, select sub protocol, check authorization and so on:\r\n\r\n```python\r\ndef websocket_view(request):\r\n    if not request.user.is_authenticated:\r\n        return websocket.HttpResponseWSClose(\r\n            close_code=42, reason='login required')\r\n    return websocket.HttpResponseUpgrade(\r\n        handler=handler, sub_protocol=request.sub_protocols[0])\r\n\r\n\r\nasync def handler(request, ws: websocket.WebSocket):\r\n    while True:\r\n        data = await ws.receive_text()\r\n        await ws.send_text(data + '_pong')\r\n```\r\n\r\nI will be happy to recieve any feedback.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 0,
        "changed_files": 8,
        "created_at": "2023-08-16T06:57:36Z",
        "closed_at": "2023-08-16T09:53:16Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-08-15T19:58:52Z",
        "closed_at": "2023-08-19T09:23:04Z",
        "merged_at": "2023-08-19T09:23:04Z",
        "body": "By using `select_related(None)` instead of `select_related()`, the unnecessary joins are avoided.\r\nNote that the current tests already covers the change, when the field is not `null=True`.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 2,
        "changed_files": 7,
        "created_at": "2023-08-12T10:31:43Z",
        "closed_at": "2023-08-13T04:56:41Z",
        "merged_at": "2023-08-13T04:56:41Z",
        "body": "### Summary:\r\n- Added Uyghur (ug) language support to Django.\r\n\r\n### Changes:\r\n1. Introduced Uyghur in the list of supported languages.\r\n2. Added Uyghur(ug) to the list of BiDi languages.\r\n3. Added date and time formats specific to the Uyghur language.\r\n4. Added \"Uyghur\" and \"ug\" to the documentation's spelling wordlist.\r\n5. Added Uyghur language support entry to 5.0 release notes.\r\n\r\n### Testing:\r\n1. Successfully executed [Django's test suite](https://docs.djangoproject.com/en/4.2/intro/contributing/#running-django-s-test-suite-for-the-first-time) locally.\r\n2. Initialized a Django project using the local version of Django encompassing these changes. Verified that it reflects Uyghur-specific localizations.\r\n\r\nPlease review and let me know if any adjustments are required. Thank you for considering this addition!",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-08-12T10:01:49Z",
        "closed_at": "2023-09-07T11:18:14Z",
        "merged_at": null,
        "body": "Ticket link: https://code.djangoproject.com/ticket/32602",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-11T18:18:52Z",
        "closed_at": "2023-08-12T10:27:24Z",
        "merged_at": null,
        "body": "Fixed some punctuation.\r\nI know this is probably irrelevant and may not merge it.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 162,
        "deletions": 0,
        "changed_files": 14,
        "created_at": "2023-08-11T14:31:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "For now this is only a failing test case to run against official CI. Hope it's OK to open such a PR. At some point this will hopefully become a PR to support having fields populating DB constraints in contribute_to_fields.\r\n\r\nSee https://forum.djangoproject.com/t/dynamically-populate-constraints-in-field-contribute-to-class/22934 for full context.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-08-11T13:15:26Z",
        "closed_at": "2023-08-11T13:51:53Z",
        "merged_at": null,
        "body": "Removed `{% autoescape off %}`  from password_reset templates to safeguard against html injections",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-08-11T12:29:38Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Ref: https://code.djangoproject.com/ticket/34624\r\n\r\n# Before\r\n\r\nCurrent situation: There is only one pencil and eye, and they are disabled.\r\nExpected: A pencil and eye for each item, and enabled OR no pencils and eyes.\r\n\r\nIn the code I found the comment: `# XXX: The UX does not support multiple selected values.`. But radio select was not excluded. I went for the solution to remove the pencils and eyes to make radio select behave the same as multi-select.\r\n\r\n<img width=\"1029\" alt=\"Screenshot 2023-08-11 at 14 25 12\" src=\"https://github.com/django/django/assets/1969342/3ac65f3c-6d56-4b92-866f-17b369d30a80\">\r\n\r\n# After\r\n\r\n<img width=\"1029\" alt=\"Screenshot 2023-08-11 at 14 25 31\" src=\"https://github.com/django/django/assets/1969342/0ff3cdb9-be77-478b-ac3e-27d8fa110241\">\r\n\r\n\r\nI'd like to know if this approach is acceptable. If so, I'll update the PR with tests.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-08-10T14:09:59Z",
        "closed_at": "2023-08-11T07:46:08Z",
        "merged_at": "2023-08-11T07:46:07Z",
        "body": "Q objects used as `CheckConstraint.check` could not convert pk alias into the real field name.\r\nThanks Nwawel A Iroume for the report",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-10T12:28:34Z",
        "closed_at": "2023-08-10T17:23:17Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-10T04:25:43Z",
        "closed_at": "2023-08-10T06:59:29Z",
        "merged_at": "2023-08-10T06:59:29Z",
        "body": "Primitives are allowed in JSON on Oracle 21c+, see [release notes](https://docs.oracle.com/en/database/oracle/oracle-database/21/nfcon/application-development.html#GUID-BEB4C005-775A-4380-9E00-4D849BE95F1E).",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-08-09T11:51:38Z",
        "closed_at": "2023-08-10T03:33:13Z",
        "merged_at": "2023-08-10T03:33:13Z",
        "body": "Slice on unordered subquery may be non-deterministic in some databases.\r\n\r\nNoticed while checking `queries` tests on Oracle 23c.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 39,
        "changed_files": 5,
        "created_at": "2023-08-09T07:54:50Z",
        "closed_at": "2023-08-09T10:41:48Z",
        "merged_at": "2023-08-09T10:41:48Z",
        "body": "This bumps minimum supported versions of ``cx_Oracle`` to [the first release](https://cx-oracle.readthedocs.io/en/latest/release_notes.html#version-8-3-november-2021) to support Python 3.10.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-08T16:57:56Z",
        "closed_at": "2023-08-08T17:26:39Z",
        "merged_at": "2023-08-08T17:26:39Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-08-08T08:21:22Z",
        "closed_at": "2023-08-09T05:29:55Z",
        "merged_at": null,
        "body": "solution to skip browser language",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-08-07T13:27:04Z",
        "closed_at": "2023-08-10T06:32:17Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/29061#comment:8\r\n\r\nThe test replicates my best guess as to the issue reported in the ticket.\r\nOur GitHub action for windows did not have `gettext` installed and would skip a few tests, now a version of gettext is installed by installing `poedit` [via chocolatey](https://community.chocolatey.org/packages/poedit) which has `gettext` bundled. This was the only way I could get this installed on the action :sweat_smile: \r\nBut the test still passed\r\n\r\nMaybe this PR is useful, but maybe not, I am very tempted to close the ticket as \"worksforme\" or \u201eneedsinfo\u201c but I will let a merger decide what's most appropriate. :star: ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 47,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-08-05T11:36:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Ticket: https://code.djangoproject.com/ticket/25656. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-08-04T11:01:38Z",
        "closed_at": "2023-08-04T15:36:04Z",
        "merged_at": "2023-08-04T15:36:04Z",
        "body": "Without this patch:\r\n```\r\npython runtests.py backends.oracle.tests.TransactionalTests.test_password_with_at_sign\r\nTesting against Django installed in '/django/django' with up to 8 processes\r\nFound 1 test(s).\r\nCreating test database for alias 'default'...\r\nCreating test user...\r\nSystem check identified no issues (0 silenced).\r\nF\r\n======================================================================\r\nFAIL: test_password_with_at_sign (backends.oracle.tests.TransactionalTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/django/tests/backends/oracle/tests.py\", line 113, in test_password_with_at_sign\r\n    with self.assertRaises(DatabaseError) as context:\r\nAssertionError: DatabaseError not raised\r\n\r\n----------------------------------------------------------------------\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.544s\r\n\r\nFAILED (failures=1)\r\nDestroying test database for alias 'default'...\r\nDestroying test user...\r\nDestroying test database tables...\r\n```\r\n\r\nWith the patch:\r\n```\r\npython runtests.py backends.oracle.tests.TransactionalTests.test_password_with_at_sign\r\nTesting against Django installed in '/django/django' with up to 8 processes\r\nFound 1 test(s).\r\nCreating test database for alias 'default'...\r\nCreating test user...\r\nSystem check identified no issues (0 silenced).\r\n.\r\n----------------------------------------------------------------------\r\nRan 1 test in 2.132s\r\n\r\nOK\r\nDestroying test database for alias 'default'...\r\nDestroying test user...\r\nDestroying test database tables...\r\n```",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 197,
        "deletions": 23,
        "changed_files": 5,
        "created_at": "2023-08-04T08:38:57Z",
        "closed_at": "2023-09-11T18:46:38Z",
        "merged_at": "2023-09-11T18:46:38Z",
        "body": "See this ticket for details: https://code.djangoproject.com/ticket/34752\r\n\r\nThis PR:\r\n\r\n- [x] Adds some tests to ensures that ASGI `http.disconnect` is handled correctly during `StreamingHttpResponses`.\r\n- [x] Modifies the existing ASGI handler so that the test passes.\r\n- [x] Updates the `StreamingHttpResponse` documentation to document this new feature.\r\n\r\nAdditional context from a comment I made on the ticket:\r\n\r\n> One subtlety: I originally made a smaller modification to the handler that put view logic and response logic in the same coroutine, but otherwise  followed the same flow. I found this broke in practice because sometimes  //both// coroutines would return at once. This caused the previous  `pending.pop()`/`done.pop()` logic to error out because one of those two  sets would be empty. I think that this problem is particularly likely to  happen in situations where some coroutines are long-lived. I haven't added  a test for this edge case yet, though.\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 96,
        "deletions": 2,
        "changed_files": 6,
        "created_at": "2023-08-04T07:22:27Z",
        "closed_at": "2023-08-05T18:25:59Z",
        "merged_at": "2023-08-05T18:25:59Z",
        "body": "Implements [#34739](https://code.djangoproject.com/ticket/34739)\r\n\r\nGEOSEqualsIdentical compares two geometries and returns True if they are pointwise equivalent.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-04T03:13:05Z",
        "closed_at": "2023-08-07T05:17:00Z",
        "merged_at": null,
        "body": "Before fixing\uff0cCan't show add button\r\n<img width=\"497\" alt=\"image\" src=\"https://github.com/django/django/assets/90906427/a25204e4-8647-4f7d-8bd0-4be339785e36\">\r\n\r\n\r\nAfter modification\r\n<img width=\"497\" alt=\"image\" src=\"https://github.com/django/django/assets/90906427/2642c455-1a9b-4edb-96dc-bb9829eed8ba\">\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-03T21:50:10Z",
        "closed_at": "2023-08-04T16:08:24Z",
        "merged_at": "2023-08-04T16:08:24Z",
        "body": "Section in documentation:\r\n\r\nhttps://docs.djangoproject.com/en/4.2/howto/custom-file-storage/#django.core.files.storage._open\r\n\r\nThanks!",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 212,
        "changed_files": 12,
        "created_at": "2023-08-03T19:19:11Z",
        "closed_at": "2023-08-04T04:35:13Z",
        "merged_at": "2023-08-04T04:35:13Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 101,
        "deletions": 23,
        "changed_files": 7,
        "created_at": "2023-08-03T13:58:05Z",
        "closed_at": "2023-09-16T01:52:59Z",
        "merged_at": null,
        "body": "Added formatted description to highlight different operations in makemigrations output.\r\n\r\n@felixxm \r\nI wasn't sure whether to add color style to the output or not as it wasn't determined in the ticket discussions too. I have added it now. If you feel it's too noisy, I can remove it and we can have just text formatting. Plus, I think letting the `describe()` method returns two parameters is a clean way to implement such a feature without too overengineering.\r\n\r\nHere are sample outputs:\r\n<a href=\"https://imgbb.com/\"><img src=\"https://i.ibb.co/FwNJj8f/Screenshot-from-2023-08-03-17-13-42.png\" alt=\"Screenshot-from-2023-08-03-17-13-42\" border=\"0\"></a>\r\n<a href=\"https://imgbb.com/\"><img src=\"https://i.ibb.co/PQWRW6Z/Screenshot-from-2023-08-03-17-12-59.png\" alt=\"Screenshot-from-2023-08-03-17-12-59\" border=\"0\"></a>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-08-03T09:41:24Z",
        "closed_at": "2023-08-03T17:44:36Z",
        "merged_at": "2023-08-03T17:44:36Z",
        "body": "Follow up to 19297de2fe5a9c47e471c64249366f39fe12f16a.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 61,
        "changed_files": 10,
        "created_at": "2023-08-03T09:37:05Z",
        "closed_at": "2023-08-03T16:54:29Z",
        "merged_at": "2023-08-03T16:54:29Z",
        "body": "ticket-34761",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-03T01:24:13Z",
        "closed_at": "2023-08-03T01:41:37Z",
        "merged_at": null,
        "body": "1. request obj call read function, self._read_started = True\r\n2. request obj call body function, request obj don't have `_body`, but self._read_started = True.\r\n    the `You cannot access body after reading from request's data stream` exception will raise\r\n\r\nso, I add `_body` in read function. \r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-08-03T00:58:14Z",
        "closed_at": "2023-08-04T08:59:07Z",
        "merged_at": "2023-08-04T08:59:07Z",
        "body": "The __isnull lookup of JSONField must special case Value(None, JSONField()) left-hand-side in order to be coherent with its convoluted null handling.\r\n\r\nRegression in 5c23d9f0c32f166c81ecb6f3f01d5077a6084318.\r\n\r\nThanks Alexandre Collet for the report.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 30,
        "changed_files": 11,
        "created_at": "2023-08-02T11:40:32Z",
        "closed_at": "2023-08-02T17:53:16Z",
        "merged_at": "2023-08-02T17:53:16Z",
        "body": "Special characters lose their special meaning inside sets of characters.\r\n\r\n\"-\" lose its special meaning if it's placed as the first or last character.\r\n\r\nFollow up to 7c6b66383da5f9a67142334cd2ed2d769739e8f1.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 474,
        "deletions": 43,
        "changed_files": 15,
        "created_at": "2023-08-01T22:18:27Z",
        "closed_at": "2023-09-18T12:21:36Z",
        "merged_at": "2023-09-18T12:21:36Z",
        "body": "Modified the prefetch queryset function in generic foreign key field to support custom queryset of different content types.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-08-01T20:24:34Z",
        "closed_at": "2023-08-03T07:32:37Z",
        "merged_at": "2023-08-03T07:32:37Z",
        "body": "Ticket: #[34756](https://code.djangoproject.com/ticket/34756)\r\n\r\nSee https://github.com/sphinx-doc/sphinx/commit/86b07d4a97a225e79150d14e25a768ebc4c087cc#diff-4f7d4a220c6cd7da581c080aa2eb4c0ae299ac8abcde4b8b3f8e4fe5a8ea7bdf",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 21,
        "changed_files": 2,
        "created_at": "2023-08-01T05:45:22Z",
        "closed_at": "2023-08-01T06:46:45Z",
        "merged_at": "2023-08-01T06:46:44Z",
        "body": "Code Section Formatting in Documentation:\r\n* https://docs.djangoproject.com/en/4.2/ref/contrib/gis/gdal/#django.contrib.gis.gdal.OGRGeometry.dimension\r\n* https://docs.djangoproject.com/en/4.2/ref/models/expressions/#some-examples\r\n* https://docs.djangoproject.com/en/4.2/ref/models/expressions/#using-f-with-annotations\r\n\r\nThank you!",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-31T18:15:58Z",
        "closed_at": "2023-08-01T00:15:54Z",
        "merged_at": null,
        "body": "Changed the `Django Settings` -> `Django's settings` to get rid of the annoying `typo-error` indications on IDE.\r\n\r\n![image](https://github.com/django/django/assets/48384104/c36cb28e-8b44-497a-af70-84ec84b13e87)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-07-31T17:17:53Z",
        "closed_at": "2023-07-31T18:17:11Z",
        "merged_at": "2023-07-31T18:17:10Z",
        "body": "These are some minor style fixes requested in PR #16977 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-31T16:27:56Z",
        "closed_at": "2023-08-08T08:36:47Z",
        "merged_at": "2023-08-08T08:36:47Z",
        "body": "Ticket: [#34542](https://code.djangoproject.com/ticket/34542)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-07-31T12:26:10Z",
        "closed_at": "2023-08-01T14:16:28Z",
        "merged_at": "2023-08-01T14:16:28Z",
        "body": "Thanks Toan Vuong for the report.\r\n\r\nRegression in 59bea9efd2768102fc9d3aedda469502c218e9b7.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-07-30T13:27:24Z",
        "closed_at": "2023-07-30T14:17:07Z",
        "merged_at": "2023-07-30T14:17:07Z",
        "body": "https://flake8.pycqa.org/en/latest/release-notes/6.1.0.html",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-07-29T12:05:48Z",
        "closed_at": "2023-07-29T12:16:25Z",
        "merged_at": null,
        "body": "Added a shortcut function to make toast.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-07-29T07:25:44Z",
        "closed_at": "2023-10-03T10:45:09Z",
        "merged_at": null,
        "body": null,
        "comments": 4
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-29T07:15:58Z",
        "closed_at": "2023-07-29T07:18:37Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-29T06:47:49Z",
        "closed_at": "2023-07-29T07:06:26Z",
        "merged_at": null,
        "body": "small grammar fix in comment . nothing crazy \ud83d\ude05 ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 19629,
        "deletions": 8691,
        "changed_files": 1057,
        "created_at": "2023-07-28T21:25:55Z",
        "closed_at": "2023-07-28T21:26:10Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-28T15:28:12Z",
        "closed_at": "2023-07-28T16:05:19Z",
        "merged_at": "2023-07-28T16:05:19Z",
        "body": "* Remove `*args` from `acreate` signature in docs to match sync version and function signature.\r\n\r\nVery small change. The documentation for the `acreate` method isn't quite right: https://docs.djangoproject.com/en/4.2/ref/models/querysets/#create\r\n\r\nTicket here: https://code.djangoproject.com/ticket/34749",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-28T12:31:24Z",
        "closed_at": "2023-07-28T12:52:40Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-07-28T11:49:17Z",
        "closed_at": "2023-07-30T05:51:32Z",
        "merged_at": "2023-07-30T05:51:32Z",
        "body": "Regression in dd68af62b2b27ece50d434f6a351877212e15c3f.\r\n\r\nThanks @Toad2186 for the report.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 33,
        "changed_files": 1,
        "created_at": "2023-07-28T11:44:30Z",
        "closed_at": "2023-07-28T16:10:25Z",
        "merged_at": null,
        "body": "Hello,\r\n\r\nI read that --nostatic and --insecure options are no longer available with the runserver command so I suggest removing those lines from the documentation.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-28T06:24:43Z",
        "closed_at": "2023-07-28T14:21:17Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 17,
        "changed_files": 4,
        "created_at": "2023-07-27T21:45:31Z",
        "closed_at": "2023-07-31T20:01:06Z",
        "merged_at": "2023-07-31T20:01:06Z",
        "body": "I had a similar version of this code which I was using for a private project, and I noticed there was a pull request open already https://github.com/django/django/pull/16543\r\n\r\nI'm happy to make any necessary changes.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-07-27T18:48:58Z",
        "closed_at": "2023-07-28T05:12:42Z",
        "merged_at": null,
        "body": "The docs already suggest subclassing the `createsuperuser` command to customize data input and validation. This patch adds a seam to allow for further customization of the user creation when subclassing this command.\r\n\r\nThis is useful in cases where one wants to create associated objects like an Account or a Profile after the user is created. An alternative would to handle it with the post_save signal but implementing this as a signal is problematic if one also uses factories for tests, as it becomes harder to configure the objects created by the signal receiver through the factory.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2023-07-27T15:11:29Z",
        "closed_at": "2023-08-02T11:36:53Z",
        "merged_at": "2023-08-02T11:36:53Z",
        "body": "Use the capture groups from the regular expression that has already been matched to avoid re-splitting and the need to special case for IPv6.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 10,
        "changed_files": 4,
        "created_at": "2023-07-27T08:51:16Z",
        "closed_at": "2023-07-27T16:08:20Z",
        "merged_at": "2023-07-27T16:08:20Z",
        "body": "A smattering of small clean ups related to `django.core.management.call_command()`.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 98,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-07-27T07:14:00Z",
        "closed_at": "2023-08-23T11:00:30Z",
        "merged_at": "2023-08-23T11:00:30Z",
        "body": "A possible fix for [Ticket 34744 - Migration re-add constraints when check condition contains a dict_keys object.](https://code.djangoproject.com/ticket/34744)\r\n\r\nI'm not super-familiar with how migration serialisation works. I had a look to see if there was a way to serialise an entire project state but couldn't see anything \ud83e\udd14 If you can do this then it's probably better to serialise the state before passing to the Autodetector.\r\n\r\nThis alternative is to serialise constraints before checking their equality. This solution is too narrow though - perhaps this problem could appear again in other parts of the state? \ud83e\udd37\u200d\u2642\ufe0f\r\n\r\nMaybe we should try to serialise everything manually.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-27T04:57:16Z",
        "closed_at": "2023-07-27T06:01:56Z",
        "merged_at": "2023-07-27T06:01:56Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-07-26T22:59:46Z",
        "closed_at": "2023-08-09T05:36:45Z",
        "merged_at": "2023-08-09T05:36:45Z",
        "body": "Fix for [ticket 34586](https://code.djangoproject.com/ticket/34586) to raise an exception on create() with a reverse OneToOne relationship as an argument",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 156,
        "deletions": 95,
        "changed_files": 7,
        "created_at": "2023-07-26T06:55:18Z",
        "closed_at": "2023-08-01T05:59:24Z",
        "merged_at": "2023-08-01T05:59:24Z",
        "body": "Ticket: [#32820](https://code.djangoproject.com/ticket/32820)\r\nPrevious PR: https://github.com/django/django/pull/16933",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-07-25T08:04:07Z",
        "closed_at": "2023-07-29T10:32:27Z",
        "merged_at": null,
        "body": "When assertContains and assertInHTML tests failed, it was not clear why the tests failed, because general information was displayed and it took a long time to find what caused the tests to fail.\r\n\r\nIn this regard, a [ticket](https://code.djangoproject.com/ticket/34657) was created and in this PR I fixed this drawback and made the tests more understandable.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-24T13:52:57Z",
        "closed_at": "2023-07-26T15:03:20Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 53,
        "deletions": 31,
        "changed_files": 2,
        "created_at": "2023-07-23T09:31:40Z",
        "closed_at": "2023-07-23T14:52:54Z",
        "merged_at": null,
        "body": "This PR refactors some of the cache key generation methods and utils by:\r\n- adding some narratives (in the form of comments) and some docstrings\r\n- simplifying some logic\r\n- and making the code more readable (and thus more maintainable).\r\n\r\nMy hope is to pave the way for a new cache-related feature. That work will come in subsequent PR(s). This refactor work would be easier to review when it is separated from the rest of the cache invalidation feature work.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 107,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-07-22T14:31:39Z",
        "closed_at": "2023-07-24T07:56:57Z",
        "merged_at": "2023-07-24T07:56:57Z",
        "body": "Previous PR: https://github.com/django/django/pull/16916\r\nTicket: [#34532](https://code.djangoproject.com/ticket/34532)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-22T12:12:57Z",
        "closed_at": "2023-08-09T08:03:01Z",
        "merged_at": "2023-08-09T08:03:01Z",
        "body": "https://code.djangoproject.com/ticket/34692",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-22T07:36:50Z",
        "closed_at": "2023-07-22T17:48:55Z",
        "merged_at": "2023-07-22T17:48:55Z",
        "body": "![formatting-error-screenshot](https://github.com/django/django/assets/64686/160fe540-1a96-497a-8d9b-425ec906336a)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 111,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-21T19:03:14Z",
        "closed_at": "2023-07-21T19:10:22Z",
        "merged_at": null,
        "body": "Extended the tests for RadioSelect using those for Select as a guide.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-21T18:42:20Z",
        "closed_at": "2023-07-21T19:18:24Z",
        "merged_at": "2023-07-21T19:18:24Z",
        "body": "This has been removed from Python 3.12; use `assertEqual` instead:\r\n\r\nhttps://docs.python.org/3.12/whatsnew/3.12.html#removed",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-21T13:45:40Z",
        "closed_at": "2023-07-21T14:26:50Z",
        "merged_at": null,
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 161,
        "deletions": 15,
        "changed_files": 6,
        "created_at": "2023-07-21T13:43:20Z",
        "closed_at": "2023-09-05T10:46:41Z",
        "merged_at": "2023-09-05T10:46:41Z",
        "body": "https://code.djangoproject.com/ticket/34730",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-21T09:04:37Z",
        "closed_at": "2023-07-21T10:43:59Z",
        "merged_at": "2023-07-21T10:43:59Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-07-21T07:40:50Z",
        "closed_at": "2023-07-21T08:26:45Z",
        "merged_at": "2023-07-21T08:26:45Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-07-21T05:32:53Z",
        "closed_at": "2023-07-21T10:54:39Z",
        "merged_at": "2023-07-21T10:54:39Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-20T16:52:41Z",
        "closed_at": "2023-07-20T17:45:44Z",
        "merged_at": "2023-07-20T17:45:44Z",
        "body": "The edited examples were changed so if the reader executes the shown line, the returned printed result matches what is in the docs. Otherwise, leaving the `q = ` assignment, results is not printed as feedback.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 116,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-07-20T15:53:13Z",
        "closed_at": "2023-07-24T07:05:32Z",
        "merged_at": "2023-07-24T07:05:32Z",
        "body": "Implementation for https://code.djangoproject.com/ticket/34714\r\n\r\nI'm a little worried about code duplication between async and non async versions of both functions. However it seems a common pattern to duplicate 'some' of the code between async and sync functions, eg:\r\n\r\n- `acheck_password` /  `check_password` in [base_user.py](https://github.com/django/django/blob/e4a5527d1dc2f8183883931560f3a6dcdef0ab0c/django/contrib/auth/base_user.py#L126)\r\n- `get_many()` / `a_getmany()` in [cache/backends/base.py](https://github.com/django/django/blob/e4a5527d1dc2f8183883931560f3a6dcdef0ab0c/django/core/cache/backends/base.py#L208)\r\n\r\nI tried factoring the code with private helper functions without great satisfaction regarding readability.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-19T15:02:28Z",
        "closed_at": "2023-07-20T17:02:17Z",
        "merged_at": "2023-07-20T17:02:17Z",
        "body": "I think it would be useful to mention in the documentation about the behavior of **QuerySet.only()** with annotated fields (this has already been discussed in [ticket #30052](https://code.djangoproject.com/ticket/30052), but for some reason, it hasn't been updated in the documentation). Additionally, I believe it would be great to specify that by default, besides the fields provided to only(), '**id**' and consequently '**annotated fields**' are also included.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 23,
        "changed_files": 1,
        "created_at": "2023-07-19T11:31:42Z",
        "closed_at": "2023-07-19T17:37:15Z",
        "merged_at": "2023-07-19T17:37:15Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 85,
        "deletions": 1,
        "changed_files": 6,
        "created_at": "2023-07-19T08:08:51Z",
        "closed_at": "2023-07-19T17:34:33Z",
        "merged_at": null,
        "body": "- [x] documentation\r\n- [x] tests",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-07-18T20:27:43Z",
        "closed_at": "2023-08-29T10:03:29Z",
        "merged_at": null,
        "body": "A possible fix for [#31558](https://code.djangoproject.com/ticket/31558). Not entirely sure if it's the absolute right way to proceed with the issue. Wanted some feedback on my approach to improve things further.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-18T10:37:59Z",
        "closed_at": "2023-07-19T03:15:36Z",
        "merged_at": null,
        "body": "The two lstrip() of the path variable are merged together",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-18T08:59:57Z",
        "closed_at": "2023-07-18T12:08:48Z",
        "merged_at": "2023-07-18T12:08:47Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-07-18T03:19:28Z",
        "closed_at": "2023-07-18T10:24:12Z",
        "merged_at": null,
        "body": "Type judgment is done using Python's own duck-typing mechanism\r\nThis eliminates the need to explicitly judge the type. If the value passed in is already of the Path type, the Path constructor is not executed and value is directly returned. Otherwise, the Path constructor is executed and the return is converted to the Path type.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-07-18T02:30:19Z",
        "closed_at": "2023-07-19T07:10:58Z",
        "merged_at": null,
        "body": "`Path.absolute()`, which does not raise an FileNotFoundError, has been swapped for `Path.resolve(strict=True)`, which does.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-17T20:28:41Z",
        "closed_at": "2023-07-18T03:27:40Z",
        "merged_at": "2023-07-18T03:27:40Z",
        "body": "This PR fixes the bug reported at https://code.djangoproject.com/ticket/34716\r\n\r\nA small change has been made to FunctionTypeSerializer.serialize and a regression test has been added.\r\n\r\nThanks for your time!",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-17T19:42:37Z",
        "closed_at": "2023-07-17T20:01:59Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-17T19:09:11Z",
        "closed_at": "2023-07-23T16:45:27Z",
        "merged_at": "2023-07-23T16:45:27Z",
        "body": "Ref PR : #16905 \r\nRef Ticket : [#24686](https://code.djangoproject.com/ticket/24686)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-07-17T16:54:19Z",
        "closed_at": "2023-07-19T07:06:06Z",
        "merged_at": "2023-07-19T07:06:06Z",
        "body": "Regression in 59bea9e.\r\n\r\nRefs #28477.\r\n\r\nThanks @younes-chaoui for the report.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-07-17T14:31:41Z",
        "closed_at": "2023-07-18T09:22:38Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34718\r\n\r\nAllows filters in django admin to be collapsed by default when `ListFilter.details_collapsed` is `True`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-17T13:39:44Z",
        "closed_at": "2023-07-17T18:26:37Z",
        "merged_at": "2023-07-17T18:26:37Z",
        "body": "On the django admin site, it is not clear that the filters can be collapsed. Styling the cursor as pointer should solve that.\r\n\r\n![](https://github.com/django/django/assets/22097904/632eea63-13d4-454b-b621-fd7a23242e92)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-07-17T12:44:19Z",
        "closed_at": "2023-08-31T06:58:42Z",
        "merged_at": "2023-08-31T06:58:42Z",
        "body": "https://code.djangoproject.com/ticket/34712\r\n\r\n- First part: #17080\r\n\r\nSecond part of the ticket to add a system check.\r\n\r\n- [x] Add system check\r\n- [x] Add tests\r\n- [x] Update documentation\r\n- [ ] ~Update release note~",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-17T11:03:16Z",
        "closed_at": "2023-07-24T19:08:10Z",
        "merged_at": "2023-07-24T19:08:10Z",
        "body": "https://code.djangoproject.com/ticket/34712\r\n\r\nAdd a note to the documentation of the `STORAGES` setting, to warn against potential misconfiguration.\r\n\r\nThe ticket also discuss adding a system check, however I expect a different backporting for such change, hence I'm planning to submit a separate pull request for it.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-17T07:44:42Z",
        "closed_at": "2023-07-17T09:03:36Z",
        "merged_at": "2023-07-17T09:03:36Z",
        "body": "This is related with a [regression](https://github.com/python/cpython/issues/106669) in Python 3.12.0b4 that will be [reverted](https://github.com/python/cpython/pull/106733). I think, it's still worth improving `sanitize_address()` error messages and raise `Invalid address \"\"` instead of `not enough values to unpack (expected 2, got 1)`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-16T20:22:56Z",
        "closed_at": "2023-07-18T14:12:43Z",
        "merged_at": "2023-07-18T14:12:43Z",
        "body": "Added a small note referring users to TypedChoiceField in the ChoiceField description if they are dealing with types other than strings \u2013\u00a0I thought this may help avoid confusion in cases like [Ticket 34711](https://code.djangoproject.com/ticket/34711#comment:5)\r\n\r\nI didn't fuss over the wording too much, please update as needed.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-16T10:18:43Z",
        "closed_at": "2023-07-16T15:42:59Z",
        "merged_at": null,
        "body": "When `assertContains` and `assertInHTML` tests failed, it was not clear why the tests failed, because general information was displayed and it took a long time to find what caused the tests to fail.\r\n\r\nIn this regard, a [ticket](https://code.djangoproject.com/ticket/34657)was created and in this PR I fixed this drawback and made the tests more understandable.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-16T09:57:38Z",
        "closed_at": "2023-07-16T10:11:40Z",
        "merged_at": null,
        "body": "When `assertContains` and `assertInHTML` tests failed, it was not clear why the tests failed, because general information was displayed and it took a long time to find what caused the tests to fail. \r\n\r\nIn this regard, a [ticket](https://code.djangoproject.com/ticket/34657) was created and in this PR I fixed this drawback and made the tests more understandable.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 70,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-07-15T22:02:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[ticket-33277](https://code.djangoproject.com/ticket/33277)",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1351,
        "deletions": 1,
        "changed_files": 12,
        "created_at": "2023-07-15T16:52:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Refs [ticket-33620](https://code.djangoproject.com/ticket/33620)\r\nThis is a draft PR to get some feedback on my approach for accessibility tests and is not meant to be merged. \r\n\r\nThis approach focuses on using the existing suite of selenium tests to be used for accessibility tests. Based on @carltongibson's comment https://github.com/django/django/pull/16372#issuecomment-1342772021 I have added a function that takes the current webpage in the selenium instance, writes it to a `html` file named `ClassName.TestName.Count` and stores it in a folder named `snapshot`. \r\n\r\nThese snapshots can then be used by `pa11y-ci` tool using the `pa11y-ci-reporter-html` reporter to generate an HTML report for the accessibility tests as follows. \r\n\r\nI have written a small helper script to generate the `pa11y` report. Also, we can use a flag to tell CI when to generate snapshots. These snapshots can then be downloaded as `artificats` in GitHub Actions.\r\n\r\nIntegration with selenium is quite straight forward - we will have to just call `take_snapshot` function in our test cases whenever we want that a UI change should be tested. For example, calling `take_snapshot` after we add 4 rows in django admin. \r\n\r\n\r\n------------------------\r\nFollowing image is the generated report for each `snapshot`\r\n<img width=\"1361\" alt=\"Screenshot 2023-07-15 at 6 49 23 PM\" src=\"https://github.com/django/django/assets/30565750/0f744f5f-2f97-4e4d-a114-fe6b931cb784\">\r\n\r\nDetailed reports look like this for each of the above rows. \r\n<img width=\"1154\" alt=\"Screenshot 2023-07-15 at 10 03 05 PM\" src=\"https://github.com/django/django/assets/30565750/a0958d39-88ee-497e-9b77-51c34a044c6f\">\r\n\r\n`pa11y` also provides options to configure the level of accessibility testing. We can start with a lower compliance and keep increasing the levels, as we keep solving accessibility issues. ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-07-14T22:32:59Z",
        "closed_at": "2023-07-18T07:34:00Z",
        "merged_at": "2023-07-18T07:34:00Z",
        "body": "Fix for [ticket 34036](https://code.djangoproject.com/ticket/34036) to improve text contrast over light blue backgrounds in admin light-theme\r\n\r\nBased on @nimra200's  patch [#16268](https://github.com/django/django/pull/16268)\r\n\r\n![Screenshot 2023-07-14 at 23 13 24](https://github.com/django/django/assets/7084246/5aec594c-ade8-4897-b5e6-3489ab237dad)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-14T19:53:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Before this change, calling DELETE on a standard DRF CRUD detail endpoint without a trailing slash causes a 301 redirect to result in a GET.  Ideally this would perform a 308 redirect (preserving the DELETE method through the redirect), but in the meantime at least raise it as an issue in debug mode.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 63,
        "changed_files": 4,
        "created_at": "2023-07-14T08:27:18Z",
        "closed_at": "2023-07-14T09:24:03Z",
        "merged_at": "2023-07-14T09:24:03Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-07-13T20:14:22Z",
        "closed_at": "2023-07-14T08:02:26Z",
        "merged_at": "2023-07-14T08:02:26Z",
        "body": "Fixes [ticket-34448](https://code.djangoproject.com/ticket/34448)\r\n\r\nAdded docs for the missing option and a simple unit test which runs `--no-obsolete` on a `.po` file that contains obsolete messages and asserts various conditions. ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-13T03:34:23Z",
        "closed_at": "2023-07-13T04:14:57Z",
        "merged_at": null,
        "body": "select_for_update should always run within a transaction, otherwise, the query is committed automatically, and no lock anymore. just fix this bad example",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-12T07:43:19Z",
        "closed_at": "2023-07-12T08:39:25Z",
        "merged_at": "2023-07-12T08:39:25Z",
        "body": "Trivial change not requiring a Trac ticket - close inline code block in docs with a second backtick",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 30,
        "changed_files": 3,
        "created_at": "2023-07-12T05:54:11Z",
        "closed_at": "2023-07-12T09:07:00Z",
        "merged_at": "2023-07-12T09:06:59Z",
        "body": "Dicts preserve order since Python 3.6.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-07-11T17:50:10Z",
        "closed_at": "2023-07-12T12:32:05Z",
        "merged_at": "2023-07-12T12:32:05Z",
        "body": "This implements https://code.djangoproject.com/ticket/34697 .",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-07-11T12:53:21Z",
        "closed_at": "2023-07-12T04:14:02Z",
        "merged_at": "2023-07-12T04:14:02Z",
        "body": "ticket-34705\r\n\r\nRegression in 966ecdd482167f3f6b08b00f484936c837751cb9.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 23,
        "changed_files": 1,
        "created_at": "2023-07-11T12:30:55Z",
        "closed_at": "2023-07-11T20:45:32Z",
        "merged_at": "2023-07-11T20:45:32Z",
        "body": "Follow up to d1855c4847215f3afe3708736be13388bb6437eb.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-07-11T12:17:28Z",
        "closed_at": "2023-07-11T14:14:52Z",
        "merged_at": "2023-07-11T14:14:52Z",
        "body": "This is already checked in `trim.setter`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-07-11T03:54:11Z",
        "closed_at": "2023-07-11T06:06:49Z",
        "merged_at": "2023-07-11T06:06:49Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-07-10T15:54:08Z",
        "closed_at": "2023-08-04T04:23:10Z",
        "merged_at": "2023-08-04T04:23:09Z",
        "body": "Fix for https://code.djangoproject.com/ticket/34686",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-07-10T07:11:42Z",
        "closed_at": "2023-07-10T09:22:00Z",
        "merged_at": "2023-07-10T09:21:59Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-10T06:11:48Z",
        "closed_at": "2023-07-10T07:29:42Z",
        "merged_at": "2023-07-10T07:29:42Z",
        "body": "Follow up to 38e391e95fe5258bc6d2467332dc9cd44ce6ba52.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 301,
        "deletions": 15,
        "changed_files": 13,
        "created_at": "2023-07-09T17:26:07Z",
        "closed_at": "2023-07-20T03:37:29Z",
        "merged_at": "2023-07-20T03:37:28Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 214,
        "deletions": 11,
        "changed_files": 8,
        "created_at": "2023-07-08T22:01:35Z",
        "closed_at": "2023-09-13T10:30:31Z",
        "merged_at": "2023-09-13T10:30:31Z",
        "body": "Reference to [#31949](https://code.djangoproject.com/ticket/31949).\r\n\r\nThis PR makes the `make_middleware_decorator` function able to handle both sync and async views.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 97,
        "deletions": 6,
        "changed_files": 5,
        "created_at": "2023-07-08T21:18:05Z",
        "closed_at": "2023-07-10T10:40:53Z",
        "merged_at": "2023-07-10T10:40:53Z",
        "body": "Reference to [#31949](https://code.djangoproject.com/ticket/31949).\r\n\r\nThis PR makes the `vary_on_cookie` and `vary_on_headers` decorators able to handle both sync and async views.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-07-08T20:26:45Z",
        "closed_at": "2023-07-10T06:44:09Z",
        "merged_at": "2023-07-10T06:44:09Z",
        "body": "Reference to [#31949](https://code.djangoproject.com/ticket/31949).\r\n\r\nThis PR makes the `csrf_exempt` decorator able to handle both sync and async views.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 225,
        "deletions": 31,
        "changed_files": 10,
        "created_at": "2023-07-08T03:52:54Z",
        "closed_at": "2023-07-09T17:25:35Z",
        "merged_at": null,
        "body": "Still lacking an invalid model check.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-07T21:54:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Hi community This is my first contribution to django by adding a simple unittest case. I have tired following the project's guidelines and conventions to ensure that my contribution aligns with the existing codebase. Please review and share your thoughts",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-07T14:01:12Z",
        "closed_at": "2023-07-10T08:53:13Z",
        "merged_at": "2023-07-10T08:53:13Z",
        "body": "https://code.djangoproject.com/ticket/34696",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 11,
        "changed_files": 4,
        "created_at": "2023-07-07T11:01:09Z",
        "closed_at": "2023-07-10T17:28:50Z",
        "merged_at": "2023-07-10T17:28:50Z",
        "body": "https://code.djangoproject.com/ticket/34698",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 28,
        "changed_files": 10,
        "created_at": "2023-07-07T09:15:54Z",
        "closed_at": "2023-07-07T11:22:06Z",
        "merged_at": "2023-07-07T11:22:06Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 122,
        "deletions": 64,
        "changed_files": 15,
        "created_at": "2023-07-06T10:07:19Z",
        "closed_at": "2023-07-07T06:06:02Z",
        "merged_at": "2023-07-07T06:06:01Z",
        "body": "This allows retrieving an admin class for the given model class without using an internal attribute.\r\n\r\nAs far as I'm aware, that's all we need to fix ticket-9602.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-07-06T08:57:37Z",
        "closed_at": "2023-07-06T09:29:16Z",
        "merged_at": "2023-07-06T09:29:16Z",
        "body": "https://github.com/django/django/blob/966ecdd482167f3f6b08b00f484936c837751cb9/django/contrib/admin/sites.py#L163-L167",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-05T18:33:47Z",
        "closed_at": "2023-07-11T08:46:35Z",
        "merged_at": "2023-07-11T08:46:35Z",
        "body": "ticket-34695",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 49,
        "changed_files": 4,
        "created_at": "2023-07-04T21:49:35Z",
        "closed_at": "2023-07-07T05:43:48Z",
        "merged_at": "2023-07-07T05:43:48Z",
        "body": "As discussed [on Trac](https://code.djangoproject.com/ticket/34639#comment:11)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 89,
        "deletions": 1,
        "changed_files": 6,
        "created_at": "2023-07-04T13:41:24Z",
        "closed_at": "2023-07-11T12:06:01Z",
        "merged_at": "2023-07-11T12:06:01Z",
        "body": "I added the bracket checker like what we have for $. This is my first contribution to the Django project! Let me know if there is anything to modify :)\r\n\r\nI'm doubtful of naming the warning id (I know it might happen by upgrading Django, but I don't know in which version it will be used). Do I need to update it to 5? or what? Plus, do I need to include it in the docs/releases/4.3.txt? or docs/releases/5.0.txt?",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-04T10:33:27Z",
        "closed_at": "2023-07-04T12:12:43Z",
        "merged_at": "2023-07-04T12:12:42Z",
        "body": "Test crashed when the sidebar was not closed:\r\n```\r\n$ ./runtests.py --selenium=chrome --headless admin_views.tests.SeleniumTests.test_search_input_filtered_page\r\n\r\nTesting against Django installed in '/django/django' with up to 8 processes\r\nFound 1 test(s).\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (1 silenced).\r\nF\r\n======================================================================\r\nFAIL: test_search_input_filtered_page (admin_views.tests.SeleniumTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/django/tests/admin_views/tests.py\", line 6294, in test_search_input_filtered_page\r\n    self.assertGreater(\r\nAssertionError: 40 not greater than 50\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 3.452s\r\n\r\nFAILED (failures=1)\r\nDestroying test database for alias 'default'...\r\n```\r\n------\r\n\r\nBefore:\r\n\r\n![screenshot](https://github.com/django/django/assets/2865885/da8b4218-ceab-4d3d-a299-86baccfa557d)\r\n-------\r\n\r\nAfter:\r\n\r\n![screenshot_together](https://github.com/django/django/assets/2865885/a55ee154-d018-4ea9-881c-9b27d8235122)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-07-04T08:59:34Z",
        "closed_at": "2023-07-05T08:18:25Z",
        "merged_at": "2023-07-05T08:18:25Z",
        "body": "Flakey test runs for test_updating_related_objects_updates_fk_selects_except_autocompletes:\r\n- https://github.com/django/django/actions/runs/5450377222/jobs/9915579013\r\n- https://github.com/django/django/actions/runs/5450377222/jobs/9915578779\r\n\r\nFlakey test run for test_list_editable_popups:\r\n- https://github.com/django/django/actions/runs/5452823563/jobs/9920858724\r\n\r\nFlakey test run for test_select:\r\n- https://github.com/django/django/actions/runs/5452823563/jobs/9920858724\r\n\r\n----\r\n\r\nTest runs with them passing to show flakiness is hopefully gone:\r\n- https://github.com/django/django/actions/runs/5453005282?pr=17043\r\n- https://github.com/django/django/actions/runs/5453127139?pr=17043\r\n- https://github.com/django/django/actions/runs/5453179602?pr=17043\r\n- https://github.com/django/django/actions/runs/5453225225?pr=17043\r\n- https://github.com/django/django/actions/runs/5453261530?pr=17043\r\n- https://github.com/django/django/actions/runs/5453334823?pr=17043\r\n- https://github.com/django/django/actions/runs/5453382117?pr=17043\r\n- https://github.com/django/django/actions/runs/5454055716?pr=17043\r\n- https://github.com/django/django/actions/runs/5454099125?pr=17043",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-07-03T19:41:19Z",
        "closed_at": "2023-07-03T19:47:54Z",
        "merged_at": null,
        "body": null,
        "comments": 7
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-03T18:54:12Z",
        "closed_at": "2023-07-03T18:58:04Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-07-02T22:36:20Z",
        "closed_at": "2023-07-03T03:20:03Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 259,
        "changed_files": 13,
        "created_at": "2023-07-02T20:59:00Z",
        "closed_at": "2023-07-10T05:46:36Z",
        "merged_at": "2023-07-10T05:46:36Z",
        "body": "### Ticket\r\nhttps://code.djangoproject.com/ticket/34688\r\n\r\n### Forum thread\r\nhttps://forum.djangoproject.com/t/consensus-required-on-pr-to-remove-contrib-sitemaps-ping-google/22042\r\n\r\n### Implementation details\r\n~~[Google have announced that the sitemaps ping API is being deprecated](https://developers.google.com/search/blog/2023/06/sitemaps-lastmod-ping?hl=en) \"in 6 months\" from June 26th 2023, which is right around the release time of Django 5.0 (Jan 2024). As such, I have not only deprecated `contrib.sitemaps.ping_google()` and the `ping_google` management command but also made them non-operational and replaced them with placeholder methods which perform no action. The placeholder methods will ensure backwards compatibility in code whilst avoiding making API calls to an endpoint which will no longer exist at the release of Django 5.0.~~\r\n\r\n~~The following changes have been made:~~\r\n\r\n* ~~`contrib.sitemaps.ping_google()` replaced with a noop method and deprecated.~~\r\n* ~~`contrib.sitemaps._get_sitemap_full_url()`, a private method used only by `contrib.sitemaps.ping_google()`, has been removed.~~\r\n* ~~Tests for the above two methods have been removed.~~\r\n* ~~`sitemap_only.py`, `index_only.py` and `empty.py` in `tests/sitemaps_tests/urls` have been removed. These were test urlpatterns used only by the tests for `ping_google()`.~~\r\n* ~~The `ping_google` management command has been replaced with a noop replica which issues a deprecation warning.~~\r\n* ~~Tests have been added for the deprecation warnings of the `ping_google` management command and the `ping_google()` method.~~\r\n* ~~All appropriate documentation updated - deprecation log, release notes, sitemaps docs, `django-admin` command docs.~~\r\n* ~~`django-admin` man page updated.~~\r\n\r\n~~I hope you agree this is a sensible way to proceed in light of the API being deprecated at the same time as the Django 5.0 release. Cheers!~~\r\n\r\n*Edited: PR updated to fully remove `contrib.sitemaps.ping_google()` and the `ping_google` management command as per consensus on the forum and below.*",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-07-02T20:01:32Z",
        "closed_at": "2023-07-03T03:12:07Z",
        "merged_at": null,
        "body": "up",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-01T19:59:18Z",
        "closed_at": "2023-07-01T20:25:20Z",
        "merged_at": null,
        "body": "Added docstrings to the missing methods in the paginator module according to PEP 257.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-07-01T14:40:14Z",
        "closed_at": "2023-07-01T23:43:17Z",
        "merged_at": null,
        "body": "In the process of learning django, I found that the page_range of Paginator does not display well in the case of a large number of pages, so I optimized it.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 38848,
        "deletions": 21961,
        "changed_files": 1237,
        "created_at": "2023-07-01T13:35:14Z",
        "closed_at": "2023-07-01T13:41:34Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-06-30T22:14:03Z",
        "closed_at": "2023-07-02T19:57:31Z",
        "merged_at": null,
        "body": "This was apparently started in #15609, but it had 2 changes that needed to be discussed independently. I split it off into only this change in the hopes that it could be addressed.\r\n\r\nI'm a newcomer to Django, and wanted to help reduce some of the new project friction. EDIT: realized after submitting this that the model needs to be instantiated inside an app, working on a PR that does just that.\r\n\r\nI would think that this should be somewhat already agreed upon, since [the docs already make this recommendation](https://docs.djangoproject.com/en/4.2/topics/auth/customizing/#using-a-custom-user-model-when-starting-a-project). I'm not sure if the way I went about it was correct or idiomatic.\r\n\r\nDiscussion: https://forum.djangoproject.com/t/why-not-create-custom-user-model-when-creating-a-new-project-by-default/21958\r\nTicket: https://code.djangoproject.com/ticket/27909",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-30T18:24:04Z",
        "closed_at": "2023-07-03T09:42:03Z",
        "merged_at": "2023-07-03T09:42:03Z",
        "body": "Fixed typo in django/tests/admin_docs/models.py",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 198,
        "deletions": 44,
        "changed_files": 8,
        "created_at": "2023-06-30T10:07:21Z",
        "closed_at": "2023-06-30T10:07:31Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-30T03:47:32Z",
        "closed_at": "2023-06-30T08:18:04Z",
        "merged_at": "2023-06-30T08:18:04Z",
        "body": "Check out https://github.com/django/django/pull/17024#issuecomment-1613786254.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 82,
        "deletions": 62,
        "changed_files": 4,
        "created_at": "2023-06-29T20:44:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "There was no blocks in the inline templates which takes away the inheritance opportunity.\r\nI believe that this change is going to open up a new door for developers who wish to adjust the inlines!\r\n\r\nThe added blocks:\r\n- Tabular:\r\n    - `title`\r\n    - `table-headers`\r\n    - `table-body`\r\n\r\n- Stacked:\r\n    - `title`\r\n    - `field-elements`\r\n\r\nI wanted to write some tests but I'm not sure if its necessary.\r\nThe scenario would be, creating a template using the blocks and testing whether the content is contained inside of the response.\r\n\r\n[ticket-14810](https://code.djangoproject.com/ticket/14810)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-06-29T13:18:26Z",
        "closed_at": "2023-06-30T07:57:43Z",
        "merged_at": "2023-06-30T07:57:43Z",
        "body": "When `django.apps.apps.clear_cache()` is called,\r\nwe now also clean the cache of `@functools.cache`\r\nof `get_swappable_settings_name` method.\r\n\r\nOriginal issue https://code.djangoproject.com/ticket/34687\r\nRefs https://github.com/typeddjango/django-stubs/pull/1601",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-06-29T09:51:56Z",
        "closed_at": "2023-06-29T10:27:30Z",
        "merged_at": "2023-06-29T10:27:29Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 46,
        "changed_files": 6,
        "created_at": "2023-06-29T07:47:15Z",
        "closed_at": "2023-06-29T19:45:36Z",
        "merged_at": "2023-06-29T19:45:36Z",
        "body": "ticket-34685",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-06-29T06:38:58Z",
        "closed_at": "2023-07-03T08:44:18Z",
        "merged_at": null,
        "body": "If the inline form should not display the \"Add another\" button, you can use the `max_num` parameter\r\nBut in the case of relation with unique foreign key `max_num` will enforce to 1, which makes it impossible to remove the add button. This behavior cannot be overridden in the case of usage a custom queryset.\r\nThis fix allows you to specify `max_num=0` and the value will be successfully applied, and the \"Add another\" button will not be displayed",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-06-29T05:48:02Z",
        "closed_at": "2023-06-29T07:11:31Z",
        "merged_at": "2023-06-29T07:11:31Z",
        "body": "ticket-34684",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 18,
        "changed_files": 5,
        "created_at": "2023-06-29T05:11:43Z",
        "closed_at": "2023-06-30T04:03:08Z",
        "merged_at": "2023-06-30T04:03:08Z",
        "body": "ticket-34572",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-06-28T06:52:27Z",
        "closed_at": "2023-06-29T05:10:29Z",
        "merged_at": "2023-06-29T05:10:29Z",
        "body": "See https://github.com/OSGeo/gdal/blob/6e9103bd5/gcore/gdal.h#L62",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-06-28T06:06:42Z",
        "closed_at": "2023-06-28T10:11:25Z",
        "merged_at": "2023-06-28T10:11:25Z",
        "body": "Thanks Tim Graham for the report and implementation idea.\r\n\r\nFollow up to ea8cbca579cc6742e119747fc1eb6ecf90638bce.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-28T03:26:54Z",
        "closed_at": "2023-06-28T05:08:51Z",
        "merged_at": "2023-06-28T05:08:51Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-27T09:45:20Z",
        "closed_at": "2023-06-27T10:54:11Z",
        "merged_at": "2023-06-27T10:54:11Z",
        "body": "![image](https://github.com/django/django/assets/2865885/5aea7a3c-eb2a-494e-8872-05c01380d4e6)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-06-27T07:11:51Z",
        "closed_at": "2023-06-28T09:03:09Z",
        "merged_at": "2023-06-28T09:03:08Z",
        "body": "ticket-34681",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-26T23:07:01Z",
        "closed_at": "2023-08-08T20:54:20Z",
        "merged_at": null,
        "body": "In settings of a django project,`SESSION_HASHED_KEYS_IN_BACKEND = True` will turn the session key hashing on.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 35,
        "changed_files": 1,
        "created_at": "2023-06-26T21:12:35Z",
        "closed_at": "2023-06-27T18:05:08Z",
        "merged_at": "2023-06-27T18:05:08Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 79,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2023-06-26T18:39:12Z",
        "closed_at": "2023-06-28T17:03:16Z",
        "merged_at": null,
        "body": "Granian is a Rust HTTP server for Python applications which supports both ASGI and WSGI application protocols.\r\n\r\nIt isn't as well known in the Django community as an option - hopefully this will help that.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 48,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-06-26T16:57:50Z",
        "closed_at": "2023-06-27T03:21:55Z",
        "merged_at": null,
        "body": "Fixed collectstatic when unsupported manifest file already exists.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-26T15:02:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I think the correct solution to this security error was to add a validation step that rejects user names with certain characters, I hope this is the correct solution and if something else needs to be changed, please let me know, thank you very much.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-06-26T11:51:45Z",
        "closed_at": "2023-06-26T12:22:54Z",
        "merged_at": "2023-06-26T12:22:54Z",
        "body": "This bumps minimum supported versions of selenium to the first release to support Python 3.10.\r\n\r\nticket-34233\r\nrefs PR #17001",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-06-26T05:38:53Z",
        "closed_at": "2023-06-27T11:50:43Z",
        "merged_at": "2023-06-27T11:50:43Z",
        "body": "Thanks Philipp Maino for the report.\r\n\r\nticket-34671",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 11,
        "changed_files": 4,
        "created_at": "2023-06-25T18:18:50Z",
        "closed_at": "2023-07-14T11:09:59Z",
        "merged_at": "2023-07-14T11:09:59Z",
        "body": "https://code.djangoproject.com/ticket/34677",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 37852,
        "deletions": 21758,
        "changed_files": 1220,
        "created_at": "2023-06-25T12:36:31Z",
        "closed_at": "2023-06-25T14:04:15Z",
        "merged_at": null,
        "body": "https://code.djangoproject.com/ticket/34677",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-06-25T10:23:28Z",
        "closed_at": "2023-06-25T10:38:55Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-25T03:39:58Z",
        "closed_at": "2023-06-26T04:56:34Z",
        "merged_at": "2023-06-26T04:56:34Z",
        "body": "https://code.djangoproject.com/ticket/34678",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 60,
        "deletions": 12,
        "changed_files": 7,
        "created_at": "2023-06-25T03:03:56Z",
        "closed_at": "2023-08-07T10:23:11Z",
        "merged_at": null,
        "body": "This is an initial draft to fix [ticket #22055 - 404 page does not display stack trace when Resolver404 is raised from a view](https://code.djangoproject.com/ticket/22055).\r\n\r\nThe desired behaviour is that, in debug mode:\r\n\r\n- `Resolver404` raised from `django.core` returns a 404 page.\r\n- `Http404` raised at any time returns a 404 page.\r\n- `Resolver404` raised in a view (as in by an incorrect lookup) returns a 500 page with a 404 status code (for backwards compatibility) and a backtrace to enable debugging of which call to `resolve` requires amendment.\r\n\r\nThe implementation is as such:\r\n\r\n1. `Resolver404` exception now has a class attribute of `traceback=True` which can be set at initialisation. \r\n2. `django.urls.resolve` also accepts a keyword argument of `traceback`, defaulting to `True`, which is passed to `Resolver404` if raised by the function.\r\n3. If a `Resolver404` is raised with the default value of `traceback=True`, a 500 error page with a status code of 404 will be shown instead of a 404 error page.\r\n4. In `django.core`, calls to `django.urls.resolve` are made with `traceback=False` to suppress the 500 page and display the normal 404 page.\r\n\r\nSome tests have been added to verify this behaviour.\r\n\r\nI would be interested in any feedback on whether there are additional locations where `traceback=False` might need to be set on calls to `django.urls.resolve`.\r\n\r\nI did consider implementing the \"urlconf traceback\" seen on the regular 404 page - where Django tells the user what url patterns have been tried to find the page - in the 500 page template, but this would require a considerable refactor of `django.core.views.debug` and so I have left it for now.\r\n\r\nThanks! ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-06-24T10:43:24Z",
        "closed_at": "2023-06-26T03:21:53Z",
        "merged_at": "2023-06-26T03:21:53Z",
        "body": "Fixes [34676](https://code.djangoproject.com/ticket/34676#ticket).",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-24T08:31:40Z",
        "closed_at": "2023-06-25T10:43:25Z",
        "merged_at": null,
        "body": "fix this error:\r\n```\r\n  File \"/django/db/backends/mysql/operations.py\", line 318, in convert_uuidfield_value\r\n    value = uuid.UUID(value)\r\n  File \"/usr/lib/python3.8/uuid.py\", line 175, in __init__\r\n    raise ValueError('badly formed hexadecimal UUID string')\r\nValueError: badly formed hexadecimal UUID string\r\n```\r\n\r\n**because our value is equal to blank**",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 66,
        "deletions": 40,
        "changed_files": 2,
        "created_at": "2023-06-24T04:52:13Z",
        "closed_at": "2023-06-24T16:11:54Z",
        "merged_at": null,
        "body": "fixed problem to support different encodings",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 45,
        "deletions": 44,
        "changed_files": 2,
        "created_at": "2023-06-24T01:24:08Z",
        "closed_at": "2023-06-26T05:39:10Z",
        "merged_at": null,
        "body": "This should solve the view problem, any recommendation is more than welcome",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 63,
        "deletions": 38,
        "changed_files": 1,
        "created_at": "2023-06-24T00:19:11Z",
        "closed_at": "2023-06-24T01:15:39Z",
        "merged_at": null,
        "body": "This should solve the view problem, any recommendation is more than welcome",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-06-23T18:58:03Z",
        "closed_at": "2023-06-26T12:33:28Z",
        "merged_at": "2023-06-26T12:33:28Z",
        "body": "In Selenium 4, the old way of setting capabilities for remote web drivers was deprecated.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-06-23T17:56:25Z",
        "closed_at": "2023-06-23T19:52:04Z",
        "merged_at": "2023-06-23T19:52:04Z",
        "body": "See https://github.com/django/django/pull/16636#issuecomment-1537296703. We would update `asgiref` dependency before Django 5.0 final release, so we can do this now to simplify #16636.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-06-23T17:48:11Z",
        "closed_at": "2023-06-23T19:37:27Z",
        "merged_at": "2023-06-23T19:37:26Z",
        "body": "Follow up to 38e391e95fe5258bc6d2467332dc9cd44ce6ba52.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-22T23:06:42Z",
        "closed_at": "2023-06-23T00:18:04Z",
        "merged_at": null,
        "body": "This is a work in progress pull request.\r\n\r\nCurrently the session keys in `django_auth` is used to authenticate users (or any other session data).\r\n\r\nIf we sign the session keys when setting them in the cookie, and unsign them when reading, a BadSignature will be thrown if the session key is not signed or signed with a different secret key.\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-22T20:27:43Z",
        "closed_at": "2023-06-23T04:25:05Z",
        "merged_at": null,
        "body": "Ahead of https://github.com/django/django/pull/16421 could we correct the spelling of this phrase? \r\n\r\nSee comment https://github.com/django/django/pull/16421#discussion_r1061179369\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 15,
        "changed_files": 10,
        "created_at": "2023-06-22T10:59:01Z",
        "closed_at": "2023-06-23T08:10:17Z",
        "merged_at": "2023-06-23T08:10:17Z",
        "body": "Following on from https://github.com/django/django/pull/16943#discussion_r1232751444.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-20T19:10:41Z",
        "closed_at": "2023-06-21T04:39:32Z",
        "merged_at": null,
        "body": "\u2026rs and form.name_of_field.errors\r\n\r\nCautioned the developers against using both {{ form.errors }} and {{ form.name_of_field.errors }} in their templates.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 36,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-06-20T18:59:32Z",
        "closed_at": "2023-10-05T03:20:33Z",
        "merged_at": null,
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-20T09:43:35Z",
        "closed_at": "2023-06-20T10:59:32Z",
        "merged_at": "2023-06-20T10:59:32Z",
        "body": "https://github.com/django/django/blob/d6e9ec40145b9edc65e8d0c65bd3f4ef8a7a27bb/django/contrib/admin/checks.py#L450-L454",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-20T01:01:19Z",
        "closed_at": "2023-06-20T01:15:11Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-19T11:45:09Z",
        "closed_at": "2023-06-19T18:15:38Z",
        "merged_at": "2023-06-19T18:15:38Z",
        "body": "(will need to experiment as to what the issue is, will update the PR when it is ready)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-18T06:45:46Z",
        "closed_at": "2023-06-18T11:20:05Z",
        "merged_at": "2023-06-18T11:20:05Z",
        "body": "See [logs](https://github.com/django/django/actions/runs/5301438348).",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-18T06:41:25Z",
        "closed_at": "2023-06-18T11:02:09Z",
        "merged_at": "2023-06-18T11:02:09Z",
        "body": "See [logs](https://github.com/django/django/actions/runs/5301438348/jobs/9595709316).",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-06-17T17:11:55Z",
        "closed_at": "2023-06-19T04:08:49Z",
        "merged_at": "2023-06-19T04:08:49Z",
        "body": "https://code.djangoproject.com/ticket/34517\r\n\r\nAvoids reading the image size when the dimensions fields (image_width,\r\nimage_height) do not exist, as that operation may be expensive.\r\n\r\nPartially reverts ea53e7c09f1b8864c20c65976bbeaeab77abdaec, that dropped\r\nthe check for the dimension fields in update_dimension_fields(), because\r\nthe post_init signal was no longer registered without dimension fields.\r\n\r\nHowever, another code path to that function exists: when the\r\nImageFileField is save()d, the name from the storage is setattr()ed on\r\nthe field, and ImageFileDescriptor calls update_dimension_fields()\r\nbecause the image size might have changed.\r\nKeep bailing out early when dimensions are unused.\r\n\r\nBesides, computing the image dimensions causes to close() the file,\r\nresulting in a backward-incompatible change. The test protects against\r\nthat change.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-17T15:38:28Z",
        "closed_at": "2023-06-17T16:04:15Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-06-16T21:36:50Z",
        "closed_at": "2023-06-18T17:23:36Z",
        "merged_at": "2023-06-18T17:23:36Z",
        "body": "It seems that in `ArrayMaxLengthValidator` and `ArrayMinLengthValidator` ngettext's `number` argument depends on wrong key.\r\n\r\nhttps://code.djangoproject.com/ticket/34662",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-16T16:57:09Z",
        "closed_at": "2023-06-16T17:34:06Z",
        "merged_at": "2023-06-16T17:34:06Z",
        "body": "I think this adheres to the contribution guidelines -- is a single commit for a trivial typo fix. Let me know if I need to change anything. ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-06-16T16:30:50Z",
        "closed_at": "2023-06-16T16:51:58Z",
        "merged_at": null,
        "body": "Should adhere to the contribution guidelines -- trivial typo that I noticed while browsing the docs.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-06-16T13:38:28Z",
        "closed_at": "2023-06-21T06:54:49Z",
        "merged_at": "2023-06-21T06:54:49Z",
        "body": "Started work on patch. Yet to add documentation and tests.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-06-16T10:47:10Z",
        "closed_at": "2023-06-19T07:09:37Z",
        "merged_at": "2023-06-19T07:09:37Z",
        "body": "In `auth/user/change_password.html` there is a condition that checks existence of id_for_label for password1 field, the `{% endif %}` is closed in the wrong position and if the condition return False, the HTML will be corrupted (I'm not sure if it's possible to make the condition falsy)\r\n\r\n[Ticket Link](https://code.djangoproject.com/ticket/34656)",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-16T07:26:04Z",
        "closed_at": "2023-06-17T09:39:50Z",
        "merged_at": "2023-06-17T09:39:50Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 90,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-06-15T08:42:09Z",
        "closed_at": "2023-06-15T08:52:26Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 72,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-06-15T02:41:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- [ticket 22125](https://code.djangoproject.com/ticket/22125)\r\n- Following PR #10435\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 89,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-14T22:56:57Z",
        "closed_at": "2023-06-22T11:36:39Z",
        "merged_at": null,
        "body": "Hello!\r\n\r\nFrom what I understood from ticket description, we need to import the watchfiles module and extend its class\r\n\r\nThanks in advance for review ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 454,
        "deletions": 138,
        "changed_files": 4,
        "created_at": "2023-06-14T20:36:28Z",
        "closed_at": "2023-07-28T12:18:07Z",
        "merged_at": "2023-07-28T12:18:07Z",
        "body": "Hello!\r\n\r\nFrom what I understood from ticket description it was needed to refactor tests that share same logic from `ChoiceWidget` and store it in separate class and add test coverage to `RadioSelect` because it was lacking tests in comparison to `Select`.\r\n\r\nThanks in advance for review :)",
        "comments": 6
    }
]