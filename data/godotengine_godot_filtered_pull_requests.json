[
    {
        "merged": false,
        "additions": 103,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-10-18T09:17:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "fix #51380 XMLParser handles white space outside tags incorrectly/inconsistently\r\nfix #81896 XMLParser incorrectly treats two '\\n' as NODE_ELEMENT_END\r\n\r\n### Add an option to ignore whitespace characters\r\n```cpp\r\nXMLParser parser;\r\nparser.set_ignore_whitespace_text(false); // default true\r\n```\r\n\r\n ### [Irrlicht Engine's implementation](https://sourceforge.net/p/irrlicht/code/HEAD/tree/trunk/source/Irrlicht/CXMLReaderImpl.h#l267) \r\n\r\n```cpp\r\n//[...]\r\n// By default xml preserves all whitespace. But Irrlicht dropped some whitespace by default\r\n// in the past which did lead to OS dependent behavior. We just ignore all whitespace for now\r\n// as it's the closest to fixing behavior without breaking downward compatibility too much.\r\nif ( IgnoreWhitespaceText )\r\n{\r\n\tchar_type* p = start;\r\n\tfor(; p != end; ++p)\r\n\t\tif (!isWhiteSpace(*p))\r\n\t\t\tbreak;\r\n\r\n\tif (p == end)\r\n\t\treturn false;\r\n}\r\n//[...]\r\n```\r\n\r\n### Unit Test\r\n#### Ignore White\r\n\r\n| Input | Expected |\r\n|------|----------|\r\n| `<xml><element /></xml>` | no text |\r\n| `<xml>\\t<element /></xml>` | no text | \r\n| `<xml>\\t\\t<element /></xml>` | no text | \r\n| `<xml>\\t\\t\\t<element /></xml>` | no text | \r\n| `<xml>\\t\\t\\t\\t<element /></xml>` | no text | \r\n\r\n#### Not Ignore White\r\n\r\n| Input | Expected |\r\n|------|----------|\r\n| `<xml><element /></xml>` | no text |\r\n| `<xml>\\t<element /></xml>` | text(0x09) | \r\n| `<xml>\\t\\t<element /></xml>` | text(0x09 0x09) | \r\n| `<xml>\\t\\t\\t<element /></xml>` | text(0x09 0x09 0x09) | \r\n| `<xml>\\t\\t\\t\\t<element /></xml>` | text(0x09 0x09 0x09 0x09) | \r\n\r\n#### Ignore Trailing White\r\n| Input | Expected |\r\n|------|----------|\r\n| `<p>abc</p>` | EOF |\r\n| `<p>abc</p>\\t` | EOF | \r\n| `<p>abc</p>\\t\\t` | EOF | \r\n| `<p>abc</p>\\t\\t\\t` | EOF | \r\n| `<p>abc</p>\\t\\t\\t\\t` | EOF | \r\n\r\n#### Not Ignore Trailing White\r\n| Input | Expected |\r\n|------|----------|\r\n| `<p>abc</p>` | EOF |\r\n| `<p>abc</p>\\t` | EOF \\*| \r\n| `<p>abc</p>\\t\\t` | text(0x09 0x09) | \r\n| `<p>abc</p>\\t\\t\\t` | text(0x09 0x09 0x09) | \r\n| `<p>abc</p>\\t\\t\\t\\t` | text(0x09 0x09 0x09 0x09) | \r\n\r\n\\* *XMLParser::read() return EOF if the text has only one character left*\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-18T08:37:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Historically and up through Godot 4.0-beta4, parse errors in a malformed GDScript will be printed to output and reported to the debugger at runtime to interrupt execution. In 4.0-beta5 and later, parse errors for most scripts are no longer reported, and the debugger does not stop execution. (I say most because scripts used as named classes or preloads, e.g., still fail to resolve or load as a resource). Up through 4.1.1-stable, there is no indication at all in the editor that a script has failed to be run because of a parsing error, which is potentially quite confusing. In 4.1.2-stable, the addition of https://github.com/godotengine/godot/pull/78540/ at least prints an error when `ResourceFormatLoaderGDScript::load` fails, which a user can see in the debug panel. However, it is easily missed as execution is still not interrupted, and it does not show the actual parsing error anyway.\r\n\r\nThe root cause is a change in the responsiblity and logic of `GDScriptCache::get_shallow_script` introduced in https://github.com/godotengine/godot/pull/68374. Prior to that, `get_shallow_script` only loaded and cached the source code of a script. `GDScriptCache::get_full_script` would exit early if `get_shallow_script` failed because there would have been no script to call `GDScript::reload` on (which does the actual parsing and error reporting). Since the changes in the above PR, however, `get_shallow_script` now also parses the source code and passes along any errors. But `get_full_script` still exits early if `get_shallow_script` fails for any reason. This means that a script that loads sucessfully but hits an error during parsing will not make it to the `reload` call. Thus, the errors are never printed and never reported to the debugger.\r\n\r\nThe simplest fix is to exit from `get_full_script` early only when `get_shallow_script` returns a null `Ref`, indicating that the script simply failed to load. Actual parsing errors are ignored at that point so that `reload` will always be called on a script that loads. Then parsing errors will not be silently lost. Note that `get_shallow_script` will not have called `GDScriptCompiler::make_scripts` in the case of a parsing error, but this is fine because `get_shallow_script` is only called here for scripts that are not in the `full_gdscript_cache` and therefore were never compiled, and `reload` will exit after finding the same error during its own call of `GDScriptParser::parse`, well before compilation is attempted. \r\n\r\nOther callers of `get_shallow_script` of course still retain the ability to error out if that initial parsing fails.\r\n\r\nFixes https://github.com/godotengine/godot/issues/75545.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 288,
        "deletions": 1,
        "changed_files": 21,
        "created_at": "2023-10-18T07:30:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implements part of https://github.com/godotengine/godot-proposals/issues/8142",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-18T04:59:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Replace the algorithm with one that performs fewer multiplications. The variable names use the nomenclature from [the wikipedia page](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations).\r\n\r\nBenchmarked with this test file: https://gist.github.com/wareya/2b6183176fa95d391399722f09fd75cb\r\n\r\nCompiled something like: `g++ fptest.cpp -Wall -O3 -msse2 -I ../godot/godot4/ -I ../godot/godot4/platform/windows/ -o resample_new_cubic.exe -D MODE_NEW_CUBIC`\r\n\r\nBenchmark results (lower is better, zero order hold and linear shown for reference):\r\n\r\n```\r\nwareya@Toriaezu MSYS /c/users/wareya/dev/scrap\r\n$ ./resample_zoh.exe\r\n0.503047\r\n\r\nwareya@Toriaezu MSYS /c/users/wareya/dev/scrap\r\n$ ./resample_linear.exe\r\n0.692028\r\n\r\nwareya@Toriaezu MSYS /c/users/wareya/dev/scrap\r\n$ ./resample_new_cubic.exe\r\n1.262155\r\n\r\nwareya@Toriaezu MSYS /c/users/wareya/dev/scrap\r\n$ ./resample_old_cubic.exe\r\n1.420782\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-18T02:24:11Z",
        "closed_at": null,
        "merged_at": null,
        "body": "If a blend tree node is connected to an already-connected port and a new connection is made to that port, it will now attempt to disconnect that node and connect the new one rather than simply throwing up a generic error message.\r\n![godot windows editor dev x86_64_KPC8Rfdexb](https://github.com/godotengine/godot/assets/12756047/e88b2221-48b0-4b61-b23d-d899b15dc245)\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-18T01:38:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes https://github.com/godotengine/godot/issues/74224",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 71,
        "deletions": 21,
        "changed_files": 7,
        "created_at": "2023-10-18T01:29:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- Fixes https://github.com/godotengine/godot/issues/83071",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 29,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-18T01:18:29Z",
        "closed_at": "2023-10-18T06:54:38Z",
        "merged_at": null,
        "body": "This exposes `get_packet` in `ENetPacketPeer` to scripting, and implements https://github.com/godotengine/godot-proposals/issues/8175",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-18T00:00:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Replaces some BBCode that was accidentally left in the C# documentation with the proper XML syntax.\r\n\r\nThis documentation is usually copied from the Godot documentation which uses BBCode, and I must've missed these in the PR reviews.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T21:52:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This makes it easier to know what's going on when using `print()` in a `@tool` script.\r\n\r\n- See https://github.com/godotengine/godot-proposals/issues/8153.\r\n\r\n## Preview\r\n\r\n![Screenshot_20231017_235109](https://github.com/godotengine/godot/assets/180032/cc2dca93-b29f-4aa1-a03f-748ddd652bba)\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 246,
        "deletions": 3,
        "changed_files": 16,
        "created_at": "2023-10-17T19:43:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Starting a draft to discuss the proper way to integrate support for external texture in Godot 4.x.\r\n\r\nThis is feature that's [forward-ported from Godot 3.x](https://github.com/godotengine/godot/pull/36342) and is key to enable support for texture that can be _painted_ by the target platform (see the original PR for target use-cases).\r\n\r\nAs mentioned in https://github.com/godotengine/godot/pull/36342#pullrequestreview-369375100, this was punted for the 4.x release due to GLES reimplementation and the need to figure out how this applies to Vulkan.\r\n\r\nThis draft aims to restart the conversation in order to properly integrate it in Godot 4.x \r\n\r\nAddresses https://github.com/godotengine/godot/issues/65778\r\nAddresses https://github.com/godotengine/godot-proposals/discussions/4902\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 279,
        "deletions": 16,
        "changed_files": 3,
        "created_at": "2023-10-17T18:44:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR will add the missing duplicate / cut / copy / paste functions for the animation tree editors.\r\n\r\n- [x] Blend Tree\r\n- [ ] 1D Blend Space\r\n- [ ] 2D Blend Space\r\n- [ ] State Machine\r\n\r\nFixes #80009\r\nFixes https://github.com/godotengine/godot-proposals/issues/8146",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-17T18:41:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "There was even a comment and everything... Fixes https://github.com/godotengine/godot/issues/81964. Supersedes https://github.com/godotengine/godot/pull/80830 (though if you still want to increase spacing, be my guest!)\r\n\r\n![image](https://github.com/godotengine/godot/assets/11782833/8342eea3-a743-48de-8a7f-0aec10189c9b)\r\n\r\nAlso a couple of code quality changes.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-17T18:04:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Follow up to https://github.com/godotengine/godot-docs/pull/7968\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 32,
        "changed_files": 8,
        "created_at": "2023-10-17T17:52:50Z",
        "closed_at": "2023-10-17T22:06:02Z",
        "merged_at": "2023-10-17T22:06:02Z",
        "body": "Follow-up to / C# version of #83461.\r\n\r\nChecked the code, behavior of these seems the same as in core. So pretty much just synced the wording to changes from #83461. Suggestions welcomed if some old wording from here is preferred etc. (could change the core docs instead). Also not sure about the formatting.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 58,
        "deletions": 0,
        "changed_files": 9,
        "created_at": "2023-10-17T17:24:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nThis PR adds ability to load multiple PCKs and/or ZIPs by adding whatever you want into `Additional Packs` in `Project Settings > Application > Run`\r\n![2023-10-17_19-02](https://github.com/godotengine/godot/assets/132811907/d5913e63-458f-4a8e-996b-6af771c7ffc5)\r\n*From my modified version of Godot. That's why they are .spk instead of .pck*\r\n![2023-10-17_19-50](https://github.com/godotengine/godot/assets/132811907/a8ec8804-2311-4f97-ba79-fd6df750ce46)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T17:21:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #78878.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 360,
        "deletions": 159,
        "changed_files": 9,
        "created_at": "2023-10-17T16:48:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "![VS Connections](https://github.com/godotengine/godot/assets/50084500/2be25d06-b947-4204-a945-e1cbfbff162a)\r\nTo demonstrate the new connection functionality, I went ahead and implemented some UX improvements for VS.\r\nDepends on #83508. \r\n\r\n- Add a context menu for connections in the VisualShader editor consisting of\r\n\t- Disconnect: Deletes the connection\r\n\t- Insert New Node: Opens the \"Create Shader Node\" dialog and inserts the chosen node by splitting the original connection.\r\n\r\nTODO:\r\n- [ ] Allow dragging fully unconnected nodes on connections to insert them\r\n- [ ] Polish",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 278,
        "deletions": 154,
        "changed_files": 7,
        "created_at": "2023-10-17T16:11:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "![GE Connections](https://github.com/godotengine/godot/assets/50084500/35f9e768-f854-4e2f-b861-30129e4a8ad2)\r\n\r\n**Detailed changes:**\r\n- Add `get_closest_connection_at_point` which return the closest connection at a given point in GraphEdit's local screen space (with the given maximum search distance). See the docs for a usage example.\r\n- Optimize connection drawing/handling\r\n\t- Introduce connections HashMap (node -> its connections)\r\n\t\t- The old logic iterated over all connections for every GraphNode, now only the relevant connections are checked where possible.\r\n\t - Each connection now caches the line, the start and end positions (in screen space) as well as an AABB. This allows for updating/drawing only those connections visible on the screen (this had a huge performance impact for large graphs). It's also used to accelerate fetching the connection from a screen position which is introduced in this PR.\r\n- Adjust theming/visual appearance\r\n\t- hovering a connection now highlights it (theme item `connection_hover_tint_color`)\r\n\t- the highlight color when dragging a connection onto a valid port is now a theme item (theme item `connection_valid_target_tint_color`)\r\n- Change signature of `get_connection_list` (now returns the list instead of using a return parameter) [only used internally]\r\n\r\nFor a demonstration of these new features see #83510.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-17T15:33:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes #82501\r\n\r\nThe close/delete button was removed [intentionally](https://github.com/godotengine/godot/pull/79311#issuecomment-1701027224) from these editors. Users are supposed to use context menu delete option or the `DEL` key. However, there was no \"Delete\" option in `AnimationNodeBlendTree` editor's context menu. The only way to delete a node was using `DEL` key, but it's hard to discover.\r\n\r\nMy initial thought was to add the missing \"Delete\" option. But the right click menu in this editor was actually not a standalone context menu. Right clicking triggers the \"Add Node\" menu option. So this PR readds the button instead.\r\n\r\n![Peek 2023-10-17 23-26](https://github.com/godotengine/godot/assets/372476/881ebc73-78fb-40d4-a9e0-bc843c4d75dc)\r\n\r\nI have to adjust the editor theme so that the button's position looks right. Otherwise it looks too far away from the right edge. This is the only place in the editor that uses `get_titlebar_hbox()`, so I think the modification won't affect others.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 303,
        "deletions": 25,
        "changed_files": 12,
        "created_at": "2023-10-17T15:01:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Still needs testing.\r\n~~Also, there's one issue where the comments for the 'Export' properties don't immediately appear after launching Godot, rebuild is required to show.~~\r\n\r\nrequired .csproj `<GenerateDocumentationFile>True</GenerateDocumentationFile>`\r\n\r\n![image](https://github.com/godotengine/godot/assets/14800320/a37f0c6c-b1fb-417b-8a4f-07d8df8d0b99)\r\n![30N9OK8 7{39{)BWG@C(%RN](https://github.com/godotengine/godot/assets/14800320/1a69e052-a5a6-48ae-937e-28e3a82a4ed0)\r\n![C D4LHV%8UP8 G)VKY_VUE](https://github.com/godotengine/godot/assets/14800320/9e25090a-1d84-4ebd-95ae-bbab014db438)\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-17T14:36:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Extracted from #79475\r\n- Converts certain `[code]` phrases as C# keywords, changing their wrapping from `<c>code</c>` to `<see langword=\"code\"/>`.\r\n- As many cases are GDScript-specific, this doesn't check against *all* C# keywords; instead, it pulls from `langword_check` \u2014 a predefined collection of safe strings (currently: `true`, `false`, `null`).\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 107,
        "deletions": 84,
        "changed_files": 2,
        "created_at": "2023-10-17T14:36:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently, you can only load animations and animation libraries one-by-one in the \"Edit Animation Libraries\" dialog. This PR allows the user to now pick multiple ones at once to load.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T13:50:56Z",
        "closed_at": "2023-10-17T14:24:19Z",
        "merged_at": "2023-10-17T14:24:19Z",
        "body": "Seems like an oversight from when the tab was split off into its own component (in #80490)\r\n\r\n* Fixes: #83500\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 56,
        "deletions": 22,
        "changed_files": 1,
        "created_at": "2023-10-17T13:01:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The new option to set the unwrap mesh UV2 option in PrimitiveMeshes from the MeshInstance3DEditorPlugin now respects the global rules which disallows modifications to foreign resources and pre-emptively shows more informative error messages for common ArrayMesh unwrapping fail cases rather than conveying a generic popup error message and providing the actual information as a notification.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T13:00:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is extracted from a conversation here: https://github.com/godotengine/godot/pull/83420.\r\n\r\nWhile poking around in `lightmap_gi`, I noticed there is code to avoid generating probes too close to manually placed probes, but it was doing an `is_equal_approx` check against the two positions instead of a distance check, so this was never being triggered. I changed it to a distance check so the behavior is as expected now:\r\n\r\n![probes_by_approx](https://github.com/godotengine/godot/assets/18580013/a59c6a67-7ea2-4d8a-a8fe-db85ea2bee32)\r\n![probes_by_dist_good](https://github.com/godotengine/godot/assets/18580013/619a9aad-c68d-41ea-9c6b-c3003f8b7003)\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 83,
        "deletions": 42,
        "changed_files": 6,
        "created_at": "2023-10-17T11:25:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is a longstanding issue in both the Mobile and GL Compatibility renderer.\r\n\r\nMeshes pair with all lights that touch them, and then at draw time, we send all paired lights indices to the shader (even if that light isn't visible). The problem is that non-visible lights aren't uploaded to the GPU and don't have an index. So we end up using a bogus index\r\n\r\nFixes: https://github.com/godotengine/godot/issues/81143\r\nFixes: https://github.com/godotengine/godot/issues/83340\r\nFixes: https://github.com/godotengine/godot/issues/79463\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 71,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-10-17T11:10:48Z",
        "closed_at": "2023-10-17T13:00:05Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nThis PR adds `tablet` SConst option that allows it to disable by appending `tablet=no` in command line or build profile",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 19,
        "changed_files": 4,
        "created_at": "2023-10-17T10:57:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82782\r\n\r\nTwo things to improve:\r\n1. the argument order, I put `p_viewport_size` to the last but it may better be inserted somewhere front\r\n2. If 1 is ok and in general this commit is ok, I will port it to compatibility and mobile mode.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 114,
        "deletions": 33,
        "changed_files": 3,
        "created_at": "2023-10-17T10:12:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes https://github.com/godotengine/godot/issues/61832\r\n\r\nI added it for 4.2 and used the \"bug\" as the original issue is labeled the same. But I guess, if that's too risky, it could be moved to 4.3.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-10-17T10:08:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes  https://github.com/godotengine/godot/issues/83258\r\nFixes scale and amount ratio being tied together\r\nFixes initial ramp overriding color\r\n\r\nThe last two issues were reported to me in DM",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T09:58:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82855\r\nNote that I still can't reproduce the crash, so I can't test if it fully fixes the issue.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 57,
        "deletions": 6,
        "changed_files": 6,
        "created_at": "2023-10-17T09:47:38Z",
        "closed_at": null,
        "merged_at": null,
        "body": "* Fixes #83468.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 72,
        "changed_files": 2,
        "created_at": "2023-10-17T08:42:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes https://github.com/godotengine/godot/issues/58216 by removing resampling-related code from AudioStreamPlaybackWAV and making it inherit from AudioStreamPlaybackResampled.\r\n\r\nI only tested this at a basic level, not extensively. Requires testing with a wide variety of audio files, with all kinds of looping set up. Performance testing is needed, too. The cubic hermite resampling that AudioStreamPlaybackResampled does is extremely cheap in theory, but I'm not sure it's been battle tested by running several dozen instances of it at once.\r\n\r\nThis has the added bonus of bypassing the issue the ADPCM decoder has of not doing interpolation; before this patch, low sample rate ADPCM audio has nasty aliasing artifacts that you can even see with your eyes. By relying entirely on AudioStreamPlaybackResampled, that issue is avoided. I'm not sure if an issue is already open for this or not.\r\n\r\n![Audacity_2023-10-17_04-10-42](https://github.com/godotengine/godot/assets/585488/7ad6e6c4-0fad-491c-930b-f72a24d2e177)\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 91,
        "changed_files": 1,
        "created_at": "2023-10-17T08:39:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- Removes support for deprecated `altool` notarization.\r\n- Disables `rcodesign` support for C# version and adds an error message if GDExtension libraries are found during export, since `rcodesign` is not capable of signing bundles with embedded libraries.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1525,
        "deletions": 268,
        "changed_files": 33,
        "created_at": "2023-10-17T07:02:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- Add support for adding custom options (checkboxes and optionboxes) to the dialogs (both native and built-in).\r\n- Add support for using native dialogs in the editor.\r\n\r\n<details>\r\n <summary>Screenshots</summary>\r\n<img width=\"700\" alt=\"Screenshot Windows\" src=\"https://github.com/godotengine/godot/assets/7645683/5f67d4a7-a1f0-4c44-908a-a6736622fd43\">\r\n<img width=\"700\" alt=\"Screenshot Linux\" src=\"https://github.com/godotengine/godot/assets/7645683/5de0343c-3715-4d76-979b-443e2e34b2ec\">\r\n<img width=\"700\" alt=\"Screenshot macOS\" src=\"https://github.com/godotengine/godot/assets/7645683/504db96c-fc49-4e3b-a7fe-755589f6073f\">\r\n<img width=\"700\" alt=\"Screenshot built-in\" src=\"https://github.com/godotengine/godot/assets/7645683/7fe2d235-4a6b-48b9-a94e-253b766e353c\">\r\n\r\n</details>\r\n\r\nRelated proposal: https://github.com/godotengine/godot-proposals/issues/1123",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T05:31:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The default exit code is EXIT_FAILURE. When using --quit and there is no failure, it should be EXIT_SUCCESS.\r\n\r\nFixes https://github.com/godotengine/godot/issues/83449\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 51,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-17T05:11:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR introduces a new node derived from AnimationNodeRoot which can store another AnimationNodeRoot in the tree's parameter data. This facilitates the ability to have dynamic per-instance composible animation graphs which can be useful for games making use of smart objects or other forms of extensive dynamically loaded bespoke animations such as emotes.\r\n\r\nImplements the proposal described here: https://github.com/godotengine/godot-proposals/issues/8162",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T04:11:47Z",
        "closed_at": "2023-10-17T14:24:19Z",
        "merged_at": "2023-10-17T14:24:19Z",
        "body": "This seemed to be a simple case of a missing condition in an if statement with a few different flags. I'm not super familiar with the tilemap code but hopefully this is the correct place to add this check.\r\n\r\nFixes #83474\r\n\r\n\r\n### Testing Procedure\r\n\r\n- Download the example project in issue #83474 and test it on master. Upon running the game, press the space key to toggle the material and observe that no visual change occurs.\r\n- Checkout this Pull Request and recompile.\r\n- Test the project again. It should work as expected. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 13,
        "changed_files": 10,
        "created_at": "2023-10-16T20:15:52Z",
        "closed_at": "2023-10-17T14:24:19Z",
        "merged_at": "2023-10-17T14:24:19Z",
        "body": "Clarifies docs for [the `operator*`s performing `xform_inv`](https://github.com/godotengine/godot/blob/3bc1c9b5e087c73f63a43481d976b1156afe78d5/core/variant/variant_op.cpp#L343-L378). Most of these were said to _\"inversly transform ...\"_ but in most cases that's not always true. I've checked the source for these one by one, hopefully got everything right. Also changed some other relevant docs. Correcting mistakes/inconsistencies, suggestions on wording, etc. welcomed as always. :slightly_smiling_face:\r\n\r\n\r\nC# version: #83514.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T19:52:11Z",
        "closed_at": "2023-10-17T14:24:19Z",
        "merged_at": "2023-10-17T14:24:19Z",
        "body": "Fixes #83456",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-16T19:47:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nI think if `ce.expected` equals 1 argument, then we shouldn't use plural. Only add `s` when the number of arguments isn't equal to 1.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T18:30:17Z",
        "closed_at": "2023-10-17T14:24:19Z",
        "merged_at": "2023-10-17T14:24:19Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nFixes #83453",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 14423,
        "deletions": 13270,
        "changed_files": 31,
        "created_at": "2023-10-16T18:12:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "A huge chunk of `RenderingDeviceVulkan` is API-agnostic bookkeeping, validation, etc. Such code is also shared with others, like `RenderingDeviceD3D12`. This PR keeps a single, non-abstract `RenderingDevice` with all those API-agnostic elements and moves all the API-specific parts to a thin wrapper around the driver, which is `RenderingDeviceDriver` for Vulkan. This makes much easier to write additional rendering drivers, by allowing one to focus on the API-specific stuff. In some cases that will require modifying the interface between `RD` and `RDD`, which is not exposed to the user.\r\n\r\nOther relevant points:\r\n- A common context interface has been extracted from `VulkanContext` (`APIContextRD`) with the bare minimum set of services `RenderingDevice` and direct usage needs. (The specific `RenderingDeviceDriver`s have access to the specific context implementation, which open doors for them to a much richer, but non-standard, API.)\r\n- There are important notes on design choice in the code. Future maintainers, please follow or discuss, but don't break consistency.\r\n- Every struct involved now have default initializers, both in `RenderingDevice` and `RenderingDeviceDriver`.\r\n- Some of the wiring between context and `RD` has been enhanced so now you can instantiate a `RenderingDevice` even when Godot is running in compatibility mode (this will allow to have a `RD`-based lightmapper available in a GL compatibility project). This piece of code shows how to ensure you have a usable local `RenderingDevice` in any circumstances:\r\n   ```C++\r\n   RD *orig_rd_singleton = RD::get_singleton();\r\n\r\n   ApiContextRD *vc = nullptr;\r\n   if (GLOBAL_GET(\"rendering/renderer/rendering_method\") == \"gl_compatibility\") {\r\n   #ifdef VULKAN_ENABLED\r\n   \tif (GLOBAL_GET(\"rendering/rendering_device/driver\") == \"vulkan\") {\r\n   \t\tvc = memnew(VulkanContext);\r\n\t}\r\n   #endif\r\n   \tCRASH_COND_MSG(!vc, \"No RD driver available.\");\r\n   \tvc->initialize();\r\n   } else {\r\n   \tvc = RD::get_singleton()->get_context();\r\n   }\r\n\r\n   RenderingDevice *rd = memnew(RenderingDevice);\r\n   if (GLOBAL_GET(\"rendering/renderer/rendering_method\") == \"gl_compatibility\") {\r\n   \tDEV_ASSERT(RD::get_singleton() == rd);\r\n   }\r\n   rd->initialize(vc, true);\r\n   // Do stuff with RD here.\r\n   memdelete(rd);\r\n\r\n   if (GLOBAL_GET(\"rendering/renderer/rendering_method\") == \"gl_compatibility\") {\r\n    \tmemdelete(vc);\r\n   }\r\n   DEV_ASSERT(RD::get_singleton() == orig_rd_singleton);\r\n   ```\r\n- Deprecations: `RD::texture_get_native_handle()` (superfluous) and `DRIVER_RESOURCE_VULKAN_*` (replaced by API-agnostic).\r\n\r\nThis includes a couple of merged (commits will go away once rebased) and unmerged (#82797) PRs.\r\n\r\nTODO:\r\n- [X] Finish debugging and fix a few known issues.\r\n- [ ] Rebase on top of the lastest `master`.\r\n- [ ] D3D12: Adapt to this new infrastucture.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T18:06:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nFixes #83410 ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 134,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-16T18:00:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Allows for searching for one or more nodes using a callable\r\n\r\n```gdscript\r\nfunc _ready():\r\n  query_child(_query_node)\r\n  query_children(_query_node)\r\n  query_parent(_query_node)\r\n\r\nfunc _query_node(node): return node is CustomClass and health > 10\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T17:34:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- Follow-up to https://github.com/godotengine/godot/pull/83445 (can be merged independently).\r\n\r\nThis makes it easier to go back to the pull request the build was made from. The build name is displayed in the Project Manager, editor About dialog and editor version tooltip (at the bottom of the editor). It's also copied within the Copy System Information text.\r\n\r\n## Preview\r\n\r\n### GitHub Actions build from a push\r\n\r\n![Screenshot_20231016_062303](https://github.com/godotengine/godot/assets/180032/cea45ac2-9410-497a-b260-81785c1b8581)\r\n\r\n### GitHub Actions build from a pull request\r\n\r\n*PR number is `11` in this example (I was testing on my fork).*\r\n\r\n![Screenshot_20231016_062321](https://github.com/godotengine/godot/assets/180032/9bb34f93-c548-4653-ae14-447e6caef2ee)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T15:53:23Z",
        "closed_at": "2023-10-16T16:46:13Z",
        "merged_at": "2023-10-16T16:46:13Z",
        "body": "- Follow-up to https://github.com/godotengine/godot/pull/75472.\r\n- Fixes https://github.com/godotengine/godot/issues/83405.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 56,
        "deletions": 8,
        "changed_files": 8,
        "created_at": "2023-10-16T15:27:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This information is visible in the project manager, editor, command line help and About dialog (trimmed to 32 characters in places where it's displayed in the editor). It can also be queried using `Engine.get_version_info()[\"branch\"]`.\r\n\r\nThis helps avoid mistakes when testing multiple builds from various branches.\r\n\r\nInternally, the constant is `VERSION_GIT_BRANCH` as `VERSION_BRANCH` is already used to store the `major.minor` version number.\r\n\r\nIf the branch name is a standard Godot maintenance branch (such as `master` or `4.1`), the branch name is an empty string (or `unknown` in `Engine.get_version_info()`'s return value).\r\n\r\n## Preview\r\n\r\n![Screenshot_20231016_005945](https://github.com/godotengine/godot/assets/180032/8ba60362-d9aa-4fd3-92af-bd7ba758f60e)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 160,
        "deletions": 162,
        "changed_files": 2,
        "created_at": "2023-10-16T13:17:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently, many inputs don't follow the alphabet order they intended to follow (IMO). This PR will fix it. It should not break the backward compatibility, because input node operates with the property name rather than index.\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T12:39:38Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The documentation stated the track was added to this, instead of `to_animation`\r\n\r\n* Fixes: https://github.com/godotengine/godot-docs/issues/8255\r\n\r\nAs per the code:\r\nhttps://github.com/godotengine/godot/blob/a60fc7f7c86daad48a8b23c9e4e1fe49cf3a0881/scene/resources/animation.cpp#L3795-L3813\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-10-16T12:20:46Z",
        "closed_at": "2023-10-16T16:46:13Z",
        "merged_at": "2023-10-16T16:46:13Z",
        "body": "Removes bindings inside `#ifdef TOOL_ENABLED` that would only be bound in the editor and break the C# bindings in exported games.\r\n\r\n- Fixes https://github.com/godotengine/godot/issues/82993.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-16T11:58:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "On Android, if input came in on a tick or frame after the physics_process or process, it could be missed when relying on `is_action_just_pressed()`. This is because by the time the action got around to being checked, the action's tick or frame would have passed.\r\n\r\nThis PR changes the timestamp for the action to be for the next tick or next frame (preventing missed input), but only immediately prior to `process` and `physics_process`, in order to minimize latency.\r\n\r\nAlternative to #83301\r\nFixes #66318\r\n\r\n## Discussion\r\nThere's likely several ways of fixing this (and different ways of doing the sync, e.g. `MainLoop` versus `Main::iteration()` versus `SceneTree` etc). There might be some better way of protecting people making custom `MainLoop` - welcome suggestions here, I've just used some `DEV_ASSERTS` here, which (rightly or wrongly) is assuming they are building from source, as a custom `MainLoop` seems to be _here there be dragons_ territory. Custom `MainLoop` is really difficult in general once you get down to the subtleties of timing I guess.\r\n\r\nI was originally unsure about #83301 but it's actually not a bad approach, as essentially we want to pass any input that is occurring after the \"read point\" to the next tick / frame. But the latency is a bit of a downside, especially for input that could unnecessarily be shifted to the next tick which might be on a later frame. \r\n\r\nI first experimented with storing a read tick on each action, such that if it had not been read so far on that tick, the registered tick would be placed on the current tick, but if it had been read, it would be `tick+1`. This would make latency pretty minimal, but I wasn't keen on the haphazard / stochastic nature, so am now of the opinion a fixed sync point might be better.\r\n\r\nHere I've placed the sync point just before the calls to `physics_process` and `process`. It may not gain a massive amount over just using `tick+1` everywhere (particularly for idle frame), but it seems slightly better for reducing latency, which is something we should strive for.\r\n\r\n## Notes\r\n* #83301 has the downside that it seems likely to unnecessarily introduced extra latency on non-Android platforms, whereas this PR should not have effects on other platforms.\r\n* Compared to #83301 this additionally fixes input on the frame as well as physics tick, as the frame also seems to share the vulnerability (although may occur less in practice).\r\n* This area can probably be improved in future if we proceed with #77062, as that makes the input timing slicing a bit more sensible. In fact that PR may also already fix the problem, it's been a while since I worked on it. However these PRs are good for interim fix.\r\n* We discuss Android here, but really the problem is common to platforms that have separate thread for input. That may be more platforms in future.\r\n* I also haven't tested this yet, it would be great to get some confirmation it works (the theory is sound).\r\n* `input_curr_tick` and `input_curr_process_frame` could possibly be atomic, I'll defer to @RandomShaper 's opinion on this.\r\n \r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T11:49:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Adds the multiplayer_authority ID value to the remote node debugger.\r\n![NVIDIA_Share_5BaKgFmKIn](https://github.com/godotengine/godot/assets/12756047/12586780-7135-47ba-b855-4e4563776ad0)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T11:03:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": ">Does anyone know what the `get_skips()` method is used for? I'd like to get 100% documentation completion on this class :slightly_smiling_face:\r\n\r\n_Originally posted by @Calinou in https://github.com/godotengine/godot/pull/48682#discussion_r631488773_\r\n            ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-16T10:31:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "During the review process of the #83353 PR a certain optimization was proposed by one of the members of the Godot team; said optimization can be applied to the related function, which is what this PR accomplishes.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T10:30:14Z",
        "closed_at": "2023-10-16T11:16:02Z",
        "merged_at": "2023-10-16T11:16:02Z",
        "body": "https://github.com/godotengine/godot-docs/pull/7884 on the docs changed the URL for this page referenced in the Android platform class reference; the change is live in `master`/4.2 and was backported to 4.1 in https://github.com/godotengine/godot-docs/pull/8217, which will be cherrypicked to 4.0 soon.\r\n\r\nIn-editor/on the web this will be fine, as the page will be redirected. The outdated link in the class reference breaks docs CI currently though, so we still need to adapt the link in the main repo. :)\r\n\r\nUntil then, I've made that change temporarily on the docs side in https://github.com/godotengine/godot-docs/pull/8244.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 755,
        "deletions": 164,
        "changed_files": 13,
        "created_at": "2023-10-16T10:19:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This allows the usage of C# generic type parameters in exported properties, methods, and signals, and fixes a couple issues with the existing generic analyzer. The behavior of these generic members should match with if you had exported them non-generically, so they work with all Variant types, exports and signals show up in the editor, GDScript scripts can call your generic methods, etc.\r\n\r\nThe biggest change is to the analyzer itself as lifting the restriction on generic usage opened the doors for some problematic edge cases. I left a big comment in the MustBeVariantAnalyzer file explaining it all, but basically it's just that some Variant types support being marshaled as a C# array `T[]` and others don't. It's not possible to know if an exported property of `T[]` is valid until we know what type replaces `T`, so that's what the analyzer now does.\r\n\r\n* Fixes #74960 \r\n* Fixes #82939\r\n* Fixes a bug where the MustBeVariantAnalyzer would miss enforcing the attribute on generic method calls when the type argument is inferred\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T09:49:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This should fix #83426, but I'd need it to be tested. @VansonLeung, would you give it a try, please?",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-16T08:37:27Z",
        "closed_at": "2023-10-16T11:16:02Z",
        "merged_at": "2023-10-16T11:16:02Z",
        "body": "Fixes #44358 (needs a cherry-pick for 3.x) and #83372 which was is a duplicate.\r\n\r\nMRP from #83372 (a little tweaked):\r\n| v4.2.beta1.official [b1371806a] | This PR | This PR<br>with added camera animation + drag enabled<br>(aka target_position != screen_center)|\r\n|--------|--------|-|\r\n|![XNdH2YWkSD](https://github.com/godotengine/godot/assets/9283098/62bdbdf8-e44c-481d-b598-4edfcb029b57)|![citRceaTDX](https://github.com/godotengine/godot/assets/9283098/6e4f33d2-07f1-4236-8086-4128002c99d4)|![K2KxTERgo6](https://github.com/godotengine/godot/assets/9283098/7b17b30b-58d7-4739-9bbe-2a63db906699)|\r\n|![ZHc3sFZF44](https://github.com/godotengine/godot/assets/9283098/15654497-c4ec-4296-a192-c4c60fdf1bfd)|![utZBsnAlUG](https://github.com/godotengine/godot/assets/9283098/c23c4cf2-9bf3-4cbe-8cb7-0e4d70a3273d)|![VhQwH1Fwzs](https://github.com/godotengine/godot/assets/9283098/da755db9-5694-4bd8-b6be-80995a71f585)|\r\n\r\n\r\n\r\nBasically within the Camera2D calculations the position (\"top right\" corner) of the screen rect is calculated taking the rotation into account but the screen rect itself is considered in an unrotated space. Simpler to visualize, the red rect (the green rect is what camera would actually show):\r\n![DcjCCeMo2o](https://github.com/godotengine/godot/assets/9283098/38119cff-c3fd-41aa-8039-d6fdc3a28386)\r\n\r\nNote this PR fixes only the returned screen center position. The incorrectly calculated screen rect (red bounds) is still what is taken into account e.g. when limiting position with `limit_smoothed == false` and `position_smoothing_enabled == false` (orange lines = camera limits):\r\n| v4.2.beta1.official [b1371806a] | This PR |\r\n|--------|--------|\r\n|![wS3H39lKsK](https://github.com/godotengine/godot/assets/9283098/704bd509-f258-48cb-b3af-2ffa28512874)|![N9YiCM6A25](https://github.com/godotengine/godot/assets/9283098/12568133-5db4-4def-80fb-34ce5b993532)|\r\n\r\n\r\nWanted to keep this PR super simple as there are many other strange/suspicious things in the Camera2D logic (see #63773). It's kinda domino-like. :upside_down_face:\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-16T07:57:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "MaterialEditor doesn't have this problem. Did some check and found they have different parent class that caused the behaviour difference. So I change MeshEditor's parent from SubViewportContainer to Control. Tested locally, it worked. \r\n\r\nI would appreciate any feedback or alternative suggestions.\r\n\r\nFixes #83171\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-10-16T03:09:44Z",
        "closed_at": "2023-10-16T08:45:14Z",
        "merged_at": "2023-10-16T08:45:14Z",
        "body": "When exporting a game that contains a C# solution, a feature is added so the exported game can check if it should initialize the .NET module. Otherwise, the module initialization is skipped so games without C# won't check for the assemblies and won't show alerts when they're missing.\r\n\r\n- Fixes https://github.com/godotengine/godot/issues/81852.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 52,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-16T02:16:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### Problem\r\n\r\nWhen the LightmapGI generates light probes, a lot of those light probes end up inside objects and obscured from any light at all. This used to be a huge problem because they would glitch and end up with odd colored lighting, [but this was fixed recently, and now they just end up totally black](https://github.com/godotengine/godot/pull/82068).\r\n\r\nThis is still not ideal though, having lots of black light probes in your scene produces very weird lighting especially when they are close to the edges of objects:\r\n\r\n![black_probes](https://github.com/godotengine/godot/assets/18580013/e745d3b6-1ef1-4ebc-945a-8ebd5b62ca8a)\r\n![black_probes_2](https://github.com/godotengine/godot/assets/18580013/050daa47-c3c5-4591-9d63-37117eb5f869)\r\n\r\nhttps://github.com/godotengine/godot/assets/18580013/48960377-9158-44a5-b90a-0bcd94340345\r\n\r\n### Solution\r\n\r\nIt's not perfect, but we can make an assumption that probably `StaticBody3D`s are usually objects that are visually solid and blocking light, like walls and floors, and do an `intersect_point` check against them when deciding whether to place a generated light probe. In my case this solved the problem entirely:\r\n\r\n![black_probes_gone](https://github.com/godotengine/godot/assets/18580013/f3cbea5f-3696-4540-8e29-cfabf80802ae)\r\n![black_probes_gone_2](https://github.com/godotengine/godot/assets/18580013/4f05a6ba-e22c-4aa0-bdd1-1f45bad2866f)\r\n\r\nhttps://github.com/godotengine/godot/assets/18580013/818c5960-b78f-4dd1-ac7d-744a6eb3e4af\r\n\r\nStill, there might be situations where you don't want a static body to block generated light probes, like if you have invisible walls. For that case, I added a `probe_ignore_layer` variable that defaults to 0. If it's set to a layer number 1-32, any static bodies in that layer will _not_ block generated light probes. If it is set to -1, then all layers are ignored and the current behavior will remain.\r\n\r\nAdditionally, while poking around in `lightmap_gi`, I noticed there is code to avoid generating probes too close to manually placed probes, but it was doing an `is_equal_approx` check against the two positions instead of a distance check, so this was never being triggered. I changed it to a distance check so the behavior is as expected now:\r\n\r\n![probes_by_approx](https://github.com/godotengine/godot/assets/18580013/a59c6a67-7ea2-4d8a-a8fe-db85ea2bee32)\r\n![probes_by_dist_good](https://github.com/godotengine/godot/assets/18580013/619a9aad-c68d-41ea-9c6b-c3003f8b7003)\r\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T02:06:34Z",
        "closed_at": "2023-10-16T02:06:49Z",
        "merged_at": null,
        "body": "Nevermind, I didn't pay attention to the source branch. This'll teach me for using the GitHub web UI to open a PR for once :slightly_smiling_face: ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 15,
        "changed_files": 1,
        "created_at": "2023-10-15T23:26:34Z",
        "closed_at": "2023-10-16T08:45:14Z",
        "merged_at": "2023-10-16T08:45:14Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nWithout this patch, the warning will show regardless of whether the non-numeric tracks in the animation were set to `UpdateMode.UPDATE_DISCRETE` by the user.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T22:46:33Z",
        "closed_at": "2023-10-16T19:42:01Z",
        "merged_at": "2023-10-16T19:42:01Z",
        "body": "> GDExtensionInterfaceGetGodotVersion *get_godot_version = (GDExtensionInterfaceGetGodotVersion)p_get_proc_address(\"get_godot_version\");\r\n\r\nThe comment incorrectly defines a pointer type (note the cast on the right side of the equal is correct !)\r\n\r\nThis is misleading for the unsuspecting end-user, which is tempted to \"solve\" this by doing a de-reference... hence leading to a segfault :disappointed: ",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 42,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-15T18:10:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nAdds project settings for AVAudioSessionCategory on iOS, duplicate of https://github.com/godotengine/godot/pull/81196 for 3.x\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-15T18:06:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implements https://github.com/godotengine/godot-proposals/issues/7768\r\n\r\n<img width=\"445\" alt=\"Screenshot 2023-10-15 at 21 05 43\" src=\"https://github.com/godotengine/godot/assets/7645683/2f32433e-6d03-4570-b4af-019b156fcf86\">\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-15T15:31:19Z",
        "closed_at": "2023-10-16T08:45:14Z",
        "merged_at": "2023-10-16T08:45:14Z",
        "body": "Nothing happens when clicked if the `AnimationPlayer` has no animations, which causes confusion, so it should be disabled with everything else too.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T15:28:43Z",
        "closed_at": "2023-10-16T08:45:14Z",
        "merged_at": "2023-10-16T08:45:14Z",
        "body": "* Fixes https://github.com/godotengine/godot/issues/83391\r\n\r\nLooks like a small regression from https://github.com/godotengine/godot/pull/81138.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-15T15:00:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[FIX] Fix by unifying the behaviours of mouse / command key triggering player->seek: Animation Timeline Go to Next Step / Prev Step is triggering the wrong player->seek\r\n\r\n\r\nThis fix is to tackle with the issue:\r\n\r\n\r\n### Expected result: animation goes smoothly\r\n\r\nhttps://github.com/godotengine/godot/assets/1129695/c24c498c-7f77-4cc9-a1c9-a1627d89c58b\r\n\r\n\r\n\r\n### Actual result: animation jumps crazily\r\n\r\n\r\nhttps://github.com/godotengine/godot/assets/1129695/947bf5b4-a0ab-42d4-bb5b-201800b4bdc6\r\n\r\n\r\nhttps://github.com/godotengine/godot/assets/1129695/65303cd0-8c2d-4a35-9d16-c94752ac2e3a\r\n\r\n\r\n\r\nFor details, please refer to this issue item:\r\n* fixes: https://github.com/godotengine/godot/issues/83394\r\n\r\n\r\n\r\n\r\nI am not sure if my fix will break any other thing though (e.g. the most recent onion-skinning capability revival, AnimationMixer). I need you to help me verify.\r\n\r\nThis fix has the following related merges as the most recent ones:\r\nhttps://github.com/godotengine/godot/pull/80813\r\nhttps://github.com/godotengine/godot/pull/80939",
        "comments": 14
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-15T14:40:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[NEW] in canvas item editor, add animation track \"go to next step\" and \"go to prev step\" option support.\r\n\r\n<img width=\"674\" alt=\"image\" src=\"https://github.com/godotengine/godot/assets/1129695/3e0d853c-fb4c-48b9-84d9-1adb9f8e5b72\">\r\n\r\nI attempted to set \"Cmd-Right\" and \"Cmd-Left\" to synchronize with the values of the same equivalent in \"Animation Panel\". However somehow in canvas item editor, shortcut \"Cmd-Right\" and \"Cmd-Left\" just won't react.\r\n\r\nTherefore, I set the default bindings to \"None\" for anyone interested to apply.\r\n\r\nAfter that - I could do key animation in a Adobe-Flash-equivalent manner as smoothly as the following:\r\n\r\n\r\n\r\nhttps://github.com/godotengine/godot/assets/1129695/af553c59-c658-478e-af78-f6a96f87dfa4\r\n\r\n\r\n\r\n<img width=\"1102\" alt=\"image\" src=\"https://github.com/godotengine/godot/assets/1129695/b07be13a-8b91-4612-bca1-b7a7b485d49a\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 19,
        "changed_files": 1,
        "created_at": "2023-10-15T14:37:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Based on: https://github.com/godotengine/godot-proposals/issues/7472  \r\n\r\nCorrect me if I'm wrong:\r\n\r\n- No need to break out of the loop to return right after. Just return.\r\n- ~No need to convert **your child** global position to local position, right?~ \r\n  - ~`to_local(child->get_global_position())` and `child->get_position()` give the same value, right?~\r\n\r\nEDIT:\r\n\r\nRemove first if condition because loop will check this condition.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-15T14:29:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "A minor beaviour change that pegs the visible character count, rather than the visible ratio, to be the authoritative property of the Label when `set_text` is called.\r\n\r\nThe issue is discussed in the comments of https://github.com/godotengine/godot/issues/83387\r\n\r\nIt recalculates the ratio on the fly, instead of the previous behaviour, which would calculate the visible characters on the fly.\r\n\r\nSo if you set visible characters to 5, and your text is \"Jason St\", when you complete the last name by appending \"atham\", the label will still display the 5 first characters \"Jason\" \u2705, and the ratio will decrease from 1 accordingly.\r\n\r\nPreviously, the label would adjust its visible characters, with a fixed ratio of 0.625, resulting in 8 characters being shown, i.e. \"Jason Stath\" \u274c\r\n\r\nIt is unlikely that user intent is to keep the ratio.\r\n\r\nThe PR is an extension of https://github.com/godotengine/godot/pull/83392 , since it changes instead of just fixing behaviour, I made it a sparate PR.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-15T14:00:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "A Basic Fix for https://github.com/godotengine/godot/issues/83387 that avoids the invalid state from happening.\r\n\r\nThe change does the following things:\r\n- preserve ratio and character count where applicable\r\n- avoid creating states where Visible Characters is -1 (all) yet Visible Ratio is 0.0 (nothing)\r\n- reversed the order of occurrence of the two properties, which has two effects:\r\n- character limits are preferred over ratios if the string is shorter than the character limit\r\n- invalid ratios don't override character limit (character limit determines ratio)\r\n\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-15T12:59:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #83259\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-15T12:41:04Z",
        "closed_at": "2023-10-16T11:16:03Z",
        "merged_at": "2023-10-16T11:16:02Z",
        "body": "Somehow missed this.\r\n\r\nCloses https://github.com/godotengine/godot/issues/83385",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-15T11:45:43Z",
        "closed_at": "2023-10-15T12:06:32Z",
        "merged_at": null,
        "body": "Adds a Random static class that makes it easier for users to generate random numbers. It is a bit tedious to create random numbers, as you have to create a new Random variable, or use the RandomNumberGenerator. This additions makes it easier by adding several scripts to generate random ints, longs, doubles, bools as well as chars out of a string.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T11:34:01Z",
        "closed_at": "2023-10-16T12:43:33Z",
        "merged_at": "2023-10-16T12:43:33Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nFixes #83331\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-15T09:19:23Z",
        "closed_at": "2023-10-16T12:17:32Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nHere comes another PR, this time, it fixes freezing issue after disabling VSync and loading intense-enough scene before the first render frame.\r\nNot sure if this solves the problem or not, please let me know.\r\n\r\n* *Bugsquad edit, fixes: #83390*",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-15T05:22:16Z",
        "closed_at": "2023-10-16T08:45:14Z",
        "merged_at": "2023-10-16T08:45:14Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nChanged so that when modifying the project setting related to depth prepass it prompt the user to restart Godot before continuing or else all opaque materials will break.\r\n\r\nFixes #82860 \r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-15T05:05:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "After some discussions, simply disallowing the ability to turn off the unique_name node flag in subscenes seems much more appropiate given how the system actually works. The unique name system works in the scope node ownership, so it does indeed make sense to disallow toggling it on the subscenes.\r\n\r\nDeprecates previous attempt of fixing it here #82545",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-15T04:45:30Z",
        "closed_at": "2023-10-16T13:31:23Z",
        "merged_at": null,
        "body": "This changes various utility functions to use `CALL_ERROR_INVALID_ARGUMENT` when encountering an unexpected argument instead of `CALL_ERROR_INVALID_METHOD`.\r\n\r\n`CALL_ERROR_INVALID_METHOD` provides a confusing user experience by telling the user the function does not exist. For example passing `null` to `abs` will provide the error:\r\n\r\n> Invalid Call. Nonexistent utility function 'abs'.\r\n\r\nWith this update the error now says the following:\r\n\r\n> Invalid type in utility function 'abs'. Cannot convert argument 1 from Nil to int.\r\n\r\n=========\r\n\r\nThe main thing I'm uncertain about here is the most appropriate `expected` value to use here. INT or FLOAT seemed safest to assume and went with INT though I'm open to the option of also plumbing through a different error that ignores expected and only mentioned to invalid argument type.\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-15T04:28:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Introduces the following rules to the standard NodePath fixer when renaming nodes in the scene tree:\r\n\r\n- Disallow renaming in read-only resources.\r\n- Disallow renaming of default properties in subscenes.\r\n- Disallow renaming of properties and resources marked INTERNAL.\r\n\r\nAnimation NodePaths are marked as internal, but the updating of animation node paths (for animations which are editable), should still occur due to some special case handling for them. This just silences the warnings about broken NodePaths for the standard NodePath update pass.\r\n\r\nCloses #83361",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-10-15T03:18:47Z",
        "closed_at": "2023-10-16T11:16:03Z",
        "merged_at": "2023-10-16T11:16:03Z",
        "body": "This PR fixes issue #83364 by always registering the region when it enters the tree, and instead using `region_set_enabled` to control whether its enabled. The same logical changes have been applied to NavigationRegion2D.\r\n\r\n* *Bugsquad edit, fixes: #83364*\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 848,
        "deletions": 462,
        "changed_files": 11,
        "created_at": "2023-10-15T00:51:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nImplements Vertex Shading\r\nsolves : https://github.com/godotengine/godot/issues/43093\r\n\r\n- [x] OpenGL\r\n- [ ] Vulkan Mobile\r\n- [ ] Vulkan Forward+\r\n\r\nBugs : \r\n- [ ] Vertex Shading receives shadows from one light source in GLES3  \r\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 265,
        "deletions": 28,
        "changed_files": 4,
        "created_at": "2023-10-15T00:36:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When adjusting the split between docks it will now only adjust the areas to the immediate sides of it, unless the minimum size is reached, then it affects the next area over until it cannot move anymore.\r\n\r\n![godot_dock_resizing_issue_fix](https://github.com/godotengine/godot/assets/10054226/a1ff1b3f-d393-4402-a064-453161f4f65f)\r\n\r\nImplementation details:\r\nAdded `push_parent` bool in `SplitContainer`\r\n - When dragging has hit the minimum size, try to push its parent `SplitContainer`s so that dragging can continue in them.\r\n - If the parent does not have 2 splits and is not the same orientation, then its parent is checked. This allows for more complex hierarchies.\r\n - Pushing the parent will emit the `dragged` signal in the parent.\r\n \r\nAdded `resize_separately` bool in `SplitContainer`\r\n - This adjusts the split offset so it appears not to move, so the splits appear to resize individually.\r\n - If `push_parent` is false, then resizing does not adjust the opposite split\r\n - If the child size flags are set to `EXPAND`, the `split_offset` is the same, but is adjusted to resize separately.\r\n \r\nAlso fixed dragging not stopping when focus is lost, and dragging while in a moving SplitContainer that has its first split's size flag set to expand.\r\n\r\nWith both `push_ancestors` and `resize_separately` enabled, a `SplitContainer` hierarchy works together to have a better experience when resizing.\r\n\r\n\r\nfixes #83348\r\nrelated https://github.com/godotengine/godot-proposals/issues/7233#issuecomment-1625898356. This pr offers an alternative to get the same behavior a `SplitContainer` with multiple children would have.\r\nrelated https://github.com/godotengine/godot-proposals/issues/4033 \r\nrelated? https://github.com/godotengine/godot/issues/55686 - only if its inside an aligned `SplitContainer` and `push_parent` is set\r\nrelated any proposal about more Editor Dock flexibility - this is a kind of prerequisite for most of those\r\n\r\nedit: fixed minimum size not handled correctly\r\nedit: working on fixing rtl and scale issues...",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T00:08:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- Fixes https://github.com/godotengine/godot/issues/83349\r\n\r\nWhen marshaling Callables, we need to check if the `Target` property is null. For a \"null\" or `default` Callable, the target will be null.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 29,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-14T23:17:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Whilst working on a [benchmark test](https://github.com/godotengine/godot-benchmarks/pull/39) for the `godot-benchmarks` suite I have come to the realization that there is no way to access `Delaunay3D` in GDScript (even though the functionality itself is implemented in Godot [here](https://github.com/godotengine/godot/blob/a574c0296b38d5f786f249b12e6251e562c528cc/core/math/delaunay_3d.h#L215) - to be used only by the `LightmapGI`'s `bake` method).\r\n\r\nIf merged, you'll be able to use the method via scripting as `Geometry3D.tetrahedralize_delaunay(points)`.\r\n\r\nThe interface is the same as in other related methods, returning indices into tetrahedralized points.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 43,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-14T17:20:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Took a while to figure that this was a two part issue. \r\n\r\n1. properties were considered as overridden since `get_property_value`  method would return a variant that was read from a packed scene file (NodePath). However, when calling `instantiate` the variants would be converted to a proper type (Object) if they were in the [deferred_properties list](https://github.com/godotengine/godot/blob/master/scene/resource/packed_scene.cpp#L487).\r\n2. When duplicating a node, variants of type Object would not update their path in that  process, which is fine for nodes that aren't children of the duplicated node.\r\n\r\nbefore pr: \r\n\r\nhttps://github.com/godotengine/godot/assets/33091666/2d5312ab-112a-4b20-a73b-a6b6948cf4c6\r\n\r\npr:\r\n\r\nhttps://github.com/godotengine/godot/assets/33091666/7e880a6b-8e21-4aab-a128-cbe25dcf4588\r\n\r\n\r\nFixes: https://github.com/godotengine/godot/issues/82670\r\nSupersedes: https://github.com/godotengine/godot/pull/83006",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 68,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-10-14T16:24:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Partially fixes #64775 (namely, the WAV part. OGG is addressed by #80452).\r\n\r\n`AudioStreamWAV` supports resampling and variable playback speeds by using sub-sample accuracy in the playback position and linear interpolation between two neighboring samples.\r\n\r\nWhen forward or backward looping is enabled between samples _s_ and _e_ (inclusive) and the playback pointer is between samples _e_ and _e + 1_, interpolation is done between samples _e_ and _e + 1_. The next/previous sample to be played after/before _e_, however, is _s_, so interpolation should instead be done between _e_ and _s_ to prevent discontinuities/clicks in the signal. For pingpong looping, interpolation in that same case should be done between _e_ and _e - 1_, because the stream is essentially mirrored at the end.\r\n\r\nEnsuring this border condition requires one additional check per output sample. I don't know how performance sensitive we are in the audio thread so just to be sure, I added one more template parameter to the `do_resample` method so that there's a separate code path for mixing blocks near the end of the loop region. That produces quite the cascade of function calls, but allows skipping the border checks for the vast majority of blocks.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-14T14:17:42Z",
        "closed_at": "2023-10-16T12:43:33Z",
        "merged_at": "2023-10-16T12:43:33Z",
        "body": "After #81128 and then #82914 the `_unhandled_input` in FindReplaceBar did not work correctly when it was focused.\r\n\r\nFixes #83303",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-10-14T14:17:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Previously, all shader variants were compiled together, and if they all had the same error, the error log would repeat many times. \r\n\r\nThis commit changes the behavior to compile the first variant first. If it compiles successfully, then all of the other variants are compiled in a worker pool. This prevents the error log from being spammed if all of the variants have the same error. That being said, `_compile_variant` is changed to return a bool because I need this info to decide whether to early stop or not.\r\n\r\nHowever, because the `WorkerThreadPool` doesnt support choosing a begin index, this commit will make performance slightly worse because the first shader will be compiled twice on most cases. I can add a `add_template_group_task` method that can take a start index if needed.\r\n\r\nI would appreciate any feedback or alternative suggestions.\r\n\r\nRelated to #82301\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 23,
        "changed_files": 1,
        "created_at": "2023-10-14T13:27:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Issues: #75224 #80252  \r\n\r\nThis is an attempt to fix SkeletonModification2DLookAt when only one scale is negative.  \r\n\r\n---\r\n\r\nInstead of getting the transform and operate over it, changes will happen through Node2D methods. I'm doing this because we can't decompose X negative scale from transforms, which means that you would have to replicate what Node2D already does (recovering the correct scale).  \r\n\r\nI'm operating over the angle and only at the end call methods like `set_rotation()` (i'm just reducing method calls).  \r\n\r\nAdding X to local rotation would also means that the global will increase by X, right? That's why I'm just adding to global rotation without any conversion.  \r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-14T13:17:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This fixes a problem when creating a plugin with a dot in the name from the project settings or updating an existing plugin with a dot in the folder name will fail.\r\n\r\nTest project: [plugin_config_dialog.zip](https://github.com/godotengine/godot/files/12905418/plugin_config_dialog.zip)\r\n\r\n---\r\n\r\nAt the moment, when creating a plugin with a dot in the name and leaving \"Script Name\" empty, creating the initial plugin script fails as it doesn't add the correct extension.\r\n\r\n![create-with-dot](https://github.com/godotengine/godot/assets/4883379/a4fcef27-8f27-4de3-bd24-82152147966d)\r\n\r\nAlso, when a plugin folder is added via file system which contains a dot, information for that plugin cannot be be updated in the project settings as it won\u2019t  use the correct plugin folder name. Updating the author, for example, will silently fail.\r\n\r\n![update-with-dot](https://github.com/godotengine/godot/assets/4883379/93efe554-7535-4ae3-b857-edeb34866d06)\r\n\r\n* *Bugsquad edit, fixes: https://github.com/godotengine/godot/issues/83332*",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-14T13:00:20Z",
        "closed_at": "2023-10-16T08:45:15Z",
        "merged_at": "2023-10-16T08:45:14Z",
        "body": "As discussed on chat, not sounding passive-aggressive in English is a challenge.\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-14T12:33:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When trying to find the .NET SDK, we were using `MSBuildLocator.RegisterDefaults` as a fallback assuming it was picking the latest one. That's not correct, it uses the first one it finds (see https://github.com/microsoft/MSBuildLocator/issues/81).\r\n\r\n- The new implementation picks the latest version so it should fix https://github.com/godotengine/godot/issues/81133. But I don't have a Windows machine to test this.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-14T11:50:01Z",
        "closed_at": "2023-10-16T11:16:03Z",
        "merged_at": "2023-10-16T11:16:03Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nDue to the optimization in `CanvasItem`, `global_transform` is only updated when `get_global_transform()` is called, and then notify `NOTIFICATION_TRANSFORM_CHANGED`. That is, in the case where `global_transform` is not obtained, the notification `NOTIFICATION_TRANSFORM_CHANGED` will not be sent.\r\n\r\nSo we use `NOTIFICATION_LOCAL_TRANSFORM_CHANGED` in this case. Use in combination to prevent certain optimizations.\r\n\r\nFix https://github.com/godotengine/godot/issues/83297#issuecomment-1762815741.\r\n\r\nSame change for `RemoteTransform3D`, to prevent the same optimization from being used in Node3D in the future.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 20,
        "changed_files": 1,
        "created_at": "2023-10-14T10:20:42Z",
        "closed_at": "2023-10-16T08:45:15Z",
        "merged_at": "2023-10-16T08:45:15Z",
        "body": "Also rename the `\"documentation\"` key to `\"description\"` for internal consistency, as discussed on RocketChat. The rename should be okay since this feature has only been in `dev` releases and one `beta` release so far.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 193,
        "deletions": 115,
        "changed_files": 2,
        "created_at": "2023-10-14T09:10:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Updated version of https://github.com/godotengine/godot/pull/82831\r\n\r\nSwitches to using dynamic library instead of executable.\r\n\r\nDepends on https://github.com/OpenImageDenoise/oidn/pull/179 to work on Windows.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 97,
        "deletions": 35,
        "changed_files": 6,
        "created_at": "2023-10-14T08:40:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #83311\r\n\r\nWhile the text size, and therefore the height, is an integer, the same does not apply to the resulting char width which can be a float.",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-14T03:39:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The documentation for `RenderingServer::multimesh_set_buffer()` seemed to imply that the transform memory layout matches `Transform2D` and `Transform3D`, but that is not correct.  I was able to determine through experimentation that the memory layout for a 3D transform in the call to this method must be ordered as follows:\r\n```cpp\r\nstruct InstanceTransform3D {\r\n    Basis basis_x; float origin_x;\r\n    Basis basis_y; float origin_y;\r\n    Basis basis_z; float origin_z;\r\n};\r\n```\r\nI\u2019m uncertain how a similar `InstanceTransform2D` is organized, but it is clearly larger than `Transform2D`, so possibly just the first two rows as above.\r\n\r\nClarification from someone who knows better is very welcome!\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-14T01:11:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Workaround / Fixes https://github.com/godotengine/godot/issues/82396#issuecomment-1761756594  #66318\r\nmaybe more: [Github search](https://github.com/godotengine/godot/issues?q=is%3Aissue+is%3Aopen+TouchScreenButton)\r\n\r\n`physics_frames` comparison at `TouchScreenButton` is not always possible. [input.cpp#L306](https://github.com/godotengine/godot/blob/51f81e1c88499f04d2ebdcc0be0b34e73f5e90eb/core/input/input.cpp#L306)\r\n`TouchScreenButton::_press` is mostly triggered after `_physics_process`.\r\n\r\nThe change should have no effect on `Input Map actions`: [input.cpp#L716](https://github.com/godotengine/godot/blob/51f81e1c88499f04d2ebdcc0be0b34e73f5e90eb/core/input/input.cpp#L716)\r\n\r\n\r\nMinimal test project: [test.zip](https://github.com/godotengine/godot/files/12922291/test.zip)\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T23:13:12Z",
        "closed_at": "2023-10-16T08:45:15Z",
        "merged_at": "2023-10-16T08:45:15Z",
        "body": "Fixes #83232\r\n\r\nWas caused by only updating the right button `rb_rect` of a tab if the texture was valid. Therefore, it would never be updated when texture is `null` and so keep its size forever.\r\n\r\nSolved by adding a branch to its update logic in `TabBar::_draw_tab()` to set `rb_rect` to an empty `Rect2`.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-13T20:14:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #78672 \r\n\r\nThis uses the first approach described in https://github.com/godotengine/godot/issues/78672#issuecomment-1646848253\r\n\r\nI tested this only on Linux (KDE neon 5.27 22.04 - X11 - Vulkan (Forward+) - dedicated AMD Radeon Graphics (RADV NAVI23) - AMD Ryzen 5 5600 6-Core Processor (12 Threads)). \r\nOther OSes should be tested as well, just in case any of them doesn't like quick focus changes.\r\n\r\n<hr>\r\n\r\nI have done this patch  ~2 months ago, but I never get to publish it \ud83d\ude48. \r\nInitially, I want to base this PR to #79261, but it's not merged.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-13T18:11:46Z",
        "closed_at": "2023-10-17T14:24:20Z",
        "merged_at": "2023-10-17T14:24:20Z",
        "body": "Hello \ud83d\udc4b\r\n\r\nFix for text edits occasionally rendering a horizontal scrollbar when not necessary, causing what I can only describe as a jitter: sometimes it appears, sometimes not\u2014depending on the text edit's width.\r\n\r\nThis appears to be caused by the calculation to determine if the max line width exceeds the visible area also accounting for the presence of the vertical scrollbar. As I understand it, this isn't necessary since if the text area wraps, the `_update_wrap_at_column` function will ensure the line stays within the visible area (which includes the vertical scrollbar, if visible).\r\n\r\nAnd for text fields with no wrapping (specifically I'm thinking of the script editor), ignoring the vertical scrollbar width in this calculation doesn't cause clipped text because lines already are given some extra space on [L7283](https://github.com/bronsonholden/godot/blob/ed16df1807ec6b0ba4d0ade99a101ebedcf244dd/scene/gui/text_edit.cpp#L7283)\r\n\r\n## Before\r\n\r\nhttps://github.com/godotengine/godot/assets/25910730/76a17f34-84e1-455c-bcfd-082e72ae6030\r\n\r\n## After\r\n\r\nhttps://github.com/godotengine/godot/assets/25910730/53322ec0-2129-4f2d-a08f-16927d23f043\r\n\r\n\r\nCloses #83186 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-13T17:59:10Z",
        "closed_at": "2023-10-16T16:46:14Z",
        "merged_at": "2023-10-16T16:46:14Z",
        "body": "This attempts to fix the bug described in PR https://github.com/godotengine/godot/pull/83260 in a slightly different way\r\n\r\nBasically, we can't ever have multiple `GDExtension` resource objects that loaded the same library, because it affects global data on both the Godot and GDExtension side. Also, I don't think the editor should be trying to reload GDExtensions through the usual mechanism, because they need to be handled in a special way.\r\n\r\n~~This is a draft presently, because I want to also uncomment the `editor_can_reload_from_file()` that's added here, but I'd like @Klaim to test if this fixes their issue, and I think that line will make it so they can't reproduce the conditions that led to the crash in their testing. If they can confirm this fix, then I'll uncomment that line and take this out of draft.~~",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 288,
        "deletions": 75,
        "changed_files": 4,
        "created_at": "2023-10-13T17:20:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Originally suggested by @reduz in this [post](https://gist.github.com/reduz/3e3a129cf4f17be1ea97cd14c9add542).\r\n\r\nAdd an additional layer of indirection to the grid used by the lightmapper to store fixed-size triangle clusters. Greatly speeds up baking times on scenes with high triangle density, as the clusters will help to avoid unnecessary checks when the triangle density is high on the scene.\r\n\r\nUnreal Sun Temple (from https://github.com/godotengine/godot/issues/75440).\r\n```\r\nMaster: Done baking lightmaps in 00:04:39.\r\nPR: Done baking lightmaps in 00:01:10.\r\n```\r\n\r\nSponza\r\n```\r\nMaster: Done baking lightmaps in 00:00:56.\r\nPR: Done baking lightmaps in 00:00:37.\r\n```\r\n\r\nSo far I haven't been able to see if this introduces any errors as the results look identical to me (which is good news as the results would be invalidated otherwise). We should double check as much as possible that nothing breaks before we're sure we want this merged.\r\n\r\nFeel free to test it out if you get similar reductions in baking speed and ensuring nothing breaks. Don't expect much gains in scenes with low geometry density, as the optimizations are oriented entirely around reducing ray-triangle intersections in scenes where there was a significant amount of triangles per cell.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 6558,
        "deletions": 27,
        "changed_files": 21,
        "created_at": "2023-10-13T16:39:17Z",
        "closed_at": "2023-10-16T12:43:33Z",
        "merged_at": "2023-10-16T12:43:33Z",
        "body": "https://github.com/thorvg/thorvg/releases/tag/v0.11.1\r\n\r\nGodot related:\r\n+ [SwEngine] Enhanced the quality of the dash line corners.\r\n\r\n![image](https://github.com/godotengine/godot/assets/4047289/6b2942af-a438-450e-86d6-4e7217573bf7)\r\n\r\n+ [SVG] Fixed a regression bug related to maskContentUnits userSpaceOnUse/objectBoundingBox.\r\n\r\nFixes #82982  - icons\r\n\r\n![img02](https://github.com/godotengine/godot/assets/4047289/4d864a7b-518d-4e2e-a0a8-cc1558d37147)\r\n\r\nFixes #83198  - svg \u2190 png/jpg\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T16:26:45Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "Watchers were still using Object::get instead of Object::get_indexed.\r\n\r\nFollow up of #79479 .\r\n\r\nNote for reviewers: There is no `set_indexed` counterpart because \"setting\" shares the same code path of \"Always\" variables (addressed in the aforementioned PR).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 126,
        "deletions": 12,
        "changed_files": 5,
        "created_at": "2023-10-13T16:23:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "`NOTIFICATION_MOUSE_ENTER` and `NOTIFICATION_MOUSE_EXIT` and the according signals now includes the areas of children control nodes.\r\n\r\nIn order to check if a Control node itself was entered/exited, the newly introduced `NOTIFICATION_MOUSE_ENTER_SELF` and\r\n`NOTIFICATION_MOUSE_EXIT_SELF` can be used.\r\n\r\nresolve #81909\r\nresolve #82530\r\nregression from #67791\r\nsupersedes #82182",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-13T15:26:09Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "Asked by @smix8. This allows disabling the built-in TileMap navigation to avoid conflicts with one baked by the NavigationRegion node.\r\n\r\nI labelled this has both a bug and enhancement. It's technically a new feature, but without it, baking using the NavigationRegion node is close to unusable. So I added the \"bug\" label too. ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-10-13T13:49:40Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes https://github.com/godotengine/godot-proposals/issues/8086.\r\n\r\nRemoves the limitation on FSR not being allowed to downscale from higher resolutions.\r\n\r\nFrom my testing:\r\n\r\nFSR benefits surprisingly from being allowed to downscale, but that's to be expected perhaps since fundamentally FSR is just a spatial upscaler.\r\n\r\nFSR 2 doesn't see as much benefit in static, unmoving scenes. To be expected perhaps due to its temporal superscaler nature. The benefits are primarily in clarity while in motion and the reduction of disocclusion artifacts. (when scale is set to 2.0, disocclusion artifacts are almost completely gone)",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-13T13:41:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Expose the `reload_scripts` method to match the current state of the 3.x branch.\r\n\r\nAs described in #83118, it is possible to replicate this method with GDScript:\r\n\r\n```gdscript\r\nstatic func reload_script(text_edit: TextEdit, source_code: String) -> void:\r\n\tvar column := text_edit.get_caret_column()\r\n\tvar row := text_edit.get_caret_line()\r\n\tvar scroll_position_h := text_edit.get_h_scroll_bar().value\r\n\tvar scroll_position_v := text_edit.get_v_scroll_bar().value\r\n\r\n\ttext_edit.text = source_code\r\n\ttext_edit.set_caret_column(column)\r\n\ttext_edit.set_caret_line(row)\r\n\ttext_edit.scroll_horizontal = scroll_position_h\r\n\ttext_edit.scroll_vertical = scroll_position_v\r\n\r\n\ttext_edit.tag_saved_version()\r\n```\r\n\r\nand set the `text_editor/behavior/files/auto_reload_scripts_on_external_change` setting to `true`.\r\n\r\nPersonally, I would prefer calling `EditorInterface.get_script_editor().reload_scripts()`, but I might not be aware of possible pitfalls caused by exposing this method.\r\n\r\nThis would also improve the porting of existing 3.5 plugins.\r\n\r\n \r\ncloses https://github.com/godotengine/godot-proposals/issues/8111",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-13T12:50:25Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "Follow up to https://github.com/godotengine/godot/pull/82957, implements case sensitivity check for EXT4 and F2FS partitions.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-13T12:43:05Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nIn this PR, it contains one commit that fixes unused variables warning when `touch` has been disabled.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-10-13T12:29:33Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "Fix set_multiplayer_authority not resetting the synchronizer (fixes #83112).\r\n\r\nFix the reset function not clearing the watchers state.\r\n\r\nSkip wrap around check for the first sync packet after reset.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-13T11:31:42Z",
        "closed_at": "2023-10-16T08:45:15Z",
        "merged_at": "2023-10-16T08:45:15Z",
        "body": "Fixes #83209",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T11:02:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fix #82279\r\nIt tests okay on Windows, and it tests using the program from #78634 and `Godot.exe --test` pass.\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-13T10:43:24Z",
        "closed_at": "2023-10-13T18:29:28Z",
        "merged_at": null,
        "body": "This is a \"hotfix\" for a bug I tracked, **I believe this is not the right solution but I need guidance** to reach a more reasonable solution.  After debugging the issue I found the reason but I am not knowledgeable about Godot's architecture so I just hacked something that makes sense that does fix the issue for me, at least for that bug. That's why I'm setting this as a Draft for now.\r\n\r\n## The Problem\r\n\r\nContext: \r\n```\r\nGodot v4.2.beta1 - Windows 10.0.22621 - Vulkan (Forward+) - dedicated NVIDIA GeForce RTX 3080 Ti (NVIDIA; 31.0.15.1694) - AMD Ryzen 9 5900X 12-Core Processor (24 Threads)\r\n```\r\n\r\nI found random problems happening after hot-reloading my GDExtension. The second time I hot-reload I would find errors like this:\r\n```\r\nAttempt to unregister unexisting extension class 'GDExample'.\r\nAttempt to register extension class 'GDExample', which appears to be already registered.\r\n```\r\nHere `GDExample` is a C++ class copy-pasted from the GDExtension hello-world, that I put in my GDExtension to remove any of my other code from the equation.\r\n\r\nI would also get similar error reports when clicking on the related node, and sometimes instead of these errors I would get crashes in code relaetd to gdextension access.\r\n\r\nAfter the second hot-reloading, I was getting an access violation in the code destroying the GDExtension instance, at almost every time, but not every time.\r\n\r\n## How To Reproduce The Problem\r\n\r\n1. Setup a project using any GDExtension that you can modify the binary of and open that project in Godot Editor.\r\n2. Make sure a scene is open with a node using a type from that GDExtension. I used `GDExample` from the doc to reduce the possibilities, just replacing it's `_process` impl by `rotation(sin(delta))`,\r\n3. Just hot reload several times that GDExtension: modify something visible, build+install, focus on the editor.\r\n4. At some point a random crash, access violation, godot error report or something else might or not happen. That's unfortunately UB so anything is possible.\r\n\r\n## What's Happening\r\n\r\nAfter debugging Godot using a debug build from `master` (ee118e7ffd97f478de73f4b344fddc0203ef7cca) with `godot-cpp` at ef2f63a00c5496cc325e8546acd743787e87a83d\r\nI found that the heart of the issue is that **after the end of the first hot-reloading** (not the first loading), the pointer [`internal::library` in `godot-cpp`](https://github.com/godotengine/godot-cpp/blob/ef2f63a00c5496cc325e8546acd743787e87a83d/src/godot.cpp#L47) is now pointing at a destroyed object. From that point, any usage of that pointer is UB and leads to the other issues.\r\n\r\n\r\nWhy this pointer is pointing to a destroyed object? The sequence I observe is as follows:\r\n1. After changing the extension binary file and focus on the editor, hot-reloading check is triggered, we call [`GDExtensionManager::reload_extensions` which checks if it needs to reload](https://github.com/godotengine/godot/blob/37ee293be82e625e68704a78477b841d0ba17b8f/core/extension/gdextension_manager.cpp#L249-L252).\r\n2. We do need to reload, so we call [`GDExtensionManager::reload_extension`](https://github.com/godotengine/godot/blob/37ee293be82e625e68704a78477b841d0ba17b8f/core/extension/gdextension_manager.cpp#L89) which calls `GDExtension::close_library` on our current `GDExtension` instance for that binary file path.\r\n3. Then we call [`GDExtensionResourceLoader::load_gdextension_resource`](https://github.com/godotengine/godot/blob/37ee293be82e625e68704a78477b841d0ba17b8f/core/extension/gdextension_manager.cpp#L120) which ultimately [calls `GDExtension::open_library` on that same `GDExtension` instance](https://github.com/godotengine/godot/blob/master/core/extension/gdextension.cpp#L918),which leads to [`godot::GDExtensionBinding::init` which will store the pointer to the `GDExtension` into `internal::library`](https://github.com/godotengine/godot-cpp/blob/c4d3f019dab87aff7b36acc5071e1c9adf76f6dd/src/godot.cpp#L246). At this point, all seems OK (to me).\r\n5. **After all this, a signal \"_resource_changed\" is emitted** from the scene (not sure which node but I suspect it's the one of the type which is from the GDExtension) which leads to this call stack:\r\n```\r\ngodot.windows.editor.dev.x86_64.exe!GDExtensionResourceLoader::load_gdextension_resource\r\ngodot.windows.editor.dev.x86_64.exe!GDExtensionResourceLoader::load\r\ngodot.windows.editor.dev.x86_64.exe!ResourceLoader::_load\r\ngodot.windows.editor.dev.x86_64.exe!ResourceLoader::_thread_load_function\r\ngodot.windows.editor.dev.x86_64.exe!ResourceLoader::_load_start\r\ngodot.windows.editor.dev.x86_64.exe!ResourceLoader::load\r\ngodot.windows.editor.dev.x86_64.exe!Resource::reload_from_file\r\ngodot.windows.editor.dev.x86_64.exe!EditorNode::_resources_changed\r\n..... [stripped the rest but see below for details]\r\n```\r\nHere we can see that `GDExtensionResourceLoader::load_gdextension_resource` is called again, with the same path we just already reloaded. When it is called this time it [creates a new `GDExtension` instance](...) which, after calling `GDExtension::open_library`  on it -> then `GDExtensionBinding::init` -> it's address set to `interal::library` and then it is returned to `Resource::reload_from_file`.\r\n6. **In[ `Resource::reload_from_file` we do not keep alive the `Ref<Resource>` which holds the `GDExtension`](https://github.com/godotengine/godot/blob/37ee293be82e625e68704a78477b841d0ba17b8f/core/io/resource.cpp#L194), which leads to it's destruction, which also leads to `GDExtension::close_library`.**\r\n7. At this point, `internal::library` is still pointing to that destroyed `GDExtension` object. Any future usage of it is UB.\r\nAlso note that the initial `GDExtension` instance is still alive somewhere (no destructor calls in my call stack trace below), so something is still referring to it (maybe the node instance using it's type?) and keeps it alive, but `internal::library` is not pointing to it.\r\n\r\n\r\nHere is the sequence of events as a sequence of prints of callstacks (using tracepoints in VS to not change the code): https://pastebin.com/MgtrUHeD\r\nI made the tracepoints print also the GDExtension objects addresses when calling it's  members so that you see that there is indeed 2 GDExtension instances, the second one being destroyed just after being created.\r\n\r\nI also was debugging live when I started to understand the issue, I can provide a video but I dont think it's necessary. Ask if that helps.\r\n\r\n## What this hotfix attempts do\r\n\r\nThis hotfix prevents step 5 and following from happening by adding in `GDExtensionResourceLoader::load` [the same check from `GDExtensionManager::reload_extensions`](https://github.com/godotengine/godot/blob/37ee293be82e625e68704a78477b841d0ba17b8f/core/extension/gdextension_manager.cpp#L249-L252) that the GDExtension binary file at the given path have changed since last load. Because step 5 happens always in reaction to the previous steps which have already re-loaded, it will usually just do nothing if my hotfix is applied.\r\n\r\n## Why I think this hotfix might not be right and I need guidance\r\n\r\n- `GDExtensionResourceManager` did not have any access to `GDExtensionManager` before this patch, which adds coupling (with a singleton, so tricky) which makes my intuition tell me this is not how one knowledgeable of the architecture of this system would have done this.\r\n- It is not clear to me why the signal emitted leads to a reload, so maybe some wiring is wrong there and should be fixed instead of doing this?\r\n- It is not clear to me who should handle the lifetime of `GDEXtension` objects: `GDExtensionManager` ? `GDExtensionResourceManager`?\r\n- I suspect part of teh right solution might be to make `internal::library` a `Ref<GDExtension>` instead of a `void*`, but I dont know if the binding system allows that.\r\n- I suspect my hotfix to prevent the resource system to work correctly after hot-reloading, but I couldnt test further yet to check what's broken or not.\r\n\r\nFinally an important additional note:\r\nMy GDExtension is using `build2` as build-system and package manager, so my build of `godot-cpp` library is from my packaging for `build2`. While it should not affect this bug, I didnt yet attempt to reproduce using a GDExtension built with CMake with `godot-cpp` built with CMake too. I dont think it's necessary as the issue is not related to the build and I think I got the packaging right, but just in case and for context.\r\n   \r\n   ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-13T10:01:41Z",
        "closed_at": "2023-10-16T16:46:14Z",
        "merged_at": "2023-10-16T16:46:14Z",
        "body": "* Fixes #80266 (see https://github.com/godotengine/godot/issues/80266#issuecomment-1752191694).\r\n* A more general solution than #82789.\r\n  * But the error can still occur if `reduce_*()` is called directly, without `reduce_expression()`.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-13T09:20:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nThe ``gdscript_parser.h`` is already included inside ``gdscript_extend_parser.h`` so no need to include it multiple times.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-13T09:17:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nOpenGL version of https://github.com/godotengine/godot/pull/82668\r\n\r\nI've made this a separate PR as I don't know what if there might be reasons not to accept this into the compatibility renderer (though I personally don't see why not) while accepting it for the Vulkan renderers.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-13T09:10:31Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nFixes https://github.com/godotengine/godot/issues/82505\r\n\r\nI have no ideas what pssm fade was ment to do, however based on the shader code my guess is that it was an attempt to apply the fading controlled by fade start that got scrapped halfway through the implementation and replaced with a proper implementation, given that I cannot see anything of the sort in the Vulkan Renderer to indicate some other specific feature.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-13T09:04:44Z",
        "closed_at": "2023-10-17T22:04:31Z",
        "merged_at": "2023-10-17T22:04:31Z",
        "body": "When creating a new scene, the scene tab will actually switch to the newly created one. Also worth noting that switching scene tabs saves state (by `save_edited_scene_state`).\r\n\r\nWhen trying New Scene again, the previously empty scene tab will be removed.\r\n\r\nSo the correct logic is: switch the tab save state first, and then remove the previous empty scene tab. To prevent `current_edited_scene` from being incorrect when saving state.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nFix #83213.",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 60,
        "deletions": 0,
        "changed_files": 8,
        "created_at": "2023-10-13T09:04:44Z",
        "closed_at": "2023-10-14T12:04:22Z",
        "merged_at": null,
        "body": "Whether GDScript should have access modifiers or not is a matter that has been discussed for a long time. Up to now, the convention has been to use identifier names starting with an underscore for private variables and functions, so I suggest to implement an optional warning (ignored by default) that triggers when an attribute or method whose name starts with an underscore is accessed from another script.\r\n\r\nFor example, this will trigger the warning:\r\n```gdscript\r\nclass_name MyScript\r\nextends Node\r\n\r\nvar _private: int = 1\r\n\r\nfunc _private_func():\r\n    pass\r\n```\r\n```gdscript\r\nextends Node\r\n\r\n@onready var _my_script: MyScript = $MyScript\r\n\r\nfunc _ready():\r\n    _my_script._private += 1\r\n    _my_script._private_func()\r\n```\r\n\r\nI believe this should help to enforce the convention.\r\n\r\nI should also mention that accessing the same variables and function from a child script will not trigger the warning, so technically they wouldn't be private, but protected. For example, this will not trigger the warning.\r\n\r\n```gdscript\r\nclass_name OtherScript\r\nextends MyScript\r\n\r\nfunc _ready():\r\n    _private += 1\r\n    _private_func()\r\n```\r\n\r\n* *Bugsquad edit, closes: https://github.com/godotengine/godot-proposals/issues/8095*",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T08:50:40Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "Fixes #83237\r\n\r\nUse `{ProxyName}Instance` to find correct types. (Like `ResourceUidInstance` instead of `ResourceUIDInstance`) ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-13T08:47:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Small usability fix.\r\n![event_configuration](https://github.com/godotengine/godot/assets/19764492/9e32482d-f219-4887-b537-8fae4d14c4cd)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-13T07:56:50Z",
        "closed_at": "2023-10-13T09:51:32Z",
        "merged_at": "2023-10-13T09:51:32Z",
        "body": "Closes #83228\r\nI changed TilesEditorUtils to be initialized by the first editor that appears, so now they can be freely swapped.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-10-13T07:13:15Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:32Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/83241\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-13T07:11:04Z",
        "closed_at": "2023-10-13T12:30:33Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nFor some reason, someone at Godot team forgot to fix the ones that variables goes unused when they disable `touch`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T06:30:42Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nFix missing editor singletons (`EditorInterface`) when dumping extension api after [#80962](https://github.com/godotengine/godot/pull/80962).",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T03:00:55Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:32Z",
        "body": "Currently, visual shader port names are not extracted for translation. Some of the port names got translated if the name is used in other places.\r\n\r\nI think we need to add a separate translation switch for the visual shader editor. Users should be able to turn translation off separately just like Inspector's property name switch. But since we're in feature freeze, it's better to simply disable auto translation for 4.2 and implement that in later versions.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 43,
        "deletions": 60,
        "changed_files": 3,
        "created_at": "2023-10-13T02:12:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Draft because this PR requires https://github.com/godotengine/godot/pull/83229 to be merged first in order for exporting to function properly.\r\n\r\nBefore this PR, `GLTFNode` was storing multiple fields for the transformation matrix and the position/rotation/scale values. This is wrong, there should only be one data structure storing the transformation. I'm also adding the \"needs testing\" label because this PR may change behavior and should be tested before merging.\r\n\r\nThis PR fixes #82825, a bug where skeleton bone transforms were not set correctly.\r\n\r\nBehavior in master (left is TRS, right is matrix):\r\n<img width=\"802\" alt=\"Screenshot 2023-10-12 at 9 02 58 PM\" src=\"https://github.com/godotengine/godot/assets/1646875/ffdebb91-2965-45ef-b994-0bbeb290c265\">\r\n\r\nBehavior in this PR:\r\n<img width=\"886\" alt=\"Screenshot 2023-10-12 at 9 00 17 PM\" src=\"https://github.com/godotengine/godot/assets/1646875/4d189a14-17bb-4464-8af5-b70a814435ea\">\r\n\r\nWhy is the model looking down? That's just how the model is, it's the same if I open it in Blender.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 98,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-13T01:33:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I noticed that the behavior of these methods was not correct for all inputs. This PR adds unit tests for these methods and fixes the methods. If desired, I could expose them and write docs too.\r\n\r\nThe `is_orthogonal` method was not working for scaled inputs. The new changes also greatly simplify the code, we only need 3 dot products to check if the Basis is orthogonal, because the dot product of orthogonal vectors is zero. Without these changes, these unit tests would fail:\r\n\r\n```\r\n./tests/core/math/test_basis.h:340: ERROR: CHECK( Basis::from_scale(Vector3(1.2, 3.4, 5.6)).is_orthogonal() ) is NOT correct!\r\n  values: CHECK( false )\r\n  logged: Basis with only scale should be orthogonal.\r\n\r\n./tests/core/math/test_basis.h:348: ERROR: CHECK( Basis(Vector3(3, 4, 0), Vector3(4, -3, 0), Vector3(0, 0, 5)).is_orthogonal() ) is NOT correct!\r\n  values: CHECK( false )\r\n  logged: Basis with a flip, rotation, and uniform scale should be orthogonal.\r\n```\r\n\r\nThe `is_rotation` method was not taking into account squeeze matrices (a special form of non-uniform scale where the volume is preserved but the scale changes). Admittedly this was an edge case, but still, now it's fixed. Without this fix, this unit test would fail:\r\n\r\n```\r\n./tests/core/math/test_basis.h:374: ERROR: CHECK_FALSE( Basis(Vector3(2, 0, 0), Vector3(0, 0.5, 0), Vector3(0, 0, 1)).is_rotation() ) is NOT correct!\r\n  values: CHECK_FALSE( true )\r\n  logged: Basis with a squeeze should not be a rotation.\r\n```\r\n\r\nIf anyone is wondering, here is the truth table of the Basis validation methods as of this PR:\r\n\r\n| Basis has...      | is_rotation | is_orthonormal | is_conformal | is_orthogonal | is_diagonal |\r\n|-------------------|-------------|----------------|--------------|---------------|-------------|\r\n| Rotation          | \u2705 true      | \u2705 true         | \u2705 true       | \u2705 true        | \u274c false     |\r\n| Flip              | \u274c false     | \u2705 true         | \u2705 true       | \u2705 true        | \u2705 true      |\r\n| Uniform Scale     | \u274c false     | \u274c false        | \u2705 true       | \u2705 true        | \u2705 true      |\r\n| Non-Uniform Scale | \u274c false     | \u274c false        | \u274c false      | \u2705 true        | \u2705 true      |\r\n| Skew/Shear        | \u274c false     | \u274c false        | \u274c false      | \u274c false       | \u274c false     |\r\n| Nothing/Identity  | \u2705 true      | \u2705 true         | \u2705 true       | \u2705 true        | \u2705 true      |\r\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 87,
        "deletions": 14,
        "changed_files": 10,
        "created_at": "2023-10-12T23:42:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is available as a flag in BaseMaterial3D and `render_mode clearcoat_normal_map;` in shaders.\r\n\r\nThis is supported with all rendering methods and affects all light types.\r\n\r\n- This closes https://github.com/godotengine/godot/issues/69327.\r\n\r\n**Testing project:** [Clearcoat_Test_2.zip](https://github.com/godotengine/godot/files/12887943/Clearcoat_Test_2.zip)\r\n\r\n## Preview\r\n\r\n### Forward+\r\n\r\n![Screenshot_20231013_014013 webp](https://github.com/godotengine/godot/assets/180032/6a2ba4e2-9f07-4083-aaee-c5cc166e7f16)\r\n\r\n### Mobile\r\n\r\n![Screenshot_20231013_014034 webp](https://github.com/godotengine/godot/assets/180032/a9bdc99c-a6e1-4b73-a6ef-ff8bfc433b65)\r\n\r\n### Compatibility\r\n\r\n> **Note**\r\n>\r\n> Clearcoat disappears on the material with Roughness set to `0.0` because of https://github.com/godotengine/godot/issues/83223. This is not related to this PR.\r\n\r\n![Screenshot_20231013_014051 webp](https://github.com/godotengine/godot/assets/180032/0d94bc11-f89d-4c88-9aac-3b98971d37ae)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-12T23:05:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "In certain cases, import hints may not be desired for use in a project. In our case, we had existing model files, one of which contained an object ending in \"_Wheel\". This automatically turns the node into a vehicle wheel, which is not desired behavior. As it stands, it's impossible to disable this functionality. The only fix would be to modify the source model and rename the object, which is not always easy to do, or desired.\r\n\r\nThis pull request adds a simple setting to disable import hints for the Scene importer.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 34,
        "deletions": 25,
        "changed_files": 2,
        "created_at": "2023-10-12T22:11:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "![](https://github.com/godotengine/godot/assets/47700418/89243794-3f67-48ff-942a-f6db20235136)\r\n\r\nAlso optimizes color region type checking by using an enum instead of string comparison.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 149,
        "deletions": 26,
        "changed_files": 6,
        "created_at": "2023-10-12T21:58:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\ncloses https://github.com/godotengine/godot-proposals/issues/7498\r\n\r\nAdds the ability to find a child node or parent node by type and not only by name (pattern).\r\n\r\n```gdscript\r\nfunc _ready():\r\n  # Finds the first parent using these three valid calls:\r\n  find_parent('my_sprite') # Finds by name\r\n  find_parent('', 'Sprite2D') # Finds by type\r\n  find_parent('my_sprite', 'Sprite2D') # Finds by name and type\r\n\r\n  # Finds the first child using these three valid calls:\r\n  find_child('my_sprite') # Finds by name\r\n  find_child('', 'Sprite2D') # Finds by type\r\n  find_child('my_sprite', 'Sprite2D') # Finds by name and type\r\n```",
        "comments": 19
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-12T20:47:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "WIP fix for #81903.\r\n\r\nLet's use a similar example to the one described in the issue.  \r\n\r\n```cs\r\n[Tool]\r\npublic partial class Scene : VBoxContainer\r\n{\r\n    public override void _Ready()\r\n    {\r\n        for (var i = 0; i < 4; ++i)\r\n        {\r\n            var button = new Button { Text = $\"Click me!\" };\r\n\r\n            var buttonIndex = i;\r\n\r\n            // Case 1\r\n            button.Connect(Button.SignalName.Pressed, Callable.From(() => GD.Print($\"Button #{buttonIndex} was clicked!\"));\r\n            // Case 2\r\n            button.Connect(Button.SignalName.Pressed, Callable.From(() => WhenButtonClicked(buttonIndex)));\r\n\r\n            AddChild(button);\r\n        }\r\n    }\r\n\r\n    private void WhenButtonClicked(int buttonIndex)\r\n    {\r\n        GD.Print($\"Button #{buttonIndex} was clicked!\");\r\n    }\r\n}\r\n```\r\n\r\nAs of right now, this PR completely fixes case 1 (crudely: captured variables aren't `GodotObject`).  \r\n\r\nOn my way to fixing case 2 (here, we also capture `this`). I had to switch the serialization and call `godotsharp_var_to_bytes()` with `p_full_objects = true`. I'm not entirely sure about it, there might be security concerns? Everything now serializes fine (and thus, is properly unloaded). But once we try to deserialize the delegate back, `this` (in the example above) is considered as a `VBoxContainer` instead of the actual concrete class, resulting in an `ArgumentException` when we try to use its value. I kinda imagine it's because of the script being unloaded in between, but I can't really think of any good/simple solution here.\r\n\r\nHoping for someone to have a stroke of genius, or to rubber duck me in the right direction \u2764\ufe0f \r\n\r\nI've also been wondering on and off if serializing these when reloading is actually something we want to do in this case.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-12T20:46:32Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:33Z",
        "body": "* #74843 implemented support for code regions like:\r\n\r\n```gdscript\r\n#region New Code Region\r\n<code>\r\n#endregion\r\n```\r\n\r\n* However, after merge #72751 this changed to:\r\n\r\n```gdscript\r\n##region New Code Region\r\n<code>\r\n##endregion\r\n```\r\n\r\nThis is bad because `##` is used for doc comments.\r\n\r\nThe reason of the regression is that the code editor selects the first comment delimiter, and the delimiter are sorted internally in descending order of delimiter length. I'm guessing the sorting was implemented incorrectly and was originally intended to be in ascending length order.\r\n\r\n**Addition order:** `\", ', \"\"\", ''', #, ##`\r\n\r\n**Storage order (before):** `''', \"\"\", ##, #, ', \"`\r\n\r\n<details>\r\n<summary>Sorting</summary>\r\n\r\n```\r\n\"\r\n', \"\r\n\"\"\", ', \"\r\n''', \"\"\", ', \"\r\n''', \"\"\", #, ', \"\r\n''', \"\"\", ##, #, ', \"\r\n```\r\n\r\n</details>\r\n\r\n\r\n~**Storage order (after):** `\", ', #, ##, \"\"\", '''`~\r\n\r\n<details>\r\n<summary>Sorting</summary>\r\n\r\n```\r\n\"\r\n\", '\r\n\", ', \"\"\"\r\n\", ', \"\"\", '''\r\n\", ', #, \"\"\", '''\r\n\", ', #, ##, \"\"\", '''\r\n```\r\n\r\n</details>\r\n\r\n~After changing the sorting, the regression is fixed, the shortest comment delimiter is selected for the region, I see a lot of sense in this. I didn't notice any other regressions due to this change.~\r\n\r\n~I also fixed the sorting in a similar highlighter code (originally copied from the code editor).~",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-12T20:28:49Z",
        "closed_at": "2023-10-12T22:16:59Z",
        "merged_at": "2023-10-12T22:16:59Z",
        "body": "Hopefully adding the sources manually still works.\r\n\r\nFollow-up to https://github.com/godotengine/godot/pull/83147, which didn't help.\r\n\r\nAnother attempt at working around https://github.com/orgs/community/discussions/69720.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 18,
        "changed_files": 6,
        "created_at": "2023-10-12T20:06:15Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:33Z",
        "body": "And tidy up some leftovers from the attribute compression PR\r\n\r\nMostly issues from https://github.com/godotengine/godot/pull/81138\r\n\r\nI caught these while investigating https://github.com/godotengine/godot/issues/82890. This PR may help with https://github.com/godotengine/godot/issues/82890, but I'm not sure as I can't reproduce the issue. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-12T19:15:58Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:33Z",
        "body": "In the project manager, when the Search Box is focused, the `Key::Enter` event is not being handled by `ProjectManager::shortcut_input`. So added a dedicated handler for the search box with the signal `gui_input`. Now when Enter is pressed, the highlighted project is opened.\r\n\r\nFixes and closes #73768. \r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-12T19:02:50Z",
        "closed_at": "2023-10-12T20:17:16Z",
        "merged_at": null,
        "body": "Let's see if our tests can now pass with Ubuntu 20.04's Mesa.\r\nIf not, we'll have to find another solution to upgrade Mesa (or move the build with Vulkan/GLES3 tests to Ubuntu 22.04).\r\n\r\nFollow-up to #83147, which didn't help.\r\n\r\nGitHub bug report: https://github.com/orgs/community/discussions/69720",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 37,
        "deletions": 4,
        "changed_files": 6,
        "created_at": "2023-10-12T18:59:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently, it's documented that one of the differences between GDScript and C# is that certain struct types [shouldn't use their constructors](https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_differences.html#basis), instead opting for static readonly equivalents. This was because, at the time of writing, it was impossible for C# to define a parameterless constructor for a struct. However, starting with .NET6 (C#10), we now have that functionality!\r\n<details>\r\n<summary>Old implementation</summary>\r\n\r\nThis PR provides parity with GDScript by assigning parameterless constructors to the 6 problem types, setting their values to the GDScript equivalents. Theoretically, this shouldn't break compatability, as it's already suggested by the documentation to always avoid these constructors. However, in the case that a zeroed-value is what's desired, the docstrings mention the [relevant C#10 specification](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/parameterless-struct-constructors#default-expression) where providing `default` results in exactly that. The one area where parity is arguable is fields, as their implicit value is `default` rather than `new()`; but in a C# context this is expected behavior (mirrors reference types and nullable value types being null, their default, implicitly)\r\n\r\n---\r\nInput:\r\n```cs\r\nGD.Print(new Color());\r\nGD.Print((Color)default);\r\nGD.Print(new Quaternion());\r\nGD.Print((Quaternion)default);\r\nGD.Print(new Transform2D());\r\nGD.Print((Transform2D)default);\r\nGD.Print(new Transform3D());\r\nGD.Print((Transform3D)default);\r\nGD.Print(new Basis());\r\nGD.Print((Basis)default);\r\nGD.Print(new Projection());\r\nGD.Print((Projection)default);\r\n```\r\n\r\nOutput:\r\n```\r\n(0, 0, 0, 1)\r\n(0, 0, 0, 0)\r\n(0, 0, 0, 1)\r\n(0, 0, 0, 0)\r\n[X: (1, 0), Y: (0, 1), O: (0, 0)]\r\n[X: (0, 0), Y: (0, 0), O: (0, 0)]\r\n[X: (1, 0, 0), Y: (0, 1, 0), Z: (0, 0, 1), O: (0, 0, 0)]\r\n[X: (0, 0, 0), Y: (0, 0, 0), Z: (0, 0, 0), O: (0, 0, 0)]\r\n[X: (1, 0, 0), Y: (0, 1, 0), Z: (0, 0, 1)]\r\n[X: (0, 0, 0), Y: (0, 0, 0), Z: (0, 0, 0)]\r\n1, 0, 0, 0\r\n0, 1, 0, 0\r\n0, 0, 1, 0\r\n0, 0, 0, 1\r\n\r\n0, 0, 0, 0\r\n0, 0, 0, 0\r\n0, 0, 0, 0\r\n0, 0, 0, 0\r\n```\r\n</details>\r\n\r\n**EDIT:** Change of plans. The parameterless constructor will instead be used as a means of adding further documentation. It'll remain functionally identical to `default`, but with an added note on how to emulate GDScript behavior if used as a constructor. Also removes the portion of documentation that explicitly discourages a plain constructor",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-12T18:02:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### Issue\r\n\r\nThis PR is related to fix #79519.\r\n\r\n### Summary\r\n\r\nWhen the same key is added in `ScriptManagerBridge`, throws an Exception and breaks Unload.\r\n\r\nHere is a minimal project example with the issue: https://github.com/taylorhadden/godot-csharp-generic-assembly-reload-error\r\n\r\nThis PR only adds the key if not exist, fixing the problem but sometimes the `Missing class qualified name for reloading script` happens.\r\n\r\nhttps://github.com/godotengine/godot/blob/b1371806ad3907c009458ea939bd4b810f9deb21/modules/mono/glue/GodotSharp/GodotSharp/Core/Bridge/ScriptManagerBridge.cs#L558\r\n\r\nI didn't figure out how to prevent that message Error.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T16:23:37Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:32Z",
        "body": "Applies the same double-precision fixes found in #58205 to Vector4 & Projection, which were added after this fix was initially implemented",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-12T15:23:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "While I don't know the exact conditions to cause it, I've had builds occasionally fail when processing the `_render_target_get_sdf_rect` functions, citing a value wasn't initalized (default switch case did nothing). The issue was fixed by mirroring the switch implementation in `_render_target_allocate_sdf` for the two relevant files",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-12T11:42:48Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:33Z",
        "body": "Fixes #83193\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 37,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-12T11:09:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #83152. Due to how BLUR_0 is reused for multiple purposes and requires being at native resolution for some post-processing effects to work, FSR2 will use an alternate texture at internal size to use as the screen texture read by shaders instead. The rendering pipeline will prefer using this texture if it exists.\r\n\r\nAnything that used screen textures inside a custom shader was affected when FSR2 was enabled with a resolution scale below 1.0.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-12T09:59:52Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:33Z",
        "body": "Fixes #75735\r\n\r\nBut the code looks like intentional, this commit might break things. CC @Chaosus \r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 142,
        "deletions": 24,
        "changed_files": 5,
        "created_at": "2023-10-12T06:14:03Z",
        "closed_at": "2023-10-16T16:46:14Z",
        "merged_at": "2023-10-16T16:46:14Z",
        "body": "Adds callback call error checks and messages to the native menu and native dialogs callbacks.\r\n\r\nFixes https://github.com/godotengine/godot/issues/83156",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-12T03:44:26Z",
        "closed_at": "2023-10-13T20:32:59Z",
        "merged_at": "2023-10-13T20:32:59Z",
        "body": "Fixes: https://github.com/godotengine/godot/issues/83175\r\n\r\nThis was a fun one to track down. \r\n\r\nIn the shader we check if (tangent.x > 0 || tangent.y < 1.0), to see if we should run the uncompressed path. I wrongly assumed that we would never send (0, 1) to the shader because (0, 1) maps to a tangent of (0, 0, -1, 1), but a tangent of (0, 0, -1, 1) maps to (1, 1). _However_, (-1e8, 0, -1, 1) maps to (0, 1) and sometimes we create tangents that are (-1e8, 0, -1, 1). We can't represent (-1e8, 0, -1, 1) in octahedral tangents anyway, so its fine to just force all cases of (0, 1) to (1, 1) ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T02:07:44Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:33Z",
        "body": "Auto translate is on by default, so listed theme types like \"Button\" may be translated (e.g. it shows \"\u6309\u94ae\" in Chinese version).\r\n\r\nWhen the list is empty, \"None\" is still translated because it's explicitly using `TTR()`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-11T22:44:15Z",
        "closed_at": "2023-10-16T08:45:15Z",
        "merged_at": "2023-10-16T08:45:15Z",
        "body": "Previous logic was retrieving them prior to them being defined in `main.cpp`\r\n\r\nFollow-up to https://github.com/godotengine/godot/pull/82893\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 119,
        "deletions": 19,
        "changed_files": 22,
        "created_at": "2023-10-11T22:37:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The default is bilinear filtering as before, but nearest-neighbor filtering can now be chosen for a retro look.\r\n\r\nThis affects sky radiance map and ReflectionProbe specular light.\r\n\r\nThis also marks additional settings as requiring a restart, as noticed during testing.\r\n\r\n- This closes https://github.com/godotengine/godot-proposals/issues/8063.\r\n\r\n**Testing project:** [test_reflection_nearest_neighbor.zip](https://github.com/godotengine/godot/files/12875043/test_reflection_nearest_neighbor.zip)\r\n\r\n## Preview\r\n\r\n### Without ReflectionProbe\r\n\r\n#### Linear\r\n\r\nhttps://github.com/godotengine/godot/assets/180032/de5eb236-68eb-4024-8673-8e4d07e8474f\r\n\r\n#### Nearest\r\n\r\nhttps://github.com/godotengine/godot/assets/180032/5a63987c-d640-4aee-887c-36f59090cbc3\r\n\r\n### With ReflectionProbe\r\n\r\n#### Linear\r\n\r\nhttps://github.com/godotengine/godot/assets/180032/40af8661-37f8-4dd0-82da-7cc2529ff1ed\r\n\r\n#### Nearest\r\n\r\nhttps://github.com/godotengine/godot/assets/180032/27005638-57f3-40c0-adf8-e964f57c51b0\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-11T21:07:36Z",
        "closed_at": "2023-10-11T21:54:41Z",
        "merged_at": "2023-10-11T21:54:41Z",
        "body": "May help: https://github.com/godotengine/godot/issues/82890\r\n\r\nWhile debugging https://github.com/godotengine/godot/issues/82890 I noticed that some of the importers set surfaces in the mesh and then read back using \"mesh_get_format\" which returns the Surface.format, not SurfaceData.format. When converting to Surface.format, we are losing the upper bits which contain the version. Which leads to the mesh version getting lost. \r\n\r\nI'm not sure that it will fix https://github.com/godotengine/godot/issues/82890, but it is a necessary change.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-11T19:25:21Z",
        "closed_at": "2023-10-11T20:52:34Z",
        "merged_at": "2023-10-11T20:52:34Z",
        "body": "Be more selective on what we rewrite, since in recent emscripten versions loading dynamic libraries relies on it.\r\n\r\nPartially solve #82865 (tested working with 3.1.29, needs testing with latest)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 168,
        "deletions": 0,
        "changed_files": 13,
        "created_at": "2023-10-11T18:43:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This pull request implements `distance_to` and `distance_squared_to` methods for `Vector2i`, `Vector3i` and `Vector4i`.\r\n\r\nPartially implements [#2297](https://github.com/godotengine/godot-proposals/issues/2297), closes [#7983](https://github.com/godotengine/godot-proposals/issues/7983).\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 43,
        "deletions": 33,
        "changed_files": 53,
        "created_at": "2023-10-11T17:55:40Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR moves 2D-only editor plugins to their own folder. Specifically, this folder contains files only needed for editing Node2D, but not Node3D or Control nodes (so `canvas_item_editor_plugin` does not go in this folder). This PR is similar to how we have `scene/2d` folder for 2D nodes, and is in a similar vain to several other PRs I've opened.\r\n\r\nQ: Why these specific files? How do you know to put these files in a folder and that you're not missing any?\r\n\r\nA: I have another branch where I have the ability to completely disable Node2D in editor builds. This gives me evidence that the files I've moved are the correct ones. I don't expect that to get merged, but I do think file organization is worth upstreaming, it's more organized to have the 2D editor files all together.\r\n\r\n<img width=\"380\" alt=\"Screenshot 2023-10-11 at 1 58 13 AM\" src=\"https://github.com/godotengine/godot/assets/1646875/6e20d9cd-8a15-4e4a-a6f0-9cad9ec9940b\">\r\n\r\nQ: What about moving 3D-only editor plugins to their own folder?\r\n\r\nA: The 3D editor code is much more deeply integrated, it would be a much larger task to do like I did above with creating a branch that can compile the editor without 3D as evidence for which files should be moved where. This is something I would like to have eventually, though, for improved isolation and organization.\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 316,
        "deletions": 121,
        "changed_files": 17,
        "created_at": "2023-10-11T17:25:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implements the `IFormattable` interface to the Variant structs (more specifically, the structs that already had an associated `ToString()` function). This will allow these structs to return strings from a different culture and/or strings with an invariant culture. Because these are two new functions (one with just an `IFormatProvider` argument) that would share syntax with the existing two functions (just one for Rid), the code has been simplified by having everything direct to the `IFormattable` function",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-11T13:58:25Z",
        "closed_at": "2023-10-11T16:31:57Z",
        "merged_at": "2023-10-11T16:31:57Z",
        "body": "Fixes #83142.\r\n\r\nThe `DIRTY_FLAGS_LAYER_INDEX_IN_TILE_MAP_NODE` was set for the dirty layers but it was never checked / draw index was not updated for dirty layers. Draw index was set only upon creation of a layer's canvas item.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-10-11T13:07:46Z",
        "closed_at": "2023-10-11T20:52:34Z",
        "merged_at": "2023-10-11T20:52:34Z",
        "body": "* Fixes #79339.\r\n* Also adds missing `when` keyword autocompletion.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-11T12:44:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "It seems this error appears ever since #79341 got merged. Since BoneAttachment3D is the only consumer of this notification, I made the find_children call more restrictive in its parameters. \r\n\r\nFixes #83148\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-11T11:54:19Z",
        "closed_at": "2023-10-11T16:31:57Z",
        "merged_at": "2023-10-11T16:31:57Z",
        "body": "May solve a weird name clash we seem to have on CI since yesterday.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 21,
        "changed_files": 2,
        "created_at": "2023-10-11T11:52:57Z",
        "closed_at": "2023-10-16T08:45:15Z",
        "merged_at": "2023-10-16T08:45:15Z",
        "body": "fixes #77328\r\n\r\nthanks to @torcado194 for figuring out how to fix this!\r\n\r\nI've been using this for a week or two with no problems in my simple use cases (single-layer single-source tilemaps)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-11T11:46:11Z",
        "closed_at": "2023-10-11T16:31:57Z",
        "merged_at": "2023-10-11T16:31:57Z",
        "body": "* Fixes https://github.com/godotengine/godot/issues/81082\r\n\r\nCertain `BaseMaterial3D` settings result in a material key that is all zeros while still being a valid material. This causes the material update to be skipped when the material is created and a default material will be used instead.\r\n\r\nThis PR adds `invalid_key` member to the material key (`BaseMaterial3D::MaterialKey`) which can be used to mark the material invalid and force an update. This same idiom is already used in `ParticleProcessMaterial` and `CanvasItemMaterial`.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-11T11:35:39Z",
        "closed_at": "2023-10-11T16:31:57Z",
        "merged_at": "2023-10-11T16:31:57Z",
        "body": "~Closes~ Related to https://github.com/godotengine/godot/issues/83142\r\n\r\nThis adds a warning when the TileMap is set as Y-sorting, but none of its layers is.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-10-11T11:22:24Z",
        "closed_at": "2023-10-11T16:31:57Z",
        "merged_at": "2023-10-11T16:31:57Z",
        "body": "https://github.com/godotengine/godot/pull/79169#issuecomment-1675956081",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-11T11:05:21Z",
        "closed_at": "2023-10-11T16:31:57Z",
        "merged_at": "2023-10-11T16:31:57Z",
        "body": "Took me way too long to find but turned out that in a runtime build, we were never initialising our size for our directional shadow maps in the compatibility renderer, only the RD renderer.\r\n\r\nIn an editor build this was getting loaded through `EditorNode::_update_from_settings` so the issue was kind of hidden.\r\n\r\n- Fixes #82503\r\n- Fixes #83060",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-10-11T10:02:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The old function was incorrect returning a per axis t Tested this and it works correctly returning same result as intersects_segment\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-11T09:51:58Z",
        "closed_at": "2023-10-16T11:16:03Z",
        "merged_at": "2023-10-16T11:16:03Z",
        "body": "Fixes #72595\r\n\r\nIt works as the same with built-in script editor, when you delete the file in the filesystem panel, the editor should close the relating tab.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-11T09:05:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Same as https://github.com/godotengine/godot/pull/83096 for 3.x\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 140,
        "deletions": 137,
        "changed_files": 12,
        "created_at": "2023-10-11T03:04:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Godot's navigation system works with both 2D and 3D. The 2D navigation code is essentially a wrapper for the 3D navigation system. This PR moves the 2D navigation files into their own subfolder, making it clear what's just for 2D and what is shared between 2D and 3D. This is consistent with the `scene/2d` folder having 2D nodes.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T22:53:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR fixes this issue here: https://github.com/godotengine/godot/issues/83128\r\n\r\nI'm not actually sure if this check should go inside the ``#ifdef TOOLS_ENABLED`` or outside of it.  I'll let someone more familiar with the code base comment on that and let me know if I need to change it.\r\n\r\nWe are currently maintaining our own fork as we port from Unity to Godot!  Its so nice to be able to fix bugs ourselves as we uncover them! :)  Feel free to reject or accept any PRs from us.  We won't be offended.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-10-10T21:14:05Z",
        "closed_at": "2023-10-16T16:46:14Z",
        "merged_at": "2023-10-16T16:46:14Z",
        "body": "Fixes issue #82998 by triggering an update in derived scripts if an export changes on of the base scripts in the hierarchy. Tested over three levels of inheritance with editing the default value and adding / removing exports.\r\n\r\n_Bugsquad edit: fixes https://github.com/godotengine/godot/issues/82998_",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T19:36:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nThe ``#include \"gdscript_warning.h\"`` isn't wrapped by ``DEBUG_ENABLED`` macro here. I don't know if this is a required enhancement but I tested it and working fine.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-10T18:21:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "* Closes godotengine/godot-proposals#8057.\r\n* Closes godotengine/godot-proposals#8058.\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 384,
        "deletions": 283,
        "changed_files": 57,
        "created_at": "2023-10-10T17:54:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This draft PR showcases a GodotSharp environment where nullability is enabled. While [initially conceived](https://github.com/godotengine/godot/pull/82983#issuecomment-1752047518) as a means to centralize changes which can be branched off into standalone PRs (eg: #82980, #82983), it also showcases the consequences of trying to retrofit the concept without first undergoing significant refactoring\r\n\r\nThe biggest culprit is `GodotObject`, and how it's uniquely a reference type that Godot allows for nullability. While this draft explores the idea of returning GodotObject fields as nullable, I'm not convinced that makes for the best approach, because it floods almost every existing method/field with an added nullability check. It might be worth considering an approach similar to [Unity Objects](https://github.com/Unity-Technologies/UnityCsReference/blob/master/Runtime/Export/Scripting/UnityEngineObject.bindings.cs#L103), where there's operator overloads & behind-the-scenes null checks to better handle `null` in the context of that environment. Or it could even be as simple as throwing in a bunch of `[AllowNull]/[MaybeNull]` annotations in the generation for object files\r\n\r\nWhile the majority of areas have warnings accounted for, there's still a handful that have them. This is mainly those that I'm not entirely sure yet how to handle, or areas that feel particularly sensitive to adjustment. It's also entirely possible that many of these warnings/cases simply wouldn't be a thing with future core additions (particularly, some means of knowing if an object return value *can* be null). Either way, this is provided as-is for discussion and so potential areas can be cherrypicked for implementation as needed",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-10T16:56:03Z",
        "closed_at": "2023-10-10T20:54:51Z",
        "merged_at": "2023-10-10T20:54:51Z",
        "body": "A regression by #82729 brings back the erroneous behavior found in #79351. This is fixed by reimplementing the `#else` check in the ios `export_plugin` script",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 27,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-10-10T16:25:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "WIP draft for extension for Multiplayer API based on ongoing discussions in RocketChat.\r\n\r\nAdd an additional argument to the MultiplayerSynchronizer 'synchronized' signal meant to show how many sync updates were missing (due to either packet loss or intentional filtering) since the last update by extrapolating the result from the previous 16bit timestamp. This information may allow the ability to extend the multiplayer system with more advance visual latency compensation methods such as delayed interpolation or extrapolation of state snapshots.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T15:19:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This complements the existing Ctrl + K and Ctrl + / shortcuts.\n\nThis closes https://github.com/godotengine/godot-proposals/issues/3822.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T13:48:01Z",
        "closed_at": "2023-10-10T20:54:52Z",
        "merged_at": "2023-10-10T20:54:51Z",
        "body": "I noticed this while working on PR https://github.com/godotengine/godot/pull/83054\r\n\r\nI assume this was a copy-paste and modify error. There's a similar line in `ptrcall()` below, and it looks like \"Vararg\" was incorrectly changed to \"Validated\", and this PR simply changes that back, and does the correct modification.\r\n\r\n(Note: I actually suspect these checks might not be necessary anymore, because in PR https://github.com/godotengine/godot/pull/76047 we added ptrcall support for at least some vararg methods - but that can be explored and fixed in a future PR.)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 18,
        "changed_files": 1,
        "created_at": "2023-10-10T13:27:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Avoids a bug with native types and GDExtension types using something other than null as the initial value for an Object* property. Previously, reverting a property like that in the editor would revert to a specific static Object instance shared across instances of the containing type. Now, reverting is disabled for Object properties that default to something other than null, unless the type implements property_can_revert and property_get_revert to specify a default.\r\n\r\nNot currently an issue for native types because of a convention to default to null, past issue for some native types was #36372. GDScript types also seem to have some special case that returns null as a default value even if they have a non-null default. So this really only affects GDExtension and future changes to native types.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T12:59:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82962\r\n\r\n\r\n~~This might not be a good solution as it stops the animation everytime `edit` is called. \r\nDo we have a way to distinguish between normal `edit` and `edit` caused by resource re-import? I would appreciate any feedback or alternative suggestions.~~\r\n\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T12:05:59Z",
        "closed_at": "2023-10-10T20:54:52Z",
        "merged_at": "2023-10-10T20:54:52Z",
        "body": "This fixes https://github.com/godotengine/godot/issues/83009.\r\n\r\ncc @Calinou",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T11:27:47Z",
        "closed_at": "2023-10-10T20:54:52Z",
        "merged_at": "2023-10-10T20:54:52Z",
        "body": "Fixes #83083.\r\n\r\nFrom #81138:\r\n> P = Vertex position\r\n> N = normal\r\n> T = tangent\r\n> \r\n> // After this PR\r\n> PPPPNTNTNTNT\r\n\r\nThe issue was in ImmediateMesh the buffer was resized only for the `PPPP` part (normals/tangents were written out of the buffer bounds).",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-10T09:07:36Z",
        "closed_at": "2023-10-10T20:54:52Z",
        "merged_at": "2023-10-10T20:54:52Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/82769\r\n\r\nMight fix this one as well, but I can't reproduce the issue - https://github.com/godotengine/godot/issues/64708\r\n*Bugsquad edit:* Closes #64708",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 236,
        "deletions": 217,
        "changed_files": 10,
        "created_at": "2023-10-10T08:53:22Z",
        "closed_at": "2023-10-10T13:18:29Z",
        "merged_at": "2023-10-10T13:18:29Z",
        "body": "- Reformat logo license as a plain text file.\r\n- Fix outdated links or references to SFC or Visual Script.\r\n- Tweak contents of `CONTRIBUTING.md` to highlight contributor docs more prominently, and make it easier to parse.\r\n- Tweak formatting and contents in `thirdparty/README.md` for consistency.\r\n\r\n---\r\n\r\n- Fixes #82495.\r\n- Supersedes #82989.\r\n- Supersedes #83073.\r\n- Supersedes #83090.\r\n- This docs PR should be merged alongside: https://github.com/godotengine/godot-docs/pull/8215",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-10-10T08:35:26Z",
        "closed_at": "2023-10-10T20:54:52Z",
        "merged_at": "2023-10-10T20:54:52Z",
        "body": "* Fixes #82934.\r\n\r\n```gdscript\r\n@export_category(\"class|test\")\r\n@export var d: Dictionary = {key = 123}\r\nsignal s2(a: Array[int])\r\n```\r\n\r\n1. Fix tooltips for dictionary keys.\r\n2. Fix tooltips for categories starting with `class|`.\r\n3. Add BBCode markup escaping for signal parameters.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-10T08:34:14Z",
        "closed_at": "2023-10-10T10:35:26Z",
        "merged_at": "2023-10-10T10:35:26Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/82389\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 47,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-10T08:17:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Try an idea of consistent sub-resource id\r\nFixes #82702\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-10T07:13:35Z",
        "closed_at": "2023-10-10T08:56:21Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-10T06:19:09Z",
        "closed_at": "2023-10-10T07:17:40Z",
        "merged_at": "2023-10-10T07:17:40Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/83085\r\n\r\n*Bugsquad edit:*\r\n- Fixup to #82458 ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 364,
        "deletions": 159,
        "changed_files": 36,
        "created_at": "2023-10-10T05:39:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implements https://github.com/godotengine/godot-proposals/issues/8054 see the proposal for the justification.\r\n\r\nMinimal test project: [character_gravity.zip](https://github.com/godotengine/godot/files/12853155/character_gravity.zip)\r\n\r\nI split this PR into 3 commits for easy reviewing:\r\n\r\n* First commit: In 3D we have both rigid and soft bodies, but currently a lot of the logic is duplicated between these two. I made a new class `GodotSolidObject3D` that can hold the logic shared by both. For 2D we don't have soft bodies yet, but I made the same change for consistency.\r\n    * In just this commit, the classes are empty. More shared code can be moved here in the future.\r\n    * This commit also renames the AreaCMP classes to Area2DCMP and Area3DCMP, which is necessary to fix a name conflict after moving the 2D AreaCMP to `godot_area_2d.h` for consistency with 3D.\r\n* Second commit: Move the shared code for computing gravity into the GodotSolidObject classes.\r\n* Third commit: Expose the compute gravity method on the physics nodes and physics server. Due to both 2D and 3D physics and all the different physics server classes for Godot physics, GDExtension, etc, this commit touches a lot of files, but it's only a few lines per file so it's not a lot of code.\r\n    * This commit also uses the new methods in the script templates, which replaces the long `var gravity: float = ProjectSettings.get_setting(\"physics/3d/default_gravity\")` line with just `compute_gravity()`, and now the code no longer needs to care which direction the gravity is.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T02:27:03Z",
        "closed_at": "2023-10-10T08:51:42Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T01:52:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Limit the max split to `8` to get complete `deps`.\r\n\r\n`deps` caches the return value of `ResourceLoader::get_dependencies()`, which is also separated by \"::\" (eg `uid://dnl1wt40gvcuu::::res://icon.svg`). \r\n\"::\" is quite popular as a splitter.\r\n\r\nReference: Code for storing information\r\n\r\nhttps://github.com/godotengine/godot/blob/6b727ebdd298bdfad8b5c5ea78100bfb6a537d79/editor/editor_file_system.cpp#L1326-L1335\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T23:33:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The bug is unreported, but pretty simple to understand - if you don't pass any points to `draw_multiline()`, it should simply not draw anything and not throw an error. But this is thrown as an error.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T22:50:46Z",
        "closed_at": "2023-10-10T07:17:40Z",
        "merged_at": "2023-10-10T07:17:40Z",
        "body": "This makes sure that the default rotation tracks generated by the SkeletonRestFixer plugin will be flagged as 'imported', which prevents them duplicating repeatedly on reimport.\r\n\r\nCloses https://github.com/godotengine/godot/issues/83075",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T22:25:46Z",
        "closed_at": "2023-10-10T08:57:05Z",
        "merged_at": null,
        "body": "I added a link to the README in version 3.5 because it seems clear and to the point. Although I think adding a README to the newer versions would be better\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T22:17:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- Follow-up to https://github.com/godotengine/godot/pull/82940.\r\n\r\nSince metadata can't have a description filled in, this adds usage instructions for the metadata instead.\r\n\r\n## Preview\r\n\r\n*Since the inline code appears mangled due to not having enough line spacing, I'm marking the PR as a draft. In general, it seems theme propagation isn't working correctly in those tooltips. Alternatively, we can drop the `[code]` blocks.*\r\n\r\n![image](https://github.com/godotengine/godot/assets/180032/a966b641-5115-4465-9c9b-340d28520a7e)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-10-09T22:00:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "TextEdit already has `scroll_fit_content_height`, but there is no equivalent for width. This PR adds `scroll_fit_content_width` with the same behavior for width. When both are enabled, there are no scrollbars. I have tested that this works correctly in The Mirror and in a minimal project.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-09T21:23:17Z",
        "closed_at": "2023-10-09T21:29:01Z",
        "merged_at": "2023-10-09T21:29:01Z",
        "body": "Invalid null check that slipped through CI\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T20:47:26Z",
        "closed_at": "2023-10-09T21:29:01Z",
        "merged_at": "2023-10-09T21:29:01Z",
        "body": "PR to fix Issue #https://github.com/godotengine/godot-docs/issues/8208\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-10-09T20:43:29Z",
        "closed_at": "2023-10-10T10:35:26Z",
        "merged_at": "2023-10-10T10:35:26Z",
        "body": "If you have a TreeItem which is not selectable nor editable, clicking anywhere will collapse/uncollapse it. The problem is that it prevents buttons from being clicked. This PR moves the button logic before the full-item fold, making them interactable.\r\n\r\nNeeded for #82629",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 42,
        "deletions": 76,
        "changed_files": 1,
        "created_at": "2023-10-09T20:24:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The GDScript parser was calling Project Setting's get_property_list, and iterating every single property, looking for \"autoload/<identifer>\". This was very inefficient in large projects with a huge set of classes written into that ProjectSettings object. For some context, in our large projects, the get_property_list() and the looping accounted for ~1s of the ~3s time of our game's main() function.\r\n\r\nThis iteration of Project settings was occuring in 3 locations in the GDScript parser. This PR unifies them into using a single helper function. That helper function is O(1) and has a drastically better memory allocation profile.\r\n\r\nTested and works in our giant projects.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 24,
        "changed_files": 4,
        "created_at": "2023-10-09T18:40:38Z",
        "closed_at": "2023-10-10T07:17:40Z",
        "merged_at": "2023-10-10T07:17:40Z",
        "body": "Remove unnecessary code missed in https://github.com/godotengine/godot/pull/80954 and causing extra spacing to be applied twice.\r\n\r\nFixes https://github.com/godotengine/godot/issues/83061",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 55,
        "deletions": 9,
        "changed_files": 9,
        "created_at": "2023-10-09T16:44:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Partially addresses https://github.com/godotengine/godot-proposals/issues/4777 and https://github.com/orgs/godotengine/projects/54/views/1?filterQuery=-status%3ADone+pass&pane=issue&itemId=27063911",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-09T16:30:29Z",
        "closed_at": "2023-10-09T21:29:01Z",
        "merged_at": "2023-10-09T21:29:01Z",
        "body": "* Fixes: #83055\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T16:02:22Z",
        "closed_at": "2023-10-10T20:54:52Z",
        "merged_at": "2023-10-10T20:54:52Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/83016\r\nFixes https://github.com/godotengine/godot/issues/83097\r\n\r\n~~Since I don't presently have a way to reproduce the bug, this will need some testing.~~",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 60,
        "deletions": 58,
        "changed_files": 2,
        "created_at": "2023-10-09T15:31:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR solves the issue #81347.\r\n\r\nI changed the method GodotStep3D::step() at line godot_step_3d.cpp:185 by putting the \"integrate forces\" loop between \"pre-solve islands\" and \"solve islands\".\r\n\r\nCloses #81347 \r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-09T15:26:06Z",
        "closed_at": "2023-10-09T21:29:01Z",
        "merged_at": "2023-10-09T21:29:01Z",
        "body": "Originally part of #82983, before one of the [discussions](https://github.com/godotengine/godot/pull/82983#discussion_r1350189988) prompted me to check if adding `ArgumentNullException` to the untyped\u2192typed constructors would break compatability. As it turns out, it would not, because they always expect the underlying collection to be valid. However, this *does* mean that it wasn't throwing an exception earlier, only when an actual function is called, so the exception in the constructor is warranted\r\n\r\nIn addition, this adds missing exception/returns documentation for the two files. It was already warranted for the constructors having a new exception, but this ensures similar relevant functions have appropriate documentation if it was similarly missing\r\n\r\n---\r\nTest case::\r\n```cs\r\nvar array = (Godot.Collections.Array)null;\r\nvar intArray = new Godot.Collections.Array<int>(array);\r\nintArray.Add(123);\r\n```\r\nOld behavior log, caught on line 3:\r\n```log\r\nArray.cs:1514 @ Boolean Godot.Collections.Array`1.get_IsReadOnly(): System.NullReferenceException: Object reference not set to an instance of an object.\r\n```\r\nNew behavior log, caught on line 2:\r\n```log\r\nArray.cs:1129 @ Godot.Collections.Array`1..ctor(Godot.Collections.Array): System.ArgumentNullException: Value cannot be null. (Parameter 'array')\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-09T15:02:32Z",
        "closed_at": "2023-10-10T10:35:26Z",
        "merged_at": "2023-10-10T10:35:26Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nWhile working on #83008, I found an unnecessary include here.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T14:52:18Z",
        "closed_at": "2023-10-10T10:35:26Z",
        "merged_at": "2023-10-10T10:35:26Z",
        "body": "* Fix a bug that was appeared after #82067.\r\n\r\n`function->return_type->get_datatype()` and `function->get_datatype()` have different values:\r\n\r\nhttps://github.com/godotengine/godot/blob/42425baa59956dc9d1e22341fe5e5d7f8fad5067/modules/gdscript/gdscript_analyzer.cpp#L1654\r\n\r\nSince DocGen previously did not take metatypes into account, this bug did not appear.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T13:45:15Z",
        "closed_at": "2023-10-10T08:51:53Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T12:34:15Z",
        "closed_at": "2023-10-09T21:29:01Z",
        "merged_at": "2023-10-09T21:29:01Z",
        "body": "The DDA traversal had a conceptual error where it did an early termination of the search if it hit a triangle, but it didn't check if the hit position was inside the bounds of the cell being traversed. This can aid to fix light leaks such as the ones found in issue #75440.\r\n\r\nI don't have much in the way of good comparison pics as the effectiveness of this fix is better observed with another change I'll introduce in my indirect bounces PR, which is the possibility of tracing lights on each bounce. In that scenario there's leaks that are impossible to fix otherwise that this PR will address.\r\n\r\nWhat I did notice however is an increase in baking times as expected.\r\n\r\n```\r\nUnreal Sun Temple:\r\nBefore: Done baking lightmaps in 00:04:20.\r\nAfter: Done baking lightmaps in 00:04:41.\r\n\r\nSponza:\r\nBefore: Done baking lightmaps in 00:00:56.\r\nAfter: Done baking lightmaps in 00:01:02.\r\n```\r\n\r\nThat's around ~10% slower bake times for what might not be a very noticeable fix right now, but it's hard to deny the fact the algorithm itself is wrong and can cause errors. The slower bake times are easily explained by the fact it's not doing early termination anymore. The fact the difference shows up means there was a significant amount of cases where the light mapper was _not_ finding the actual closest hit but something further away.\r\n\r\nSo in short, there might be not be easy to find scenarios where we can confirm this fixes something right now, but it'd be for the best for the code to not work incorrectly.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-10-09T11:57:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82701",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T11:22:36Z",
        "closed_at": "2023-10-13T09:51:33Z",
        "merged_at": "2023-10-13T09:51:33Z",
        "body": "As mentioned in https://github.com/godotengine/godot/issues/82524#issuecomment-1740833292 ,we maybe need a seperate proposal to disable this behaviour.\r\nCloses #82524\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 344,
        "deletions": 146,
        "changed_files": 12,
        "created_at": "2023-10-09T10:09:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "* Closes #56592.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 32,
        "changed_files": 1,
        "created_at": "2023-10-09T09:52:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82753\r\n\r\nThe issue owner successfully test it and it works. I would appreciate any feedback or alternative suggestions.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T09:47:34Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "Currently, every time you bake a VoxelGI node it leaks the temporary 3D SDF data. Depending on voxel configuration this is often 20 to 30 megabytes in size, so it adds up quicky.\r\n\r\nThis PR simply frees the temporary memory allocation at the end of the function, which fixes the leak.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T09:00:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Add auto convert to srgb code in material\r\nrelated to https://github.com/godotengine/godot/issues/82994, https://github.com/godotengine/godot/issues/30701\r\n\r\nAdd material color correction in gles2.\r\n![image](https://github.com/godotengine/godot/assets/9168814/3d806893-8f96-4883-9bc0-0f7aab460d28)\r\n\r\nGLES2 import before fix(upper fbx. lower gltf)\r\n![image](https://github.com/godotengine/godot/assets/9168814/886d02b7-538b-4cdb-b0ac-4d1c8a806566)\r\n\r\nGLES2 import after fix((upper fbx. lower gltf, color looks same as in GLES3)\r\n![image](https://github.com/godotengine/godot/assets/9168814/8a740da1-9b20-4309-b48d-437afe261e32)\r\n\r\nfbx looks brighter cause blender export fbx vertex color in srgb space, check the is_srgb vertex color in material will fix this.\r\n\r\nThis fix wont change GLES3 fbx/gltf import behavior(already correct), only change the material code auto generation so it makes the vertex looks correct on gles2.\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T08:41:04Z",
        "closed_at": "2023-10-09T08:45:59Z",
        "merged_at": null,
        "body": "Add auto convert to srgb code in material\r\nrelated to https://github.com/godotengine/godot/issues/82994, https://github.com/godotengine/godot/issues/30701\r\n\r\nGLES2 gltf before fix\r\n![image](https://github.com/godotengine/godot/assets/9168814/c1d67f6c-299f-42bf-b17d-13659c491274)\r\n\r\nGLES2 gltf after fix(looks same as GLES3)\r\n![image](https://github.com/godotengine/godot/assets/9168814/3bf66fd0-dce6-4f68-92be-ae8b41767363)\r\n fbx looks brighter cause blender export fbx vertex color in srgb space, check the is_srgb vertex color in material will fix this.\r\n\r\nGLES3 fbx/gltf not changed(already correct).\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 52,
        "deletions": 10,
        "changed_files": 7,
        "created_at": "2023-10-09T08:34:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Certain glGet operations require 64 bit versions according to the GLES spec. The previous code was susceptible to overflow bugs,  especially running under ANGLE.\r\n\r\nMay fix #75913\r\n\r\n## Notes\r\n* Supersedes #82921\r\n* Also fixes a theoretical bug in `gl_wrapper` by placing an upper limit on texture image units.\r\n* Is basically a slightly more in depth version of #80909 .\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T08:19:08Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "Closes #82949\r\nCloses #82905\r\n\r\nIf you try to use `UpdateMode.UPDATE_CONTINUOUS` with a non-numeric Misc Type value, it will fail to apply the value because there is currently no way to blend using `UpdateMode.UPDATE_CONTINUOUS`.\r\n\r\nI believe that in the future we should convert them to have weight as `Pair<Variant value, float weight>` in the similar way that `bool` values are converted to `0` or `1` and blended, but for now it will force `UpdateMode.UPDATE_DISCRETE` instead of `UpdateMode.UPDATE_CONTINUOUS` since it is useless now.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-09T03:01:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fix https://github.com/godotengine/godot/issues/46947 (and here https://github.com/godotengine/godot/pull/37209#issuecomment-907130440) and address https://github.com/godotengine/godot-proposals/issues/4637.\r\n\r\nIf the user can use negative indexes for `array[-1]` and `array.pop_at(-1)`, for consistency, adding the same feature to `Array.remove_at` and `Array.insert` seems ideal.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-10-09T02:27:44Z",
        "closed_at": "2023-10-09T21:29:01Z",
        "merged_at": "2023-10-09T21:29:01Z",
        "body": "I guess this wasn't completely fixed last time. This PR should deal with the instances where the scene has dependency errors, but also fails to load\r\n\r\nCloses https://github.com/godotengine/godot/issues/83023",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-08T22:40:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "On pixel shader bound scenarios, use a specialization constant to generate a variant that uses one single directional light; which is the most common use case.\r\n\r\nThis improves framerate of Adreno 505 by 33%\r\n\r\n**NOTE:** For Adreno 505 performance improvements to actually appear this PR also needs #82805 to workaround a driver bug.\r\n\r\n**NOTE:** This PR _can_ be merged without having to merge #82805.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-08T22:08:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This bug is available since introduction of Godot **3.x**, and still persisting in **4.x**, and was reported for many years by me.\r\n\r\n**Bug summary**: After `set_position`, or `set_global_position`, a **RigidBody2D** is moved to that specific position for a portion of a millisecond, but then returns on it's normal trajectory.\r\n\r\n**The solution** is to make function `_set_global_invalid` public, and call it each time **Node2D**'s `set_position` is called.\r\nIt is already done ***unintentionally*** inside `global_translate` by calling `get_global_transform`.\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-08T21:29:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Deprecate old misspelled signal.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-08T21:19:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82936.\r\n\r\nThis pull request adds a deprecation warning to the `Window::move_to_foreground()` method, as internally it contains the same code as the `Window::grab_focus()` method.\r\n\r\nIn a future version of Godot (*4.3*? *4.4*? ***5.x***?) said method ought to be removed, however, to maintain compatibility a deprecation warning should suffice for now.\r\n\r\n**Note**: If this is not the right way to purge duplicates from the codebase I am more than willing to re-do it once I've been shown the proper way.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-08T20:40:00Z",
        "closed_at": "2023-10-11T20:52:34Z",
        "merged_at": "2023-10-11T20:52:34Z",
        "body": "The existing documentation for  `JoyButton.JOY_BUTTON_START` only mentions the Nintendo button it corresponds to, that being:\r\n\r\n> Game controller SDL start button. Corresponds to the Nintendo + button.\r\n\r\nThis PR updates it to also include the PlayStation and Xbox buttons it corresponds to, the names for the updated documentation are taken from the corresponding manuals at:\r\n\r\n- https://manuals.playstation.net/document/en/ps4/basic/pn_controller.html\r\n- https://support.xbox.com/en-US/help/hardware-network/controller/xbox-one-wireless-controller\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-08T17:00:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nFixes #82999.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-10-08T16:57:06Z",
        "closed_at": "2023-10-14T17:01:46Z",
        "merged_at": null,
        "body": "This fixes an issue when instantiating a scene, script's properties that have \"node_type\" hint set are read as a nodepath causing \"revert\" button to popup due variant mismatch.\r\n\r\nbefore pr:\r\n\r\nhttps://github.com/godotengine/godot/assets/33091666/39213a90-db67-458a-8cd5-3e9d6b2c67da\r\n\r\npr: \r\n\r\nhttps://github.com/godotengine/godot/assets/33091666/930f3fa5-030a-4fd2-a61b-b182950765c8\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-08T16:03:22Z",
        "closed_at": "2023-10-09T21:29:01Z",
        "merged_at": "2023-10-09T21:29:01Z",
        "body": "There are two strings which are very similar but not identical, after this PR there will be identical.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 85,
        "deletions": 85,
        "changed_files": 45,
        "created_at": "2023-10-08T15:31:56Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "Some missed cases, largely because of parenthesis blocking my original search\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 20,
        "changed_files": 10,
        "created_at": "2023-10-08T14:24:15Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "More inclusive language and something that has bothered me personally.\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-08T14:17:03Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "Fixes a handful of unresolved `Compat.cs` documentation by prepending the correct class",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 70,
        "deletions": 0,
        "changed_files": 11,
        "created_at": "2023-10-08T13:21:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "closes (what i need) of https://github.com/godotengine/godot-proposals/issues/4637\r\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 39,
        "changed_files": 2,
        "created_at": "2023-10-08T11:43:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implemented GDS auto method creation in VSCode together with https://github.com/godotengine/godot-vscode-plugin/pull/501 . \r\nLater, C# can also use a similar approach for auto method creation in VSCode .\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 347125,
        "deletions": 295874,
        "changed_files": 4311,
        "created_at": "2023-10-08T09:44:21Z",
        "closed_at": "2023-10-08T09:44:40Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-08T09:19:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "As mentioned in https://github.com/godotengine/godot/issues/82022#issuecomment-1730545050\r\nCloses #82022\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-08T07:53:36Z",
        "closed_at": "2023-10-10T08:58:11Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nThis change integrates the license into the text and adds the copyright symbol.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 53,
        "changed_files": 6,
        "created_at": "2023-10-08T06:45:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "(Note: This will conflict with #82899. We can merge in either order, I will rebase the other PR).\r\n\r\nIn a small number of places (once in the glTF module and multiple times in the filesystem dock), static data in the `ResourceImporterScene` class was being referred to by the singleton instance when it did not need to be. This PR fixes those places.\r\n\r\nPart of the problem is the confusion between the parent class `ResourceImporter` working with \"importer\"s and this class `ResourceImporterScene` working with \"importer\"s. This PR includes a rename of the `ResourceImporterScene` importer methods to \"scene_importer\" to avoid confusion with `ResourceImporter`'s \"importer\".\r\n\r\nThis PR also reduces code duplication in the filesystem dock, previously it was choosing between the different singletons but now that is no longer necessary. `ResourceImporterScene::get_scene_importer_extensions` is accessing static data so we don't need to use the singletons. The `show_advanced_options` method is just a shortcut for accessing the scene import dialog and passing along with a bool for if this is the animation dialog or not, so instead of using the singletons of the importer we should just have this part of the editor UI talk to the other part of the editor UI.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 163,
        "deletions": 21,
        "changed_files": 16,
        "created_at": "2023-10-08T06:25:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Depends on https://github.com/godotengine/godot/pull/67777 .\r\n\r\nThis PR allows the `@abstract` annotation defined in the PR above to be used on methods. Abstract methods have the following properties:\r\n\r\n* They must exist inside an abstract class:\r\n![image](https://github.com/godotengine/godot/assets/56272643/97013f8e-c027-4090-9f40-6afecd3d7628)\r\n\r\n* They cannot have an implementation\r\n![image](https://github.com/godotengine/godot/assets/56272643/6d30d1d6-39a8-4425-bdb8-c95264121f9d)\r\n\r\n* They MUST be implemented by subclasses\r\n![image](https://github.com/godotengine/godot/assets/56272643/60e0671f-e0b5-46ce-87de-e1a5709d4c91)\r\n\r\nPlease test this and let me know your thoughts!\r\n\r\nBelow is a simple example project to use in testing:\r\n\r\n[test_project_abstract_methods.zip](https://github.com/godotengine/godot/files/12839926/test_project_abstract_methods.zip)\r\n\r\n* _Bugsquad edit:_ Closes godotengine/godot-proposals#1631.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-10-08T02:22:20Z",
        "closed_at": "2023-10-11T20:52:34Z",
        "merged_at": "2023-10-11T20:52:34Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/72825 by adding a call to:\r\n\r\n```\r\nScriptEditor::get_singleton()->trigger_live_script_reload();\r\n```\r\n\r\nin the `GDScriptTextDocument::didSave` callback. I tested this using the VSCode Godot extension, when connected to the language server, in `master` saving the file in VSCode does NOT trigger an update. An update only happens when you focus in the editor, which goes through the flow: `ScriptEditor::_notification` -> `_update_modified_scripts_for_external_editor()`.\r\n\r\nhttps://github.com/godotengine/godot/blob/6916349697a4339216469e9bf5899b983d78db07/editor/plugins/script_editor_plugin.cpp#L1677C4-L1677C48\r\n\r\nFor reference, the normal flow of updating a script file while the game is running goes through `ScriptEditor::_res_saved_callback()` -> `_trigger_live_script_reload()`",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T00:31:09Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "This PR fixes building with `module_gdscript_enabled=no`, which previously failed due to references to the module.\r\n\r\nFixes #82231\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-07T23:23:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Shows revert button for MeshInstance3D blendshape values.\r\n\r\n![revert_blendshapes](https://github.com/godotengine/godot/assets/52464204/6d1eadfd-e227-4ac5-afd3-a305d801f90e)\r\n\r\n... because having to enter `0.0` manually all the time because the slider steps make it impossible to hit zero needs to stop.\r\n\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 43,
        "changed_files": 8,
        "created_at": "2023-10-07T21:43:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Another minor update on the road to GodotSharp being nullable by default. In a similar vein to #82980, this focuses only on Variant types, but the class-equivalents instead. Still mostly small changes, but this is comparatively more involved than the structs, so it warrants its own PR",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 86,
        "deletions": 35,
        "changed_files": 17,
        "created_at": "2023-10-07T19:47:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Minor update on the road to GodotSharp being nullable by default. This focuses exclusively on the Variant structs, which are probably the one area that could be shifted over in full without issue. The only non-conversion change was in `Projection.cs`, where a new null check was added to handle a function returning `Vector3?` instead of `Vector3`, matching GDScript implementation.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 321,
        "deletions": 260,
        "changed_files": 8,
        "created_at": "2023-10-07T19:32:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Slider, PopupMenu and TabBar had a duplicated code that handled joypad navigation. This PR adds a helper class that removes the duplication. This allows to easily modify the various constants and also add better joypad handling to more classes.\r\n\r\nUsage:\r\n- Add JoypadHelper to the class\r\n- Setup it with `setup()` and `set_move_callback()`\r\n  - setup takes \"owner\", the helper will automatically toggle internal process. It also determines whether the helper works in horizontal or vertical mode (or both)\r\n  - callback is a Callable that takes Vector2i\r\n- Call `joypad_helper->process_event(p_event)` in `gui_input`. If it returns `true`, return from the method.\r\n- In `NOTIFICIATION_INTERNAL_PROCESS` call `joypad_helper->process_internal(delta)`\r\n  - it will call the move callback when appropriate, with the argument specifying how the value should change\r\n\r\nThe new class uses `SNAME()` for actions, so it should be a little bit more performant too.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-07T16:48:38Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes a typo in `ScriptPropertiesGenerator.cs` that was making the passed hint `TypeString` instead of `ArrayType`. While I'm not certain of the full ramifications of fixing this error, one immediate benefit is having resources correctly save arrays as typed if they're exported as such (like GDScript)\r\n\r\n---\r\nExample file to save a single \"`123`\" entry\r\n```cs\r\npublic partial class Main : Node2D\r\n{\r\n    [Export]\r\n    private Godot.Collections.Array<int> _array;\r\n}\r\n```\r\n\r\nBefore:\r\n```gd\r\n_array = [123]\r\n```\r\nAfter:\r\n```gd\r\n_array = Array[int]([123])\r\n```",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 69,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-07T16:30:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nThis PR makes the engine display a warning in the scene tree editor against AnimationTrees which have a `AnimationNodeStateMachineTransition` with an invalid expression (i.e. one that can't be parsed):\r\n\r\n![Configuration warning for invalid advance expression](https://github.com/godotengine/godot/assets/1843197/b30bd624-a746-46a9-96ff-f4b6bf6f198e)\r\n\r\nIt also adds some error reporting to `set_advance_expression`, which shows up in the editor's output (and debugger for running projects):\r\n\r\n![Error in output](https://github.com/godotengine/godot/assets/1843197/d1ccc65a-9e9c-40ea-b06a-8ac46d96d085)\r\n\r\n![Error in debugger](https://github.com/godotengine/godot/assets/1843197/b1e7a88f-c497-421a-bb6e-6546ec9f59a0)\r\n\r\nOne downside to adding this error reporting to the setter is that there is no debouncing when editing the expression via the inspector, causing every keystroke to report an error in the output (unless the expression is valid):\r\n\r\n![Errors reported whilst typing \"value == 3 + 4\"](https://github.com/godotengine/godot/assets/1843197/8720fba6-576a-4c39-b7de-5609424b6b57)\r\n\r\nI'm happy to remove this error reporting if need be, as it is only really useful when setting `advance_expression` at runtime, which I can't imagine is done very often.\r\n\r\nThis PR also adds error reporting to transition execution, catching cases where variables may not exist:\r\n![Error at runtime](https://github.com/godotengine/godot/assets/1843197/4f97b533-4140-4fc8-9ed7-7822ed336d50)\r\nThere's a similar downside to this error reporting too - it ends up being output every frame that the expression is invalid (which is usually indefinitely), both in-editor and whilst the project is running. This could be changed to use `ERR_PRINT_ONCE`, but it seems like that would cause it to only be printed once per engine run, which seems less than ideal.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-07T16:06:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nFixes https://github.com/godotengine/godot/issues/59232\r\n\r\nBefore:\r\n\r\nhttps://github.com/godotengine/godot/assets/50302479/c85de38a-230c-44ff-9483-199ec979d2b2\r\n\r\nAfter:\r\n\r\n\r\nhttps://github.com/godotengine/godot/assets/50302479/6783a58b-a02b-4bf2-9ac8-df170daa9bb2\r\n\r\n\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-07T15:53:41Z",
        "closed_at": "2023-10-10T10:35:27Z",
        "merged_at": "2023-10-10T10:35:27Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/82812\r\n\r\nMyself and the reporter of that issue, are seeing a strange situation where a GDExtension will use a class defined by the engine with the same name, rather than the class defined in the GDExtension.\r\n\r\nPassing `RTLD_DEEPBIND` to `dlopen()` when loading the GDExtension seems to fix it in my testing!\r\n\r\nAbout `RTLD_DEEPBIND`, the man page says:\r\n\r\n> Place  the  lookup  scope  of the symbols in this shared object ahead of the global scope.  This means that a self-contained object will use its own symbols in preference to global symbols with the same name contained in objects that have already been loaded.\r\n\r\nI'm definitely not an expert on platform-level stuff, so I don't know if this flag has any limitations or caveats associated with it.\r\n\r\n### Downloading pre-compiled binaries:\r\n\r\n1. Login into github\r\n2. Click the \"checks\" tab of this PR\r\n3. On the right there's an \"artifacts\" button.\r\n4. Download the appropriate build for your plaform\r\n\r\n![image](https://github.com/godotengine/godot/assets/7917475/ba40d17f-8ba7-46cc-8dea-fc9758e383fb)\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-07T15:17:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This has several upsides:\r\n\r\n- `.godot/` is no longer bloated with shader cache, making ZIP archives of projects several megabytes larger when MRPs are uploaded to GitHub.\r\n- Shader cache is shared across projects, which benefits startup times when you edit several projects.\r\n- Shader cache is shared between the editor and running project, which benefits initial project startup times after opening the editor.\r\n\r\nGiven the potential implications of this change, I suggest not cherry-picking it until it's been thoroughly tested.\r\n\r\n___\r\n\r\n- This closes https://github.com/godotengine/godot/issues/73174.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-07T15:08:55Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "Removes rounding introduced it https://github.com/godotengine/godot/pull/77819, glyphs can use subpixel rendering and is not necessary rendered at integer positions.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-07T15:05:11Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "This is the 2D counterpart to the existing Disable 3D property. Its functionality is already internally implemented and used, but it wasn't exposed.\r\n\r\n- This closes https://github.com/godotengine/godot-proposals/issues/8020.\r\n\r\n**Testing project:** [test_disable_2d.zip](https://github.com/godotengine/godot/files/12838088/test_disable_2d.zip)\r\n\r\n## Preview\r\n\r\nhttps://github.com/godotengine/godot/assets/180032/6074af67-dbb8-43e8-824d-f26cb86e63a2",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-07T14:58:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- This closes https://github.com/godotengine/godot/issues/82945.\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 34,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-10-07T13:35:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Project setting to prevent handling from joypad input when the window is not focused.\r\n\r\nCloses https://github.com/godotengine/godot/issues/16832\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-07T12:52:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This pull request fixes and closes issue [Area3D gravity problem in Godot 4 #77682](https://github.com/godotengine/godot/issues/77682)\r\n\r\nWe solve this issue with [@Wiltof](https://github.com/Wiltof) by adding a check in the destructor of `GodotAreaPair3D` ; if the area has a gravity override then we remove the area from the body so it is not influenced by it anymore.\r\n\r\nThis solves the cases where we have a `Rigidbody3D` inside an `Area3D` with a gravity override mode, when the `RigidBody3D` is teleported outside the Area using its `Tranform`, or when the `Area3D` is disabled or deleted. The `RigidBody3D` is no longer subject to the `Area3D` gravity.\r\n\r\n* *Bugsquad edit, fixes: #77682*\r\n* *Bugsquad edit, fixes: #81550*\r\n* *fixes: #77449*",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 91,
        "deletions": 6,
        "changed_files": 9,
        "created_at": "2023-10-07T11:38:06Z",
        "closed_at": "2023-10-13T10:57:18Z",
        "merged_at": "2023-10-13T10:57:18Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/19592\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-07T11:20:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Prevent the internal Script Editor from reloading when the external Editor is active in the settings.\r\n\r\nThis prevents a crash from different race conditions from editing files in the external editor while the internal editor tries to reload open file tabs.\r\n\r\nSome conditions that cause the crash where:\r\n* Syntax highlighting (`gdscript_highlighter.cpp`, `syntax_highlighter.cpp`)\r\n* Code analysis (`code_edit.cpp`)\r\n* ... and more\r\n\r\n\r\n> Info:\r\nThe script tabs on the internal Editor should probably be closed in the check but this is not relevant for this problem (engine crash) and more changes are required for it because the trigger is not on the main thread.\r\n\r\n\r\nThis solves the crashes mentioned in https://github.com/godotengine/godot/issues/71016\r\nI was able to reproduce the different crashes as mentioned in https://github.com/godotengine/godot/issues/71016#issuecomment-1661987809\r\n\r\n* *Bugsquad edit, fixes: #71016*\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3407,
        "deletions": 0,
        "changed_files": 42,
        "created_at": "2023-10-07T11:10:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Following the discussions in #64899.  \r\n\r\nWe want to be able to notice regressions / breaking changes in the C# source generators. The idea would be to base the tests on the current `Godot.SourceGenerators.Sample` project, eventually running them on CI when `Godot.SourceGenerators` is modified. I'm not sure if the sample project would still have a reason to exist once a proper testing pipeline is set up?\r\n\r\nRoslyn documentation on the subject can be found [here](https://github.com/dotnet/roslyn/blob/main/docs/features/source-generators.cookbook.md#unit-testing-of-generators) and [here](https://github.com/dotnet/roslyn-sdk/tree/main/src/Microsoft.CodeAnalysis.Testing#microsoftcodeanalysistesting).\r\n\r\nFollowing is the current list of generators we'd want to have tests for:\r\n- [x] `ScriptMethodsGenerator`\r\n- [x] `ScriptPathAttributeGenerator`\r\n- [x] `ScriptPropertiesGenerator`\r\n- [x] `ScriptPropertyDefValGenerator`\r\n- [x] `ScriptSerializationGenerator`\r\n- [x] `ScriptSignalsGenerator`\r\n\r\nThe current draft is a simple proof of concept xUnit project that loads the appropriate assemblies and run a couple of (almost) empty tests against our `ScriptPropertiesGenerator`.  \r\nI still need to decide on a good way to load test data and expected results, and avoid the huge string blocks. The less friction there is on writing tests, the better.\r\n\r\n__Edit 1:__\r\nBlocks of strings are probably fine, at least for now. I roughly pulled everything that was in the sample project into tests (see list above). A couple still need a bit of work to be usable. ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-07T10:56:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes #79190\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 302,
        "deletions": 73,
        "changed_files": 12,
        "created_at": "2023-10-07T10:37:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "* Closes godotengine/godot-proposals#8005.\r\n* Closes #60516.\r\n* Closes #65925\r\n* Supersedes #72951\r\n\r\nI just modified the parser to handle Arrays and their Packed versions for exported properties.\r\n\r\n~~I didn't implement @export_enum, as it's already being handled in this PR: https://github.com/godotengine/godot/pull/72951~~\r\nAlso implemented @export_enum, and made the implementations for @export_multiline and @export generic, so they don't have to care about Arrays.\r\n\r\n_Bugsquad edit:_ Linked issues.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-07T09:56:53Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Correct location for the documentation changes I erroneously submitted to sphinx.\r\nResolves https://github.com/godotengine/godot-docs/issues/8163\r\nSupersedes https://github.com/godotengine/godot-docs/pull/8176\r\n\r\nPhysics Damping (2D and 3D) documentation was incorrect and misleading, suggesting a critical spring damping scheme (that \"tries to stop a body in a given time\", but it's a \"negative exponential damper\", that is both velocity and tick-rate dependent).\r\n\r\nHopefully this will save some hairs from going grey and provide a deeper understanding for the users of this obscure value and its inner workings (Godot is a bit special in this regard, though the combine feature is really cool) :)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-07T08:01:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The tooltip documentation for autocomplete was not loaded for GDScript (in VSCode) directly after the \".\".\r\n\r\nI've added a check to resolve the item documentation autocomplete if the character  left from the cursor is \".\" as else if condition to the normal `begins_with` check.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 242,
        "deletions": 42,
        "changed_files": 2,
        "created_at": "2023-10-07T07:11:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This pull request implements and closes: https://github.com/godotengine/godot-proposals/issues/8017\r\n\r\nSupercedes https://github.com/godotengine/godot/pull/82946\r\n\r\nThis pull request will allow Godot to:\r\n- Generate code to get value of a property dragged from the inspector while holding CTRL.\r\n- Generate code to set/assign a value of a property dragged from the inspector while holding SHIFT. The value being set will be the default value of the type of property, and it will be automatically selected in the code editor.\r\n- Generating code to access arrays and dictionaries is supported. But generating code for keys containing objects is not supported (this is a toast error). Similarly dropping the labels for a new item is not supported (this is a toast error).\r\n- Generating code to access metadata is supported.\r\n- Fixes dropping metadata generating text prefixed with \"metadata/\". Now the name of the metadata is dropped.\r\n- Fixes dropping dictionary keys or array indexes prefixes with \"indices/\". The key or index is dropped if possible, otherwise it is a toast error.\r\n- Bonus: dragging a property from project settings will drop the full property path (the code to get it or set it will not be generated).",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-07T07:10:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This pull request implements and closes https://github.com/godotengine/godot-proposals/issues/8014\r\n\r\nSee also my counter-proposal: https://github.com/godotengine/godot-proposals/issues/8017",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-07T04:01:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes #82882\r\n\r\n* Adds circular reference related content in `RefCounted`\r\n* Improves description of `weakref` behavior",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-07T01:20:06Z",
        "closed_at": "2023-10-07T07:40:31Z",
        "merged_at": null,
        "body": "When renaming files from `FileSystemList`, the focus changes to the `LineEdit`. Don't check if the `FileSystemList` has focus, since it doesn't have focus.\r\nThis ensures to return always from the function when a rename error happens. Currently there is an execution path, that allows staying in the function, which results in the situation, that the warning-message-popup is opened a second time, that causes the error message in the console.\r\n\r\nresolve part of #82543",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-07T01:09:55Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "- See https://github.com/godotengine/godot/issues/82938.\r\n\r\nWe could perhaps display usage instructions (also for theme items) at the bottom of the tooltip, but this may be a bit annoying over time.\r\n\r\nFor instance:\r\n\r\n> Use `get_meta(\"name\")`/`set_meta(\"name\", ...)` to get/set this metadata.\r\n\r\n## Preview\r\n\r\n![image](https://github.com/godotengine/godot/assets/180032/51aa3960-06ae-4cff-be15-e340bc80eb66)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 38,
        "changed_files": 1,
        "created_at": "2023-10-07T00:19:31Z",
        "closed_at": "2023-10-16T08:45:16Z",
        "merged_at": "2023-10-16T08:45:16Z",
        "body": "This makes it easier to discover the UV2 generation functionality on primitive meshes.\n\n- See https://github.com/godotengine/godot/issues/82904#issuecomment-1751504738.\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-06T20:49:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #77575. I have added the \"needs testing\" label and put this on the 4.3 milestone because this needs testing, it could subtly break things, and I'm not an expert in this part of the code. But still... I'm fairly confident this is good.\r\n\r\nThe change on the line with `get_bone_global_pose` changes the multiplication order, so it may give slightly different results due to floating-point error, but I think it's better the way it is in this PR. It makes sense to do the skeleton's calculations locally first, and only afterwards convert to global, so that skeletons far from the origin are more precise.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-06T19:52:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This appears to already be the case for the Max FPS project setting.\r\n\r\nI've tested manual override in a running project via project setting or CLI argument and it still works as expected. `--frame-delay` also still works on the editor itself, if you really want to use it.\r\n\r\n- This closes https://github.com/godotengine/godot/issues/82922.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-06T19:51:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes: [godot-proposals#7997](https://github.com/godotengine/godot-proposals/issues/7997)\r\n![PIC](https://github.com/godotengine/godot/assets/92468390/1e09aea4-65bf-444b-9ce9-40ae5c0db357)\r\nTooltip text: `If true, allows zooming in the script and text-based shader editor with [kbd]Ctrl + Scroll wheel[/kbd].`",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 104,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-06T19:44:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Our minumum TargetFramework is net6.0, but for Android is net7.0, and for iOS is net8.0. By default, existing projects will be broken for these platforms, and the csproj files need to be manually changed by users in order to make things work. \r\n\r\nWhen we generate a new csproj, we inject additional TargetFramework properties with a condition matching each platform, so we don't break our current requirements, and things still work for users trying these platforms out. We can do the same for existing projects, by injecting or updating these additional properties, if needed.\r\n\r\nThis PR finds all TargetFramework properties and, per platform, checks whether any of them is applicable to the platform. If no TargetFramework properties are usable, it adds a property with a platform check condition and the required version. \r\n\r\nIf the default TargetFramework is already set to a high enough value, no properties are injected.\r\n\r\nIf existing properties that match our platform condition (ones we've injected before) have an unusable version, they get updated.\r\n\r\nUsers can skip the automatic project update by setting a `GodotSkipProjectUpdate` property to true/1.\r\n\r\nSee https://github.com/godotengine/godot/pull/82762/files#r1345098244 and https://github.com/godotengine/godot/pull/82729#discussion_r1346074023 for more context",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 119,
        "deletions": 0,
        "changed_files": 11,
        "created_at": "2023-10-06T19:40:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "closes https://github.com/godotengine/godot-proposals/issues/7965\r\ncontinuation of https://github.com/godotengine/godot/pull/82699\r\n\r\nImplements a `rotate_toward` to `Vector2`, `Vector3`, `Basis` and `Quaternion`, working practically the same in all of them. The method works like `slerp` (and uses it internally), except taking a radian increment as an amount instead of a percentage. As such the behavior should be consistent with it.\r\n\r\nVector2 and Vector3 have two edge cases:\r\nWhen both inputs are colinear (also counts when the length of `p_from` is equal to zero), it will perform a `move_toward`, with delta multiplied by the length of `p_to`.\r\nWhen the length of `p_to` is equal to zero, the best we can do is fallback to a `lerp`, in order to still try reaching the destination.\r\n\r\nI wrote a few tests for the `Vector2` and `Vector3` implementations, only specific ones as the main logic happens in a `slerp`, which is already tested extensively. I cannot write tests for `Quaternion` and `Basis`, as I am not good with working with them, and tests for their `slerp` functions would have to be written first anyway.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-06T18:48:33Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "Closes https://github.com/godotengine/godot/issues/82923",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T18:02:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I have a Radeon RX580, and I run Linux Mint latest stable, with up to date drivers.\r\n\r\nI receive this error when running Godot 3.x games in chrome:\r\n![image](https://github.com/godotengine/godot/assets/78934401/a3129ee7-b1da-4a9a-892e-2c863accf143)\r\n\r\nI think it might be causing a crash in the 3d renderer, but we are only using the 2d renderer.\r\n\r\nMy GPU driver, in chrome and firefox, returns an invalid value for GL_MAX_UNIFORM_BLOCK_SIZE.\r\n\r\nhttps://webglreport.com/?v=2\r\n![image](https://github.com/godotengine/godot/assets/78934401/218bf830-202b-4d92-8660-9b38ccb4d0bf)\r\n\r\nIt actually returns this binary number: 10000000000000000000000000000000, which is a negative int, and webglreport is rendering it as a 64 bit int.\r\n\r\nAnyways, this commit uses the minimum value of 16384 as specified in the opengl spec to gaurd against this invalid value from the driver.\r\n\r\nhttps://registry.khronos.org/OpenGL-Refpages/es3.0/html/glGet.xhtml",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-06T17:04:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- C# version of https://github.com/godotengine/godot/pull/82843\r\n- Adds new diagnostic GD0107 that is reported for `[Export]` members of type `Node` (or derived) when the containing type is not a `Node` (or derived).\r\n- In the future, we may want to move this diagnostic to a separate analyzer since IDEs don't work well with diagnostics reported from source generators.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 44,
        "deletions": 31,
        "changed_files": 5,
        "created_at": "2023-10-06T14:23:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Should fix #82896\r\n\r\ncc @Calinou \r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-06T14:15:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implements half of https://github.com/godotengine/godot-proposals/issues/7900\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-06T14:14:11Z",
        "closed_at": "2023-10-06T14:58:46Z",
        "merged_at": "2023-10-06T14:58:45Z",
        "body": "Addresses https://github.com/godotengine/godot/pull/81128#issuecomment-1749923663",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-06T13:44:48Z",
        "closed_at": "2023-10-06T14:58:46Z",
        "merged_at": "2023-10-06T14:58:46Z",
        "body": "EditorToaster didn't take potential UTF-8 messages into account. A localized message might look like this:\r\n\r\n![image](https://github.com/godotengine/godot/assets/372476/c612b029-1871-4286-887e-6ab081846bc6)",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 91,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-06T13:12:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nFixes #82880.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-06T10:40:12Z",
        "closed_at": "2023-10-09T13:42:56Z",
        "merged_at": "2023-10-09T13:42:56Z",
        "body": "As discussed in #82861 this removes the modal error popup that happens when you fail to load/unload an extension.\r\n\r\nGiven that any important error is being (or at least should be) logged to the editor log anyway, and in greater detail there, this popup is almost entirely redundant. It's also quite annoying due to the fact that extension loading gets retried what seems like every couple of seconds, as well as when the editor gains focus, which makes the modal nature of this popup quite frustrating.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-06T10:36:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\nAdds description to the [LightOccluder2D](https://docs.godotengine.org/en/latest/classes/class_lightoccluder2d.html#property-descriptions)'s `sdf_collision` property from [godotengine/godot-docs@`4431a72`](https://github.com/godotengine/godot-docs/commit/4431a725fef3782792e4b6a44cf48b2f0382fa02#diff-32feb9d1bb698ebaa33c6aa221accae6b64ecb83115568f0833df22a60bd4a79R188-R189)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T08:47:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR adds an explicit null-check to `Object::cast_to()`. At `-O2` both GCC and Clang seem to do the check themselves to avoid the call to the implementation of `dynamic_cast` when there's no object. However, MSVC (`/O2`) doesn't add a check and will do the call regardless.\r\n\r\nAll the three compilers can fuse the check here with any explicit check done at the call site. That said, if the contract of `cast_to()` is that it can take null just fine and any optimization is up to it (it's inlined anyway), the callers shouldn't be trying to outsmart it (or the compiler).\r\n\r\nOne could argue that in cases where there's an object for sure, the check is superfluous. However, in compilers that don't add it before the call to `dynamic_cast`, it will have to happen within anyway.\r\n\r\nI've figured this out by using this little sample (with recent versions of the three compilers, targeting both x64 and ARM64):\r\nhttps://godbolt.org/z/oPfdz8hTM",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 17,
        "changed_files": 5,
        "created_at": "2023-10-06T08:46:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "3.x version of #82901.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 27,
        "changed_files": 5,
        "created_at": "2023-10-06T08:43:54Z",
        "closed_at": "2023-10-06T10:53:57Z",
        "merged_at": "2023-10-06T10:53:57Z",
        "body": "Fixes #82873. There was no gizmo plugin handling `AnimatedSprite3D`... :upside_down_face:\r\n\r\nReplaces `Sprite3DGizmoPlugin` with `SpriteBase3DGizmoPlugin` (rename + changed handled type from `Sprite3D` to `SpriteBase3D`).\r\n\r\nRemoves redundant `AnimatedSprite3D::centered` member which was always `false`. It was used only in `AnimatedSprite3D::get_item_rect()` where it was incorrectly checked instead of `SpriteBase3D::centered` (which is `private` and hence needs to be checked with `SpriteBase3D::is_centered()`). This buggy check wasn't affecting anything before this PR as `AnimatedSprite3D::get_item_rect()` is called only within `SpriteBase3D::generate_triangle_mesh()` which was never called for an `AnimatedSprite3D` as there was no gizmo plugin handling it. With a gizmo plugin handling `AnimatedSprite3D` added it was making it selectable by the non-centered area regardless of the `centered` property value.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-06T08:19:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Uses existing menu item shortcut \"global\" flag (Seems like it was unused before? It's not documented, and I'm not sure what is supposed to do) to enable direct handling of the shortcuts (will trigger regardless of focused window).\r\n\r\nFixes https://github.com/godotengine/godot/issues/82854#issuecomment-1749107571",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 178,
        "deletions": 178,
        "changed_files": 13,
        "created_at": "2023-10-06T07:06:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "(Note: This will conflict with #82988. We can merge in either order, I will rebase the other PR).\r\n\r\nTonight I looked into how ResourceImporterScene and SceneImportSettings interact with each other, and I saw that SceneImportSettings contained settings, so I was confused as to why it was a singleton instead of a self-contained class that holds settings. I did not realize it was a dialog for about half an hour. If we have dialog in the name, it becomes clear that it's a dialog, and it makes sense why it's a singleton (we only need one instance of the dialog).\r\n\r\nThis PR renames SceneImportSettings to SceneImportSettingsDialog. It also renames DynamicFontImportSettings to DynamicFontImportSettingsDialog and AudioStreamImportSettings to AudioStreamImportSettingsDialog.\r\n\r\nThese are just internal names, they are not exposed to scripting.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-06T06:54:13Z",
        "closed_at": "2023-10-06T10:53:57Z",
        "merged_at": "2023-10-06T10:53:57Z",
        "body": "Fixes #82828.\r\n\r\nEven when the same animation was played, the `started` flag was set. This was probably the old behavior.\r\n\r\nThe rework in #80813 forces the AnimationPlayer to set its internal delta to `0` immediately after start in order to process the first frame (to follow AnimationTree/Mixer blending process), so the problem in #82828 is that this caused the delta to be `0` every frame.\r\n\r\nTest project:\r\n[animtest.zip](https://github.com/godotengine/godot/files/12827850/animtest.zip)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 18,
        "changed_files": 2,
        "created_at": "2023-10-06T06:37:21Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes part of https://github.com/godotengine/godot/issues/82854\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 16,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-06T04:58:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #74493 \r\n\r\nNow when converting a project from 3 to 4, it is also renamed the `align` and `valign` properties to `horizontal_align` and `vertical_align`.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 30,
        "changed_files": 9,
        "created_at": "2023-10-06T04:32:18Z",
        "closed_at": "2023-10-10T07:17:41Z",
        "merged_at": "2023-10-10T07:17:41Z",
        "body": "- Provide api to retrieve the running Godot instance from a GodotHost\r\n- Provide api for the GodotHost to register runtime GodotPlugin instances\r\n- Hide the GodotService class until it's completed\r\n- Include project setting to enable long press for Android devices\r\n- Include project setting to enable pan and scale gestures on Android devices\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-10-06T04:11:43Z",
        "closed_at": "2023-10-06T10:53:58Z",
        "merged_at": "2023-10-06T10:53:57Z",
        "body": "This doesn't fix a reported issue. Most likely because world_vertex_coords is totally unusable right now (until https://github.com/godotengine/godot/pull/82886 is merged). \r\n\r\nIn master when tangents are used, the tangents and binormals go through a model-to-view space transformation regardless of what space they are in. Therefore, when using skip_vertex_transform, or world_vertex_coords the tangent and binormal will end up in a completely wrong coordinate space and will look totally wrong. \r\n\r\nThis appears to have come from a typo in the early days of rewriting the renderer for Godot 4.0 https://github.com/godotengine/godot/commit/8cee7703a6673f9505332de1581055c821b756f0#diff-ab6440873ccc60605b6c0f0bbc3e3bc2d94b7c8238824321a579fb868aebf5cb",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-06T02:17:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- `can_process`'s description was pretty misleading. Make it more precise and provide a lot more details about its behavior.\r\n- I've seem some people recommend using `set_process` to disable processing when they should in fact use `process_mode`. Add additional info to `set_process`'s description to avoid that confusion.\r\n- make `process_mode`'s description more technically precise.\r\n- small english fixes",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-06T01:23:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes https://github.com/godotengine/godot/issues/82850\r\n\r\n* Reduce the minimum amount of capsule/cylinder mesh rings to 0. I checked that both work fine with 0. The code for cylinder already supported 0, but the range hint was wrong, so the editor didn't allow less. Allowing a capsule to have 0 rings is new behavior, but I tested that it still works fine.\r\n* Update the ring amount setter methods to use `ERR_FAIL_COND` like `TorusMesh::set_rings` already does.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 6,
        "created_at": "2023-10-06T01:14:12Z",
        "closed_at": "2023-10-06T10:53:58Z",
        "merged_at": "2023-10-06T10:53:58Z",
        "body": "This avoids z-fighting between the opaque shader and the depth prepass shader\r\n\r\nI noticed this bug while looking at https://github.com/godotengine/godot/issues/82311\r\n\r\n_Edit: Fixes: https://github.com/godotengine/godot/issues/80917_\r\n\r\nWeirdly enough we already had the ``uses_world_coordinates`` property available, it just wasn't used at all, or set to the correct value. \r\n\r\nUsing the MRP from https://github.com/godotengine/godot/issues/82311\r\n\r\n_Before_\r\n![Screenshot from 2023-10-05 19-10-30](https://github.com/godotengine/godot/assets/16521339/cf38021a-c171-48fb-b4f5-aa8cf2d01228)\r\n\r\n_After_\r\n![Screenshot from 2023-10-05 19-10-42](https://github.com/godotengine/godot/assets/16521339/43e229f3-bef9-4026-9d5b-98ac2a381456)\r\n\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-05T23:27:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR provides more insight on how resource caching works and also adds descriptions to CacheMode enum values.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T23:20:40Z",
        "closed_at": "2023-10-09T13:42:57Z",
        "merged_at": "2023-10-09T13:42:57Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nFixes https://github.com/godotengine/godot-docs/issues/8110",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 322,
        "deletions": 64,
        "changed_files": 24,
        "created_at": "2023-10-05T20:42:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR implements https://github.com/godotengine/godot-proposals/issues/7850\r\n\r\nIn the current master branch of Godot, there are only two types of gravity: Directional and Point. Godot does not provide a way for users to implement any other gravity type. This PR allows doing this, by adding a new gravity type called Target that allows specifying the gravity's attraction target point with a callback method.\r\n\r\nTo be clear, the goal here is to add the minimum engine code required to allow user scripts to make their own gravity. The goal isn't to implement every possible gravity type in the engine code, just let users implement what they need.\r\n\r\nThis PR is split into 2 commits for easy reviewing:\r\n\r\n* Replace Area gravity point bool with a gravity type enum. This is a refactor that does not change behavior or break compatibility. A bool does not make sense here, because conceptually there are more than two possible states for gravity, and conceptually it does not make sense why one is more deserving of the true state (there could just as easily be an \"is directional\" boolean instead of an \"is point\" boolean).\r\n\r\n* Add a Target gravity type to Area for a custom target point. This adds new behavior and implements the proposal. The attraction target of the gravity is defined by the return value of the callback method. The reason it seems like there's a lot of changes is due to all the places that need to know about this (Area nodes, physics servers, physics servers wrap_mt, Godot physics engine, physics server extensions), but it's not much code compared to the existing directional and point gravity.\r\n\r\nI have tested this in both 2D and 3D. I am planning on using this in 3D for implementing custom gravity in script.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T20:23:46Z",
        "closed_at": "2023-10-05T21:05:49Z",
        "merged_at": "2023-10-05T21:05:49Z",
        "body": "If user try to use a global shader variable in a fog type shader we are getting shader error. The reason of this there is a typo in the fog.cpp. In other well working shaders types like sky, the \"action.global_buffer_array_variable\" is \"global_shader_uniforms.data\".  The investigation tracked is here:\r\nhttps://discord.com/channels/212250894228652034/1158918161337434172\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T19:12:58Z",
        "closed_at": "2023-10-05T21:05:48Z",
        "merged_at": "2023-10-05T21:05:48Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/82835",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T17:57:38Z",
        "closed_at": "2023-10-05T21:05:48Z",
        "merged_at": "2023-10-05T21:05:48Z",
        "body": "Closes https://github.com/godotengine/godot/issues/82874",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 22,
        "deletions": 22,
        "changed_files": 16,
        "created_at": "2023-10-05T17:30:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82813\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-05T16:59:29Z",
        "closed_at": "2023-10-16T08:45:17Z",
        "merged_at": "2023-10-16T08:45:16Z",
        "body": "This fixes several bugs in the in-editor debugger associated with the ability to launch multiple instances of a game for the purpose of testing multiplayer logic locally.\r\n\r\n* It fixes the script editors debug menu containing step, break, and continue, which do not work if launched from an instance session other than session 1. It also correctly contextually greys out options depending on whether the session has hit a break point or not.\r\n* Adds proper callbacks to all breakpoints to be removed when toggle from the breakpoints menu in a session tab other than 1.\r\n* Stops the execution indicator from appearing when switching tabs to a session which has not hit a breakpoint.\r\n\r\nThis has not been tested with external debuggers, but at the very least, I don't expect it cause regressions, but would recommend a review from someone actively making use of an external debugger.\r\n\r\nCloses https://github.com/godotengine/godot/issues/82867",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 7,
        "changed_files": 6,
        "created_at": "2023-10-05T16:51:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Added docs for DRAW_ORDER_REVERSE_LIFETIME constant and minor XR log improvement.\r\n\r\nThe changes in `xr_server.cpp` is made to match `text_server.cpp` which improves readability of the interface name.\r\n```\r\nXR: Removed interfaceNative mobile\r\nXR: Removed interfaceOpenXR\r\n```\r\nis changed to:\r\n```\r\nXR: Removed interface \"Native mobile\"\r\nXR: Removed interface \"OpenXR\"\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T16:21:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Specify in the docs of `Node` that `get_tree()` returns `null` if it is called on a node that is not inside the scene tree.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T16:07:51Z",
        "closed_at": "2023-10-05T21:05:48Z",
        "merged_at": "2023-10-05T21:05:48Z",
        "body": "This fixes an apparent bug with the loading of extensions, where even if `false` is returned from the extension's entry point ([here](https://github.com/godotengine/godot/blob/d31794c4a26e5e10fc30c34a1ae9722fd9f50123/core/extension/gdextension.cpp#L739)) the extension will still be considered successfully loaded by `GDExtensionManager` ([here](https://github.com/godotengine/godot/blob/d31794c4a26e5e10fc30c34a1ae9722fd9f50123/core/extension/gdextension_manager.cpp#L76-L78)) due to the `p_extension` parameter pointing to a valid instance even after the entry point has reported a failure. This also results in it calling the extension module initalizer function even after its entry point has failed, which doesn't seem right.\r\n\r\nThis also has the unfortunate side effect of preventing any actual error messages from being emitted to the editor log as a result of the failure in the extension entry point, since `EditorLog` is initialized as part of `Main::start()`, rather than `Main::setup()` where all the extension initialization happens. Currently you're able to see editor logs/errors for things like `compatibility_minimum` due to the fact that any loading of extensions gets retried as part of `EditorFileSystem::_scan_extensions`, but this will only ever actually be retried if the loading failed in the first place, which it doesn't without the change in this PR.\r\n\r\nCC: @dsnopek",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-05T15:43:07Z",
        "closed_at": "2023-10-05T23:34:31Z",
        "merged_at": null,
        "body": "with this small adjustment `UI Mirroring Demo` works like before with the version `Godot.4.0-rc6`\r\n\r\n@bruvzg: do you see any problems when `en` is no longer hardcoded? \r\n(Note: in the header file `locale` is initialized with 'en'. )\r\n\r\nhttps://github.com/godotengine/godot-demo-projects/tree/master/gui/ui_mirroring\r\n\r\n\r\n**original gscript**\r\n\r\nhttps://github.com/godotengine/godot/assets/41921395/b91a0c47-228a-452e-8a69-1feab8bfdb04\r\n\r\n\r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2023-10-05T15:22:35Z",
        "closed_at": "2023-10-17T22:04:32Z",
        "merged_at": "2023-10-17T22:04:32Z",
        "body": "Addresses https://github.com/godotengine/godot/pull/80440#discussion_r1347567046\r\nI hope the string extractor doesn't ignore comments >_>",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 50,
        "deletions": 49,
        "changed_files": 1,
        "created_at": "2023-10-05T13:54:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #34600\r\n\r\nhttps://github.com/godotengine/godot/assets/2223172/2d710c13-8d88-4f52-8a76-4fbf71fc3c4a\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 66,
        "deletions": 20,
        "changed_files": 10,
        "created_at": "2023-10-05T13:45:26Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82788\r\n\r\n* Two optional params are added to `process_name()`: full property path & class name\r\n    * Full property path is enough for most use cases, e.g. `constant_force` vs `force/8_bit`\r\n    * Class name is used when full property paths are the same, but have different meanings, e.g. Normal in `Decal.texture_normal` and `TextureButton.texture_normal`\r\n* Context is assigned inside `EditorPropertyNameProcessor`\r\n    * Context is rarely needed.\r\n    * Easy to parse when extracting for POT.\r\n* Context can be specified either for `full/property/path` or for `Class::full/property/path`\r\n    * Class name is rarely needed. I think this kind of properties should be renamed when possible.\r\n    * Simplifies `theme_overrides_style/normal` as it applies to many UI nodes\r\n",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T13:22:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Bug fix, restore the value to bit fields.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T13:00:58Z",
        "closed_at": "2023-10-05T14:34:27Z",
        "merged_at": "2023-10-05T14:34:27Z",
        "body": "Resolves #35346",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T12:03:55Z",
        "closed_at": "2023-10-05T14:34:28Z",
        "merged_at": "2023-10-05T14:34:27Z",
        "body": "Fixes #40199",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T12:01:41Z",
        "closed_at": "2023-10-16T08:45:17Z",
        "merged_at": "2023-10-16T08:45:16Z",
        "body": "This changes the behaviour of the InstancePlaceholder so that the instanced node retains the same network authority ID as the placeholder node. This is important for some workflows which use placeholders to efficently dummy out unnessecary composition of player scenes when they are instanced for other players who they client does not have authority for if branches are contained in the nodes' _ready method.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-05T11:12:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I\u2019m proposing a solution to enhance the `Color` class by adding an `OkHSL` lightness attribute. This attribute will facilitate the creation of colour palettes based on predefined colour stops. Currently, this PR exposes a previously private function to public gdscript. I\u2019m unsure how to extend this functionality to C#, and would appreciate any help on this matter.\r\n\r\nThis PR is an implementation of my [feature proposal](https://github.com/godotengine/godot-proposals/issues/7954), just aiming to expose pre-existing infrastructure to the user.\r\n\r\nI\u2019ve tested these changes locally and everything appears to be working correctly, but I welcome any feedback or suggestions on my PR\u2019s implementation.\r\n\r\n_Production edit: Closes https://github.com/godotengine/godot-proposals/issues/7954_",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T11:10:58Z",
        "closed_at": "2023-10-05T14:45:42Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n\r\nThis change adds the license to the README. This can be overlooked if not added, and companies such as Google have also added them to their READMEs, for example.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 120,
        "deletions": 51,
        "changed_files": 12,
        "created_at": "2023-10-05T11:00:09Z",
        "closed_at": "2023-10-05T14:34:40Z",
        "merged_at": "2023-10-05T14:34:40Z",
        "body": "* Closes #82809.\r\n  * Display an error when trying to export a node in a non `Node`-derived class.\r\n* Extends the `@export` annotation documentation.\r\n* Rename `p_node` to `p_target` so `.cpp` matches `.h`.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T10:50:34Z",
        "closed_at": "2023-10-05T14:34:27Z",
        "merged_at": "2023-10-05T14:34:27Z",
        "body": "See https://github.com/godotengine/godot/issues/82810. This is the same thing we do for libraries, so it should just work, I think.\r\n\r\ncc @mihe for testing :) ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 177,
        "deletions": 3,
        "changed_files": 7,
        "created_at": "2023-10-05T07:18:28Z",
        "closed_at": "2023-10-11T20:52:35Z",
        "merged_at": "2023-10-11T20:52:35Z",
        "body": "Implements https://github.com/godotengine/godot-proposals/issues/7640\r\n\r\nAlternative variant https://github.com/godotengine/godot/pull/82831 (load dynamic library directly).\r\n\r\nPros: can use executables for the different architecture (there's no ARM64 prebuild version for macOS in official releases).\r\nCons: `oidnDenoise` is a sample implementation and command line arguments might change in feature releases, temporary images are written/read to disk.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 196,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-05T07:18:27Z",
        "closed_at": "2023-10-11T20:54:13Z",
        "merged_at": null,
        "body": "Implements https://github.com/godotengine/godot-proposals/issues/7640\r\n\r\nAlternative variant https://github.com/godotengine/godot/pull/82832 (uses executable).\r\n\r\nPros: more stable API, no writing/reading to disk.\r\nCons: library should be the same architecture as executable (and there's no ARM64 prebuild library for macOS in official releases), might have issues with dependency loading paths.\r\n\r\nTODO: ensure correct library lookup paths are set on all platforms.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-05T03:23:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #78595 \r\n\r\nAdded a method in the ProjectConverter3To4 for passing the content stored in the path used in previous versions to the newest path.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-04T23:49:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This pull request improves usability with the Node connection panel, to allow the user to quickly delete connections by pressing the DEL key.\r\n\r\nThe `_rmb_pressed` method in the `ConnectionsDock` class has been renamed to `_gui_input` to reflect the new handling of other inputs.\r\n\r\nThis fixes the usability issue outlined in [#82616](https://github.com/godotengine/godot/issues/82616).\r\n\r\n* *Bugsquad edit, closes: #82616*",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-04T22:47:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #21406",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T22:11:53Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #36078",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-04T21:37:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Partially addresses #75388\r\n\r\nFrom what I tested, the bug only happens when global class cache does not exist, but `.godot` folder exists. If you delete `.godot` folder, the project loads without a fail.\r\nEven if we somehow ensured global class cache, this doesn't solve the problem of addons. Global classes are only scanned once, every further update needs to be done manually. I think we could scan the enabled addon's folder to check for new classes.\r\n\r\nAs for what this PR fixes, whenever your class can't be detected for any reason (e.g. script error), the other script using that class will have an error until you fix the class and then manually trigger script validation. After these changes, the last step is done automatically:\r\n\r\nhttps://github.com/godotengine/godot/assets/2223172/c50b6ba0-ac2b-4c3b-98a9-50af6d0356a4\r\n\r\n(here renaming the script makes it re-parsed and added to class cache, fixing the error immediately)\r\n\r\nNot sure how much it improves the situation though. It should make it easier to fix class-related errors. I also noticed that after these changes in the case where `.godot` exists, but not global class cache, some classes may randomly get cached on startup and the script will be less broken.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T19:43:53Z",
        "closed_at": "2023-10-06T10:53:58Z",
        "merged_at": "2023-10-06T10:53:58Z",
        "body": "LineEdit is pretty bloated in the inspector, so I thought it made sense to have a section for \"Secret\" and \"Secret Character\" to unclutter it a little. These properties are very related and also pretty niche, so they make to be grouped.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 122,
        "deletions": 22,
        "changed_files": 10,
        "created_at": "2023-10-04T18:30:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "* Closes godotengine/godot-proposals#1034.\r\n\r\n![](https://github.com/godotengine/godot/assets/47700418/75d1df68-359d-41aa-acb4-d7ed80d02e23)\r\n![](https://github.com/godotengine/godot/assets/47700418/8f649d27-5d0c-4482-8961-b92888645e84)",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-04T18:15:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #80937.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 354,
        "deletions": 74,
        "changed_files": 4,
        "created_at": "2023-10-04T18:02:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Credit to @darksylinc first and foremost for identifying that when hard-coding specialization constants he managed to get substantial performance improvements on the mobile hardware he was testing on.\r\n\r\n### Background\r\n\r\nThis is a very weird experiment that common sense would dictate it shouldn't be necessary, but we've found a reason to believe specialization constants are just not implemented correctly across some vendors, particularly in platforms like Android where the drivers can get pretty outdated due to how the distribution works.\r\n\r\nTo work around that, the PR implements a SPIR-V parser that will search for the specialization constant instructions and replace them with the instructions and values they should be according to what the pipeline has specified. This is very much not a standard process and it shouldn't be necessary at all, but it seems to have some actual results.\r\n\r\nAfter some experimentation, we found a very substantial improvement **of ~30% extra FPS in Redmi 4X, Adreno 504** in a simple test scene.\r\n\r\nI've not been able to replicate any substantial improvements in desktop with NVIDIA hardware (as expected), but we figure the best target would be platforms that have fairly outdated drivers or just plain don't implement these as we expect them to.\r\n\r\nWhile the process is not free, it adds a very minimal cost during pipeline creation (around 100us). However, I would advise against enabling this unless we detect that it should be done on a platform that warrants it (e.g. Android).\r\n\r\nWhile I've done the replacement for the instructions Godot uses, I've avoided modifying \"OpSpecConstantOp\", as it requires some much more complex logic that I haven't done (unless I misunderstood how it works). However, the specification doesn't mention that this instruction can't take inputs that aren't specialization constants, so I'm not sure if it's necessary to perform a replacement at all.\r\n\r\n### What we are looking for\r\n\r\n**This experiment will only apply to the Vulkan-based renderers (Forward+ and Mobile).**\r\n\r\nWe're mostly interested in people trying out this PR on platforms they suspect might not have the most up to date drivers and see if they can get any actual performance improvement. So far we got some substantial results on **Adreno 504 (2018)** so we suspect we might find improvements elsewhere.\r\n\r\nThere should also be no noticeable regressions from doing this and it'd be good to know if that holds true.\r\n\r\nIf you're interested in turning this on and off, the boolean that controls it can be found here. It is enabled by default at the moment on the branch.\r\n\r\nhttps://github.com/DarioSamo/godot/blob/31a0f95b075575e50e5ae10a38ed34b247b00cd0/drivers/vulkan/rendering_device_vulkan.cpp#L5250\r\n```cpp\r\nbool patch_spirv_spec_constants = true;\r\n```",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T17:52:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82763\r\n\r\nThe `ensure_correct_normals` define is redundant in the Forward+ and Mobile renderers, as they check whether individual instances are uniform or not. ~Due to the way instancing is done in the Compatibility renderer, however, the `ENSURE_CORRECT_NORMALS` shader define has to be used instead.~\r\n\r\n~This PR changes the shader's logic to follow the 3.x way of dealing with non-uniform meshes.~\r\n\r\nResults (Compatibility, both with `ensure_correct_normals`):\r\n\r\n![aaa](https://github.com/godotengine/godot/assets/53150244/67488623-bb4c-44cd-b5cc-cadfd8f35dfa)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-04T17:30:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82756 and preserves fix for #42611",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-04T17:29:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82587 by improving usability of the untyped_declaration warning. This adds a note to the documentation that recommends turning on EditorSettings.text_editor/completion/add_type_hints when the untyped declaration warning is set to warn or error. This new text echos the recommendation proposed in the [docs PR](https://github.com/godotengine/godot-docs/pull/8130)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 137,
        "deletions": 5,
        "changed_files": 14,
        "created_at": "2023-10-04T17:25:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Add screen velocity and screen relative position to `InputEventMouseMotion` and `InputEventScreenDrag`.\r\nBased on discussion in RC.\r\n\r\n- *Production edit: This closes https://github.com/godotengine/godot/issues/34805.*",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-04T17:19:37Z",
        "closed_at": "2023-10-05T08:11:29Z",
        "merged_at": "2023-10-05T08:11:29Z",
        "body": "I noticed that the latest Godot 4.2 beta added a new free_instance_binding function to Object. \r\nIt is only exposed to the Editor but it has uses for regular GDExtension memory management.\r\n\r\nWe would welcome that change for our Godot Kotlin binding as it makes some memory management operations easier. \r\nOne of the use cases is for example to free the JVM instance used to wrap the native object pointer when it's no longer used in the managed side of the memory. That way we don't have to wait for the native object freed to release the Kotlin wrapper as our instance binding hold a reference to the JVM instance (so far we had to convert it to a weak reference instead of removing the binding).\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T17:02:16Z",
        "closed_at": "2023-10-16T18:16:17Z",
        "merged_at": "2023-10-16T18:16:17Z",
        "body": "`RBMap::remove()` needs to access private members of its `Iterator`, but there's no friendship between them, so it's broken.\r\n\r\nThis PR is here to save the day.\r\n\r\n---\r\n\r\nTest code:\r\n```C++\r\n\tRBMap<int, int> rb_map;\r\n\tdecltype(rb_map)::Iterator rb_it;\r\n\trb_map.remove(rb_it);\r\n```\r\nMSVC error:\r\n> `core/templates/rb_map.h(166): error C2248: 'RBMap<int,int,Comparator<K>,DefaultAllocator>::Iterator::E': cannot access private member declared in class 'RBMap<int,int,Comparator<K>,DefaultAllocator>::Iterator'`\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2023-10-04T16:00:01Z",
        "closed_at": "2023-10-06T14:58:46Z",
        "merged_at": "2023-10-06T14:58:46Z",
        "body": "Presently, if you do a `validated_call()` to a GDExtension method, and the GDExtension doesn't provide special support for validated calls (very unlikely), then it will convert that to a `call()`. This will be much slower than necessary, since we know all the argument types match - it would be better to do a `ptrcall()`.\r\n\r\nRight now, this isn't that important, because GDScript will do `ptrcall()`s directly (when possible), but PR https://github.com/godotengine/godot/pull/79893 would switch GDScript to doing `validated_call()`.\r\n\r\nSo, this PR changes `validated_call()` to GDExtension methods to use `ptrcall()`.\r\n\r\nI've tested this PR, in combination with PR https://github.com/godotengine/godot/pull/79893, and it seems to be working fine (the automated godot-cpp tests pass).\r\n\r\nIt also fixes an issue in `Object::get_opaque_pointer()` that was missed in PR https://github.com/godotengine/godot/pull/77410. That PR made the same change to the const version of `Object::get_opaque_pointer()`, but missed it for the non-const version. We didn't notice, because we were only using it for function arguments (which are const), and in this PR we start using it for function return values as well (which are non-const).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T15:28:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "[GitHub respect the indent size set by an .editorconfig file in the repository.](https://stackoverflow.com/a/33831598) This will make working with diffs a little bit easier for the majority of the PRs, as tabs will no longer be set to their default value of tabs of 8 spaces.\r\n\r\nI set the style to tabs, and spaces to 4, which is currently the standard for the project for those files.\r\n\r\nHere's an example of the tabs in diff currently (set as 8 spaces), it actively hinders the ability to review well PRs as so much whitespace is added.\r\n\r\nHere's how it currently look on Chrome:\r\n\r\n![Capture d\u2019\u00e9cran du 2023-10-04 11-33-15](https://github.com/godotengine/godot/assets/270928/d9b75aa2-f505-4364-b333-6a0352a3eabc)\r\n\r\nThere's a bug on Firefox that makes it 16 characters!\r\n\r\n![image](https://github.com/godotengine/godot/assets/270928/52d4ee06-0b54-4322-bd63-bb883b840875)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T15:11:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #81850\r\n\r\nThe code is a little messy this way, but imho it's better to change the mesh lib export code than change the gltf import code. I would appreciate any feedback or alternative suggestions.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T14:33:02Z",
        "closed_at": "2023-10-09T13:42:57Z",
        "merged_at": "2023-10-09T13:42:57Z",
        "body": "Previously, if one would try to use GDExtensions with a web build that doesn't have dynamic loading enabled, this would simply fail with a cryptic `me.rtenv.loadDynamicLibrary is not a function` error message.\r\n\r\nIf it's attempted again, it will now instead error out with `GDExtension libraries are not supported by this engine version`.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T14:09:24Z",
        "closed_at": "2023-10-05T08:11:29Z",
        "merged_at": "2023-10-05T08:11:29Z",
        "body": "* Fixes #82765.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-10-04T12:59:59Z",
        "closed_at": "2023-10-05T10:46:04Z",
        "merged_at": "2023-10-05T10:46:04Z",
        "body": "This pull request modifies `validate_identifier` to add an underscore when the `String` stars with a digit (instead of replacing the digit with an underscore, which was the old behavior). The `validate_identifier` test cases has been updated accordingly.\r\n\r\nSince `validate_identifier` is modified, the helper method `_is_valid_identifier_bit` is not necessary, to remove it `is_valid_identifier` was also modified to not use it.\r\n\r\nFixes https://github.com/godotengine/godot/issues/82773",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-04T12:29:34Z",
        "closed_at": "2023-10-05T08:11:29Z",
        "merged_at": "2023-10-05T08:11:29Z",
        "body": "* Fixes #82771.\r\n* Also makes the creation of native data types more consistent (add `builtin_type = Variant::OBJECT`).\r\n\r\nMRP: [EmptyNativeClass.zip](https://github.com/godotengine/godot/files/12803281/EmptyNativeClass.zip)\r\n\r\n\u0421\u0421 @Chaosus @produno",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-10-04T10:34:22Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "\"wihout\" -> \"without\"\r\n\"mutli\" -> \"multi\"\r\n\"maxium\" -> \"maximum\"",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 74,
        "deletions": 74,
        "changed_files": 7,
        "created_at": "2023-10-04T10:27:24Z",
        "closed_at": "2023-10-04T10:27:39Z",
        "merged_at": null,
        "body": "\"wihout\" -> \"without\"\r\n\"mutli\" -> \"multi\"\r\n\"maxium\" -> \"maximum\"\r\n\"childs\" -> \"children\"",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 108,
        "deletions": 79,
        "changed_files": 11,
        "created_at": "2023-10-04T10:22:00Z",
        "closed_at": "2023-10-10T13:18:30Z",
        "merged_at": "2023-10-10T13:18:30Z",
        "body": "As pointed out in #81593 , watched/on change variables are quite heavy on the CPU side, mostly due to the way network IDs are exchanged and stored for non-spawned node.\r\n\r\nThis PR introduce a series of optimizations to reduce the computational cost of the replication system:\r\n\r\n- Optimize the data structures used by the network IDs cache (using `ObjectID`s locally, while still transferring relative paths).\r\n- Optimize internal authority checks to avoid going through the SceneTree (searching the appropriate MultiplayerAPI as we already know the correct one)\r\n- Avoid unnecessary ref/unrefs between the various internal components (Replication/Cache/RPC)\r\n- Optimize internal SceneReplicationConfig access (using direct pointers instead of refs)\r\n\r\n![flamegraph](https://github.com/godotengine/godot/assets/1687918/c3e60d50-f69f-4455-aab7-15fef84b2ff9)\r\n\r\nCloses #81593 , might need some more testing.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-04T10:15:25Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "![image](https://github.com/godotengine/godot/assets/85438892/ac96245e-bc88-420b-96b5-06f4e7075afe)\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T08:38:41Z",
        "closed_at": "2023-10-04T16:07:16Z",
        "merged_at": null,
        "body": "Supersedes #82767.\r\n_Bugsquad edit:_ Also supersedes #82755.\r\n\r\nSee https://github.com/godotengine/godot/pull/82767#issuecomment-1746401835 there for the whole rationale for this PR.\r\n\r\nFixes #79521.\r\n\r\nDear Production team. I've checked this fixes the MRP in the issue, but haven't performed exhaustive smoke testing.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 1,
        "changed_files": 9,
        "created_at": "2023-10-04T06:03:11Z",
        "closed_at": "2023-10-05T08:11:29Z",
        "merged_at": "2023-10-05T08:11:29Z",
        "body": "* Fixes #79521.\r\n* Supersedes #82755.\r\n\r\nSee https://github.com/godotengine/godot/issues/79521#issuecomment-1636980456.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T05:25:53Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "When changing the rendering code from sending lots of parameters to our render buffers configuration object, to a configuration object so it's more extendable future proof, we forgot to set the debanding flag.\r\n\r\nThis may fix #80751\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-04T02:36:24Z",
        "closed_at": "2023-10-10T07:17:42Z",
        "merged_at": "2023-10-10T07:17:42Z",
        "body": "- Add .NET 7.0 TFM when the platform is Anroid to the created csproj.\r\n- Prevent exporting to Android when the architecture is not supported.\r\n- Fixes https://github.com/godotengine/godot/issues/82013.\r\n\r\nThe intention is to communicate the limitations of the current experimental Android exports to users and hopefully simplify the process.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 151,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-10-03T23:52:25Z",
        "closed_at": "2023-10-05T08:04:32Z",
        "merged_at": null,
        "body": "Fixes #79521\r\nNeeded to unblock #82695\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-03T22:56:27Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "This rename conversion is no longer necessary because `BoxShape3D`, `RectangleShape2D`, `ReflectionProbe` and other classes already handle the `extents` property internally. Renaming `extents` was actually causing problems, since in Godot 4.x the classes mentioned started to use the `size` property and `size` (`extents` \"equivalent\") =  2 * `extents`.\r\n\r\nJust clarifying, as `LightmapGI` was mentioned in the code comment, the conversion does not make sense in `LightmapGI` case since this class doesn't have a `size` property in Godot 4.x.\r\n\r\nFixes #77931 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2023-10-03T22:33:41Z",
        "closed_at": "2023-10-06T10:53:58Z",
        "merged_at": "2023-10-06T10:53:58Z",
        "body": "This PR essentially recreates the workaround found here: https://github.com/GodotVR/godot_openxr/commit/484b1a87bd43726620914ba582f590ea189994f7 to recover when swapchains can't be released.\r\n\r\nAs mentioned, this is a workaround, but in my opinion is a pretty important one because the issue it fixes prevents people from recording videos of the game among other things, and worst of all, it happens seemingly randomly, which can frustrate players.\r\n\r\nI just tried my best to adapt the previous code to the new OpenXR API, so please let me know if something could be done a better way!\r\n\r\nCloses https://github.com/godotengine/godot/issues/82751",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T22:11:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes https://github.com/godotengine/godot/issues/82749",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-10-03T21:55:41Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T21:18:44Z",
        "closed_at": "2023-10-03T21:31:12Z",
        "merged_at": null,
        "body": "<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T20:14:51Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "Prevents native file dialogs from opening while in the edited scene tree.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-03T19:46:14Z",
        "closed_at": "2023-10-13T09:51:35Z",
        "merged_at": "2023-10-13T09:51:35Z",
        "body": "Switching between editor layouts with floating docks now works correctly.\r\nfix [#81162](https://github.com/godotengine/godot/issues/81162)\r\nfix #80748\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 101,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T19:25:15Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "Since we're entering feature freeze and it's unlikely we will break compatibility anymore before the release, I think it's now a good time to look at all the breaking changes we made from 4.1 to 4.2.\r\n\r\nThis PR adds back C# members that were removed and therefore no longer generated, in order to prevent breaking compatibility. Since we don't have a system to add compatibility properties or signals, these still have to be added manually to C#.\r\n\r\nNot every breaking change can be avoided, I have compiled a list like I did for 4.1 so we can get started on the _Upgrading from Godot 4.1 to Godot 4.2_ article:\r\n - [godot-4.2-break-compat.rst ](https://gist.github.com/raulsntos/06ac5dd10ebccc3a4f1e7e3ad30dc876#file-godot-4-2-break-compat-rst)\r\n - The list assumes this PR will be merged.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 117,
        "deletions": 113,
        "changed_files": 55,
        "created_at": "2023-10-03T18:18:52Z",
        "closed_at": "2023-10-03T21:04:02Z",
        "merged_at": "2023-10-03T21:04:01Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T16:52:35Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "Fix a regression caused by #81105.\r\n\r\nCurrently, calling `GodotJSWrapper.MyProxy(args)` without the `new` keyword returns `undefined`, which make the following calls fail.\r\n\r\nThis PR adds the missing `new` keyword to the expression.\r\n\r\nFixes #82734",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 3,
        "changed_files": 7,
        "created_at": "2023-10-03T16:04:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Hello\r\n\r\nComing from UE4 background, I think providing user shader logic some context regarding VertexShader invocations can be useful for generating correct motion vectors. In unreal this is handled using [PreviousFrameSwitch](https://docs.unrealengine.com/4.27/en-US/RenderingAndGraphics/Materials/ExpressionReference/Utility/#:~:text=the%20noise%20texture.-,Previous%20Frame%20Switch,-The%20Previous%20Frame) nodes.\r\n\r\nWe already handle previous frame data related to Time and Node transforms, but it fails to handle cases where vertex deformation might be generated using some other means. This can be reading texture/physics simulation data passed to material etc.\r\n\r\nI would like to propose `PREV_FRAME_SWITCH`(boolean) input for Vertex shaders.\r\n\r\nChanges:\r\n* Added **PREV_FRAME_SWITCH** vertex shader input. This is only enabled for spatial shaders and Forward+ rendering as other renderers don't support motion vectors.\r\n* PREV_FRAME_SWITCH is defined (or renamed) as \"false\" for gles3 and mobile shader compiler.\r\n* Added a new VisualShader input node for vertex shader context.\r\n\r\nOpen to any suggestions/feedback :)\r\n\r\nRegards\r\n\r\nAmit\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 463,
        "deletions": 290,
        "changed_files": 16,
        "created_at": "2023-10-03T13:50:16Z",
        "closed_at": "2023-10-09T21:29:03Z",
        "merged_at": "2023-10-09T21:29:03Z",
        "body": "This PR adds C# support for iOS targets, using the official .NET Core 8 NativeAOT support. This requires (and has been tested) .NET Core 8 RC 1.\r\n\r\nTo support iOS+NativeAOT, the csproj gets a lot more complicated than just the two entries it had before, so the generated content is moved to a template, embedded as a resource in the GodotTools.ProjectEditor assembly. It's possible that the release version of dotnet core 8 (around November) will make the csproj template simpler, there's some linker workarounds that are currently required that will likely be fixed by then, so this will need to be revisited when dotnet 8 gets released.\r\n\r\nGodot still has a bunch of reflection code which breaks trimming, so the csproj generates an rd.xml whitelisting the godot and project assemblies, so things work out of the box and don't crash at runtime. Once the reflection code gets cleaned up, we can revisit this.\r\n\r\n**Update/some more notes**\r\nThe target framework for the user project is set to 8.0 only when the RuntimeIdentifier contains \"ios\", so in all other cases it should still work fine as is with .net 6 - if I managed to hit all the right buttons, this shouldn't affect any other platforms.\r\n\r\nGodot doesn't run on iOS Simulator right now because we're using Vulkan features that it doesn't support, but this PR includes all the needed bits for the simulator (so when #74227 eventually gets fixed, this should Just Work(tm))\r\n\r\n_Contributed by W4Games_",
        "comments": 14
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-03T13:46:20Z",
        "closed_at": "2023-10-03T15:41:19Z",
        "merged_at": "2023-10-03T15:41:19Z",
        "body": "If you assign custom node icon, some editor elements will not resize it correctly. This PR fixes a few of them:\r\n- NodePath edit\r\n![image](https://github.com/godotengine/godot/assets/2223172/e43e928c-65f1-4600-b526-e22413500c9e)\r\n- 2D editor node hover list\r\n![image](https://github.com/godotengine/godot/assets/2223172/8dccfcb1-b241-4533-9e95-f643f324bf87)\r\n- 2D editor list selection\r\n![image](https://github.com/godotengine/godot/assets/2223172/e348faf2-d7ba-4f45-9cdb-3bb349414402)\r\n\r\nAlso fixes listed node names getting translated.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-03T12:26:07Z",
        "closed_at": "2023-10-03T15:41:19Z",
        "merged_at": "2023-10-03T15:41:19Z",
        "body": "* Fixes: #82723\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 92,
        "deletions": 93,
        "changed_files": 8,
        "created_at": "2023-10-03T11:46:25Z",
        "closed_at": "2023-10-04T13:48:12Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "This PR fixes a number of long outstanding issues with hand tracking:\r\n\r\n- `xr/openxr/extensions/hand_tracking` is a new project setting that enables the hand tracking extension. As existing projects assume this is already enabled, the default is true. But this allows the user to disable this extension if they do not want to use it. Some platforms require the user to accept hand tracking when used.\r\n- Removal of the `XR_FB_HAND_TRACKING_AIM_EXTENSION_NAME` extension, this was never fully implemented in Godot 4 as this was being superseded by `XR_EXT_HAND_INTERACTION_EXTENSION_NAME`. We are adding the new OpenXR standard functionality in #81533\r\n- Small fix for head tracking confidence, we were capturing this but not setting it on the tracker\r\n- The \"skeleton\" pose on our `XRController3D` node was never properly implemented, we add support here. Note that #82715 should be merged so we can add confidence here correctly. I suggest we merge this and fix this in 82715 before merging that.\r\n- Skeleton update in `OpenXRHands` now also updates the position, not just the orientation, of the bones.\r\n\r\nThere is a demo project (WIP) that can be found here that tests the functionality:\r\nhttps://github.com/godotengine/godot-demo-projects/pull/973\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 164,
        "deletions": 8,
        "changed_files": 5,
        "created_at": "2023-10-03T07:54:08Z",
        "closed_at": "2023-10-05T08:11:29Z",
        "merged_at": "2023-10-05T08:11:29Z",
        "body": "This PR adds access to the validity flags in OpenXR hand tracking data.\r\nThis is a follow up to #78032, we missed exposing these flags.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-03T07:05:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Added remaining animation-related class reference docs.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-03T06:43:51Z",
        "closed_at": "2023-10-03T15:41:19Z",
        "merged_at": "2023-10-03T15:41:19Z",
        "body": "Fixes https://github.com/godotengine/godot/issues/82703",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 30,
        "changed_files": 2,
        "created_at": "2023-10-03T04:03:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Previously, the code editor only updated the text highlights when a search was made, but opening the search bar with a selection does not go through that code path because the first result is already selected.\r\n\r\nThis is a fix for #82706.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 99,
        "deletions": 0,
        "changed_files": 9,
        "created_at": "2023-10-03T01:12:54Z",
        "closed_at": "2023-10-07T03:40:28Z",
        "merged_at": null,
        "body": "Trial pr to implement https://github.com/godotengine/godot-proposals/issues/7965",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T00:24:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Hey all, this is my first pull request here.\r\n\r\n## Problem Description\r\n\r\nThis PR fixes the problems raised in [#8127](https://github.com/godotengine/godot-docs/issues/8127). The issues stem from the _+_ and _-_ characters used in the `KEY_PLUS` and `KEY_MINUS` enumeration descriptions not being escaped after the _make_rst.py_ script is run. This results in the _+_ and _-_ characters being interpreted as bullet lists, rather than characters, as can be seen [here](https://docs.godotengine.org/en/4.1/classes/class_%40globalscope.html#enum-globalscope-key).\r\n\r\n## Problem Solution\r\n\r\nThe cleanest solution that I can think of is to add additional escape logic to the `escape_rst` method in _make_rst.py_ for the _+_ and _-_ characters by searching for the strings `\"+ key\"` and `\"- key\"`. This will allow the `KEY_PLUS` and `KEY_MINUS` enumeration descriptions to display correctly after generating a _.rst_ file from _@GlobalScope.xml_. This solution will be transparent to all of the other _.xml_ files in the project.\r\n\r\nI looked at trying to escape these characters in the same way that the _*_ is handled, but found that this can break bullet lists in _.rst_ files generated from other _.xml_ files, such as _EditorCommandPalatte.xml_. As a result, the proposed solution is the cleanest way that I can think of to fix the problem.\r\n\r\n## Results\r\nUpon diffing the generated `_build/rst` folders before and after applying the fix, only `class_@globalscope.rst` is modified:\r\n![image](https://github.com/godotengine/godot/assets/46616290/faf83f23-fb9e-4a5d-bb61-c7ff4422aab6)\r\n\r\n \r\nPlease let me know if someone has a cleaner solution! \r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 54,
        "changed_files": 9,
        "created_at": "2023-10-02T22:49:45Z",
        "closed_at": "2023-10-09T13:42:57Z",
        "merged_at": "2023-10-09T13:42:57Z",
        "body": "This fixes #81887\r\n\r\nI searched the entire Godot source code for `Callable` methods `get_object()`, `get_object_id()` and `get_method()`, which could potentially be used to detect if a callable is associated with an object. Several places in the code used these methods to check callable validity instead of using `Callable::is_valid()`, causing object-less callables to be rejected. I then carefully and selectively updated the code to use the correct methods.\r\n\r\nA few places remain where object-less callables may not be handled correctly. These files use `get_object()` and `get_method()` for various purposes:\r\n\r\n- `scene/main/node.cpp`: serialization\r\n- `editor/editor_node.cpp`: serialization\r\n- `scene/resources/packed_scene.cpp`: serialization\r\n- `core/core_bind.cpp`: error messages\r\n- `core/variant/callable.cpp`: custom callable `get_method()`\r\n- `core/variant/variant.cpp`: error messages\r\n\r\nWhile I was quite thorough, its possible I may have missed things. I also left gdscript and mono alone.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-10-02T21:10:46Z",
        "closed_at": "2023-10-05T08:11:30Z",
        "merged_at": "2023-10-05T08:11:30Z",
        "body": "For example, searching for \".func\" will now match in \"a.func\" even with Whole Words enabled.\r\nFor more information, see issue #82693.\r\n\r\n*Bugsquad edit:*\r\n- Fixes #82693.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-02T19:34:10Z",
        "closed_at": "2023-10-02T19:58:12Z",
        "merged_at": null,
        "body": "Fixes: https://github.com/godotengine/godot/issues/80431\r\n\r\nThe code is a bit ugly, looking for improvement.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 514,
        "deletions": 359,
        "changed_files": 89,
        "created_at": "2023-10-02T18:37:55Z",
        "closed_at": "2023-10-04T13:48:12Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "Inspired by changes in https://github.com/godotengine/godot/pull/82681 I have added checks for such cases where `[code]ClassName[/code]` should be replaced with a class reference, as well as similar checks for class members/methods/etc. As this is an uncertain check, it's marked as a warning. Which leads me to the second change...\r\n\r\nThis commit also, finally, adds means to manually disable warnings in `code` tags. These warnings can be false positive, and in fact there are about 30 cases where they certainly are. So far we've just ignored warnings on the CI and printed them out. But that's a lot of noise and it hides new warnings, and nobody is going to pay attention. So `code`, as well as `gdscript`, `csharp`, and `codeblock` can now have an optional `skip-lint` argument, which turns these warnings off. Use it wisely.\r\n\r\nI've updated all problematic descriptions (see some of the notes below though), and updated all false positives to use the new argument. This allows us to enable warnings on CI, which is what I have done with this PR. I'm keeping them warnings and not errors to draw a semantic difference: errors are pretty much certain, whereas warnings are potential but need to be investigated.\r\n\r\n-----\r\n\r\nOn the technical side of things, I reworked how we parse tags for RST a bit. I made sure there were no regressions in the generated RST files.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 173,
        "deletions": 6,
        "changed_files": 16,
        "created_at": "2023-10-02T16:11:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implementation for proposal https://github.com/godotengine/godot-proposals/issues/7905\r\nReplaces PR #82494 with a clean commit",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 31,
        "changed_files": 2,
        "created_at": "2023-10-02T15:51:05Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "- Use `EditorInterface` to open C# editor dialogs.\r\n- Ensure C# editor dialogs are open after `EditorProgress` finishes.\r\n\r\nFixes the error about dialogs mentioned in https://github.com/godotengine/godot/pull/80260#issuecomment-1736076386.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-02T14:24:07Z",
        "closed_at": "2023-10-03T15:41:19Z",
        "merged_at": "2023-10-03T15:41:19Z",
        "body": "This is a follow up to PR https://github.com/godotengine/godot/pull/78995\r\n\r\nThat PR allows GDExtensions to take control over the class category used for script instances (when you're adding a scripting language from a GDExtension). However, in many (most?) cases, GDExtensions don't need this extra control and the old, default method is just fine.\r\n\r\nSo, rather than deprecating the old behavior, I think this should just be a case where there's two ways to handle this: (1) provide a `get_class_category_func` if you want the extra control, or (2) provide `nullptr` if the default behavior is fine.\r\n\r\nThis PR just removes the `#ifndef DISABLE_DEPRECATED` that wraps the old behavior, and adds a comment to the `gdextension_interface.h`.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 15,
        "changed_files": 3,
        "created_at": "2023-10-02T14:08:40Z",
        "closed_at": "2023-10-02T17:59:16Z",
        "merged_at": "2023-10-02T17:59:16Z",
        "body": "Fixes #82654.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-02T13:05:19Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "Steps to reproduce:\r\n1. use official openxr test project\r\n2. make sure OpenXR is enabled in project setting; and enable OpenXR Shaders.\r\n3. In Project Settings, enable Advanced Settings, and go to the Run category under Editor, not the Run category under Application. In the text box, type `--xr-mode off`\r\n4. Press run.\r\n5. Without this patch, it will crash with Nasal Demons and/or Undefined Behavior due to dereference of null pointer. On windows MSVC, this undefined behavior is compiled as an illegal instruction (flow off the end of a function into FF / ??? instructions), but other possibilities may also happen.\r\n\r\nThis is not a complete fix, since it still prints error due to null shader RID, but at least it won't crash. I was able to play the game with --xr-mode off.\r\nOther people also hit this issue in 4.2 dev",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-02T09:56:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82631",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-02T09:55:58Z",
        "closed_at": "2023-10-02T11:20:51Z",
        "merged_at": "2023-10-02T11:20:51Z",
        "body": "I know this is a tiny commit but I had to read this sentence 4 times before I figured out what it was trying to say. The comma is important here.\r\n\r\nExamples of where the same type of documentation has the comma are [here](https://github.com/godotengine/godot/blob/0ca8542329888e8dccba89d59d3b728090c29991/doc/classes/Environment.xml#L86), [here](https://github.com/godotengine/godot/blob/0ca8542329888e8dccba89d59d3b728090c29991/doc/classes/Environment.xml#L112), [here](https://github.com/godotengine/godot/blob/0ca8542329888e8dccba89d59d3b728090c29991/doc/classes/FontFile.xml#L580) amongst many other instances.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 84,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-02T09:37:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Add `set_slot_custom_icon_left`, `set_slot_custom_icon_right` and `get_slot_custom_icon_left`, `get_slot_custom_icon_right` methods  for `GraphNode` class.\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-10-02T09:04:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Resolves: https://github.com/godotengine/godot/issues/73677\r\n\r\nImplemented for Forward+ and Mobile Renderers.\r\nRestored Old Blur Logic when using blending as it significantly improves the visual presentation compared to blending with the Current Blur Logic, and allows for Directional Shadows over Massive distances at good quality when blending is enabled.\r\n\r\nThe Blending has been hardcoded to start at 10% away from the end of a given split for simplicity's sake, as for most scenarios it works best and for other values you would typically need to be tweaking it on a per split basis along side having per split blur controls for best results, which would be quite complicated both to implement and for most users to properly use\r\n\r\nBlending in action\r\n![image](https://github.com/godotengine/godot/assets/50302479/3d08602c-a792-4ee0-bf76-08809b5ddf3b)\r\n\r\nBlending disabled\r\n![image](https://github.com/godotengine/godot/assets/50302479/48d72b15-4fe7-41b8-b5b0-c05bf83eed35)\r\n\r\n\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-02T08:45:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #82643.\r\n\r\nLately these calculations were tweaked in #81735 but we must have tested only some simple cases. In https://github.com/godotengine/godot/pull/81735#discussion_r1327973174 I deduced the `drag_from`/`drag_to` are in the parent coordinate space, but I've deduced it only based on the new code in that PR (which seemed to work). This was a wrong a conclusion. Now I've properly taken a look at a bigger chunk of code and `drag_from`/`drag_to` seem to be in the Viewport's global canvas coordinate space (viewport space transformed by inverse of its `global_canvas_transform`). Updated the calculations accordingly, now things seem to work just fine.\r\n(To be clear things were broken for \"non-standard\" transforms even before #81735.)\r\n\r\n| Before | After |\r\n|--------|--------|\r\n|![foegTIB6X3](https://github.com/godotengine/godot/assets/9283098/7e2e0cba-a67d-47ce-8886-fc7561e56ee4)|![o1aB4FdPB8](https://github.com/godotengine/godot/assets/9283098/87420431-6791-4916-8a04-b44b9dfa95a6)|\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-02T07:10:12Z",
        "closed_at": "2023-10-02T11:20:52Z",
        "merged_at": "2023-10-02T11:20:52Z",
        "body": "Fixed a bug in Vector3.BezierDerivative in mono module. In Vector3.BezierDerivative, the last line does not look right, end.Y is used instead of end.Z, from what I understand, this is probably a bug.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 599,
        "deletions": 333,
        "changed_files": 20,
        "created_at": "2023-10-02T05:23:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "- Prefers single `\u2026` (Horizontal Ellipsis, U+2026) over three `...` (Full Stop, U+002E) characters.\r\n- Adds option to set custom ellipsis character.\r\n- Adds support for system font fallback when looking for ellipsis / dot characters.\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-02T05:04:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "fixes #80793\r\n\r\nLast n items' height is incorrectly overwritten with the max height of first row (n = number of columns). This happens in the first iteration of the while loop. Moving this code inside if (all_fit) makes sure the last rows height is only updated at the last iteration of the while loop when max height (max_h) is calculated for the last row.\r\n\r\nafter\r\n![image](https://github.com/godotengine/godot/assets/122149176/7cb1cc62-6048-4f21-8d99-e1474cd3c444)\r\n\r\nbefore\r\n![image](https://github.com/godotengine/godot/assets/122149176/811976ec-582c-4f4e-90db-3b75eea2f79d)\r\n\r\n\r\nThe 3rd last item has incorrect height because it is using the first rows height. the last 3 items correct height was lost.\r\n\r\n<!--\r\nPlease target the `master` branch in priority.\r\nPRs can target `3.x` if the same change was done in `master`, or is not relevant there.\r\n\r\nRelevant fixes are cherry-picked for stable branches as needed by maintainers.\r\nYou can mention in the description if the change is compatible with `3.x`.\r\n\r\nTo speed up the contribution process and avoid CI errors, please set up pre-commit hooks locally:\r\nhttps://docs.godotengine.org/en/latest/contributing/development/code_style_guidelines.html\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 7,
        "created_at": "2023-10-02T01:59:31Z",
        "closed_at": "2023-10-04T13:48:11Z",
        "merged_at": "2023-10-04T13:48:11Z",
        "body": "Code region folding icons make a reference to folders, which is confusing and unnecessary. It also looks kinda bad IMO, as the cutout leaves a thin part on the shape hanging.\r\n\r\nBefore and after style:\r\n![image](https://github.com/godotengine/godot/assets/85438892/307764cc-dcce-4375-92c7-c9e2bb63d7fd)\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 219,
        "deletions": 1,
        "changed_files": 9,
        "created_at": "2023-10-01T23:59:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Adds a new simplification option to the model importer when the trimesh physics mesh mode is selected similar to how the options for convex decomposition are presented.\r\n\r\nAlso adds GDScript exports to generate a convex shapes and trimesh shapes (both simplified and simplified) to ImportMesh match Mesh.\r\n\r\nCloses https://github.com/godotengine/godot-proposals/issues/3603, tested with the example project posted there.\r\n\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-01T20:38:22Z",
        "closed_at": "2023-10-02T11:20:51Z",
        "merged_at": "2023-10-02T11:20:51Z",
        "body": "The animation speed scale is most commonly used with values less than 2, and often less than 1. The current slider goes to 64 which is very high, so it's not very useful as-is. This PR changes the slider extent to 4.\r\n\r\nThe finer precision isn't really necessary, but I don't see a reason to prevent using a step smaller than 0.01.",
        "comments": 1
    }
]