[
    {
        "merged": false,
        "additions": 8,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-17T22:46:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nAdded some Punctuation Marks as Required.\r\n## References and Relevant Issues\r\nNone.\r\n## Detailed Description of the Pull Request / Additional comments\r\nThere were some missing Punctuation Marks(Ex: Colon(:) and Full Stop(.)), so I have added them.\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T17:32:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This restores the original code from before 821ae3a where\r\nthe `.GetMainBuffer()` call was accidentally removed.\r\n\r\nCloses #16158\r\n\r\n## Validation Steps Performed\r\n* Run this Python script:\r\n  ```py\r\n  import sys\r\n  while True:\r\n    sys.stdout.write(\"\\033[?1049h\")\r\n    sys.stdout.flush()\r\n    sys.stdin.readline()\r\n    sys.stdout.write(\"\\033[?1049l\")\r\n  ```\r\n* Press enter repeatedly\r\n* Doesn't crash \u2705",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-10-17T16:46:57Z",
        "closed_at": "2023-10-17T16:47:32Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 248,
        "deletions": 36,
        "changed_files": 9,
        "created_at": "2023-10-17T16:37:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Surprisingly easier than I thought this would be. ActionMap already supports layering (from defaults.json), so this basically re-uses a lot of that for fun and profit. \r\n\r\nThe trickiest bits:\r\n* In `SettingsLoader::_parseFragment`, I'm constructing a fake, empty JSON object, and taking _only_ the actions out from the fragment, and stuffing them into this temp json. Then, I parse that as a globals object, and set _that_ as the parent to the user settings file. That results in _only_ the actions from the fragment being parsed before the user's actions. \r\n* In that same method, I'm also explicitly preventing the ActionMap (et al.) from parsing `keys` from these actions. We don't want fragments to be able to say \"ctrl+f is clear buffer\" or something like that. This required a bit of annoying plumbing. \r\n\r\n\r\nCloses #16063 \r\nTests added.\r\nDocs need to be updated. \r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 47,
        "changed_files": 1,
        "created_at": "2023-10-17T14:06:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nEncapsulating the loop within Process Conflict Resolution.\r\n## References and Relevant Issues\r\nNA\r\n\r\n\r\n\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-10-16T06:03:27Z",
        "closed_at": "2023-10-16T12:23:46Z",
        "merged_at": null,
        "body": "Removed unnecessary string interpolation for file paths in the \"C_Cpp.default.browse.databaseFilename\" setting, as VS Code automatically handles workspace folder paths.\r\n\r\nSimplified the \"C_Cpp.default.browse.path\" setting by using an array with a single workspace folder element.\r\n\r\nRemoved the \"xstring\" and \"array\" entries from the \"files.associations\" section because they were mapped to \"cpp\" in multiple entries.\r\n\r\nRemoved the redundant .true from the boolean values in the \"files.exclude\" and \"search.exclude\" sections.\r\n\r\n## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-10-15T15:30:10Z",
        "closed_at": "2023-10-16T00:07:13Z",
        "merged_at": null,
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 300,
        "deletions": 316,
        "changed_files": 23,
        "created_at": "2023-10-13T19:57:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n... technically. We still won't let it actually _be_ a pane, but now it acts like one. It's hosted in a `SettingsPaneContent`. There's no more `SettingsTab`. It totally _can_ be in a pane (but don't?)\r\n\r\n_targets: #16171_\r\n\r\n## References and Relevant Issues\r\n\r\n* #997\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n* Still opens the settings\r\n* Only opens a single settings tab, or re-activates the existing one\r\n* Session restores!\r\n* Updates the title of the tab appropriately\r\n* I previously _did_ use the scratchpad action to open the settings in a pane, and that worked.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 165,
        "deletions": 28,
        "changed_files": 10,
        "created_at": "2023-10-13T19:19:21Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\nBuilds upon {{previous PR}}. This PR simply adds a singly type of non-terminal pane - a \"scratchpad pane\". This is literally just a single text box, in a pane. It's on the `{ \"command\": \"experimental.openScratchpad\" }` action. \r\n\r\n## References and Relevant Issues\r\n\r\nSee: #997\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nI also put it behind velocity so it won't even go into preview while this bakes. \r\n\r\nThis is really just here to demonstrate that this works, and is viable. The next PR is much more interesting. \r\n\r\n## Validation Steps Performed\r\nScreenshot below. \r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 865,
        "deletions": 549,
        "changed_files": 19,
        "created_at": "2023-10-13T19:19:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\nInstead of `Pane` hosting a `TermControl` directly, it now hosts an `IPaneContent`. This is an abstraction between the TermControl and the pane itself, to allow for arbitrary implementations of `IPaneContent`, with things that might not be terminals. \r\n\r\n## References and Relevant Issues\r\n\r\n* #997\r\n* #1000\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThis PR by itself doesn't do much. It's just a refactoring. \r\n- It doesn't actually add any other types of pane content. \r\n- It overall just tries to move code whenever possible, with as little refactoring as possible. There are some patterns from before that don't super scale well to other types of pane content (think: the `xyzChanged` events on `IPaneContent`). \r\n- There's a few remaining places where Pane is explicitly checking if its content is a terminal. We probably shouldn't, but meh\r\n\r\nThere are two follow-up PRs to this PR:\r\n* #16171 \r\n* #16172 \r\n\r\nIn addition, there's more work to be done after these merge:\r\n* TODO! issue number for \"Replace `IPaneContent::xyzChanged` with `PropertyChanged` events\"\r\n* TODO! issue number for \"Re-write state restoration so panes don't produce `NewTerminalArgs`\"\r\n\r\n## Validation Steps Performed\r\n\r\n* It still launches\r\n* It still works\r\n* Broadcasting still works\r\n* The weird restart connection thing from #16001 still works\r\n\r\n## PR Checklist\r\n- [x] Closes #997\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-13T08:54:53Z",
        "closed_at": "2023-10-16T12:10:01Z",
        "merged_at": null,
        "body": "Here's what's changed:\r\n\r\nRemoved Unnecessary Comments: I removed the introductory comments as they don't add any value to the configuration file.\r\n\r\nConsistent Naming: The names of the configurations have been made more concise and consistent. They now clearly describe their purpose.\r\n\r\nForward Slashes in Paths: I replaced backslashes with forward slashes in file paths, which is more platform-independent and works on both Windows and other operating systems.\r\n\r\nBy making these changes, your launch configuration file remains clear and concise while adhering to best practices for formatting and naming.\r\n\r\n## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [x] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-13T04:43:40Z",
        "closed_at": "2023-10-13T13:51:31Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nThis pull request corrects a typo in comments in the src/terminal/adapter/charsets.hpp file.\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-13T04:42:23Z",
        "closed_at": "2023-10-13T13:49:49Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nThis PR fixes typos in oss/chromium/base/numerics/README.md\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [x] Closes #xxx\r\n- [x] Tests added/passed\r\n- [x] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [x] Schema updated (if necessary)\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-10-12T20:34:58Z",
        "closed_at": "2023-10-13T20:47:57Z",
        "merged_at": "2023-10-13T20:47:57Z",
        "body": "No need to check for if a bit is set before manually clearing or setting them when xor will do the trick.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-12T19:54:32Z",
        "closed_at": "2023-10-12T20:14:57Z",
        "merged_at": "2023-10-12T20:14:57Z",
        "body": "## Summary of the Pull Request\r\n\r\nDependency support is now GA in WinGet. Updating the instructions in README\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 752,
        "deletions": 341,
        "changed_files": 27,
        "created_at": "2023-10-11T07:11:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\nUpgrades [check-spelling to v0.0.22](https://github.com/check-spelling/check-spelling/releases/tag/v0.0.22)\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n* refreshes workflow\r\n  * enables dependabot PRs to trigger CI (so that in the future you'll be able to see breaking changes to the dictionary paths)\r\n* refreshes metadata\r\n* built-in handling of `\\n`/`\\r`/`\\t` is removed -- This means that the `patterns/0_*.txt` files can be removed.\r\n* this specific PR includes some shim content, in `allow/check-spelling-0.0.21.txt` -- once it this PR merges, it can be removed on a branch and the next CI will clean out items from `expect.txt` relating to the `\\r` stuff and suggest replacement content.\r\n* talking to the bot is enabled for forks (but not the master repository)\r\n* SARIF reporting is enabled for PRs w/in a single repository (not across forks)\r\n* In job reports, there's a summary table (space permitting) linking to instances (this is a poor man's SARIF report)\r\n* When a pattern splits a thing that results in check-spelling finding an unrecognized token, that's reported with a distinct category\r\n* When there are items in expect that not longer match anything but more specific items do (e.g. `microsoft` vs. `Microsoft`), there's now a specific category with help/advice\r\n* Fancier excludes suggestions (excluding directories, file types, ...)\r\n* Refreshed dictionaries\r\n* The comment now links to the job summary (which includes SARIF link if available, the details view, and a generated commit that people can use if they're ok w/ the expect changes and don't want to run perl)\r\n\r\n\r\n\r\n## Validation Steps Performed\r\n\r\n1. the branch was developed in https://github.com/check-spelling-sandbox/terminal/actions?query=branch%3Acheck-spelling-0.0.22\r\n2. ensuring compatibility with 0.0.21 was done in https://github.com/check-spelling-sandbox/terminal/pull/3\r\n3. this version has been in development for a year and has quite a few improvements, we've been actively dogfooding it throughout this period \ud83d\ude04\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T23:56:00Z",
        "closed_at": "2023-10-11T14:00:30Z",
        "merged_at": "2023-10-11T14:00:30Z",
        "body": "This PR updates the README with information about Windows Terminal Canary. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-10T01:12:09Z",
        "closed_at": "2023-10-11T17:58:56Z",
        "merged_at": "2023-10-11T17:58:56Z",
        "body": "This fixes a cosmetic issue with the version number in the unpackaged builds and NuGet packages.\r\n\r\nThey were showing up as `-preview`, even when they were stable, because the variable template didn't know about the branding.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-09T20:35:49Z",
        "closed_at": "2023-10-11T13:58:01Z",
        "merged_at": "2023-10-11T13:58:01Z",
        "body": "Built locally.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T11:12:37Z",
        "closed_at": "2023-10-11T14:02:22Z",
        "merged_at": "2023-10-11T14:02:22Z",
        "body": "Have added a conditional check in `TerminalWindow::UpdateSettings` method\r\n\r\n## PR Checklist\r\n- [X] Closes #15987 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 67,
        "deletions": 182,
        "changed_files": 5,
        "created_at": "2023-10-05T22:24:09Z",
        "closed_at": "2023-10-06T20:16:11Z",
        "merged_at": "2023-10-06T20:16:11Z",
        "body": "This pull request also removes the original release and nightly pipelines, but it does not remove the release pipeline _template_.\r\n\r\nI had to demote the Azure job from being a _deployment_ to being a plain old job, unfortunately. Alas! Review with whitespace disabled (or `git diff -w`).",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T20:59:38Z",
        "closed_at": "2023-10-11T16:40:41Z",
        "merged_at": "2023-10-11T16:40:41Z",
        "body": "If you're already in the \"output\" state, then an app requesting an \"output\" mark probably shouldn't end the current mark and start a new one. It should just keep on keepin' on.\r\n\r\nThe decision to end the previous one was arbitrary in the first place, so let's arbitrarily change it back.\r\n\r\nEspecially noticable if you hit <kbd>Enter</kbd> during a command, because the auto-mark prompt work will do a CommandEnd, so long-running commands will get broken into multiple marks \ud83e\udd72\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-05T20:49:32Z",
        "closed_at": "2023-10-17T19:11:54Z",
        "merged_at": "2023-10-17T19:11:54Z",
        "body": "Guess what _doesn't_ have the same layout as a bitmap? A `til::color`.\r\n\r\nNoticed in 1.19.\r\n\r\nRegressed in #16006 ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 423,
        "deletions": 224,
        "changed_files": 11,
        "created_at": "2023-10-05T17:16:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The initial cooked read (= conhost readline) rewrite had two flaws:\r\n* Using viewport scrolls under ConPTY to avoid emitting newlines resulted in various bugs around marks, coloring, etc. It's still somewhat unclear why this happened, but the next issue is related and much worse.\r\n* Rewriting the input line every time causes problems with accessibility tools, as they'll re-announce unchanged parts again and again.\r\n\r\nThe solution to these is to simply stop writing the unchanged parts of the prompt. To do this, code was added to measure the size of text without actually inserting them into the buffer. Since this meant that the \"interactive\" mode of `WriteCharsLegacy` would need to be duplicated for the new code, I instead moved those parts into `COOKED_READ_DATA`. That way we can now have the interactive transform of the prompt (= Ctrl+C -> ^C) and the two text functions (measure text & actually write text) are now agnostic to this transformation.\r\n\r\nCloses #16034\r\nCloses #16044\r\n\r\n## Validation Steps Performed\r\n* A vision impaired user checked it out and it seemed fine \u2705",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 229,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2023-10-05T17:15:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n**Currently in draft for feedback on how the font axes are implemented, before I do the same for font features**\r\n\r\nAllow editing of font features and axes in the SUI to get the UI closer towards JSON parity\r\n\r\n## References and Relevant Issues\r\n#10000 \r\n\r\n## Validation Steps Performed\r\n\r\n- [x] Font Axes can be added/changed/removed from the Settings UI\r\n- [ ] Font Features can be added/changed/removed from the Settings UI\r\n\r\n<img width=\"600\" alt=\"image\" src=\"https://github.com/microsoft/terminal/assets/26824113/1b853f28-f091-4620-bac8-435c545fe049\">\r\n\r\n<img width=\"602\" alt=\"image\" src=\"https://github.com/microsoft/terminal/assets/26824113/434340d4-76a0-4883-9766-94639b49e2c7\">\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 105,
        "deletions": 40,
        "changed_files": 1,
        "created_at": "2023-10-05T13:55:22Z",
        "closed_at": "2023-10-13T20:44:15Z",
        "merged_at": "2023-10-13T20:44:15Z",
        "body": "This addresses the following issues:\r\n* The JSON Schema spec doesn't actually define whether objects with\r\n  a \"properties\" key still require `\"type\": \"object\"` or not.\r\n  VS Code for instance largely pretends as if it's implied, but when it\r\n  encounters them inside a `oneOf` tree, then it behaves as if it isn't.\r\n  In other words, we need to always set `\"type\": \"object\"`.\r\n* Declaring an `oneOf` containing a `\"type\": \"string\"` and an `enum`\r\n  doesn't work, because if one of the `enum` cases is given, it results\r\n  in both variants to match, since any `enum` is also a `string`.\r\n  We have to use `anyOf` instead.\r\n* `SuggestionSource` used `\"BuiltinSuggestionSource\"` inside a `type`\r\n  key which doesn't work. We have to use `$ref` for that.\r\n\r\nCloses #13387\r\n\r\n## Validation Steps Performed\r\n* VS Code stops complaining \u2705\r\n* https://www.jsonschemavalidator.net/ \u2705",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 11,
        "changed_files": 7,
        "created_at": "2023-10-03T21:23:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nThis pull request will allow the user to set specific light|dark|system configuration for the Settings Page.\r\n## References and Relevant Issues\r\n#9231 \r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\nBuild, and tested the application with both dark and light as configuration.\r\n## PR Checklist\r\n- [x] Closes #9231 \r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 284,
        "deletions": 97,
        "changed_files": 27,
        "created_at": "2023-10-03T16:18:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Add support for underline style and color in the renderer\r\n\r\nAfter the underline style and color feature addition to conpty, this PR takes it further and add support for rendering them to the screen!\r\n\r\nOut of five underline styles, we already supported rendering for 3 of those types (Singly, Doubly, Dotted) in some form in our renderer. The PR adds the remaining types, namely, Dashed and Curly underlines support to the renderer.\r\n\r\nUnderline coloring is achieved by sending the underline color instead of the foreground **text** color from the base renderer to the engine. *The foreground color is still used when no underline color is set*.\r\n\r\n#### AtlasEngine:\r\nDashed underline was trivial to implement both at application level and shader level. Curly underlines is rendered using `sin()` hlsl function. We send the `underlineCellOffset`, which is the vertical offset for an underline from the top of the cell, to help calculate `centerY` that acts as the baseline for the sine wave. We also get good anti-aliasing *effect* even on our shader based impl.\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- \u2705 Set the underline color to underlines only, without affecting the gridline color.\r\n- \u274c Port to DX renderer. (Not planned as DX renderer soon to be replaced by **AtlasEngine**)\r\n- [ ] Port underline coloring (and style also?) to GDI renderer (Conhost).\r\n- [ ] Wide/Tall `CurlyUnderline` variant for `DECDWL`/`DECDHL`.\r\n\r\nCloses #7228 \r\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T10:07:54Z",
        "closed_at": "2023-10-03T11:01:57Z",
        "merged_at": null,
        "body": "to.extend managr purchamnts\r\n\r\n## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [x] Closes #xxx\r\n- [x] Tests added/passed\r\n- [x] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [x] Schema updated (if necessary) need threads.\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-02T15:02:24Z",
        "closed_at": "2023-10-03T20:41:19Z",
        "merged_at": "2023-10-03T20:41:19Z",
        "body": "Well, Pane doesn't _only_ care if the connection isn't entering a terminal state. It does need to update its own state first.\r\n\r\nRegressed in #15335\r\n\r\nCloses #16068\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-02T14:33:17Z",
        "closed_at": "2023-10-03T20:29:38Z",
        "merged_at": "2023-10-03T20:29:38Z",
        "body": "Wow our preview population must just _not use `startupActions`. This obviously never worked in 1.18 Preview.\r\n\r\nCloses #16050\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-02T14:16:52Z",
        "closed_at": "2023-10-05T14:41:42Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nAdded a success message to be displayed after confirming that the correct PowerShell version is installed.\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\nAfter implementing the version check in the PowerShell script, a success message is displayed when the correct version is detected. This provides a clear indication to users that their PowerShell version meets the requirements.\r\n\r\n## Validation Steps Performed\r\n- [x] Tested the script on systems with different PowerShell versions to ensure the success message appears only when the correct version is installed.\r\n- [x] Manually verified the script behavior after the changes were applied.\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-02T08:45:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Adds a nice touch of anti-aliasing to the CMD icon:\r\n\r\n![image](https://github.com/microsoft/terminal/assets/102489121/ab82c354-c0c7-42f8-9230-be39bb7a4819)\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-02T07:58:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Update ctions/add-to-project to version 4.0.1\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1577,
        "deletions": 24,
        "changed_files": 11,
        "created_at": "2023-10-01T17:32:59Z",
        "closed_at": "2023-10-02T19:52:55Z",
        "merged_at": "2023-10-02T19:52:54Z",
        "body": "This pipeline does everything the existing release pipeline does, except it does it using the OneBranch official templates.\r\n\r\nMost of our existing build infrastructure has been reused, with the following changes:\r\n\r\n- We are no longer using `job-submit-windows-vpack`, as OneBranch does this for us.\r\n- `job-merge-msix-into-bundle` now supports afterBuildSteps, which we use to stage the msixbundle into the right place for the vpack\r\n- `job-build-project` supports deleting all non-signed files (which the OneBranch post-build validation requires)\r\n- `job-build-project` now deletes `console.dll`, which is unused in any of our builds, because XFGCheck blows up on it for some reason on x86\r\n- `job-publish-symbols` now supports two different types of PAT ingestion\r\n- I have pulled out the NuGet filename variables into a shared variables template\r\n\r\nI have also introduced a TSA config (which files bugs on us for binary analysis failures as well as using the word 'sucks' and stuff.)\r\n\r\nI have also baselined a number of control flow guard/binary analysis failures.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-30T19:14:06Z",
        "closed_at": "2023-10-03T20:35:34Z",
        "merged_at": "2023-10-03T20:35:34Z",
        "body": "Updated the function `TerminalPage::CloseWindow`  to include logic for closing context and flyout menus so that they are dismissed before the warning is displayed.\r\n\r\n## PR Checklist\r\n- [X] Closes #16039 \r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-29T20:53:36Z",
        "closed_at": "2023-09-30T01:01:38Z",
        "merged_at": "2023-09-30T01:01:38Z",
        "body": "It's been literally 4 years since I worked directly in the OS repo and I forgot how to build the console \ud83e\udd26",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-09-29T18:44:26Z",
        "closed_at": "2023-10-03T20:31:01Z",
        "merged_at": "2023-10-03T20:31:01Z",
        "body": "See MSFT:46763065. Looks like we're in the middle of being `Refrigerate`d, we're pumping messages, and as we pump messages, we get to a `co_await` in `AppHost::_WindowInitializedHandler`. When we resume, we just try to use `this` like everything's fine but OH NO, IT'S NOT.\r\n\r\nTo fix this, I'm\r\n* Adding `enable_shared_from_this` to `AppHost`\r\n* Holding the `AppHost` in a shared_ptr in WindowThread\r\n  - though, this is a singular owning `shared_ptr`. This is probably ripe for other footguns, but there's little we can do about this.\r\n* whenever we `co_await` in `AppHost`, make sure we grab a weak ref first, and check it on the other side.\r\n\r\nThis is another \"squint and yep that's a bug\" fix, that I haven't been able to verify locally. This is\r\n[allegedly](https://media.tenor.com/VQi3bktwLdIAAAAC/allegedly-supposedly.gif) about 10% of our 1.19 crashes after 3 days.\r\n\r\nCloses #16061\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-09-28T23:11:02Z",
        "closed_at": "2023-09-29T18:25:13Z",
        "merged_at": "2023-09-29T18:25:13Z",
        "body": "The version we were using requires .NET 2.1 (wow) which is way out of support.\r\n\r\nTask version 3 supports much newer versions.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-28T23:09:01Z",
        "closed_at": "2023-09-29T18:25:02Z",
        "merged_at": "2023-09-29T18:25:02Z",
        "body": "Control Flow Guard requires both linker and compiler flags.\r\n\r\nIt turns out that the MSVC build rules determine whether to _link_ with CFG based on whether it compiled anything with CFG.\r\n\r\nIt also turns out that when you don't compile anything (such as in our DLL projects that only consume a static library!), the build rules can't guess whether to link with CFG.\r\n\r\nWhoops.\r\nWe need to force it.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 419,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-09-28T22:29:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Accessibility Insights has a neat tool called FastPass where it can scan the existing UI for common accessibility errors. FastPass is powered by Axe.Windows. This PR adds Axe.Windows to our project and adds a handful of accessibility tests to navigate the app (using WinAppDriver) then scan the UI using Axe.Windows.\r\n\r\nAdditionally, each error Axe.Windows finds is output to an a11ytest file that can be opened by Accessibility Insights to tell you what error was found and where the error is. These files are output to `\\bin\\x64\\Debug\\AxeWindowsOutputFiles\\`\r\n\u00a0\r\nThere's a few tests that fail already. I've added comments explaining why they fail and saying that they are expected.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-28T22:00:50Z",
        "closed_at": "2023-10-03T20:31:44Z",
        "merged_at": "2023-10-03T20:31:44Z",
        "body": "Fixes MSFT:46725264\r\n\r\ndon't explode trying to parse a URL, if the string wasn't one. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-27T23:28:27Z",
        "closed_at": "2023-09-28T20:32:30Z",
        "merged_at": "2023-09-28T20:32:30Z",
        "body": "Unfortunately, the appLicensing restricted capability we used to make Canary installable without the store only works on Windows 11. Because of that, we have to restrict the app package to Windows 11 and above.\r\n\r\nI'd rather not leave Windows 10 users out in the cold, so this pull request also publishes Canary builds to the public storage bucket with the name `Microsoft.WindowsTerminalCanary_latest_x64.zip` (etc.)\r\n\r\nThe version number will be kept inside the archive. It remains to be seen whether that is a good idea!\r\n\r\nWhen combined with #16048, Canary builds from Azure will automatically run in portable mode!",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-27T23:24:26Z",
        "closed_at": "2023-09-28T18:25:26Z",
        "merged_at": "2023-09-28T18:25:26Z",
        "body": "I also added support to the unpackaged distribution script to produce portable mode packages. It is off by default for AppX->ZIP builds and **on** by default for Layout->ZIP builds.\r\n\r\nThis constitutes a change in behavior.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 26,
        "changed_files": 2,
        "created_at": "2023-09-27T18:40:12Z",
        "closed_at": "2023-09-28T18:21:13Z",
        "merged_at": "2023-09-28T18:21:13Z",
        "body": "Found this while looking through dumps for failure `f544cf8e-1879-c59b-3f0b-1a364b92b974`. That's MSFT:45210947. (1% of our 1.19 crashes)\r\n\r\nFrom the dump I looked at,\r\n\r\nLooks like,\r\n\r\n* we're on Windows 10\r\n* We're refrigerating a window\r\n* We are pumping the remaining XAML messages as we refrigerate (`_pumpRemainingXamlMessages`)\r\n* In there, we're finally getting the `TerminalPage::_CompleteInitialization`\r\n* that calls up to the `_root->Initialized` lambda set up in `TerminalWindow::Initialize`\r\n* There it tries to get the launch mode from the settings, and explodes. Presumably _settings is null, but can't see in this dump.\r\n\r\nso the window is closing before it's initialized.\r\n\r\nWhen we `_warmWindow = std::move(_host->Refrigerate())`, we call `AppHost::Refrigerate`, which will null out the TerminalWindow. So when we're getting to `TerminalWindow::Initialize`, we're calling that on a nullptr. That's the trick.\r\n\r\nWe need to revoke the internal Initialized callback. Which makes sense. It's a lambda that binds _this_ \ud83e\udd26\r\n\r\n---\r\n\r\nAfter more looking, it really doesn't _seem_ like the stacks that are tracked in `f544cf8e-1879-c59b-3f0b-1a364b92b974` look like the same stack that I was debugging, but this _is_ a realy issue regardless.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-27T15:20:20Z",
        "closed_at": "2023-09-28T14:34:04Z",
        "merged_at": "2023-09-28T14:34:04Z",
        "body": "One day into 1.19, and there's a LOT of hits here (**76.25%** of our ~300 crashes). A crash if the Theme doesn't have a `tab` member. \r\n\r\nRegressed in #15948\r\n\r\nCloses MSFT:46714723",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-26T22:52:18Z",
        "closed_at": "2023-09-29T10:49:34Z",
        "merged_at": "2023-09-29T10:49:34Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 49,
        "changed_files": 2,
        "created_at": "2023-09-26T17:59:24Z",
        "closed_at": "2023-09-27T17:50:10Z",
        "merged_at": "2023-09-27T17:50:10Z",
        "body": "The `GenRTF(...)` was using `\\highlight` control word for sending background text color in the RTF format during a copy command. This doesn't work correctly, since many applications (E.g. MSWord) don't support full RGB with `\\highlight`, and instead uses an approximation of what is received. For example, `rgb(197, 15, 31)` becomes `rgb(255, 0, 255)`. Also, the standard way of using background colors is `\\cbN` control word, which isn't supported as per the [RTF Spec 1.9.1](https://msopenspecs.azureedge.net/files/Archive_References/[MSFT-RTF].pdf) in Word.\r\n\r\nBut it briefly mentioned a workaround at Pg. 23, which seems to work on all the RTF editors I tested:\r\n\r\n![image](https://github.com/microsoft/terminal/assets/55626797/67b45c91-e367-4f5c-906c-b84c27283616)\r\n\r\nThe PR makes the changes to use `\\chshdng0\\chcbpatN` for the background coloring.\r\n\r\nAlso did some refactoring to make the implementation concise.\r\n\r\n## Validation Steps Performed\r\n\r\nVerified that the background is correctly copied on below editors:\r\n- MSWord\r\n- WordPad\r\n- LibreOffice\r\n- Outlook",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-09-25T18:42:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Around #15280 we broke the ability to launch client exes that we relative to the CWD the terminal is being launched from.\r\n\r\nThis fixes that by \"pushing\" the CWD, before calling `CreateProcess`, then popd immediately after that. \r\n\r\nCloses #15487",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 48,
        "changed_files": 3,
        "created_at": "2023-09-24T15:37:58Z",
        "closed_at": "2023-09-28T15:46:27Z",
        "merged_at": "2023-09-28T15:46:27Z",
        "body": "f1aa699 was fundamentally incorrect as it used `IdnToAscii` and\r\n`IdnToUnicode` on the entire URL, even though these functions only work\r\non domain names. This commit fixes the issue by using the WinRT `Url`\r\nclass and its `AbsoluteUri` and `AbsoluteCanonicalUri` getters.\r\nThe algorithm still works the same way though.\r\n\r\nCloses #16017\r\n\r\n## Validation Steps Performed\r\n* ``\"`e]8;;https://www.xn--fcbook-3nf5b.com/`e\\test`e]8;;`e\\\"``\r\n  still shows as two URLs in the popup \u2705\r\n* Shows the given URI if it's canonical and not an IDN \u2705\r\n* Works with >100 char long file:// URIs \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-22T11:33:32Z",
        "closed_at": "2023-09-22T17:21:40Z",
        "merged_at": "2023-09-22T17:21:40Z",
        "body": "When launching a debug Terminal, `_initializedTerminal` might still be false and the scrollbar might still be 0px tall. This causes the `assert(false)` condition within `_throttledUpdateScrollbar` to be hit.\r\n\r\nRegressed in #16006 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 15,
        "changed_files": 3,
        "created_at": "2023-09-21T21:30:29Z",
        "closed_at": "2023-10-05T14:31:20Z",
        "merged_at": "2023-10-05T14:31:20Z",
        "body": "`GetAt` can throw if the index is out of range. We don't check that in some places. This fixes some of those.\r\n\r\nI don't think this will take care of #15689, but it might help?",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-21T21:04:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "1. This `break` needs to be there. It's unclear what happens without it. \r\n2. Experimentally, try different window styles for the conpty window. These are locked to Dev and Canary builds (so we can try them and back them out if they don't work). This might affect\r\n    * #15219 \r\n    * maybe #15536\r\n    * possibly #13388\r\n  ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 177,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2023-09-21T19:38:54Z",
        "closed_at": "2023-09-22T20:36:40Z",
        "merged_at": "2023-09-22T20:36:40Z",
        "body": "After the nightly build completes, we'll automatically generate a\r\n.appinstaller and publich it plus the msixbundle to an Azure Storage\r\naccount.\r\n\r\nI had to add step/job customization to the publish step in the full\r\nrelease pipeline template.\r\n\r\nThe .appinstaller hardcodes our XAML dependency, which makes it a bit of\r\na pain. We can revisit this later, and publish our dependencies\r\ndirectly and automatically instead of hardcoding them.\r\n\r\nI am considering moving the appinstaller generation step to the MSIX\r\nbundling job, but this works right now and is not too terrible.\r\n\r\nCloses #774",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-09-21T19:28:49Z",
        "closed_at": "2023-09-26T00:24:16Z",
        "merged_at": "2023-09-26T00:24:16Z",
        "body": "With us adding a .appinstaller distribution of Canary, the Store\r\nservices update checker has beome insufficient to determine whether\r\nthere are package updates.\r\n\r\nApp Installer supports us checking for updates by using PackageManager\r\nand the Package interfaces.\r\n\r\nWe'll use those instead of the Store services interface, and bail out\r\nearly if the App Installer gives us an answer.\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 10967,
        "deletions": 8582,
        "changed_files": 58,
        "created_at": "2023-09-20T14:23:38Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Between fmt 7.1.3 and 10.1.1 a lot has happened apart from improvements.\r\n`wchar_t` support is now more limited and implicit conversions from\r\n`char*` to `wchar_t*` don't work anymore.\r\n\r\nFurthermore, even the non-`FMT_COMPILE` API is now compile-time checked\r\nand so it fails to work in our UI code which passes `hstring` format\r\nstrings which aren't implicitly convertible to the expected type.\r\n`fmt::runtime` was introduced for this but it also fails to work for\r\n`hstring` parameters. To solve this, a new `RS_fmt` macro was added\r\nto abstract the added `std::wstring_view` casting away.\r\n\r\nFinally, some additional changes to reduce `stringstream` usage have\r\nbeen made, whenever `format_to`, etc., is available.\r\nThis mostly affects `ActionArgs.cpp`.\r\n\r\nCloses #16000\r\n\r\n## Validation Steps Performed\r\n* Compiles \u2705",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 97,
        "deletions": 63,
        "changed_files": 3,
        "created_at": "2023-09-20T10:44:00Z",
        "closed_at": "2023-09-20T15:03:54Z",
        "merged_at": "2023-09-20T15:03:53Z",
        "body": "This replaces the use of a `<Canvas>` with an `<Image>` for drawing\r\nscrollbar marks. Otherwise, WinUI struggles with the up to ~9000 UI\r\nelements as they get dirtied every time the scrollbar moves.\r\n(FWIW 9000 is not a lot and it should not struggle with that.)\r\n\r\nThe `<Image>` element has the benefit that we can get hold of a CPU-side\r\nbitmap which we can manually draw our marks into and then swap them into\r\nthe UI tree. It draws the same 9000 elements, but now WinUI doesn't\r\nstruggle anymore because only 1 element gets invalidated every time.\r\n\r\nCloses #15955\r\n\r\n## Validation Steps Performed\r\n* Fill the buffer with \"e\"\r\n* Searching for \"e\" fills the entire thumb range with white \u2705\r\n* ...doesn't lag when scrolling around \u2705\r\n* ...updates quickly when adding newlines at the end \u2705\r\n* Marks sort of align with their scroll position \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-19T21:48:57Z",
        "closed_at": "2023-09-20T20:47:26Z",
        "merged_at": "2023-09-20T20:47:26Z",
        "body": "`ImmersiveColorSet` gets sent more often than just on a theme change. It notably gets sent when the PC is locked, or the UAC prompt opens.\r\n\r\n## Validation Steps Performed\r\n\r\nTested manually by setting the font to `garbo`and:\r\n* locking, then logging back in. No dialog \u2705 \r\n* UAC via run dialog + `regedit`. No dialog \u2705 \r\n* Actually changing the OS theme. Dialog \u2705  \r\n\r\n\r\n- [x] Closes #15732\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-19T20:39:14Z",
        "closed_at": "2023-09-20T16:46:38Z",
        "merged_at": "2023-09-20T16:46:38Z",
        "body": "\r\nSaving the SUI with an empty \"keys\" will persist `\"keys\": \"\"` to the JSON. \r\n\r\nThe keychord parser tries to parse that. `KeyChordSerialization.cpp@_fromString` returns a KeyChord with both vkey and scancode set to 0, and the ctor asserts and explodes. \r\n\r\nWe shouldn't do that. \r\n\r\nCloses #13221",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-19T19:56:12Z",
        "closed_at": "2023-09-20T11:35:54Z",
        "merged_at": "2023-09-20T11:35:54Z",
        "body": "You can't catch an A/V. \r\n\r\nCloses #15459",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-09-19T19:31:04Z",
        "closed_at": "2023-09-20T16:46:29Z",
        "merged_at": "2023-09-20T16:46:29Z",
        "body": "I noticed this last week, but forgot to file. If you have a pair of splits, and `exit -1` the first, you can't use `enter` to restart it. \r\n\r\nThis PR fixes that. Basically, `TerminalPage` registers it's `_restartPaneConnection` handler when it makes a new `Pane` object. It registers the callback straight to the `Pane`. However, when a `Pane` gets split, it makes a _new_ `Pane` object, and moves the original content into the new pane. `TerminalPage` however, would never hook up its own callback to that newly created pane. \r\n\r\nThis fixes that. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 25,
        "changed_files": 2,
        "created_at": "2023-09-19T17:05:59Z",
        "closed_at": "2023-09-20T20:12:24Z",
        "merged_at": "2023-09-20T20:12:24Z",
        "body": "As mentioned in #15760\r\n\r\n> > When you right-click on a non-active pane, it becomes active, but the context menu may be displayed before this happens, thus showing the Restart Connection item based the wrong pane's status.\r\n> \r\n> As far as I can see, when a pane is (right)clicked:\r\n> \r\n> 1. If unfocused, `Focus` is called. This goes through the `GotFocus` handler which eventually calls `tab->_UpdateActivePane(sender);`\r\n> 2. `PointerPressed` is raised which eventually shows the context menu\r\n> \r\n> The first point is done asynchronously, so may update the active pane too late when the menu is already displayed (despite both end up in the UI thread).\r\n\r\nTo fix this: we plumb the control that the context menu was opened for all the way through to where the event is actually handled (in `_PopulateContextMenu`)\r\n\r\n* [x] Tested manually",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 45,
        "changed_files": 4,
        "created_at": "2023-09-19T15:55:52Z",
        "closed_at": "2023-09-21T11:36:54Z",
        "merged_at": "2023-09-21T11:36:54Z",
        "body": "This commit fixes 2 issues:\r\n* `ControlCore::ScrollMarks()` would call `ResetIfStale`\r\n  again while the search prompt hasn't changed.\r\n  This has been fixed by using `_cachedSearchResultRows` as\r\n  the indicator for whether it needs to be recreated or not.\r\n* While typing a search query, the selection would move among the\r\n  results with each typed character, because `MovePastCurrentSelection`\r\n  would do what its name indicates. It has been renamed and rewritten\r\n  to be `MoveToCurrentSelection`. To avoid breaking UIA, the previous\r\n  `MovePastPoint` implementation was kept.\r\n\r\nSince the new `MoveToCurrentSelection` function would not move past the\r\ncurrent selection anymore, changing the direction would not move past\r\nthe current result either. To fix this, we now don't invalidate the\r\nsearch cache when changing the direction.\r\n\r\nCloses #15954\r\n\r\n## Validation Steps Performed\r\n* Run ``\"helloworld`n\"*20`` in pwsh\r\n* Search for \"helloworld\"\r\n* While typing the characters the selection doesn't move \u2705\r\n* ...nor when searching downwards \u2705\r\n* ...nor when erasing parts of it \u2705\r\n* ...and it behaves identical in conhost \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-18T20:06:53Z",
        "closed_at": "2023-09-19T16:59:52Z",
        "merged_at": "2023-09-19T16:59:51Z",
        "body": "Since the \"delete color scheme\" button is filled with an icon and a Text Box, the text is not automatically exposed as the autoProp.Name for the button. We have to do it manually just like we do for \"delete profile\".\r\n\r\nValidated manually using accessibility insights\r\n\r\nCloses #15984",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 8,
        "changed_files": 7,
        "created_at": "2023-09-18T19:31:45Z",
        "closed_at": "2023-09-19T14:51:30Z",
        "merged_at": "2023-09-19T14:51:30Z",
        "body": "## Summary of the Pull Request\r\n\r\nResolves the following in #15812 \r\n\r\n> - [x] `toggleBroadcastInput` isn't in the default settings\r\n> - [x] The cursors forget to keep blinking if you focus each pane and then unfocus them\r\n> - [x] They don't stop blinking when you unbroadcast\r\n> - [x] Broadcast border doesn't appear when you make new panes, but they ARE broadcasted-to!\r\n\r\n## References and Relevant Issues\r\nx-ref:\r\n* #2634\r\n* #14393\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThere was literally no logic in the original PR for starting the cursor blinking. It's entirely unknowable how that ever worked. This makes it all much more explicit. \r\n\r\nWe're taking the hacky `DisplayCursorWhileBlurred` from #15363, and promoting that to the less-hacky `CursorVisibility`. Broadcast input mode can use that to force the cursor to be visible always. \r\n\r\n\r\nThe last checkbox in that issue is harder, and I didn't want to further pollute this delta with the paste plumbing. \r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 227,
        "changed_files": 21,
        "created_at": "2023-09-18T16:54:49Z",
        "closed_at": "2023-09-20T15:21:56Z",
        "merged_at": "2023-09-20T15:21:56Z",
        "body": "This pull request moves HwndTerminal into Microsoft.Terminal.Control.Lib and removes PublicTerminalCore completely. \r\n\r\nMicrosoft.Terminal.Control.dll now exports the C API from HwndTerminal.\r\n\r\nThis adds ~100kb to Microsoft.Terminal.Control.dll and ~1400kb to the WPF package (per architecture) but with the coming interactivity platform merge it's going to benefit us big time.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 76,
        "changed_files": 11,
        "created_at": "2023-09-18T16:20:34Z",
        "closed_at": "2023-09-21T21:56:34Z",
        "merged_at": "2023-09-21T21:56:34Z",
        "body": "Previously, all unknown escape sequences would lead to an immediate call\r\nto `VtEngine::_Flush()`. This lead to problems with nushell which uses\r\nFTCS marks that were unknown to us. Combined with the linewise redrawing\r\nthat nushell does, Terminal would get the prompt in two separate frames,\r\ncausing a slight flickering.\r\n\r\n#14677 fixed this by suppressing the `_Flush()` call when unknown\r\nsequences are encountered. Unfortunately, this triggered a bug due\r\nto our somewhat \"inconsistent\" architecture in conhost:\r\n`XtermEngine::WriteTerminalW` isn't just used to flush unknown sequences\r\nbut also used directly by `InputBuffer::PassThroughWin32MouseRequest`\r\nto write its mouse sequence directly to the ConPTY host.\r\n`VtEngine` already contains a number of specialized member functions\r\nlike `RequestWin32Input()` to ensure that `_Flush()` is called\r\nimmediately and another member could've been added to solve this issue.\r\nThis commit now adds `RequestMouseMode` in the same vein.\r\n\r\nBut I believe we can make the system more robust in general by using\r\neager flushing by default (= safe), similar to how a `write()` on a\r\nTCP socket flushes by default, and instead only selectively pause and\r\nunpause flushing with a system similar to `TCP_CORK`.\r\n\r\nThis seems to work fairly well, as it solves:\r\n* The original nushell bug\r\n* The new bug\r\n* Improves overall throughput by ~33% (due to less flushing)\r\n\r\nIn particular the last point is noteworthy, as this commit removes\r\nthe last performance bottleneck in ConPTY that isn't `VtEngine`.\r\nAround ~95% of all CPU and wall time is spent in there now and any\r\nimprovements to `VtEngine` should yield immediately results.\r\n\r\nCloses #15711\r\n\r\n## Validation Steps Performed\r\n* Clone/Run https://github.com/chrisant996/repro_enable_mouse_input\r\n* Hold Ctrl+Alt and circle with the mouse over the viewport\r\n* Repro.exe prints the current cursor coordinates \u2705\r\n* Run nushell\r\n* No flickering when typing in the prompt \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 26,
        "changed_files": 6,
        "created_at": "2023-09-18T15:31:44Z",
        "closed_at": "2023-09-18T16:55:06Z",
        "merged_at": "2023-09-18T16:55:06Z",
        "body": "Just as it says on the label.\r\nCloses #15986\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-09-16T16:59:06Z",
        "closed_at": "2023-10-13T20:43:38Z",
        "merged_at": "2023-10-13T20:43:38Z",
        "body": "## Summary of the Pull Request\r\nCloses #11092 \r\n\r\nAllowing `opacity `to be set differently in both focused and unfocused terminals\r\n\r\n## References and Relevant Issues\r\n#11092 , references: #7158 \r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n### Allowing Opacity to be set differently in both focused and unfocused terminals:\r\n![unfocused_opacity](https://github.com/microsoft/terminal/assets/15957528/1c38e40b-4678-43ec-b328-ad79d222579f)\r\n![image](https://github.com/microsoft/terminal/assets/15957528/3e3342a8-7908-41db-9c37-26c89f7f2456)\r\n\r\n![jolsen](https://github.com/microsoft/terminal/assets/15957528/68553507-d29e-4513-89ce-b1cd305d28b7)\r\n\r\n![image](https://github.com/microsoft/terminal/assets/15957528/18864f60-91d0-4159-87da-2b2ee1637a4c)\r\n\r\n## `_runtimeFocusedOpacity`\r\n\r\nMike also had to say something about this: https://github.com/microsoft/terminal/issues/2531#issuecomment-1668442774\r\n\r\nInitially I had something like `  _setOpacity(newAppearance->Opacity());`\r\n\r\nBut with the introduction of unfocused opacity we encounter new challenges:\r\nWhen Adjusting the Opacity with **CTRL+SHIFT+Mouse Scroll Wheel** or **Set background opacity** in command pallette, the Runtime opacity changes, but when we go to unfocused and back to focused the opacity changes back to focused opacity in Settings. \r\n\r\nAlso when adjusting opacity through the command palette the window becomes unfocused and then focused again after setting background opacity hence the  `  _setOpacity(newAppearance->Opacity());` would override the changes made through command palette\r\n![runtimeFocusedOpacity](https://github.com/microsoft/terminal/assets/15957528/4de63057-d658-4b5e-99ad-7db050834ade)\r\n\r\n![command_pallette_focusswitches](https://github.com/microsoft/terminal/assets/15957528/372526eb-cf0c-40f8-a4e5-a0739f1f0e05)\r\n\r\nWith the introduction of unfocused opacity we encounter new challenges. The runtime opacity stores both the unfocused opacity and focused opacity from settings at different moments. This all works well until we combine this with Adjusting the Opacity with **CTRL+SHIFT+Mouse Scroll Wheel** or **Set background opacity** in command pallette. This brings the need for a separate Focused Opacity. When we change the runtime opacity with scroll wheel or through command pallette this value needs to be stored separately from the one in settings. So we can change back to it when going to unfocused mode and back to focused instead of the focused opacity defined in settings. \r\n\r\n## `skipUnfocusedOpacity` solves Opacity going from solid to unfocused to focused bug: \r\n![skipUnfocusedOpacity_bug](https://github.com/microsoft/terminal/assets/15957528/ecc06dcf-fbef-4fef-a40f-68278fdbfb12)\r\n\r\n## Validation Steps Performed\r\n\r\n- Checked if unfocused Opacity works well when adjusting opacity through Mouse Scroll Wheel or Command Palette and in combination with Acrylic as mentioned in \"Detailed Description of the Pull Request / Additional comments\"\r\n\r\n## PR Checklist\r\n\r\n- [x] Closes #11092 \r\n- [ ] Tests added/passed\r\n- [x] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here:(https://github.com/MicrosoftDocs/terminal/pull/714)\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T14:24:18Z",
        "closed_at": "2023-09-18T22:22:39Z",
        "merged_at": "2023-09-18T22:22:39Z",
        "body": "Previously, the duplication method considered only the next to the selected tab(`tab.TabViewIndex() + 1`) as the insert position. Changed that to consider the setting.\r\n\r\nCloses #15776 \r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 400,
        "deletions": 380,
        "changed_files": 9,
        "created_at": "2023-09-15T00:55:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This WIP PR moves the blink and cursor timers down to Core (where it has unfettered access to everything it needs).\r\n\r\nIt also puts Core in charge of displaying the cursor when there is input, and managing the cursor's focus visibility.\r\n\r\nIt also means that Core no longer needs a \"BlinkCursor\" method?\r\n\r\nThis PR will allow us to remove the timer from the WPF layer as well.\r\n\r\nThis PR also moves the _autoscroll_ timer down into ControlInteractivity (!)\r\nwhich means that all interactivity consumers get it for free. That's **RAD**.\r\n\r\nAll the logic is the same.\r\n\r\nI also took the opportunity to remove some silly parts of the ControlInteractivity API that supported this, like it needing to be told whether the pointer was pressed while it was inside the box _and whether it is focused_ (???)\r\n\r\nNow it darn well keeps track of those things itself.\r\n\r\nTODO:\r\n- [ ] Fix \"allow cursor while blurred\"\r\n- [ ] Fix a crash I observed trying to blink a nonexistent text buffer\r\n  cursor ??? while splitting a bunch of panes all at once\r\n- [ ] Test more\r\n- [ ] Make the ControlInteractivityUnitTests pass (!)\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-09-11T18:38:56Z",
        "closed_at": "2023-09-15T19:59:00Z",
        "merged_at": "2023-09-15T19:59:00Z",
        "body": "WinAppDriver depends on a bunch of .NET assemblies that collide *big time*. Let's just quarantine it.\r\n\r\nI kept the fallback to $TESTDIR\\WinAppDriver.exe because there's a chance that the Windows build depends on it.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 30,
        "changed_files": 7,
        "created_at": "2023-09-11T18:09:53Z",
        "closed_at": "2023-09-11T20:20:12Z",
        "merged_at": "2023-09-11T20:20:11Z",
        "body": "* `[[nodiscard]]` and `[[maybe_unused]]` must come before `virtual` and `static` qualifiers\r\n* We were calling the jsoncpp constructors directly (again) as functions (again)\r\n* Some of our preprocessor `#endif` lines were quite messed up (`-Winvalid-token`)\r\n* One of our test projects was using somebody else's `precomp.h`\r\n\r\nRelated to #14871",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 28,
        "changed_files": 11,
        "created_at": "2023-09-10T15:38:52Z",
        "closed_at": "2023-09-19T20:13:21Z",
        "merged_at": "2023-09-19T20:13:21Z",
        "body": "Adding enum iconstyle for hiding the icon in the tab #8157 \r\n\r\n## Summary of the Pull Request\r\nPlease confirm if I am on the right track.\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #8157\r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-09-08T17:47:36Z",
        "closed_at": "2023-09-08T20:28:38Z",
        "merged_at": "2023-09-08T20:28:38Z",
        "body": "This commit fixes the identity of our new canary packages.\r\nAdditionally, it slightly reorders one block so that the file is\r\nalmost entirely in the same layout as the preview appxmanifest,\r\nallowing for a better direct comparison (with git diff, etc.).",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-09-08T15:16:45Z",
        "closed_at": "2023-09-13T17:52:23Z",
        "merged_at": "2023-09-13T17:52:23Z",
        "body": "## Summary of the Pull Request\r\nCloses #15943\r\n\r\n## References and Relevant Issues\r\n#15943\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #15943\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-07T20:23:16Z",
        "closed_at": "2023-09-07T21:30:25Z",
        "merged_at": "2023-09-07T21:30:25Z",
        "body": "Added a style that allows negative values in the launch position parameters.\r\n\r\n\r\n## PR Checklist\r\n- [x] Closes #15832 \r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-09-07T12:38:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Users report in issue #14349 that the Japanese IME may print repetitive\r\ncharacters since v1.15. The two potential offenders are:\r\n* 2c922e105c6468a8c2469946d44b98390ff94f1d\r\n* ed800dc72de9e51201becf1f752093f4c1b4e155\r\n\r\nI don't think either of the two commits themselves is \"buggy\", but\r\nrather that they make bugs in TSF obvious. This is because backspacing\r\ncauses `TermControl::_CharacterHandler` to be called, which will then\r\ncall `TSFInputControl().ClearBuffer()`, which _should_ instruct TSF\r\nto flush its entire buffer and reset its state.\r\nThat doesn't seem to be happening though.\r\n\r\nI think what's happening here is that TSF is either:\r\n* ignoring this request\r\n* getting into a bad state\r\n* running into race conditions due to running out-of-process\r\n\r\n2c922e105c6468a8c2469946d44b98390ff94f1d could have triggered the\r\nregression because it drops clamping the signed `range` values from TSF.\r\nI believe at the time I didn't consider it possible that TSF would\r\nactually pass either negative indices or a range where\r\n`StartCaretPosition` is greater than `EndCaretPosition`.\r\n\r\ned800dc72de9e51201becf1f752093f4c1b4e155 could have triggered the\r\nregression because it changed this (simplified):\r\n```cpp\r\n_activeTextStart = min(_activeTextStart, range.StartCaretPosition);\r\n```\r\ninto this:\r\n```cpp\r\n_activeTextStart = min(_activeTextStart, _inputBuffer.size());\r\n```\r\n\r\nI think the latter is technically more correct, but if TSF is in a bad\r\nstate where it didn't properly reset, then this may be off.\r\n(When the buffer contains \"foo\" and the _activeTextStart is 3 (= end),\r\nthen we shouldn't move the start to 0 just because TSF replaced the\r\nentire string with \"foobar\", since the active part is just \"bar\".)\r\n\r\nCloses #14349\r\n\r\n## Validation Steps Performed\r\n* Japanese IME (Full-Width Katakana)\r\n  Typing \"saitama\" produces \"\u30b5\u30a4\u30bf\u30de\" \u2705\r\n* Korean IME\r\n  Typing \"gksrmf\" produces \"\ud55c\uae00\" \u2705\r\n* Vietnamese IME\r\n  Typing \"xin chaof\" produces \"xin ch\u00e0o\" \u2705\r\n* Emoji Picker (Win+.)\r\n  \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-06T20:27:32Z",
        "closed_at": "2023-09-18T15:53:24Z",
        "merged_at": "2023-09-18T15:53:24Z",
        "body": "`SetConsoleWindowInfoImpl` calls `PostUpdateWindowSize`, which emits a\r\n`CM_SET_WINDOW_SIZE` event, which causes `_InternalSetWindowSize` to be\r\ncalled, which calls `ScreenBufferSizeChange` which then finally emits a\r\n`WINDOW_BUFFER_SIZE_EVENT` event into the client input buffer.\r\n\r\nThis messes up applications like which make use of\r\n`WINDOW_BUFFER_SIZE_EVENT` to perform potentially lossy operations.\r\nIn case of SSH this results in a resize (SIGWINCH) of the server-side\r\nscreen which similarly may result in a response by the shell, etc.\r\nSince that happens over networks and is async, and because our conhost\r\nVT viewport implementation appears to have a number of subtle bugs,\r\nthis results in duplicate output lines (sometimes hundreds).\r\n\r\nUnder Windows Terminal this issue is not as apparent, since ConPTY has\r\nno viewport that can be moved and no scrollback. It only appears as an\r\nissue if a terminal application reacts poorly to the SIGWINCH event.\r\n\r\nCloses #15769\r\n\r\n## Validation Steps Performed\r\n* Set a breakpoint in `SynthesizeWindowBufferSizeEvent`\r\n* Launch WSL and cause the viewport to move down\r\n  No calls to `SynthesizeWindowBufferSizeEvent` \u2705\r\n* Execute `tput reset`\r\n  Input line moves to row 0 \u2705",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-05T17:59:04Z",
        "closed_at": "2023-09-06T20:19:04Z",
        "merged_at": "2023-09-06T20:19:04Z",
        "body": "Closes #15661 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 52,
        "changed_files": 6,
        "created_at": "2023-09-05T13:14:09Z",
        "closed_at": "2023-09-08T22:43:33Z",
        "merged_at": "2023-09-08T22:43:33Z",
        "body": "This commit fixes 3 bugs:\r\n* `COOKED_READ_DATA` failed to initialize its `_distanceCursor` and\r\n  `_distanceEnd` members. I took this as an opportunity to make them\r\n  `ptrdiff_t`, to reduce the likelihood of overflows in the future.\r\n* `COOKED_READ_DATA::_writeChars` added `scrollY` to the written\r\n  distance, even though `WriteCharsLegacy` writes a negative value into\r\n  that out parameter. This was fixed by changing `WriteCharsLegacy` to\r\n  write positive values and by adding a debug assertion.\r\n* `StreamScrollRegion` calls `IncrementCircularBuffer` which causes a\r\n  synchronous (!) ConPTY flush to the output pipe (side note: this is\r\n  the primary reason why newlines are so slow in ConPTY).\r\n  Since cooked reads are supposed to behave like a pager and not write\r\n  into the scrollback, we temporarily mark the buffer as inactive\r\n  which prevents `TextBuffer` from snitching about it to VtEngine.\r\n\r\nEven after this change, there's still some weird behavior left:\r\n* You cannot move your cursor back beyond (0,0), because this isn't a\r\n  real pager-like implementation. That might be a neat future extension.\r\n* Writing a lot of text and pressing Ctrl+C doesn't properly place the\r\n  cursor and scroll the buffer, unless the cursor is at the end.\r\n  That might also be worth investigating in the future (minor issue).\r\n* When the viewport is full, backspacing more than 1 line of text\r\n  (using Ctrl+Backspace) doesn't erase all of the affected lines,\r\n  because `COOKED_READ_DATA::_erase` uses the same `WriteCharsLegacy`\r\n  function to write whitespace to erase that text. It's only gone\r\n  after typing one more character.\r\n  I've written the code to mostly fix this, but decided against it\r\n  as I considered the problem to be too niche to warrant extra code.\r\n\r\nCloses #15899\r\n\r\n## Validation Steps Performed\r\n* Generate some text to paste in PowerShell:\r\n  ```pwsh\r\n  \"\" + (0..512 | % { \"word\" + $_.ToString().PadLeft(4, \"0\") })\r\n  ```\r\n* Launch cmd.exe and paste that text\r\n* No flickering \u2705\r\n* No writing into the scrollback \u2705\r\n* No weird behavior when backspacing \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-05T11:24:52Z",
        "closed_at": "2023-09-05T21:24:01Z",
        "merged_at": "2023-09-05T21:24:01Z",
        "body": "When marking newly scrolled in rows as invalidated we used:\r\n```\r\nif (offset < 0)\r\n    ...\r\nelse\r\n    ...\r\n```\r\nBut it should've been:\r\n```\r\nif (offset < 0)\r\n    ...\r\nelse if (offset > 0)\r\n    ...\r\n```\r\nBecause now it always set the start of the invalidated rows range to 0.\r\n\r\nAdditionally, this includes a commented debug helper which I've used\r\nto figure out an unrelated bug. During that search I found this bug.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 68,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-09-02T19:14:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\nThis commit fixes the middle mouse button handler. The `PointerReleased` callback is registered, but it is not operational because, on the Release event, the mouse button is no longer pressed. We need to track its state and act accordingly.\r\n\r\nIssue was introduced by commit 05e7ea1423ede8ee67c3462fb04538fae5c9f9b2, which changed the event handler from `PointerPressed` to `PointerReleased`, rendering it inoperative. Instead, the default handler is used. The main issue is that when the close button is hidden with the `showCloseButton` option, the default handler no longer closes the tab on middle mouse clicks.\r\n\r\nAlso made it consistent with the Settings tab, which was never converted to `PointerReleased` and is still handled with a custom handler.\r\n\r\n## References and Relevant Issues\r\nRelated commit 05e7ea1423ede8ee67c3462fb04538fae5c9f9b2\r\n\r\n## Validation Steps Performed\r\nI've been using this commit locally for quite some time, figured out I might as well share it.\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 9,
        "changed_files": 13,
        "created_at": "2023-09-02T09:19:35Z",
        "closed_at": "2023-09-07T21:19:17Z",
        "merged_at": "2023-09-07T21:19:16Z",
        "body": "## Summary of the Pull Request\r\nCloses #7158 \r\n\r\nEnabling Acrylic as both an appearance setting (with all the plumbing), allowing it to be set differently in both focused and unfocused terminals. EnableUnfocusedAcrylic Global Setting that controls if unfocused acrylic is possible so that people can disable that behavior.\r\n\r\n## References and Relevant Issues\r\n#7158 , references: #15913 , #11092\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n### Allowing Acrylic to be set differently in both focused and unfocused terminals:\r\n\r\n#### A\r\n![A](https://github.com/microsoft/terminal/assets/15957528/c43965f2-f458-46ae-af1c-a2107dac981a)\r\n\r\n#### B\r\n![B](https://github.com/microsoft/terminal/assets/15957528/e84ef1a8-8f4c-467a-99c2-9427061b3e3e)\r\n\r\n#### C\r\n![C](https://github.com/microsoft/terminal/assets/15957528/63fd35ba-a55a-4c1a-8b1c-5b571aa902ed)\r\n\r\n#### D\r\n![D](https://github.com/microsoft/terminal/assets/15957528/05108166-1c6e-406e-aec0-80023fc3f57c)\r\n\r\n``` json\r\n\"profiles\":\r\n{\r\n    \"list\":\r\n    [\r\n        {\r\n            \"commandline\": \"pwsh.exe\",\r\n            \"name\": \"A\",\r\n            \"unfocusedAppearance\":\r\n            {\r\n                \"useAcrylic\": true,\r\n            },\r\n            \"useAcrylic\": true,\r\n        },\r\n        {\r\n            \"commandline\": \"pwsh.exe\",\r\n            \"name\": \"B\",\r\n            \"unfocusedAppearance\":\r\n            {\r\n                \"useAcrylic\": false,\r\n            },\r\n            \"useAcrylic\": true,\r\n        },\r\n        {\r\n            \"commandline\": \"pwsh.exe\",\r\n            \"name\": \"C\",\r\n            \"unfocusedAppearance\":\r\n            {\r\n                \"useAcrylic\": true,\r\n            },\r\n            \"useAcrylic\": false,\r\n        },\r\n        {\r\n            \"commandline\": \"pwsh.exe\",\r\n            \"name\": \"D\",\r\n            \"unfocusedAppearance\":\r\n            {\r\n            },\r\n            \"useAcrylic\": false,\r\n        },\r\n    ]\r\n}\r\n```\r\n\r\n- **A**: AcrylicBlur always on\r\n- **B**: Acrylic when focused, not acrylic when unfocused\r\n- **C**: Why the hell not. Not Acrylic when focused, Acrylic when unfocused.\r\n- **D:**  Possible today by not using Acrylic. \r\n\r\n### EnableUnfocusedACrylic global setting that controls if unfocused acrylic is possible\r\nSo that people can disable that behavior:\r\n![256926990-3c42d99a-67de-4145-bf41-ce3995035136](https://github.com/microsoft/terminal/assets/15957528/eef62c14-d2bd-4737-b86e-dcb3588eb8f7)\r\n\r\n### Alternate approaches I considered: \r\nUsing `_InitializeBackgroundBrush` call instead of `_changeBackgroundColor(bg)  in ``TermControl::_UpdateAppearanceFromUIThread`. Comments in this function mentioned:\r\n\r\n``` *.cs'\r\n// In the future, this might need to be changed to a\r\n// _InitializeBackgroundBrush call instead, because we may need to\r\n// switch from a solid color brush to an acrylic one.\r\n```\r\nI considered using this to tackle to problem, but don't see the benefit. The only time we need to update the brush is when the user changes the `EnableUnfocusedAcrylic ` setting which is already covered by `fire_and_forget TermControl::UpdateControlSettings`\r\n        \r\n### Supporting different Opacity in Focused and Unfocused Appearance???\r\nThis PR is split up in two parts #7158 covers allowing Acrylic to be set differently in both focused and unfocused terminals. And EnableUnfocusedAcrylic Global Setting that controls if unfocused acrylic is possible so that people can disable that behavior.\r\n\r\n#11092 will be about enabling opacity as both an appearance setting, allowing it to be set differently in both focused and unfocused terminals.\r\n\r\n### Skipping the XAML for now:\r\n\u201cI actually think we may want to skip the XAML on this one for now. We've been having some discussions about compatibility settings, global settings, stuff like this, and it might be _more- confusing to have you do something here. We can always add it in post when we decide where to put it.\u201d\r\n-- Mike Griese\r\n\r\n## Validation Steps Performed\r\n\r\n#### When Scrolling Mouse , opacity changes appropriately, on opacity 100 there are no gray lines or artefacts \r\n![edgecase_scrollwheel](https://github.com/microsoft/terminal/assets/15957528/29a1b11e-05b8-4626-abd2-4f084ae94a8d)\r\n\r\n![image](https://github.com/microsoft/terminal/assets/15957528/c05ea435-8867-4804-bcdc-2074df08cec1)\r\n\r\n#### When Adjusting Opacity through command palette, opacity changes appropriately, on opacity 100 there are no gray lines or artefacts\r\n![edgecase_adjustopacity](https://github.com/microsoft/terminal/assets/15957528/a59b4d6d-f12e-48da-96bb-3eb333ac4637)\r\n\r\n![image](https://github.com/microsoft/terminal/assets/15957528/c05ea435-8867-4804-bcdc-2074df08cec1)\r\n\r\n#### When opening command palette state goes to unfocused, the acrylic and color change appropriately\r\n![edge_case_command_palette](https://github.com/microsoft/terminal/assets/15957528/ec0cd8b5-676e-4235-8231-a10a5689c0b8)\r\n\r\n![image](https://github.com/microsoft/terminal/assets/15957528/4300df70-f64b-4001-8731-b3b69471ea78)\r\n\r\n#### Stumbled upon a new bug when performing validation steps #15913\r\n![264637964-494d4417-6a35-450a-89f7-52085ef9b546](https://github.com/microsoft/terminal/assets/15957528/fee59c4a-400b-4e40-912b-ea8c638fc979)\r\n\r\n## PR Checklist\r\n\r\n- [x] Closes #7158\r\n- [X] Tests added/passed\r\n- [X] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [x] Schema updated (if necessary)\r\n",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-31T19:39:39Z",
        "closed_at": "2023-09-05T16:42:06Z",
        "merged_at": "2023-09-05T16:42:05Z",
        "body": "https://github.com/microsoft/terminal/issues/15870#issuecomment-1701435579 is an important note I think deserves to be committed.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-31T16:23:15Z",
        "closed_at": "2023-09-05T21:25:10Z",
        "merged_at": "2023-09-05T21:25:10Z",
        "body": "I manually changed the permissions on `HKCU\\Console` to deny \"Create subkey\" to myself. Then confirmed that it explodes before this change, and not after this change.\r\n\r\nCloses #15458\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 39,
        "changed_files": 7,
        "created_at": "2023-08-31T15:23:10Z",
        "closed_at": "2023-09-06T13:51:06Z",
        "merged_at": "2023-09-06T13:51:06Z",
        "body": "`TerminalTab::_RecalculateAndApplyReadOnly` didn't know about whether a tab should be closable or not, based on the theme settings. Similarly (though, unreported), the theme update in `TerminalPage::_updateAllTabCloseButtons` didn't really know about readonly mode.\r\n\r\nThis fixes both these issues by moving responsibility for the tab close button visibility into `TabBase` itself.\r\n\r\nCloses #15902\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 21,
        "changed_files": 1,
        "created_at": "2023-08-31T11:13:40Z",
        "closed_at": "2023-08-31T16:28:22Z",
        "merged_at": "2023-08-31T16:28:22Z",
        "body": "Font features require us to skip the fast path via `GetTextComplexity`.\r\n`IDWriteTextLayout` handles it the same way internally.\r\n\r\nCloses #15896\r\n\r\n## Validation Steps Performed\r\n* Use Cascadia Code\r\n* Set `features: { \"ss19\": 1 }`\r\n* \"0\" has a dash in it instead of a dot \u2705",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-30T16:40:07Z",
        "closed_at": "2023-08-30T17:01:20Z",
        "merged_at": null,
        "body": "<img width=\"245\" alt=\"image\" src=\"https://github.com/microsoft/terminal/assets/189190/c6249e88-8ee6-4dc1-83db-b032648abf3d\">\r\n\r\nIt will be a lot easier to read if it looks like that.\r\n\r\nCurrently it looks like this:\r\n\r\n<img width=\"719\" alt=\"image\" src=\"https://github.com/microsoft/terminal/assets/189190/e36285b8-e9e6-457d-a86b-fc514af72221\">\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-30T15:40:08Z",
        "closed_at": "2023-08-30T20:25:37Z",
        "merged_at": "2023-08-30T20:25:37Z",
        "body": "This should allow the package to be installed without AppXSvc consulting the store or the licensing service.\r\n\r\nIt's free and open-source. It shouldn't need a license to run.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-08-30T15:37:54Z",
        "closed_at": "2023-09-05T11:14:34Z",
        "merged_at": "2023-09-05T11:14:33Z",
        "body": "`PaintCursor()` is only called when the cursor is visible, but we need\r\nto invalidate the cursor area even if it isn't. Otherwise a transition\r\nfrom a visible to an invisible cursor wouldn't be rendered.\r\n\r\nI'm confident that this closes #15199\r\n\r\n## Validation Steps Performed\r\n* Set blink duration extremely high\r\n* Launch pwsh.exe\r\n* Press Enter a few times\r\n* Press Ctrl+L\r\n* There are never 2 cursors visible, not even briefly \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 381,
        "deletions": 78,
        "changed_files": 43,
        "created_at": "2023-08-29T17:52:30Z",
        "closed_at": "2023-09-19T20:03:25Z",
        "merged_at": "2023-09-19T20:03:25Z",
        "body": "This PR is a few things:\r\n\r\n* part the first: Convert the `compatibility.reloadEnvironmentVariables` setting to a per-profile one.\r\n  * The settings should migrate it from the user's old global place to the new one.\r\n  * We also added it to \"Profile>Advanced\" while I was here.\r\n* Adds a new pair of commandline flags to `new-tab` and `split-pane`: `--inheritEnvironment` / `--reloadEnvironment`\r\n  * On `wt` launch, bundle the entire environment that `wt` was spawned with, and put it into the `Remoting.CommandlineArgs`, and give them to the monarch (and ultimately, down to `TerminalPage` with the `AppCommandlineArgs`). DO THIS ALWAYS.\r\n  * As a part of this, we\u2019ll default to _reloading_ if there\u2019s no explicit commandline set, and _inheriting_ if there is.\r\n    * For example, `wt -- cmd` would inherit, and `wt -p \u201cCommand Prompt\u201d` would reload.[^1]\r\n  * This is a little wacky, but we\u2019re trying to separate out the intentions here:\r\n    * `wt -- cmd` feels like \u201cI want to run cmd.exe (in a terminal tab)\u201d. That feels like the user would _like_ environment variables from the calling process. They\u2019re doing something more manual, so they get more refined control over it.\r\n    * `wt` (or `wt -p \u201cCommand Prompt\u201d`) is more like, \u201cI want to run the Terminal (or, my Command Prompt profile) using whatever the Terminal would normally do\u201d. So that feels more like a situation where it should just reload by default. (Of course, this will respect their settings here)\r\n\r\n## References and Relevant Issues\r\nhttps://github.com/microsoft/terminal/issues/15496#issuecomment-1692450231 has more notes. \r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\nThis is so VERY much plumbing. I'll try to leave comments in the interesting parts. \r\n\r\n## PR Checklist\r\n- [x] This is not _all_ of #15496. We're also going to do a `-E foo=bar` arg on top of this. \r\n- [x] Tests added/passed\r\n- [x] Schema updated\r\n\r\n[^1]: In both these cases, plus the `environment` setting, of course. ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 436,
        "deletions": 262,
        "changed_files": 9,
        "created_at": "2023-08-29T15:10:08Z",
        "closed_at": "2023-09-19T16:59:40Z",
        "merged_at": "2023-09-19T16:59:40Z",
        "body": "`Terminal` is used concurrently by at least 4 threads. The table\r\nbelow lists the class members and the threads that access them\r\nto the best of my knowledge. Where:\r\n* UI: UI Thread\r\n* BG: Background worker threads (`winrt::resume_background`)\r\n* RD: Render thread\r\n* VT: VT connection thread\r\n\r\n|                                    | UI | BG | RD | VT |\r\n|------------------------------------|----|----|----|----|\r\n| `_pfnWriteInput`                   | x  | x  |    | x  |\r\n| `_pfnWarningBell`                  |    |    |    | x  |\r\n| `_pfnTitleChanged`                 |    |    |    | x  |\r\n| `_pfnCopyToClipboard`              |    |    |    | x  |\r\n| `_pfnScrollPositionChanged`        | x  | x  |    | x  |\r\n| `_pfnCursorPositionChanged`        |    |    |    | x  |\r\n| `_pfnTaskbarProgressChanged`       |    |    |    | x  |\r\n| `_pfnShowWindowChanged`            |    |    |    | x  |\r\n| `_pfnPlayMidiNote`                 |    |    |    | x  |\r\n| `_pfnCompletionsChanged`           |    |    |    | x  |\r\n| `_renderSettings`                  | x  |    | x  | x  |\r\n| `_stateMachine`                    | x  |    |    | x  |\r\n| `_terminalInput`                   | x  |    |    | x  |\r\n| `_title`                           | x  |    | x  | x  |\r\n| `_startingTitle`                   | x  |    | x  |    |\r\n| `_startingTabColor`                | x  |    |    |    |\r\n| `_defaultCursorShape`              | x  |    |    | x  |\r\n| `_systemMode`                      |    | x  | x  | x  |\r\n| `_snapOnInput`                     | x  | x  |    |    |\r\n| `_altGrAliasing`                   | x  |    |    |    |\r\n| `_suppressApplicationTitle`        | x  |    |    | x  |\r\n| `_trimBlockSelection`              | x  |    |    |    |\r\n| `_autoMarkPrompts`                 | x  |    |    |    |\r\n| `_taskbarState`                    | x  |    |    | x  |\r\n| `_taskbarProgress`                 | x  |    |    | x  |\r\n| `_workingDirectory`                | x  |    |    | x  |\r\n| `_fontInfo`                        | x  |    | x  |    |\r\n| `_selection`                       | x  | x  | x  | x  |\r\n| `_blockSelection`                  | x  | x  | x  |    |\r\n| `_wordDelimiters`                  | x  | x  |    |    |\r\n| `_multiClickSelectionMode`         | x  | x  | x  |    |\r\n| `_selectionMode`                   | x  | x  | x  |    |\r\n| `_selectionIsTargetingUrl`         | x  | x  | x  |    |\r\n| `_selectionEndpoint`               | x  | x  | x  |    |\r\n| `_anchorInactiveSelectionEndpoint` | x  | x  | x  |    |\r\n| `_mainBuffer`                      | x  | x  | x  | x  |\r\n| `_altBuffer`                       | x  | x  | x  | x  |\r\n| `_mutableViewport`                 | x  |    | x  | x  |\r\n| `_scrollbackLines`                 | x  |    |    |    |\r\n| `_detectURLs`                      | x  |    |    |    |\r\n| `_altBufferSize`                   | x  | x  | x  | x  |\r\n| `_deferredResize`                  | x  |    |    | x  |\r\n| `_scrollOffset`                    | x  | x  | x  | x  |\r\n| `_patternIntervalTree`             | x  | x  | x  | x  |\r\n| `_lastKeyEventCodes`               | x  |    |    |    |\r\n| `_currentPromptState`              | x  |    |    | x  |\r\n\r\nOnly 7 members are specific to one thread and don't require locking.\r\nAll other members require some for of locking to be safe for use.\r\n\r\nTo address the issue this changeset adds `LockForReading/LockForWriting`\r\ncalls everywhere `_terminal` is accessed in `ControlCore/HwndTerminal`.\r\nAdditionally, to ensure these issues don't pop up anymore, it adds to\r\nall `Terminal` functions a debug assertion that the lock is being held.\r\n\r\nFinally, because this changeset started off rather modest, it contains\r\nchanges that I initially made without being aware about the extent of\r\nthe issue. It simplifies the access around `_patternIntervalTree` by\r\nmaking `_InvalidatePatternTree()` directly use that member.\r\nFurthermore, it simplifies `_terminal->SetCursorOn(!IsCursorOn())` to\r\n`BlinkCursor()`, allowing the code to be shared with `HwndTerminal`.\r\n\r\nIdeally `Terminal` should not be that much of a class so that we don't\r\nneed such coarse locking. Splitting out selection and rendering state\r\nshould allow deduplicating code with conhost and use finer locking.\r\n\r\nCloses #9617\r\n\r\n## Validation Steps Performed\r\nI tried to use as many Windows Terminal features as I could and fixed\r\nevery occurrence of `_assertLocked()` failures.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-29T12:11:40Z",
        "closed_at": "2023-08-29T16:47:27Z",
        "merged_at": "2023-08-29T16:47:27Z",
        "body": "Pattern tree coordinates are viewport-relative.\r\n\r\nCloses #15891\r\n\r\n## Validation Steps Performed\r\n* Print some text so the viewport scrolls down\r\n* Print a URL\r\n* URL is underlined on hover \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 35,
        "changed_files": 5,
        "created_at": "2023-08-28T17:54:41Z",
        "closed_at": "2023-09-18T15:53:46Z",
        "merged_at": "2023-09-18T15:53:46Z",
        "body": "This is a theoretical improvement for #15553 where Windows Terminal\r\ncrashed due to AtlasEngine accessing the soft font bitmap outside of\r\nbounds. The problem is that the soft font cell size was non-zero.\r\nThis PR hardens against such situations by checking whether the\r\nrequested soft font index is inside the bounds of the bitmaps.\r\nThe improvement couldn't be tested as it couldn't be reproduced.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 103,
        "deletions": 68,
        "changed_files": 2,
        "created_at": "2023-08-25T21:48:27Z",
        "closed_at": "2023-09-26T00:24:30Z",
        "merged_at": "2023-09-26T00:24:30Z",
        "body": "A carriage return (enter key) will increase the _distanceEnd by up to\r\nviewport-width many columns, since it increases the Y distance between\r\nthe start and end by 1 (it's a newline after all).\r\nThis will make _flushBuffer() think that the new _buffer is way longer\r\nthan the old one and so _erase() ends up not erasing the tail end of\r\nthe prompt, even if the new prompt is actually shorter.\r\n\r\nThis commit fixes the issue by separating the newline printing\r\nout from the regular text printing loops.\r\n\r\n## Validation Steps Performed\r\n* Run cmd.exe\r\n* Write \"echo hello\" and press Enter\r\n* Write \"foobar foo bar\" (don't press Enter)\r\n* Press F7, select \"echo hello\" and press Enter\r\n* Previous prompt says \"echo hello\" \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-08-25T21:40:55Z",
        "closed_at": "2023-08-28T11:23:18Z",
        "merged_at": "2023-08-28T11:23:18Z",
        "body": "This is a small optimization that makes COOKED_READ_DATA erase short\r\nruns of text more quickly. It's not really necessary to do this as\r\nthis code is not a hotpath, but I felt like it's neater this way.\r\nIt requires no heap allocations even for long runs of text.\r\n\r\n## Validation Steps Performed\r\n* Deleting text anywhere in a prompt erases it \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-08-24T15:38:55Z",
        "closed_at": "2023-08-24T19:11:42Z",
        "merged_at": "2023-08-24T19:11:42Z",
        "body": "Closes #15876 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 240,
        "deletions": 139,
        "changed_files": 5,
        "created_at": "2023-08-22T22:03:34Z",
        "closed_at": "2023-08-24T22:15:54Z",
        "merged_at": "2023-08-24T22:15:54Z",
        "body": "To make this happen, I moved most of `release.yml` into a shared _pipeline_ template (which is larger than a steps or jobs template). Most of the diffs are due to that move.\r\n\r\nIf you compare main:build/pipelines/release.yml against \r\ndev/duhowett/nightly-build:build/pipelines/templates-v2/pipeline-full-release-build.yml,\r\nyou will see that the changes are much more minimal than they look. (https://github.com/microsoft/terminal/pull/15869#issuecomment-1690384302)\r\n\r\nI also added a parameter to configure how long symbols will be kept. It defaults to 36530 days (which is the default for the PublishSymbols task! Yes, 100 years!) but nightly builds will get 15 days.",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 39,
        "deletions": 82,
        "changed_files": 10,
        "created_at": "2023-08-22T21:26:31Z",
        "closed_at": "2023-08-24T19:53:03Z",
        "merged_at": "2023-08-24T19:53:03Z",
        "body": "I originally just wanted to close #1104, but then discovered that hey, this event wasn't even used anymore. Excerpts of Teams convo:\r\n\r\n* [Snap to character grid when resizing window by mcpiroman \u00b7 Pull Request #3181 \u00b7 microsoft/terminal (github.com)](https://github.com/microsoft/terminal/pull/3181/files#diff-d7ca72e0d5652fee837c06532efa614191bd5c41b18aa4d3ee6711f40138f04c) added it to Tab.cpp\r\n  * where it was added \r\n  * which called `pane->Relayout` which I don't even REMEMBER\r\n* By [Add functionality to open the Settings UI tab through openSettings by leonMSFT \u00b7 Pull Request #7802 \u00b7 microsoft/terminal (github.com)](https://github.com/microsoft/terminal/pull/7802/files#diff-83d260047bed34d3d9d5a12ac62008b65bd6dc5f3b9642905a007c3efce27efd), there was seemingly no FontSizeChanged in Tab.cpp (when it got moved to terminaltab.cpp)\r\n \r\n\r\n> `Pane::Relayout` functionally did nothing because sizing was switched\r\n to `star` sizing at some point in the past, so it was just deleted.\r\n\r\nFrom [Misc pane refactoring by Rosefield \u00b7 Pull Request #11373 \u00b7 microsoft/terminal](https://github.com/microsoft/terminal/pull/11373/files#r736900998)\r\n\r\nSo, great. We can kill part of it, and convert the rest to a `TypedEvent`, and get rid of `DECLARE_` / `DEFINE_`.\r\n\r\n`ScrollPositionChangedEventArgs` was ALSO apparently already promoted to a typed event, so kill that too. \r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-22T19:24:39Z",
        "closed_at": "2023-08-23T12:25:16Z",
        "merged_at": "2023-08-23T12:25:16Z",
        "body": "Some folks over in MSAL land told us that client IDs don't need to be kept secret.\r\n\r\nThis reduces the delta between \"public\" terminal and \"release build\" terminal by one more file, leaving only the telemetry header left (which won't be going public for obvious reasons).\r\n\r\nThis will also make it easier for contributors to test out Azure Cloud Shell changes... and testing out VT without ConPTY interfering[^1].\r\n\r\n[^1]: When Dev branding is selected, Azure Cloud Shell has the added perk of being wired directly to TerminalCore rather than going through ConPTY.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 645,
        "deletions": 3,
        "changed_files": 226,
        "created_at": "2023-08-22T13:15:45Z",
        "closed_at": "2023-08-23T16:17:11Z",
        "merged_at": "2023-08-23T16:17:11Z",
        "body": "Obviously, icons are all wrong. Color is about right but they need CAN icons. \r\n\r\nI'll leave that as an exercise for @DHowett to generate the right ones as a follow-up. \r\n\r\nRelated to #774 ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-08-22T08:36:28Z",
        "closed_at": "2023-09-22T06:10:26Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nMocking up a switchable 'titlebarRow' and 'contentRow' in `NonClientIslandWindow.cpp`\r\n\r\n...it was both **easier than** expected *and* **works better** than expected:\r\n\r\n![image](https://github.com/microsoft/terminal/assets/4115323/bb8d5eb2-7ffc-4dd8-ae46-703cea3ee6bd)\r\n\r\n## References and Relevant Issues\r\n- microsoft/microsoft-ui-xaml#7032 \r\n- #8888\r\n- #10000\r\n- #11111\r\n- #13392\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThis is just a **very-very crude POC**, just to see if it's possible in the current implementation to place the tabs at the bottom, and mainly as an attempt to ***induce thought and spark discussion*** about ideas for streamlining UX around the `_quakeMode` window, particularly in relation to the settings panel (also considering the clutter of other terminal windows active at the same time, like elevated ones)\r\n\r\n## Checklists, Todos, etc., ... (as food for thought):\r\n\r\n- [x] switching the order of the titlebar and the content pane is rather straightforward \r\n- [x] window is draggable by the bottom titlebar, window controls work, tab drag and drop works between windows  \r\n\r\n  however, in it's current form it's far from being complete, both functionality/implementation and usability/design wise\r\n\r\n- [ ] **(dependency(?)** microsoft/microsoft-ui-xaml#7032 \r\n- [ ] **(bug)** tab tear-off sometimes places the bottom-titlebar below visible bounds.\r\n- [ ] **(to-do)** setting UI for displaying the tabs on bottom for the Quake Mode window only (maybe for all terminal windows?)\r\n  \r\n- [ ] **(to-discuss)** allow the Settings Pane to pop up/over the Quake Mode window (or All terminal windows) \r\nin **it's own, possibly centered / default-sized window** (in a *`_settingsMode` window*, so to speak).  \r\n  \r\n  ...as currently the wide + narrow shape of the quake mode window hinders the usability of the settings panel embedded in a tab. (see window shapes in the above screenshot at 1920\u00d71080, also considering keeping the current '1-column' design philosophy of the settings panel (which would lead to many of the options not being very visible at first glance, and would leave a lot of horizontal screen estate wasted)\r\n\r\n- [ ] **(to-develop)** unifying the elevated and non-elevated terminal processes into **one window** (using the shield icon per tab)\r\nfor example, and if possible, by proxying elevated terminal I/O using named pipes for IPC with a non-elevated monarch?\r\n\r\n\r\n### Thanks for bearing with me, and kudos for an already immensely useful app!",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-08-21T15:44:03Z",
        "closed_at": "2023-08-21T16:03:42Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\nThis PR improves the readability and robustness of the `CommandNumberPopup::_handleNumber()` function.\r\n\r\nChanges: \r\n* A comment was added to explain what the function does.\r\n* The `cookedReadData` object was made immutable.\r\n* A `using` directive was used to import the `std::size_t` type.\r\n* A `RAII` object was used to manage the `WriteCharsLegacy()` call.\r\n* A `catch(...)` block was used to catch any exceptions that are thrown by the `WriteCharsLegacy()` call.\r\n\r\n\r\n## PR Checklist\r\n- [ x] Closes #xxx\r\n- [x ] Tests added/passed\r\n- [x ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ x] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1035,
        "deletions": 952,
        "changed_files": 42,
        "created_at": "2023-08-21T12:34:40Z",
        "closed_at": "2023-08-24T22:56:40Z",
        "merged_at": "2023-08-24T22:56:40Z",
        "body": "The ultimate goal of this PR was to use ICU for text search to\r\n* Improve Unicode support\r\n  Previously we used `towlower` and only supported BMP glphs.\r\n* Improve search performance (10-100x)\r\n  This allows us to search for all results in the entire text buffer\r\n  at once without having to do so asynchronously.\r\n\r\nUnfortunately, this required some significant changes too:\r\n* ICU's search facilities operate on text positions which we need to be\r\n  mapped back to buffer coordinates. This required the introduction of\r\n  `CharToColumnMapper` to implement sort of a reverse-`_charOffsets`\r\n  mapping. It turns text (character) positions back into coordinates.\r\n* Previously search restarted every time you clicked the search button.\r\n  It used the current selection as the starting position for the new\r\n  search. But since ICU's `uregex` cannot search backwards we're\r\n  required to accumulate all results in a vector first and so we\r\n  need to cache that vector in between searches.\r\n* We need to know when the cached vector became invalid and so we have\r\n  to track any changes made to `TextBuffer`. The way this commit solves\r\n  it is by splitting `GetRowByOffset` into `GetRowByOffset` for\r\n  `const ROW` access and `GetMutableRowByOffset` which increments a\r\n  mutation counter on each call. The `Search` instance can then compare\r\n  its cached mutation count against the previous mutation count.\r\n\r\nFinally, this commit makes 2 semi-unrelated changes:\r\n* URL search now also uses ICU, since it's closely related to regular\r\n  text search anyways. This significantly improves performance at\r\n  large window sizes.\r\n* A few minor issues in `UiaTracing` were fixed. In particular\r\n  2 functions which passed strings as `wstring` by copy are now\r\n  using `wstring_view` and `TraceLoggingCountedWideString`.\r\n\r\nRelated to #6319 and #8000\r\n\r\n## Validation Steps Performed\r\n* Search upward/downward in conhost \u2705\r\n* Search upward/downward in WT \u2705\r\n* Searching for any of \u00df, \u1e9e, ss or SS matches any of the other \u2705\r\n* Searching for any of \u03a3, \u03c3, or \u03c2 matches any of the other \u2705",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-08-21T06:54:10Z",
        "closed_at": "2023-08-21T17:41:43Z",
        "merged_at": "2023-08-21T17:41:43Z",
        "body": "#### Fix warnings due to formatting during a clean build\r\n\r\nSeems like the compiler cares about them more than our formatter. Possibly introduced in https://github.com/microsoft/terminal/pull/15062\r\n\r\n## Validation Steps Performed\r\n- Tests passed",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-21T00:14:10Z",
        "closed_at": "2023-08-22T10:39:15Z",
        "merged_at": "2023-08-22T10:39:15Z",
        "body": "Switch the schema depending on the branding we're being built for\r\n\r\nEver since we started writing the entire settings file out ourselves,\r\nwe've had the opportunity to control which schema it uses.\r\n\r\nThis is a quality-of-life improvement for Preview users, and might make\r\nlife easier for Dev users as well.\r\n\r\nFor Debug builds, it even switches over to a local `file://` path to\r\nthe schema in the source directory!\r\n\r\nCloses #6601",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 110,
        "deletions": 32731,
        "changed_files": 67,
        "created_at": "2023-08-21T00:13:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 12
    },
    {
        "merged": true,
        "additions": 42,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-08-17T21:04:46Z",
        "closed_at": "2023-08-24T19:13:49Z",
        "merged_at": "2023-08-24T19:13:49Z",
        "body": "Closes the active checkboxes in #15845. I'll leave that open till we get to the endgame, I'm sure more will show up. \r\n\r\nCloses:\r\n\r\n- [x] Accessibility tags all have `CommandPalette_` strings \ud83e\udd23 \r\n- [x] useCommandline should leave the cursor at the _end_ of the input, not at the start\r\n- [x] useCommandline, when bottom-up, should leave the _last_ list item selected, not the first. \r\n- [x] ^ Probably applies to any changes to the filter text when bottom up.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-08-17T20:16:19Z",
        "closed_at": "2023-09-14T19:09:13Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nCurrently Terminal ignores the state flag passed from the VT progress sequence.\r\n\r\n### Errors\r\n![image](https://github.com/microsoft/terminal/assets/2091582/fe592957-6180-4778-8b21-b5c4652f35bf)\r\n\r\n### Warning\r\n![image](https://github.com/microsoft/terminal/assets/2091582/bdfd156a-907c-4212-8b53-c80ad8cb0a4b)\r\n\r\n### Normal\r\n![image](https://github.com/microsoft/terminal/assets/2091582/d3038ebb-0fde-45e9-a783-e107c573bd80)\r\n\r\n## References and Relevant Issues\r\n#6700 \r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\nThis change changes the default color of the progress ring to green. If errors are sent then the color changes to red. If warnings are detected the color changes to orange.\r\n\r\n## Validation Steps Performed\r\nTested end to end with tools that sends status updates.\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 19,
        "changed_files": 5,
        "created_at": "2023-08-17T16:52:46Z",
        "closed_at": "2023-08-21T18:09:18Z",
        "merged_at": "2023-08-21T18:09:18Z",
        "body": "The OneBranch build system relies on the *build container host* being able to publish all artifacts all at once. Therefore, our build steps must not publish any artifacts.\r\n\r\nI made it configurable so that the impact on existing pipelines was minimal.\r\n\r\nFor every job that produces artifacts and is part of the release pipeline, I am now exposing two variables that we can pass to OneBranch so that it can locate and name artifacts:\r\n- `JobOutputDirectory`, the output folder for the entire job\r\n- `JobOutputArtifactName`, the name of the artifact produced by the job\r\n\r\nI have also added a `variables` parameter to every job, so consuming pipelines can override or insert their own variables.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 74,
        "deletions": 34,
        "changed_files": 1,
        "created_at": "2023-08-17T15:58:41Z",
        "closed_at": "2023-08-21T20:18:37Z",
        "merged_at": "2023-08-21T20:18:36Z",
        "body": "Add test for subparameter based `GraphicOptions`.\r\n\r\n`GraphicsSingleWithSubParamTests` is added for subparameter based `GraphicOptions`. This should've been included with #15729.\r\n\r\nAlso, while working on #15795, I realized creating and passing subparameters for the tests is painful right now. I've added a small util `MakeSubParamsAndRanges(...)` that eases creating subparameters and subparameter ranges from a simple list of (lists of) subparameters.\r\n\r\n## Validation Steps Performed\r\n- All tests passed.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 265,
        "deletions": 140,
        "changed_files": 16,
        "created_at": "2023-08-17T15:32:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Basically, title. If you null out the icon, we'll automatically try to use the `commandline` as an icon (because we can now). We'll even be smart about it - `cmd.exe /k echo wassup` will still just use the ico of `cmd.exe`. \r\n\r\nThis doesn't work for `ubuntu.exe` (et. al), because that commandline is technically a reparse point, that doesn't actually have an icon associated with it. \r\nCloses #705\r\n\r\n`\"none\"` becomes our sentinel value for \"no icon\". \r\n\r\nThis will also use the same `NormalizeCommandLine` we use for commandline matching for finding the full path to the exe. \r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-08-16T19:13:44Z",
        "closed_at": "2023-08-21T18:55:50Z",
        "merged_at": "2023-08-21T18:55:50Z",
        "body": "We no longer multiplex PGO through the test runner. We also removed the compliance build.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-08-16T18:16:26Z",
        "closed_at": "2023-08-17T21:18:16Z",
        "merged_at": "2023-08-17T21:18:16Z",
        "body": "I put them in that package like 40 years ago to get them into the build system faster. They actually belong here.\r\n\r\nI made them based on SVGs the Azure Cloud Shell team shared with us.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-16T16:43:12Z",
        "closed_at": "2023-08-24T15:32:36Z",
        "merged_at": "2023-08-24T15:32:36Z",
        "body": "## Summary of the Pull Request\n\nAdd the relevant issue link to winget installation note.\n\n## References and Relevant Issues\n\nhttps://github.com/microsoft/terminal/issues/15663\n\n## PR Checklist\n- [ ] Closes #xxx\n- [ ] Tests added/passed\n- [ ] Documentation updated\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\n- [ ] Schema updated (if necessary)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 42,
        "changed_files": 4,
        "created_at": "2023-08-14T19:36:28Z",
        "closed_at": "2023-08-15T14:50:16Z",
        "merged_at": "2023-08-15T14:50:16Z",
        "body": "This does two bits:\r\n1. correctly marks our tests as failed in xUnit, so that AzDo will pick up that the tests have failed. \r\n2. Actually intentionally mark skipped tests as skipped in xUnit. We were doing this accidentally before.\r\n3. Add a CI step to log test failures in a way that they can show up on GitHub\r\n\r\n\r\nProbably regressed around #6992 and #4490.\r\n\r\n### details\r\n\r\n#### Part the first\r\nWe were relying on the MUX build scripts to convert our WTT test logs to xUnit format, which AzDo then ingests. That script we used relied on some WinUI-specific logic around retrying tests. They have some logic to auto-retry failed tests. They then mark a test as \"skipped\" if it passed less than some threshold of times. Since we were never setting that variable, we would mark a test as \"skipped\" if it had _0_ passes. So, all failures showed up on AzDo as \"skipped\". \r\n\r\nWhy didn't we notice this? Well, the `Run-Tests.ps1` script will still return `1` if _any_ tests failed. So the test job would fail if there was a failure, AzDo just wouldn't know which test it was. \r\n\r\n#### part the second\r\nUpdates `ConvertWttLogToXUnitLog` in `HelixTestHelpers.cs` to understand that a test can be skipped, in addition to pass/fail. Removes all the logic for dealing with retries, cause we didn't need that. \r\n\r\n#### part the third\r\nTAEF doesn't emit error messages in a way that AzDo can immediately pick up on which tests failed. This means that Github gives us this useless error message:\r\n![image](https://github.com/microsoft/terminal/assets/18356694/3be6de00-22e1-421c-93d4-176bd2be4cab)\r\nThat's the only \"error\" that AzDo knows about. \r\n\r\nThis PR changes that by adding a build step to manually parse the xUnit results, and log the names of any tests that failed. By logging them with a prefix of `##vso[task.logissue type=error]`, then AzDo will surface that text as an error message. GitHub can then grab that text and surface it too. \r\n\r\n### Addenda: Why aren't we using the VsTest module\r\nas noted in https://github.com/microsoft/terminal/pull/4490#issuecomment-583104982, the vstest module is literally 6x  slower than just running TAEF directly.\r\n\r\ncloses #7286",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 45,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-12T03:16:37Z",
        "closed_at": "2023-08-13T22:09:07Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 2,
        "changed_files": 6,
        "created_at": "2023-08-11T09:27:38Z",
        "closed_at": "2023-08-24T11:45:29Z",
        "merged_at": "2023-08-24T11:45:29Z",
        "body": "Added --appendCommandLine flag that when set, appends the command to the preset command in the profile instead of replacing it. \r\n\r\nPreviously, there was no good way to launch wt while running a command appended to the set command in the profile. Some uses include profiles that are set to login or start an application.\r\n\r\nAdditional comments: Looking for a review, and expecting additional changes that needs to be done. For example, I am not really sure on how to include the the option's information in the CallForHelp() screen. Also, would be great if someone could guide me on including tests for this new feature. Thanks!\r\n\r\nCloses #5528",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2023-08-10T21:35:15Z",
        "closed_at": "2023-08-10T22:13:36Z",
        "merged_at": "2023-08-10T22:13:36Z",
        "body": "It's unknown how this ever worked, or why it stopped working recently. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-08-10T19:39:56Z",
        "closed_at": "2023-08-11T13:17:18Z",
        "merged_at": "2023-08-11T13:17:18Z",
        "body": "This broke with https://github.com/microsoft/STL/pull/3721\r\nIt's a minor issue and a minor fix. :)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-08-08T22:43:54Z",
        "closed_at": "2023-08-15T19:50:48Z",
        "merged_at": "2023-08-15T19:50:48Z",
        "body": "Some fonts implement ligatures by replacing a string like \"&&\" with\r\na whitespace padding glyph, followed by the actual \"&&\" glyph which\r\nhas a 1 column advance width. In that case the algorithm in\r\n`_drawTextOverlapSplit` will get confused because it strictly scans\r\nthe input from left to right, searching for color changes.\r\nThe initial color is the glyph's color and so it breaks for such fonts\r\nbecause then the first split will retain the last column's color.\r\n\r\n## Validation Steps Performed\r\n* Use JetBrains Mono\r\n* Print ``\"`e[91m`&`e[96m&`e[m\"``\r\n* Red and blue `&` appear \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1637,
        "deletions": 3148,
        "changed_files": 63,
        "created_at": "2023-08-08T16:18:03Z",
        "closed_at": "2023-08-11T19:06:31Z",
        "merged_at": "2023-08-11T19:06:31Z",
        "body": "This pull request rewrites the entire Azure DevOps build system.\r\n\r\nThe guiding principles behind this rewrite are:\r\n\r\n- No pipeline definitions should contain steps (or tasks) directly.\r\n- All jobs should be in template files.\r\n- Any set of steps that is reused across multiple jobs must be in\r\n  template files.\r\n- All artifact names can be customized (via a property called\r\n  `artifactStem` on all templates that produce or consume artifacts).\r\n- No compilation happens outside of the \"Build\" phase, to consolidate\r\n  the production and indexing of PDBs.\r\n- **Building the project produces a `bin` directory.** That `bin`\r\n  directory is therefore the primary currency of the build. Jobs will\r\n  either produce or consume `bin` if they want to do anything with the\r\n  build outputs.\r\n- All step and job templates are named with `step` or `job` _first_,\r\n  which disambiguates them in the templates directory.\r\n- Most jobs can be run on different `pool`s, so that we can put\r\n  expensive jobs on expensive build agents and cheap jobs on cheap\r\n  build agents. Some jobs handle pool selection on their own, however.\r\n\r\nOur original build pipelines used the `VSBuild` task _all over the\r\nplace._ This resulted in Terminal being built in myriad ways, different\r\nfor every pipeline. There was an attempt at standardization early on,\r\nwhere `ci.yml` consumed jobs and steps templates... but when\r\n`release.yml` was added, all of that went out the window.\r\n\r\nThe new pipelines are consistent and focus on a small, well-defined set\r\nof jobs:\r\n\r\n- `job-build-project`\r\n    - This is the big one!\r\n    - Takes a list of build configurations and platforms.\r\n    - Produces an artifact named `build-PLATFORM-CONFIG` for the entire\r\n      matrix of possibilities.\r\n    - Optionally signs the output and produces a bill of materials.\r\n    - Admittedly has a lot going on.\r\n- `job-build-package-wpf`\r\n    - Takes a list of build configurations and platforms.\r\n    - Consumes the `build-` artifact for every config/platform\r\n      possibility, plus one for \"Any CPU\" (hardcoded; this is where the\r\n      .NET code builds)\r\n    - Produces one `wpf-nupkg-CONFIG` for each configuration, merging\r\n      all platforms.\r\n    - Optionally signs the output and produces a bill of materials.\r\n- `job-merge-msix-into-bundle`\r\n    - Takes a list of build configurations and platforms.\r\n    - Consumes the `build-` artifact for every config/platform\r\n    - Produces one `appxbundle-CONFIG` for each configuration, merging\r\n      all platforms for that config into one `msixbundle`.\r\n    - Optionally signs the output and produces a bill of materials.\r\n- `job-package-conpty`\r\n    - Takes a list of build configurations and platforms.\r\n    - Consumes the `build-` artifact for every config/platform\r\n    - Produces one `conpty-nupkg-CONFIG` for each configuration, merging\r\n      all platforms.\r\n    - Optionally signs the output and produces a bill of materials.\r\n- `job-test-project`\r\n    - Takes **one** build config and **one** platform.\r\n    - Consumes `build-PLATFORM-CONFIG`\r\n    - Selects its own pools (hardcoded) because it knows about\r\n      architectures and must choose the right agent arch.\r\n    - Runs tests (directly on the build agent).\r\n- `job-run-pgo-tests`\r\n    - Just like the above, but runs tests where `IsPgo` is `true`\r\n    - Collects all of the PGO counts and publishes a `pgc-intermediates`\r\n      artifact for that platform and configuration.\r\n- `job-pgo-merge-pgd`\r\n    - Takes **one** build config and multiple platforms.\r\n    - Consumes `build-$platform-CONFIG` for each platform.\r\n    - Consumes `pgc-intermediates-$platform-CONFIG` for each platform.\r\n    - Merges the `pgc` files into `pgd` files\r\n    - Produces a new `pgd-` artifact.\r\n- `job-pgo-build-nuget-and-publish`\r\n    - Consumes the `pgd-` artifact from above.\r\n    - Packs it into a `nupkg` and publishes it.\r\n- `job-submit-windows-vpack`\r\n    - Only expected to run against `Release`.\r\n    - Consumes the `appxbundle-CONFIG` artifact.\r\n    - Publishes it to a vpack for Windows to consume.\r\n- `job-check-code-format`\r\n    - Does not use artifacts. Runs `clang-format`.\r\n- `job-index-github-codenav`\r\n    - Does not use artifacts.\r\n\r\nFuzz submission is broken due to changes in the `onefuzz` client.\r\n\r\nI have removed the compliance and security build because it is no longer\r\nsupported.\r\n\r\nFinally, this pull request has some additional benefits:\r\n\r\n- I've expanded the PGO build phase to cover ARM64!\r\n- We can remove everything Helix-related except the WTT parser\r\n    - We no longer depend on Helix submission or Helix pools\r\n- The WPF control's inner DLLs are now codesigned (#15404)\r\n- Symbols for the WPF control, both .NET and C++, are published\r\n  alongside all other symbols.\r\n- The files we submit to ESRP for signing are batched up into a single\r\n  step[^1]\r\n\r\nCloses #11874\r\nCloses #11974\r\nCloses #15404\r\n\r\n[^1]: This will have to change if we want to sign the individual\r\nper-architecture `.appx` files before bundling so that they can be\r\ndirectly installed.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-08-08T14:21:45Z",
        "closed_at": "2023-08-08T16:15:16Z",
        "merged_at": "2023-08-08T16:15:16Z",
        "body": "## Summary of the Pull Request\r\n\r\nI updated the note prefix for blockquotes with GitHub latest built-in styles.\r\n\r\n## References and Relevant Issues\r\n\r\n- https://github.com/orgs/community/discussions/16925\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThis PR fixed the broken style due to their format change.\r\n\r\n## Related former Pull Request\r\n\r\n- https://github.com/microsoft/terminal/pull/13615\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-08-08T10:01:00Z",
        "closed_at": "2023-08-08T16:14:47Z",
        "merged_at": "2023-08-08T16:14:47Z",
        "body": "Carlos and I spent an hour rediscovering how to make this work. I figured it'd be best to leave notes behind for future archeologists.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-08-07T11:17:08Z",
        "closed_at": "2023-08-11T14:57:40Z",
        "merged_at": "2023-08-11T14:57:40Z",
        "body": "Change the \"good first issues\" text to talk about walkthroughs instead.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 758,
        "deletions": 240,
        "changed_files": 23,
        "created_at": "2023-08-06T07:32:25Z",
        "closed_at": "2023-09-08T18:38:05Z",
        "merged_at": "2023-09-08T18:38:05Z",
        "body": "Add support for underline style and color in VT.\r\n\r\nUnderline color sequence _SGR 58_ (unlike *SGR 38*, *SGR 48*) only works with sub parameters, eg. `\\e[58:5:<n>m` or `\\e[58:2::<r>:<g>:<b>m` will work, but something like `\\e[58;5;<n>m` won't work. This is a requirement for the implementation to avoid problems with VT clients that don't support sub parameters.\r\n\r\n## Detailed Description\r\n\r\n- Added `underlineColor` to `TextAttribute`, and `UnderlineStyle` into `CharacterAttributes`.\r\n- Added two new entries in `GraphicOptions` namely, `UnderlineColor` (58) and `UnderlineColorDefault` (59).\r\n- _SGR 58_ renders a sequence with sub parameters in the VT renderer.\r\n- _SGR 4:x_ renders a sequence with sub parameters in the VT renderer, except for single, double, and no-underline, which still use backward-compatible _SGR 4_, _SGR 21_ and _SGR 24_.\r\n- `XtermEngine` will send `\\e[4m` without any styling information. This means all underline style (except NoUnderline) will be rendered as single underline.\r\n\r\n## Reference issues\r\n- #7228\r\n\r\n### PR Checklist\r\n- [x] ~Use pre-calculated maps for efficient mapping between `CharacterAttributes` and `UnderlineStyle`.~ (Not required)\r\n- [x] update DECRARA, DECCARA to respect underline color and style.\r\n- [x] update DECRQSS to send underline color and style in the query response.\r\n- [x] update DECRQPSR/DECRSPS/DECCIR\r\n- [x] Tests added",
        "comments": 27
    },
    {
        "merged": true,
        "additions": 1410,
        "deletions": 7058,
        "changed_files": 59,
        "created_at": "2023-07-31T20:05:25Z",
        "closed_at": "2023-08-25T18:25:39Z",
        "merged_at": "2023-08-25T18:25:39Z",
        "body": "This massive refactoring has two goals:\r\n* Enable us to go beyond UCS-2 support for input editing\r\n* Bring clarity into `COOKED_READ_DATA`'s inner workings\r\n\r\nUnfortunately, over time, knowledge about its exact operation was lost.\r\nWhile the new code is still complex it reduces the amount of code by 4x\r\nwhich will make preserving knowledge hopefully significantly easier.\r\n\r\nThe new implementation is simpler and slower than the old one in a way,\r\nbecause every time the input line is modified it's rewritten to the text\r\nbuffer from scratch. This however massively simplifies the underlying\r\nalgorithm and the amount of state that needs to be tracked and results\r\nin a significant reduction in code size. It also makes it more robust,\r\nbecause there's less code now that can be incorrect.\r\n\r\nThis \"optimization laziness\" can be afforded due the recent >10x\r\nimprovements to `TextBuffer`'s text ingestion performance.\r\nFor short inputs (<1000 characters) I still expect this implementation\r\nto outperform the conhost from the past.\r\nIt has received one optimization already however: While reading text\r\nfrom the `InputBuffer` we'll now defer writing into the `TextBuffer`\r\nuntil we've stopped reading. This improves the overhead of pasting text\r\nfrom O(n^2) to O(n), which is immediately noticeable for inputs >100kB.\r\n\r\nResizing the text buffer still ends up corrupting the input line\r\nhowever, which unfortunately cannot be fixed in `COOKED_READ_DATA`.\r\nThe issue occurs due to bugs in `TextBuffer::Reflow` itself, as it\r\nmisplaces the cursor if the prompt is on the last line of the buffer.\r\n\r\nCloses #1377\r\nCloses #1503\r\nCloses #4628\r\nCloses #4975\r\nCloses #5033\r\nCloses #8008\r\n\r\nThis commit is required to fix #797\r\n\r\n## Validation Steps Performed\r\n* ASCII input \u2705\r\n* Chinese input (\u4e2d\u6587\u7dad\u57fa\u767e\u79d1) \u2754\r\n  * Resizing the window properly wraps/unwraps wide glyphs \u274c\r\n    Broken due to `TextBuffer::Reflow` bugs\r\n* Surrogate pair input (\ud83d\ude42) \u2754\r\n  * Resizing the window properly wraps/unwraps surrogate pairs \u274c\r\n    Broken due to `TextBuffer::Reflow` bugs\r\n* In cmd.exe\r\n  * Create 2 file: \"a\ud83d\ude0ab.txt\" and \"a\ud83d\ude1fb.txt\"\r\n  * Press tab: Autocompletes \"a\ud83d\ude0ab.txt\" \u2705\r\n  * Navigate the cursor right past the \"a\"\r\n  * Press tab twice: Autocompletes \"a\ud83d\ude1fb.txt\" \u2705\r\n* Backspace deletes preceding glyphs \u2705\r\n* Ctrl+Backspace deletes preceding words \u2705\r\n* Escape clears input \u2705\r\n* Home navigates to start \u2705\r\n* Ctrl+Home deletes text between cursor and start \u2705\r\n* End navigates to end \u2705\r\n* Ctrl+End deletes text between cursor and end \u2705\r\n* Left navigates over previous code points \u2705\r\n* Ctrl+Left navigates to previous word-starts \u2705\r\n* Right and F1 navigate over next code points \u2705\r\n  * Pressing right at the end of input copies characters\r\n    from the previous command \u2705\r\n* Ctrl+Right navigates to next word-ends \u2705\r\n* Insert toggles overwrite mode \u2705\r\n* Delete deletes next code point \u2705\r\n* Up and F5 cycle through history \u2705\r\n  * Doesn't crash with no history \u2705\r\n  * Stops at first entry \u2705\r\n* Down cycles through history \u2705\r\n  * Doesn't crash with no history \u2705\r\n  * Stops at last entry \u2705\r\n* PageUp retrieves the oldest command \u2705\r\n* PageDown retrieves the newest command \u2705\r\n* F2 starts \"copy to char\" prompt \u2705\r\n  * Escape dismisses prompt \u2705\r\n  * Typing a character copies text from the previous command up\r\n    until that character into the current buffer (acts identical\r\n    to F3, but with automatic character search) \u2705\r\n* F3 copies the previous command into the current buffer,\r\n  starting at the current cursor position,\r\n  for as many characters as possible \u2705\r\n  * Doesn't erase trailing text if the current buffer\r\n    is longer than the previous command \u2705\r\n  * Puts the cursor at the end of the copied text \u2705\r\n* F4 starts \"copy from char\" prompt \u2705\r\n  * Escape dismisses prompt \u2705\r\n  * Erases text between the current cursor position and the\r\n    first instance of a given char (but not including it) \u2705\r\n* F6 inserts Ctrl+Z \u2705\r\n* F7 without modifiers starts \"command list\" prompt \u2705\r\n  * Escape dismisses prompt \u2705\r\n  * Minimum size of 40x10 characters \u2705\r\n  * Width expands to fit the widest history command \u2705\r\n  * Height expands up to 20 rows with longer histories \u2705\r\n  * F9 starts \"command number\" prompt \u2705\r\n  * Left/Right paste replace the buffer with the given command \u2705\r\n    * And put cursor at the end of the buffer \u2705\r\n  * Up/Down navigate selection through history \u2705\r\n    * Stops at start/end with <10 entries \u2705\r\n    * Stops at start/end with >20 entries \u2705\r\n    * Wide text rendering during pagination with >20 entries \u2705\r\n  * Shift+Up/Down moves history items around \u2705\r\n  * Home navigates to first entry \u2705\r\n  * End navigates to last entry \u2705\r\n  * PageUp navigates by 20 items at a time or to first \u2705\r\n  * PageDown navigates by 20 items at a time or to last \u2705\r\n* Alt+F7 clears command history \u2705\r\n* F8 cycles through commands that start with the same text as\r\n  the current buffer up until the current cursor position \u2705\r\n  * Doesn't crash with no history \u2705\r\n* F9 starts \"command number\" prompt \u2705\r\n  * Escape dismisses prompt \u2705\r\n  * Ignores non-ASCII-decimal characters \u2705\r\n  * Allows entering between 1 and 5 digits \u2705\r\n  * Pressing Enter fetches the given command from the history \u2705\r\n* Alt+F10 clears doskey aliases \u2705",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 150,
        "deletions": 202,
        "changed_files": 12,
        "created_at": "2023-07-31T17:31:58Z",
        "closed_at": "2023-08-01T22:46:40Z",
        "merged_at": "2023-08-01T22:46:40Z",
        "body": "This commit slightly modernizes `CommandHistory` by leaning more heavily\r\non the STL container functionalities. For one, it uses for-range\r\niterations to loop through `_commands` instead of using `GetNth`\r\non every iteration. Another major improvement however is that\r\nthe code previously copied entire `CommandHistory` instances out of\r\nthe linked list `s_historyLists`, then removed the slot and copied\r\n(not moved!) that instance into the front again. Now it uses the\r\n`splice` function from `std::list` to do it in `O(1)` and virtually\r\ncost-free.\r\n\r\nAnother major improvement (and the one I'm personally interested in)\r\nis the switch from `SHORT` to `int32_t`. This will greatly simplify\r\nthe implementation of the future `COOKED_READ_DATA` class, as the\r\nlarger integer type will remove worries about over/underflow.\r\nFor instance, we can then just blindly increment/decrement the history\r\nposition and then only later clamp it to the expected range.\r\n\r\n## Validation Steps Performed\r\n* Existing history tests \u2705\r\n* History cycling with F8 \u2705\r\n* Navigating history with F7 \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 144,
        "changed_files": 4,
        "created_at": "2023-07-31T17:21:13Z",
        "closed_at": "2023-08-01T19:27:08Z",
        "merged_at": "2023-08-01T19:27:08Z",
        "body": "This change is a fairly subjective one. It was done because\r\n`IsValidStringBuffer` will very soon be the only function left\r\nin `cmdline.cpp`. Removing it allows removing `cmdline.cpp`.\r\nWhile the code that replaces it is somewhat tricky, it's also much\r\nmore straightforward, as the `IsValidStringBuffer` function didn't\r\njust check if the string buffer is valid - it also retrieved the\r\npointers to each of the strings contained in the buffer.\r\n\r\n## Validation Steps Performed\r\nExhaustively covered by conhost feature tests \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 185,
        "changed_files": 10,
        "created_at": "2023-07-31T17:17:27Z",
        "closed_at": "2023-08-01T16:13:52Z",
        "merged_at": "2023-08-01T16:13:52Z",
        "body": "This is a minor cleanup to deduplicate the two ReadConsole methods\r\nand will help with making changes to how `COOKED_READ_DATA` is called.\r\nIt additionally changes the initial data payload from a `string_view`\r\nto a `wstring_view` as it is guaranteed to be `wchar_t`.\r\nThis matches the current `COOKED_READ_DATA` implementation which\r\nblindly assumes that the initial data consists of `wchar_t`.\r\n\r\nCloses #5618",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2023-07-31T17:14:34Z",
        "closed_at": "2023-08-01T00:00:58Z",
        "merged_at": "2023-08-01T00:00:58Z",
        "body": "`COOKED_READ_DATA` is a little special and requires cursor navigation\r\nbased on the raw (buffered) text contents instead of what's in the\r\ntext buffer. This requires the introduction of new helper functions\r\nto implement such cursor navigation. They're made part of `TextBuffer`\r\nas these helpers will get support graphemes in the future.\r\nIt also helps keeping it close to `TextBuffer` as the cursor\r\nnavigation should optimally behave identical between the two.\r\n\r\nPart of #8000.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 248,
        "deletions": 272,
        "changed_files": 12,
        "created_at": "2023-07-27T18:55:46Z",
        "closed_at": "2023-08-24T15:31:10Z",
        "merged_at": "2023-08-24T15:31:10Z",
        "body": "This PR's goal is to allow something like a `Tab` to raise a ShortcutAction, by saying \"this action should be performed on ME\". We've had a whole category of these issues in the past:\r\n\r\n* #15734\r\n* #15760 \r\n* #13579\r\n* #13942\r\n* #13942\r\n* Heck even dating back to #10832\r\n\r\nSo, this tries to remove a bit of that footgun. This probably isn't the _final_ form of what this refactor might look like, but the code is certainly better than before. \r\n\r\nBasically, there's a few bits:\r\n\r\n* `ShortcutActionDispatch.DoAction` now takes a `sender`, which can be _anything_. \r\n* Most actions that use a \"Get the focused _thing_ then do something to it\" are changed to \"If there was a sender, let's use that - otherwise, we'll use the focused _thing_\". \r\n* TerminalTab was largely refactored to use this, instead of making requests to the `TerminalPage` to just do a thing to it. \r\n\r\nI've got a few TODO!s left, but wanted to get initial feedback. \r\n* [x] `TerminalPage::_HandleTogglePaneZoom`\r\n* [x] `TerminalPage::_HandleFocusPane`\r\n* [x] `TerminalPage::_MoveTab`\r\n\r\n\r\nCloses #15734",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 102,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-07-27T00:05:29Z",
        "closed_at": "2023-08-25T16:38:42Z",
        "merged_at": "2023-08-25T16:38:42Z",
        "body": "Uses the `RaiseNotificationEvent()` API from UIA automation peers to announce successful `MovePane` and `MoveTab` actions. The announcements are localized in the resw file.\r\n\r\nCloses #15159\r\nBased on #13575",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-07-26T23:25:40Z",
        "closed_at": null,
        "merged_at": null,
        "body": "It is very bad. They fail. A lot.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-07-25T22:34:48Z",
        "closed_at": "2023-07-26T23:25:19Z",
        "merged_at": "2023-07-26T23:25:19Z",
        "body": "When the OS' \"text size\" setting gets set to 200% and the display resolution is reduced quite a bit, we get some cropped text in the SUI's Default Terminal ComboBox. Turns out, we have a height set on the items. I went ahead and removed that so we don't crop the text. Everything looks good still!\r\n\r\nA similar issue occurs in the Profile > Appearance > Color Scheme ComboBox. I went ahead and fixed that too by removing the height restriction.\r\n\r\nOther minor changes:\r\n- fixed the comments\r\n- changed \"author and version\" row to \"auto\" instead of \"*\" (star sizing is great for proportional sizing, so we're not really taking advantage of it)\r\n\r\nCloses #15149",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 82,
        "deletions": 80,
        "changed_files": 2,
        "created_at": "2023-07-25T20:57:46Z",
        "closed_at": "2023-07-26T23:22:19Z",
        "merged_at": "2023-07-26T23:22:19Z",
        "body": "This pull request introduces the arm64 testing agents and a few build\r\nphases to use them.\r\n\r\nIn addition to running the ARM64 tests in CI, it makes the following\r\nchanges:\r\n\r\n- The x64 tests now run on equivalent x64 testing agents\r\n- We now run ARM64 builds (and tests!) on all pull requests\r\n- I've deduplicated a lot of the build and test stages\r\n- New queue-time parameters have been added to control various phases,\r\n  for quick pipeline testing\r\n- A bunch of conditions have been promoted to compile-time checks to\r\n  control the existence of stages and steps more tightly",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 110,
        "deletions": 2,
        "changed_files": 9,
        "created_at": "2023-07-25T17:51:08Z",
        "closed_at": "2023-09-19T17:01:30Z",
        "merged_at": "2023-09-19T17:01:30Z",
        "body": "## Summary of the Pull Request\r\nWhen a connection is Closed, show an indicator in the respective tab.\r\nWhen the active pane's connection is Closed, show a \"Restart Connection\" action in the right-click context menu and in the tab context menu.\r\n\r\n## Validation Steps Performed\r\n- Force close a connection, check the indicator is shown in the tab.\r\n- Right-click on pane shows the Restart Connection action if its connection is closed\r\n- Right-click on tab shows the Restart Connection action if the active pane's connection is closed\r\n- Indicator is cleared after connection is restarted (no panes in closed state)\r\n\r\n## PR Checklist\r\n- [x] Closes #14909 \r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 171,
        "deletions": 2,
        "changed_files": 10,
        "created_at": "2023-07-25T17:40:08Z",
        "closed_at": "2023-08-14T12:37:13Z",
        "merged_at": "2023-08-14T12:37:13Z",
        "body": "## Summary of the Pull Request\r\n\r\nThis adds a new experimental per-setting to the terminal. \r\n\r\n```ts\r\n\"experimental.moveCursorWithMouse\": bool\r\n```\r\n\r\nWhen:\r\n* the setting is on \r\n* AND you turn on shell integration (at least `133;B`)\r\n* AND you click is somewhere _after_ the \"active command\" mark\r\n\r\nwe'll send a number of simulated keystrokes to the terminal based off the number of cells between the place clicked and where the current mouse cursor is. \r\n\r\n\r\n## PR Checklist\r\n- [ ] Related to #8573. I'm not marking as _closed_, because we should probably polish this before we close that out. This is more a place to start.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThere was a LOT of discussion in #8573. This is kinda a best effort feature - it won't always work, but it should improve the experience _most of the time_. We all kinda agreed that as much as the shell probably should be responsible for doing this, there's myriad reasons that won't work in practicality:\r\n* That would also disable selection made by the terminal. That's a hard sell. \r\n* We'd need to invent some new mouse mode to support click-to-reposition-but-drags-to-select-I-don't-want\r\n* We'd then need shells to adopt that functionality.\r\n\r\nAnd eventually settled that this was the least horrifying comprimise.\r\n\r\nThis has _e d g e  c a s e s_: \r\n* Does it work for wrapped lines? Well, kinda okay actually.\r\n* Does it work for `vim`/`emacs`? Nope. \r\n* Does it work for emoji/wide glyphs? I wouldn't expect it to! I mean, emoji input is messed up anyways, right?\r\n* Other characters like `ESC` (which are rendered by the shell as two cells \"^[\")? Nope.\r\n* Does it do selections? Nope.\r\n* Clicking across lines with continuation prompts? Nope.\r\n* Tabs? Nope.\r\n* Wraps within tmux/screen? Nope.\r\n\r\nhttps://github.com/xtermjs/xterm.js/blob/master/src/browser/input/MoveToCell.ts has probably a more complete implementation of how we'd want to generate the keypresses and such. ",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-24T22:57:48Z",
        "closed_at": "2023-07-25T20:42:48Z",
        "merged_at": "2023-07-25T20:42:48Z",
        "body": "Adds an `AutomationProperty.Name` to the main grid in the `SettingContainer`. Doing so makes it so that the group of elements is considered a \"group \\<header\\>\".\r\n\r\nNow, when navigating with a screen reader, when you enter the group of elements, the \"group \\<header\\>\" will be presented. Thus, if the user navigates to the \"reset\" button, it'll be prefaced with a \"group \\<header\\>\" announcement first. If the user navigates to it from the other direction (the setting control), this announcement isn't made, but the user already has an understanding of what group of settings they're in, which is standard practice.\r\n\r\nCloses #15158 ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 17,
        "changed_files": 6,
        "created_at": "2023-07-24T21:49:38Z",
        "closed_at": "2023-07-25T20:19:42Z",
        "merged_at": "2023-07-25T20:19:42Z",
        "body": "Using our own pools like this gives us a lot of freedom in the tooling that's installed, the OS versions it targets, and when we take on Visual Studio updates.\r\n\r\nAs part of this effort, I've also stood up a \"small\" agent pool. At the time of this PR, that pool is using D2ads-v5 SKU VMs (2 vcore 8 GiB) versus the \"large\" agent pool's D8as-v5 (8 vcore 32 GiB). Smaller build tasks have been moved over to the small pool. Compilation's the hard part, so it gets to stay on the large pool.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 120,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-07-24T16:10:05Z",
        "closed_at": "2023-08-08T15:58:34Z",
        "merged_at": "2023-08-08T15:58:34Z",
        "body": "## Summary\r\nApplications like PowerToys, with their keyboard remapping features frequently (i.e whenever a remapped shortcut is triggerred) send `KeyEvent` with out-of-range virtual keycode values (E.g. 0xFF). This is fixed for WT in #7145, we just needed it in our good ol' `conhost`.\r\n\r\nAfter this PR, Key events with an invalid virtual keycode and scancode==0 are ignored, and are not added to the `InputBuffer`. Incase, only virtual keycode is valid but not scancode, we will try to infer the correct scancode using the virtual keycode mapping.\r\n\r\n## References and Relevant Issues\r\n#7145 \r\n#7064 \r\n\r\n## Validation Steps Performed\r\n\r\n- Triggered a remapped shortcut and verified that `showkey -a` doesn't output `^@` unexpectedly.\r\n- Key events with an Invalid virtual Keycode and Scancode == 0 are ignored.\r\n- This PR doesn't include any changes for `WM_[SYS][DEAD]CHAR` messages, they are left unchanged.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-23T17:51:37Z",
        "closed_at": "2023-07-27T00:13:50Z",
        "merged_at": "2023-07-27T00:13:49Z",
        "body": "Adds proper `type` for `SchemePair` definition to avoid warnings about matches of multiple schemas.\r\n\r\nSame fix as https://github.com/microsoft/terminal/pull/4045\r\n\r\n## Validation Steps Performed\r\n- Pointed $schema to local file instead of https://aka.ms/terminal-profiles-schema\r\n- Confirmed warning goes away when using a string\r\n- Confirmed using the light/dark object format still passes validation\r\n- Confirmed values like `\"colorScheme\": 3` no longer incorrectly pass validation whereas they would before",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 103,
        "deletions": 310,
        "changed_files": 6,
        "created_at": "2023-07-20T22:44:43Z",
        "closed_at": "2023-07-21T19:00:37Z",
        "merged_at": "2023-07-21T19:00:37Z",
        "body": "`s_TraceApi` was a magic function in Tracing that logged a different\r\nevent based on what type it was called with. It was bad for two reasons:\r\n\r\n1. I wanted to add a field to each trace indicating the originating\r\nprocess and thread. This would have required adding a `CONSOLE_API_MSG`\r\nparameter to _every instance_ of `s_TraceApi`, and even then it would\r\nhave not been particularly consistent.\r\n2. The design of Tracing, where the TraceLogging macros are hidden\r\ninside opaque functions, subverts the lightweight trace probe detection\r\npresent in `TraceLoggingWrite`. Every tracing probe turned into a call\r\nto a cold function which, in 99% of cases, returned immediately.\r\n\r\nTo that end, I've introduced a new macro _only_ to ApiDispatchers that\r\nemits a named probe with a set of preloaded information. It is a macro\r\nto avoid any unnecessary branching or the emission of any explicit\r\ntracing functions into the final binary.\r\n\r\nI have also removed the generic handler for timing any/all API calls, as\r\nwe never used them and they were largely redundant with the information\r\nwe were capturing from API-specific reports.\r\n\r\nI've also removed tracing from all APIs that do not mutate console\r\nstate. With the notable exception of ReadConsoleInput, we will see logs\r\nonly for things that change mutable console state.\r\n\r\nAll these things together allows us to construct a process+API-focused\r\ntimeline of console events, ala:\r\n\r\n```\r\ncmd.exe (20304)   CookedRead          pwsh                4                07/13/2023 22:02:53.751\r\ncmd.exe (20304)   API_GetConsoleMode  True\r\ncmd.exe (20304)   API_SetConsoleMode  False               0x00000003\r\ncmd.exe (20304)   API_SetConsoleMode  True                0x000001F7\r\npwsh.exe (4032)   ConsoleAttachDetach 07/13/2023 22:03:17.393              True                True\r\npwsh.exe (4032)   API_GetConsoleMode  False\r\npwsh.exe (4032)   API_GetConsoleMode  False\r\npwsh.exe (4032)   API_SetConsoleMode  False               0x00000007\r\n```\r\n\r\nThis pull request also switches the ConsoleAttachDetach and CookedRead\r\nreports to use the PID and FILETIME markings for their pids and\r\nfiletimes. This is compatible with the uint32 and uint64 fields that\r\nused to use those names, so anybody who was depending on them will\r\nexperience no change in functionality.\r\n\r\nI also switched up their order to make them more ergonomic in WPA when\r\ncombined with the other API_ tracing (as viewed above.)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 218,
        "deletions": 14,
        "changed_files": 5,
        "created_at": "2023-07-19T16:25:45Z",
        "closed_at": "2023-07-21T15:47:54Z",
        "merged_at": "2023-07-21T15:47:54Z",
        "body": "This PR adds support for **ITU's T.416 - ODA SGR  (38/48)** colour sequence, which makes use of colon instead of semi-colon as a parameter separator.\r\n\r\n- We use semi-colons as the only parameter separator while sending SGR color sequences to a ConPTY client. This is to keep backward compatibility.\r\n- In response to `DECRQSS` query, we have decided to use colons, as the major usecase for such queries are feature detection (whether client supports ODA colours), and tracking the original separator may add too much complexity to the codebase.\r\n\r\n## Validation Steps Performed\r\n\r\n- Made sure that we are always sending semi-colon separated parameters regardless of whether the original sequence used colons.\r\n- Made sure that we are always using colons as the parameter separator in a `DECRQSS` response.\r\n- Added new tests!\r\n\r\nCloses #15706",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 1,
        "changed_files": 6,
        "created_at": "2023-07-19T14:53:03Z",
        "closed_at": "2023-07-20T14:03:23Z",
        "merged_at": null,
        "body": "_\\*that we already support_\r\n\r\nVsCode has their own fork of the FTCS marks. Theirs uses `633` as the OSC prefix instead of `133`. This adds support to the Terminal for that format, as an alias for the FTCS marks we already support.\r\n\r\nThis does not add any of the other sequences we didn't already support.\r\n\r\nsee: #11000\r\nas complained about in #7434 ",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-07-19T00:30:54Z",
        "closed_at": "2023-07-20T22:25:23Z",
        "merged_at": "2023-07-20T22:25:23Z",
        "body": "Replace deprecated winrt::apartment_context pattern\r\n\r\nI only found 2 instances of this pattern in use and one of them was\r\nactually already replaced but the `co_await winrt::apartment_context`\r\ncode was still there.\r\n\r\nTested both window renaming and opening terminal with persisted layouts.\r\nBoth still work.\r\n\r\nCloses #12982 ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-07-18T19:31:07Z",
        "closed_at": "2023-08-01T16:45:11Z",
        "merged_at": null,
        "body": "Updated from 2.6.7 to 3.1.7",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-07-18T18:16:43Z",
        "closed_at": "2023-07-18T19:29:53Z",
        "merged_at": "2023-07-18T19:29:53Z",
        "body": "## Summary of the Pull Request\r\n\r\nAdd Christopher Nguyen to Readme cc @nguyen-dows\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-18T13:33:00Z",
        "closed_at": "2023-07-18T14:50:10Z",
        "merged_at": null,
        "body": "fixing issue on readme\r\nadding that current Terminal versions are not available via winget \r\nits my first issue \r\nlink to issue: https://github.com/microsoft/terminal/issues/15663#issue-1791733441\r\n## PR Checklist\r\n- [0 ] Closes #xxx\r\n- [0] Tests added/passed\r\n- [0 ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 68,
        "deletions": 12,
        "changed_files": 11,
        "created_at": "2023-07-15T20:47:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nAdded a key binding Toggle Acrylic \r\n\r\n## References and Relevant Issues\r\n#2531\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n![toggle acrylic v1](https://github.com/microsoft/terminal/assets/15957528/65d626d8-c4e8-494d-93d3-59d8099492e4)\r\n\r\n## Validation Steps Performed\r\nTested whether things are still working along with:\r\n* Mouse scroll wheel\r\n* Adjust opacity: ![image](https://github.com/microsoft/terminal/assets/15957528/0b834eaa-d0f8-4448-8a95-560d41848556)\r\n* Acrylic Off when they turn off transparency.\r\n\r\nIn both situations with \r\n![image](https://github.com/microsoft/terminal/assets/15957528/1859287c-389b-4ead-9d20-81f6baff5ef9)\r\n\r\n```\r\n\"useAcrylic\": true \r\n\"useAcrylic\": false\r\n```\r\n\r\n## PR Checklist\r\n- [ V] Closes #2531 \r\n- [X ] Tests added/passed\r\n- [ X] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [X] Schema updated (if necessary)\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-07-15T01:03:34Z",
        "closed_at": "2023-07-17T13:57:27Z",
        "merged_at": "2023-07-17T13:57:27Z",
        "body": "## Summary of the Pull Request\r\nFix C2664 errors under latest compiler.\r\n\r\n## References and Relevant Issues\r\n#15309\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n- Latest compilers are more strict\r\n- Internal background of change: [DevDiv:1810844](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1810844)\r\n\r\n## Validation Steps Performed\r\n- Now successfully builds under VS `17.8.0 Preview 1.0 `\r\n- Still successfully builds under VS `17.6.5`\r\n\r\n## PR Checklist\r\n- [x] Closes #15309\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 67,
        "deletions": 2,
        "changed_files": 8,
        "created_at": "2023-07-14T22:37:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n- Adds an event to the `TerminalPage` and `TerminalWindow` that can be raised when the terminal is closed with multiple tabs opened. This event can be handled in the `AppHost` by summoning the window.\r\n## References and Relevant Issues\r\n#12605 \r\n## Detailed Description of the Pull Request / Additional comments\r\nI initially implemented this as a `WINRT_CALLBACK` but it kind of stuck out in the host layer so I decided to switch it to a `TypedEvent`. This will also allow for information passing if so desired in the future.\r\n\r\n## Validation Steps Performed\r\nValidated that the window is brought to the foreground when multiple tabs are open so that the Confirm dialog is seen. Window is not summoned if only a single tab is open.\r\n\r\n## PR Checklist\r\n- [ ] Closes #12605 \r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-07-14T17:05:55Z",
        "closed_at": "2023-07-14T22:11:43Z",
        "merged_at": null,
        "body": "@googlemetamode =======@@@@@@@=======<superuserowner@gmail.com>==============\ud83e\uddda============================\r\n\r\n## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 110,
        "deletions": 83,
        "changed_files": 11,
        "created_at": "2023-07-14T12:38:55Z",
        "closed_at": "2023-07-18T18:35:19Z",
        "merged_at": "2023-07-18T18:35:19Z",
        "body": "This commit fixes a number of issues around horizontal scrolling.\r\nDxEngine only had one bug, where the clip rect would cause any content\r\noutside of the actual viewport to be invisible. AtlasEngine had more\r\nbugs, mostly around the conversion from textbuffer-relative coordinates\r\nto viewport-relative coordinates, since AtlasEngine stores things like\r\nthe cursor position, attributes, etc., relative to the viewport.\r\n\r\nIt also renames `cellCount` to `viewportCellCount`, because I realized\r\nthat it might have to deal with a `textBufferCellCount` or similar in\r\nthe future. I hope that the new name is more descriptive of what it\r\nrefers to.\r\n\r\nFuture improvements to AtlasEngine in particular would be to not copy\r\nthe entire `Settings` struct every time the horizontal scroll offset\r\nchanges, and to trim trailing whitespace before shaping text.\r\n\r\nThis is in preparation for #1860\r\n\r\n## Validation Steps Performed\r\n* Patch `RenderingTests` to run in the main (and not alt) buffer\r\n* Horizontal scrolling of line renditions and attributes works \u2705\r\n* Selection retains its position (mostly) \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 464,
        "deletions": 702,
        "changed_files": 20,
        "created_at": "2023-07-12T21:13:48Z",
        "closed_at": "2023-09-26T00:28:53Z",
        "merged_at": "2023-09-26T00:28:53Z",
        "body": "Subjectively speaking, this commit makes 3 improvements:\r\n* Most importantly, it now would work with arbitrary Unicode text.\r\n  (No more `IsGlyphFullWidth` or DBCS handling during reflow.)\r\n* Due to the simpler implementation it hopefully makes review of\r\n  future changes and maintenance simpler. (~3x less LOC.)\r\n* It improves perf. by 1-2 orders of magnitude.\r\n  (At 120x9001 with a full buffer I get 60ms -> 2ms.)\r\n\r\nUnfortunately, I'm not confident that the new code replicates the old\r\ncode exactly, because I failed to understand it. During development\r\nI simply tried to match its behavior with what I think reflow should do.\r\n\r\nCloses #797\r\nCloses #3088\r\nCloses #4968\r\nCloses #6546\r\nCloses #6901\r\nCloses #15964\r\nCloses MSFT:19446208\r\n\r\nRelated to #5800 and #8000\r\n\r\n## Validation Steps Performed\r\n* Unit tests \u2705\r\n* Feature tests \u2705\r\n* Reflow with a scrollback \u2705\r\n* Reflowing the cursor cell causes a forced line-wrap \u2705\r\n  (Even at the end of the buffer. \u2705)\r\n* `color 8f` and reflowing retains the background color \u2705\r\n* Enter alt buffer, Resize window, Exit alt buffer \u2705",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 602,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-07-12T19:25:21Z",
        "closed_at": null,
        "merged_at": null,
        "body": "> ## Abstract\r\n> \r\n> This spec outlines a mechanism by which users can define custom actions to run\r\n> when a string of text is written to the Terminal. This lets users create\r\n> powerful ways of automating their Terminal to match their own workflows. This\r\n> same mechanism can be used by third-party applications to customize the way the\r\n> terminal control automatically identifies links or other clickable regions of\r\n> the buffer, and handle it in their own way.\r\n\r\n* Specs #5916\r\n* Specs #8849\r\n* Specs #6969\r\n* References #7562, #2671, #11901, #11000\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-11T19:46:55Z",
        "closed_at": "2023-07-11T19:57:44Z",
        "merged_at": null,
        "body": "Boooom \r\nBabylone fallin..tiktaktiktak\r\nLa chose immonde qui cause la d\u00e9solation ph....\r\nBooooom\r\n\r\n## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 348,
        "deletions": 1,
        "changed_files": 8,
        "created_at": "2023-07-11T16:52:44Z",
        "closed_at": "2023-07-17T13:42:41Z",
        "merged_at": "2023-07-17T13:42:41Z",
        "body": "I wrote this tool to help me test the buffer reflow code in Windows\r\nTerminal. It needs to stay in sync with the buffer contents in ConPTY\r\nwhich is somewhat tricky to achieve. This tool will make this easier\r\nbecause it allows me to quickly, visually compare the contents.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-11T09:33:49Z",
        "closed_at": "2023-07-11T10:17:12Z",
        "merged_at": null,
        "body": "Boooom \r\nBabylone fallin..tiktaktiktak\r\nLa chose immonde qui cause la d\u00e9solation ph....\r\nBooooom\r\n\r\n## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 58,
        "deletions": 29,
        "changed_files": 4,
        "created_at": "2023-07-10T22:22:33Z",
        "closed_at": "2023-07-18T18:22:12Z",
        "merged_at": null,
        "body": "Some of the data privacy tags are wrong. I've updated them to be \"PDT_ProductAndServicePerformance\" since they are reporting an event that the system did, not the user.\n\n## References\n- https://www.osgwiki.com/wiki/DataES_NGP_Export#.22It_looks_like_the_datatype_on_my_telemetry_event_is_incorrect._How_do_I_fix_it.3F.22\n- https://www.osgwiki.com/wiki/Privacy_Data_Type_-_Tagging_in_Code\n- https://microsoft.visualstudio.com/OSGData/_git/client.pipelines/pullrequest/9257394?path=/SigX/DEL/DataES/Common/Resources/EventMetadata.json\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 236,
        "deletions": 127,
        "changed_files": 13,
        "created_at": "2023-07-10T19:35:02Z",
        "closed_at": "2023-07-18T21:10:58Z",
        "merged_at": "2023-07-18T21:10:58Z",
        "body": "## Summary of the Pull Request\r\n\r\nMove scroll marks to `TextBuffer`, so they can be cleared by EraseInDisplay and EraseScrollback.\r\n\r\nAlso removes the namespacing on them.\r\n\r\n## References and Relevant Issues\r\n* see also #11000 and #15057\r\n* Resize/Reflow _doesn't_ work yet and I'm not attempting this here. \r\n\r\n## Validation Steps Performed\r\n\r\n* `cls` works\r\n* `Clear-Host` works\r\n* `clear` works\r\n* the \"Clear buffer\" action works\r\n* They work when there's marks above the current viewport, and clear the scrollback\r\n* they work if you clear multiple \"pages\" of output, then scroll back to where marks previously were\r\n* resizing doesn't totally destroy the marks\r\n\r\n## PR Checklist\r\n- [x] Closes #15426\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-07-08T21:02:28Z",
        "closed_at": "2023-07-20T16:09:57Z",
        "merged_at": "2023-07-20T16:09:57Z",
        "body": "## Summary of the Pull Request\r\nAdd support for running profiles in the Add Tab drop down as administrator without a keyboard.\r\n## References and Relevant Issues\r\n#14517 \r\n## Detailed Description of the Pull Request / Additional comments\r\nThis pull request adds a FlyoutMenu to each Profile entry in the Add New tab drop down. When a profile is right clicked or held for 2 seconds in the case of no mouse input will present a MenuItem to allow the user to click and run the selected profile as administrator\r\n## Validation Steps Performed\r\n- Responds to pointer input events (mouse, pointer, touchpad)\r\n- Adjusts to theme changes.\r\n- Only shows when a profile is selected. Will not show on settings or pallete entries\r\n\r\n## PR Checklist\r\n- [x] Closes #14517 \r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-07T23:02:26Z",
        "closed_at": "2023-07-17T19:27:06Z",
        "merged_at": "2023-07-17T19:27:06Z",
        "body": "## Summary of the Pull Request\r\n\r\nAdds a background to key chord border in the CommandPalette Screen. This prevents certain accent colors from rendering the KeyChords unreadable.\r\n\r\nBefore (where the text is unreadble);\r\n![image](https://github.com/microsoft/terminal/assets/33658638/370fa7c7-f42e-48b3-af54-6fe7d5f89c73)\r\n\r\nAfter (from this PR):\r\n![image](https://github.com/microsoft/terminal/assets/33658638/5ce8601a-80f2-4efe-9270-9dd7209cdfff)\r\n\r\nSee #15228 for more details\r\n\r\n\r\nCloses #15228",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-07-07T15:00:39Z",
        "closed_at": "2023-07-18T14:49:14Z",
        "merged_at": "2023-07-18T14:49:14Z",
        "body": "Adds a note to the ReadMe's installation instructions which describes why current versions of Terminal are unavailable via winget.\r\n\r\n## PR Checklist\r\n- [x] Closes #15663 \r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 786,
        "deletions": 2278,
        "changed_files": 54,
        "created_at": "2023-07-07T13:17:56Z",
        "closed_at": "2023-08-11T14:06:09Z",
        "merged_at": "2023-08-11T14:06:09Z",
        "body": "`IInputEvent` makes adding Unicode support to `InputBuffer` more\r\ndifficult than necessary as the abstract class makes downcasting\r\nas well as copying quite verbose. I found that using `INPUT_RECORD`s\r\ndirectly leads to a significantly simplified implementation.\r\n\r\nIn addition, this commit fixes at least one bug: The previous approach\r\nto detect the null key via `DoActiveModifierKeysMatch` didn't work.\r\nAs it compared the modifier keys as a bitset with `==` it failed to\r\nmatch whenever the numpad key was set, which it usually is.\r\n\r\n## Validation Steps Performed\r\n* Unit and feature tests are \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 106,
        "deletions": 112,
        "changed_files": 2,
        "created_at": "2023-07-07T12:54:00Z",
        "closed_at": "2023-07-18T18:16:03Z",
        "merged_at": "2023-07-18T18:16:03Z",
        "body": "This commit inlines `EventsToUnicode` into `WriteConsoleInputAImpl`\r\nbecause soon we'll not use deques for events anymore and so the old\r\ncode won't work. It cleans up the implementation because I intend to\r\nmove all this code directly into `InputBuffer` to have a better and\r\ntighter control over how text gets converted. UTF-8 input for instance\r\nrequires the storage of up to 3 input events and this code is not fit\r\nto handle that. It's also unmaintainable because our input handling\r\ncode shouldn't be spread over a dozen files either. \ud83d\ude04\r\n\r\n## Validation Steps Performed\r\n* Unit and feature tests are \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 74,
        "deletions": 175,
        "changed_files": 3,
        "created_at": "2023-07-07T12:50:29Z",
        "closed_at": "2023-07-12T17:18:17Z",
        "merged_at": "2023-07-12T17:18:17Z",
        "body": "This reverts a number of changes to input handling to how it used to be\r\nin conhost v1. It merges the input event coalescing logic into a single\r\nfunction and inlines the console suspension event handling, because\r\nsoon these functions will receive `std::span` arguments which cannot\r\nbe preprocessed anymore, unlike a `std::deque`.\r\n\r\nIt also adds back support for Ctrl-S being an alias for VK_PAUSE\r\nwhich was lost in commit fccc7410 in 2018.\r\n\r\nCloses #809\r\n\r\n## Validation Steps Performed\r\n* Unit and feature tests are \u2705\r\n* Ctrl-S pauses output \ud83c\udf89",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-07-06T21:27:32Z",
        "closed_at": "2023-07-07T10:46:06Z",
        "merged_at": "2023-07-07T10:46:06Z",
        "body": "The DWMWA for this has been documented for quite a while now!\r\n\r\nI've also updated to a version of TerminalThemeHelpers that removes all the Dark Theme exports.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 81,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-07-06T21:11:22Z",
        "closed_at": "2023-07-20T20:20:11Z",
        "merged_at": null,
        "body": "_\u26a0\ufe0f targets #15665 \u26a0\ufe0f_\r\n\r\n## Summary of the Pull Request\r\nAdds some missing settings to the compatibility page. These don't have any controls in the SUI yet, so I chose these. There's plenty of room for more. Lots of these were added in 1.18, just never got a SUI treatment. \r\n\r\nPage looks like this now:\r\n\r\n![image](https://github.com/microsoft/terminal/assets/18356694/dfb6a820-7593-44ca-918f-0a71df2009c1)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 57,
        "changed_files": 12,
        "created_at": "2023-07-06T21:03:30Z",
        "closed_at": "2023-07-20T20:20:26Z",
        "merged_at": null,
        "body": "_\u26a0\ufe0f targets #14938 \u26a0\ufe0f_\r\n\r\nAs discussed at length on Teams. As we add more compat flags here and there, we want a more generic page for configuring them. We'll start with this page. \r\n\r\nThis PR REALLY doesn't do much except rename it. ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 255,
        "deletions": 56,
        "changed_files": 11,
        "created_at": "2023-07-06T15:19:45Z",
        "closed_at": "2023-08-15T19:01:35Z",
        "merged_at": "2023-08-15T19:01:35Z",
        "body": "_targets #15027_\r\n\r\nAdds a new suggestion source, `tasks`, that allows a user to open the Suggestions UI with `sendInput` commands saved in their settings. `source` becomes a flag setting, so it can be combined like so:\r\n\r\n```json\r\n        {\r\n            \"keys\": \"ctrl+shift+h\", \"command\": { \"action\": \"suggestions\", \"source\": \"commandHistory\", \"useCommandline\":true },\r\n        },\r\n        {\r\n            \"keys\": \"ctrl+shift+y\", \"command\": { \"action\": \"suggestions\", \"source\": \"tasks\", \"useCommandline\":false },\r\n        },\r\n        {\r\n            \"keys\": \"ctrl+shift+b\", \"command\": { \"action\": \"suggestions\", \"source\": [\"all\"], \"useCommandline\":true },\r\n        },\r\n```\r\n\r\nIf a nested command has `sendInput` commands underneath it, this will build a tree of commands that only include `sendInput`s as leaves (but leave the rest of the nesting structure intact).\r\n\r\n\r\n## References and Relevant Issues\r\n\r\nCloses #1595\r\n\r\nSee also #13445 \r\nAs spec'd in #14864 \r\n\r\n## Validation Steps Performed\r\n\r\nTested manually",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-07-06T12:08:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nFix Quake Mode reveal animation tears/flickers. After this PR, Quake Mode slide animation will be smoother.\r\n## References and Relevant Issues\r\n- https://github.com/microsoft/terminal/issues/12293\r\n- https://github.com/microsoft/terminal/issues/12121\r\n## Detailed Description of the Pull Request / Additional comments\r\nIn slow motion, the old animation looks like this, \r\n![](https://user-images.githubusercontent.com/32858525/243064611-00468c83-26d1-452d-8a63-d40396fc8dd3.gif)\r\nand the new animation looks like this.\r\n![](https://user-images.githubusercontent.com/32858525/243064621-a81f7624-16ab-4ba5-bb5d-2d896912cf3e.gif)\r\n\r\nWIP:\r\n- [ ] We need to decrease the default animationDuration.\r\n- [ ] **We need to hide the windows border.(I've tried various methods but can't seem to hide it. I need help)**\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #12293\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 87,
        "deletions": 56,
        "changed_files": 6,
        "created_at": "2023-07-05T17:42:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\nThis Pull Request addresses issue #15421. The system menu opened on the incorrect monitor in a multi-monitor setup when the terminal was maximized.\r\n\r\n## References and Relevant Issues\r\n\r\nIssue: #15421\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThe problem was due to the positioning calculations for the system menu not considering that maximized windows have borders that extend beyond the monitor. This also affected the terminal in the borderless fullscreen (F11) mode.\r\n\r\nIn this PR, I've updated the positioning calculations to correctly account for the extended borders of maximized windows, ensuring that the system menu appears in the correct location on all monitors and in all display states, including the borderless fullscreen mode.\r\n\r\nAdditionally, this PR introduces extensive error checking and logging, which will assist in identifying and addressing similar issues in the future.\r\n\r\nhttps://devblogs.microsoft.com/oldnewthing/20150304-00/?p=44543\r\n\r\n## Validation Steps Performed\r\n\r\nI've validated this fix manually under various scenarios, including different monitor configurations, placements, and display states. The system menu now consistently opens correctly in all tested cases.\r\n\r\nTAEF tests runner, no change.\r\n\r\n## PR Checklist\r\n- [x] Closes #15421",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 483,
        "deletions": 51,
        "changed_files": 8,
        "created_at": "2023-07-03T15:47:55Z",
        "closed_at": "2023-07-18T18:28:46Z",
        "merged_at": "2023-07-18T18:28:46Z",
        "body": "Adds support for colon `:` separated sub parameters in parser. Technically, after this PR, nothing should change except, now sub parameters are parsed, stored safely and we don't invalidate the whole sequence when a `:` is received within a parameter substring.\r\n\r\nIn this PR:\r\n- If sub parameters are detected with a parameter, but the usage is unrecognised, we simply *skip* the parameter in `adaptDispatch`. \r\n- A separate store for sub parameters is used to avoid too many changes to the codebase.\r\n- We currently allow up to `6` sub parameters for each parameter, extra sub parameters are *ignored*.\r\n- Introduced `VTSubParameters` for easy access to underlying sub parameters.\r\n\r\n> **Info**: We don't use sub parameters for any feature yet, this is just the core implementation to support newer usecases.\r\n\r\n## Validation Steps Performed\r\n- [x] Use of sub parameters must not have any effect on the output.\r\n- [x] Skip parameters with unexpected set of sub parameters.\r\n- [x] Skip sequences with unexpected set of sub parameters.\r\n\r\nReferences #4321\r\nReferences #7228\r\nReferences #15599\r\nReferences https://github.com/xtermjs/xterm.js/pull/2751\r\nCloses #4321",
        "comments": 26
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-06-29T19:47:38Z",
        "closed_at": "2023-06-29T20:48:55Z",
        "merged_at": "2023-06-29T20:48:55Z",
        "body": "When we moved the settings UI to lazy initialization in #15628, we broke PGO. Apparently, we were PGOing the tiny part of Settings that was being loaded on every launch (e.g. the XAML metadata provider \ud83e\udd26)\r\n\r\nLet's actually PGO launching the settings.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 119,
        "deletions": 1338,
        "changed_files": 17,
        "created_at": "2023-06-29T15:22:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "\u26a0\ufe0f This is just an idea for discussion. What do you all think about this?\r\n\r\n\u274c This cannot be merged as is, because I modified `Terminal::_systemMode`, but I actually need to transmit the `DISABLE_NEWLINE_AUTO_RETURN` flag from the conhost side properly. I don't know how to do that and only after I do, this can be merged.\r\n\r\nThis follows a different approach than the original. Instead of splitting the console API into a non-VT and VT style implementation via an interface and virtual dispatch, this one will focus on using if/else conditions. Most importantly, it hooks into `WriteChars()` to bypass the `VtEngine` renderer and send the given input directly to the ConPTY client. This ensures we preserve the VT input as-is and improves throughput ~7x.\r\n\r\nMy hope is that in the future we don't disable `VtEngine`, but rather enable it for all console APIs individually and flush it before returning from the console call. Then we can work towards reimplementing each such console API in terms of VT sequences if ConPTY is enabled (i.e. using `if()` and early returns).\r\n\r\nThis still doesn't work 100% with pwsh. It doubles each typed character and then only removes every second character when backspacing. I can't quite figure out what's going on.\r\n\r\n## Validation Steps Performed\r\nTBD",
        "comments": 17
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-06-28T18:13:48Z",
        "closed_at": "2023-06-28T20:32:51Z",
        "merged_at": "2023-06-28T20:32:51Z",
        "body": "Due to an implementation detail in the Xaml compiler--which wants to ensure that all metadata providers on an App are available immediately--we were eagerly loading the settings UI DLL and all of its dependencies, even in sessions where the user was not going to open Settings.\r\n\r\nBy turning off eager provider generation and handling it ourselves, we get to control exactly when the settings UI is loaded.\r\n\r\nThis required some gentle poking-through of the barrier between App and Page, but it is almost certainly worth it.\r\n\r\nTurning on the Xaml code generation flag to not generate providers automatically adds an `AddProvider` member to the internal interface for the autogenerated XamlMetadataProvider. We needed to switch to using the internal interface rather than the projected type in our custom App base class to get at it.\r\n\r\nProviders that App/Page use must be initialized by the time we start the WindowsXamlManager, so we load Control and Controls (ha) eagerly and early.\r\n\r\nIt looks like it may save 400ms of CPU time (?) on startup.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 22,
        "changed_files": 2,
        "created_at": "2023-06-28T13:12:54Z",
        "closed_at": "2023-06-29T20:49:57Z",
        "merged_at": "2023-06-29T20:49:57Z",
        "body": "This fixes a bug reported internally that occurs when resizing the\r\nterminal while also scolling the contents. The easiest way to reproduce\r\nit is to resize the terminal to 0 rows, but it's much more prominent\r\nin a debug build where everything goes out of sync almost immediately.\r\n\r\nThe underlying issue is that `VtEngine::_wrappedRow` may contain an\r\noffset that is outside of the viewport bounds, because reflowing and\r\nscrolling aren't properly synchronized. The previous `bitmap` code\r\nwould then throw an exception for such invalid coordinates and cause\r\nthe internal `VtEngine` state to be broken. Once `_wrappedRow` got\r\nto a negative value at least once, it would stay that way unless you're\r\nscrolling up. If the contents are actively scrolling it would quickly\r\nreach a negative value from which it can never recover. At that point\r\nOpenConsole would enter a tight exception-throw-catch-retry loop\r\nand Windows Terminal seemingly cease to show any content.\r\n\r\n## Validation Steps Performed\r\n* Resize WT to the minimal window size repeatedly\r\n* Doesn't hang \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-06-27T18:19:01Z",
        "closed_at": "2023-06-30T16:35:06Z",
        "merged_at": "2023-06-30T16:35:06Z",
        "body": "The WPF control has a minor bug where it initializes the renderer\r\nwhen there isn't even a window yet. When it then calls `SetWindowSize`\r\nit'll pass the result of `GetWindowRect` which is `0,0,0,0`.\r\nThis made AtlasEngine unhappy because it restricted the glyph atlas\r\nsize to some multiple of the window size. If the window size is `0,0`\r\nthen there couldn't be a glyph atlas and so it crashed.\r\n\r\n## Validation Steps Performed\r\n* Fixes WPF test control crash on startup \u2705",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-06-27T18:02:53Z",
        "closed_at": "2023-06-27T21:42:21Z",
        "merged_at": "2023-06-27T21:42:21Z",
        "body": "UiaRaiseNotificationEvent is not present on Windows Server 2016, even though it is documented as being present.\r\nThis also removes the cost of loading up UIAutomationCore from the critical path.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 656,
        "deletions": 1072,
        "changed_files": 14,
        "created_at": "2023-06-27T16:12:38Z",
        "closed_at": "2023-06-30T16:37:54Z",
        "merged_at": "2023-06-30T16:37:54Z",
        "body": "`TerminalInput` is configurable, but almost entirely state-less.\r\nAs such it isn't helpful that it emits its output via a callback.\r\nIt makes tracing the flow of data harder purely from reading the code\r\nand also raises uncertainty about when `TerminalInput` may generate\r\noutput. This commit makes it more robust by having `TerminalInput`\r\nsimply return its data. Furthermore, it returns that data as a string\r\ninstead of converting back and forth between text and `IInputEvent`.\r\n\r\nThis change will help me make conhost's `InputBuffer` implementation\r\nleaner and help me confidently make more difficult changes to it\r\nwith the goal to improve our Unicode support/correctness.\r\n\r\n## Validation Steps Performed\r\n* Windows Terminal produces correct results with `showkey -a` \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-06-27T11:51:03Z",
        "closed_at": "2023-06-27T22:14:42Z",
        "merged_at": "2023-06-27T22:14:42Z",
        "body": "This commit reduces GdiEngine's average display latency by 8ms,\r\nwhich caused it to miss a v-blank about half the time at 60Hz.\r\n\r\nCloses #15607\r\n\r\n## Validation Steps Performed\r\nInput latency with `frarees/typometer` matches conhost from Win10 \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 67,
        "deletions": 76,
        "changed_files": 8,
        "created_at": "2023-06-26T15:17:45Z",
        "closed_at": "2023-06-27T15:50:52Z",
        "merged_at": "2023-06-27T15:50:52Z",
        "body": "This is an improved fix for #13238. Instead of handling focus events in\r\nthe `TerminalInput::HandleKey` function and the need to filter them\r\nout depending on where they came from, we simply don't call `HandleKey`\r\nin the first place. This makes the somewhat unreliable `CameFromApi`\r\nfunction unnecessary and the code a bit more robust.\r\n\r\nThis change is required because `CameFromApi` is not representable\r\nin a `INPUT_RECORD` and I'm getting rid of `IInputEvent`.\r\n\r\n## Validation Steps Performed\r\n* No `[O` when exiting nvim \u2705\r\n* Mouse input in nvim works \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 326,
        "changed_files": 8,
        "created_at": "2023-06-26T14:47:16Z",
        "closed_at": "2023-06-27T13:33:58Z",
        "merged_at": "2023-06-27T13:33:58Z",
        "body": "`(Peek|Read)ConsoleInput(A|W)Impl` make a distinction that doesn't make\r\na lot of sense in our code base: On the calling side (`ApiDispatchers`)\r\nthere's just one function calling all 4 (`ServerGetConsoleInput`) and\r\non the callee side they all 4 just call `_DoGetConsoleInput` anyways.\r\n\r\n## Validation Steps Performed\r\n* It compiles \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-06-26T14:26:43Z",
        "closed_at": "2023-06-28T23:59:27Z",
        "merged_at": "2023-06-28T23:59:27Z",
        "body": "This commit removes some flags that we don't need anymore, and adds all\r\nthose `/Zc` (standard conformance) switches that aren't enabled by\r\ndefault yet. This will help us and the MSVC team detect bugs early.\r\n\r\nThis removes:\r\n* `/fp:contract`: With the addition of `TIL_FAST_MATH_BEGIN`\r\n  all the code that benefits from FMA now uses `/fp:fast`.\r\n* `/Zc:lambda`: Automatically enabled with C++20.\r\n\r\nThis adds:\r\n* `/Zc:__cplusplus` / `/Zc:__STDC__`: Without these `__cplusplus`\r\n  defaults to `199711L` and `__STDC__` remains undefined.\r\n* `/Zc:enumTypes`: The C++ standard specifies that an enum with\r\n  unspecifies size has a size that fits its members exactly.\r\n  An enum with byte-sized members has a `sizeof` of 1 and not 4.\r\n* `/Zc:templateScope`: Emit errors when shadowing template parameters.\r\n\r\nAnd most importantly:\r\n* `<RemoveUnreferencedCodeData>`, which is `/Zc:inline`\r\n  Without this, MSVC treats `inline` functions sort of like external\r\n  linkage ones. You can declare an inline function in one file and\r\n  then just define it in another. Or use an inline function from\r\n  another file. With this flag, the compiler can stop emitting\r\n  COMDAT references for these which reduces object file sizes.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 160,
        "deletions": 13,
        "changed_files": 7,
        "created_at": "2023-06-25T13:31:00Z",
        "closed_at": "2023-08-08T11:32:12Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nAdds support for underline coloring with SGR 58/59 sequences. ConPTY can now parse, store and send those sequences across console applications and client terminal app. \r\n\r\nTested it on Wezterm which already has support for drawing colored underlines. For testing, I replaced the prebundled `OpenConsole.exe` and `conpty.dll` from Wezterm with the modified versions.\r\n\r\n```sh\r\nprintf \"\\n\\e[4m\\e[58;2;0;255;215mRGBCyanUnderline\\e[24m \\e[58;5;50m\\e[4mINDEX256CyanUnderline\\e[24m \\e[4m\\e[58;5;50m\\e[38;2;255;0;95mUnderlineColorWithColoredText\\e[24m \\e[4m\\e[38;5;50m\\e[58;2;255;0;95mAnotherExample\\n\"\r\n```\r\n\r\nAbove code produces output like so:\r\n\r\nLeft: Wezterm, Right: WindowsTerminal Dev\r\n![Screenshot 2023-06-25 183224](https://github.com/microsoft/terminal/assets/55626797/b3f21fdd-bf19-4a32-8b88-c83d710310ce)\r\n\r\n\r\n*Changes aren't visible on WindowsTerminal as of now. Atleast one of the graphic render, E.g. AtlasEngine, needs to support coloring of underline and drawing them on screen. Will be working on this in next few days.*\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 86,
        "deletions": 13,
        "changed_files": 15,
        "created_at": "2023-06-22T02:58:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nWhen pressing \\<Escape> or \\<Enter> key, reset (CJK) keyboard IME input state to alphabet input mode. \r\n \r\n## References and Relevant Issues\r\nAdds new feature: \r\n#1304 Feature Request: IME mode after pressing Escape or Enter key in CJK input.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n * Use case: CJK user types shell command line using CJK input IME, or edits text file using Linux text editors like `Vim (vi)`, `nano` or `emacs` editor.\r\n * Problem:  After typing CJK words and phrases in CJK-script composition mode, user have to manually exit CJK input mode by pressing the composition key again and return to alphabet input mode. All shell commands and editor commands are alphabet/English word or key.  So, CJK input after \\<Escape> or \\<Enter> key always causes command error. It is very error-prone and very, very annoying.\r\n * Solution: This PR solves such annoyance by switching IME input mode to alphabet input mode automatically upon pressing \\<Escape> or \\<Enter> key. This can be turned on/off at terminal/interaction setting pane. \r\n * Caveats: To type multi-line CJK phrases, user have to press CJK composition key after pressing each \\<Enter> key to go next line.\r\n * TODO:  Setting toggle switch works as expected. Done.\r\n\r\n## Validation Steps Performed\r\nThis feature is widely supported in many open-source or commercial CJK-aware terminal emulator/SSH/Telnet client software or editors like Korean-localized `xterm`, `hanterm`, `iPuTTY`, `XShell`, and some `MinTTY`. It is such universally requested feature for Korean command line users.\r\n\r\n## PR Checklist\r\n- [ ] Closes #1304\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 14
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-06-20T19:18:41Z",
        "closed_at": "2023-06-21T20:52:02Z",
        "merged_at": "2023-06-21T20:52:02Z",
        "body": "As a shortcut, GetLastNonSpaceCharacter can start with the last committed row. It's guaranteed that there isn't anything of worth below that point, so why bother checking?\r\n\r\nWithout this, Terminal immediately commits the entire 9031-line buffer on startup while trying to--get this!--clear the screen!",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-06-20T14:23:16Z",
        "closed_at": "2023-06-21T16:46:06Z",
        "merged_at": "2023-06-21T16:46:06Z",
        "body": "Don't exclude nuget `packages/` in vscode. Excluding via `file.exclude` also excludes them from c++ language extension's `includePath` and generates missing include files and header errors.\r\n\r\nWe might still like to exclude them from full text search, so we do it using `search.exclude`.\r\n\r\nCloses #15578\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-06-19T04:39:11Z",
        "closed_at": "2023-08-03T06:57:11Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nAdded functionality that copies the selected background image to the appdata directory, and updates the path to the copied image. \r\n## References and Relevant Issues\r\nAdds new feature\r\n## Detailed Description of the Pull Request / Additional comments\r\nDisables the button use Desktop Wallpaper is selected, as well as if it is already a file in the appdata directory.\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [X] Closes #12993 \r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 23,
        "changed_files": 1,
        "created_at": "2023-06-17T00:13:14Z",
        "closed_at": "2023-06-21T21:01:46Z",
        "merged_at": "2023-06-21T21:01:46Z",
        "body": "I originally intended to add the Drop Validator (which is a compliance requirement) task to the build, but I quickly realized that we weren't generating a complete SBOM manifest covering every artifact that we produced.\r\n\r\nWe were generating the SBOM manifest, and then re-packing the Terminal app which very likely invalidated all of the hashes and signatures in the SBOM manifest!\r\n\r\nWe were also missing the unpackaged build.\r\n\r\nI've removed the `appx-PLATFORM-CONFIG` and `unpackaged-PLAT-CONF` artifacts and combined them into a single one, `terminal-PLAT-CONF`.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 322,
        "deletions": 562,
        "changed_files": 14,
        "created_at": "2023-06-16T22:11:19Z",
        "closed_at": "2023-06-30T19:51:07Z",
        "merged_at": "2023-06-30T19:51:07Z",
        "body": "This is a complete rewrite of the old `WriteCharsLegacy` function\r\nwhich is used when VT mode is disabled as well as for all interactive\r\nconsole input handling on Windows. The previous code was almost\r\nhorrifying in some aspects as it first wrote the incoming text into a\r\nlocal buffer, stripping/replacing any control characters. That's not\r\nparticular fast and never was. It's unknown why it was like that.\r\n\r\nIt also measured the width of each glyph to correctly determine the\r\ncursor position and line wrapping. Presumably this used to work quite\r\nwell in the original console code, because it would then just copy\r\nthat local buffer into the destination text buffer, but with the\r\nintroduction of the broken and extremely slow `OutputCellIterator`\r\nabstraction this would end up measuring all text twice and cause\r\ndisagreements between `WriteCharsLegacy`'s idea of the cursor position\r\nand `OutputCellIterator`'s cursor position. Emoji input was basically\r\nentirely broken. This PR fixes it by passing any incoming text\r\nstraight to the `TextBuffer` as well as by using its cursor positioning\r\nfacilities to correctly implement wrapping and backspace handling.\r\n\r\nBackspacing over Emojis and an array of other aspects still don't work\r\ncorrectly thanks to cmdline.cpp, but it works quite a lot better now.\r\n\r\nRelated to #8000\r\nCloses #8839\r\nCloses #10808\r\n\r\n## Validation Steps Performed\r\n* Printing various Unicode text \u2705\r\n* On an fgets() input line\r\n  * Typing text works \u2705\r\n  * Inserting text works anywhere \u2705\r\n  * Ctrl+X is translated to ^X \u2705\r\n  * Null is translated to ^@ \u2705\r\n    This was tested by hardcoding the `OutputMode` to 3 instead of 7.\r\n  * Backspace only advances to start of the input \u2705\r\n  * Backspace deletes the entire preceding tab \u2705\r\n  * Backspace doesn't delete whitespace preceding a tab \u2705\r\n  * Backspacing a force-wrapped wide glyph unwraps the line break \u2705\r\n  * Backspacing ^X deletes both glyphs \u2705\r\n  * Backspacing a force-wrapped tab deletes trailing whitespace \u2705\r\n* When executing\r\n  ```cpp\r\n  fputs(\"foo: \", stdout);\r\n  fgets(buffer, stdin);\r\n  ```\r\n  pressing tab and then backspace does not delete the whitespace\r\n  that follows after the \"foo:\" string (= `sOriginalXPosition`).",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 178,
        "deletions": 269,
        "changed_files": 10,
        "created_at": "2023-06-16T21:57:17Z",
        "closed_at": "2023-06-22T23:24:10Z",
        "merged_at": "2023-06-22T23:24:10Z",
        "body": "I've removed these because it made some of my new code pretty\r\nconvoluted for now good reason as most of these functions aren't\r\nexception safe to begin with. Basically, their boolean status\r\nis often just a pretense because they can crash or throw anyways.\r\n\r\nFurthermore, `WriteCharsLegacy` failed to check the status code\r\nreturned by `AdjustCursorPosition` in some of its parts too.\r\n\r\nIn the future we should instead probably strive to continue\r\nmake our legacy code more exception safe.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 787,
        "deletions": 9,
        "changed_files": 9,
        "created_at": "2023-06-16T14:05:13Z",
        "closed_at": "2023-06-30T14:18:35Z",
        "merged_at": "2023-06-30T14:18:35Z",
        "body": "benchcat, \"bc\" for short, is a tool that I've written over the last\r\ntwo years to help me benchmark OpenConsole and Windows Terminal.\r\nInitially it only measured the time it took to print a file as fast as\r\npossible, but it's grown to support a number of arguments, including\r\nchunk (`WriteFile` call) sizes, repeat counts and VT mode with italic\r\nand colorized output. In the future I also wish to add a way to\r\ngenerate the output data on the fly via command line arguments.\r\n\r\nOne unusual trait of benchcat is that it is compiled entirely without\r\nCRT and vcruntime. I did this so that I could test it on Windows XP.\r\nAlso, it's kind of funny seeing how it's only about 11kB.\r\n\r\nThis commit also fixes a couple `$LASTEXITCODE` cases, because our\r\nspellchecker was bothering me a lot with this PR and so I just fixed it.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 751,
        "deletions": 3156,
        "changed_files": 2,
        "created_at": "2023-06-15T12:25:58Z",
        "closed_at": "2023-07-06T22:03:02Z",
        "merged_at": "2023-07-06T22:03:02Z",
        "body": "Add prIssueManagement.yml to onboard repo to GitOps.ResourceManagement as FabricBot replacement",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 10,
        "changed_files": 10,
        "created_at": "2023-06-14T23:32:33Z",
        "closed_at": "2023-07-06T16:38:00Z",
        "merged_at": "2023-07-06T16:38:00Z",
        "body": "## Summary of the Pull Request\r\nAdds a dismiss selection option to the \"copy\" action.\r\n\r\n## PR Checklist\r\n- [x] Closes #15371\r\n- [x] Tests added/passed\r\n- [x] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: MicrosoftDocs/terminal#686\r\n- [x] Schema updated (if necessary)\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 16,
        "changed_files": 1,
        "created_at": "2023-06-14T13:22:23Z",
        "closed_at": "2023-06-15T14:43:43Z",
        "merged_at": "2023-06-15T14:43:43Z",
        "body": "When `elevate` is set to `true`, `_maybeElevate` would try to\r\nmodify `newTerminalArgs` and crash, because during tab duplication\r\nthere aren't any `newTerminalArgs`. This issue may happen for instance\r\nwhen receiving hand-off from a non-elevated client and then trying\r\nto duplicate that tab.\r\n\r\nCloses #15534\r\n\r\n## Validation Steps Performed\r\n* Launch with `\"elevate\": false`\r\n* Set `\"elevate\": true`\r\n* Duplicate a tab\r\n* Doesn't crash \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 48,
        "changed_files": 14,
        "created_at": "2023-06-14T12:56:34Z",
        "closed_at": "2023-06-14T22:24:22Z",
        "merged_at": "2023-06-14T22:24:22Z",
        "body": "* Fixes warnings related to missing `const` in 2 places, which seems\r\n  to be something that's being detected more reliably by 17.6 now.\r\n* Fixes `DxSoftFont` not initializing all members,\r\n  which is also suddenly being detected by 17.6 now.\r\n* Fixes 1 new VS 17.7 warning (C26435) by removing `virtual` from\r\n  methods declared as `override` already.\r\n* Disables 2 new VS 17.7 warnings that are part of C++ Core Guidelines\r\n  c.128, because they don't really bring any benefit to this project.\r\n\r\nAs an additional bonus it disables a spellcheck warning that has been\r\ngoing around ever since I put a Punycode URL in a comment.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-06-13T15:22:20Z",
        "closed_at": "2023-06-13T20:12:10Z",
        "merged_at": "2023-06-13T20:12:10Z",
        "body": "Fixes the broken types for `TextAttribute`, `til::size`, `til::point`\r\nand `til::rect` and adds a new type for `TextBuffer` which without\r\nthis would now be much harder to inspect due to introduction of\r\nthe manual virtual memory management in 612b00c.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 152,
        "deletions": 71,
        "changed_files": 7,
        "created_at": "2023-06-12T16:26:07Z",
        "closed_at": "2023-06-14T19:34:42Z",
        "merged_at": "2023-06-14T19:34:42Z",
        "body": "This commit makes 2 changes:\r\n* Expose dirty-range information from `ROW::CopyTextFrom`\r\n  This will allow us to call `TriggerRedraw`, which is an aspect\r\n  I haven't previously considered as something this API needs.\r\n* Add a `FillRect` API to `TextBuffer` and refactor `AdeptDispatch`\r\n  to use that API. Even if we determine that the new text APIs are\r\n  unfit (for instance too difficult to use), this will make it simpler\r\n  to write efficient implementations right inside `TextBuffer`.\r\n\r\nSince the new `FillRect` API lacks bounds checks the way `WriteLine`\r\nhas them, it breaks `AdaptDispatch::_EraseAll` which failed to adjust\r\nthe bottom parameter after scrolling the contents. This would result\r\nin more rows being erased than intended.\r\n\r\n## Validation Steps Performed\r\n* `chcp 65001`\r\n* Launch `pwsh`\r\n* ``\"`e[29483`$x\"`` fills the viewport with cats \u2705\r\n* `ResizeTraditional` still doesn't work any worse than it used to \u2705",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 143,
        "deletions": 7,
        "changed_files": 20,
        "created_at": "2023-06-11T10:50:27Z",
        "closed_at": "2023-06-21T17:24:46Z",
        "merged_at": "2023-06-21T17:24:46Z",
        "body": "Added `searchWeb` command to search the selected text on the web.\r\nArguments:\r\n- `queryUrl`: URL of the web page to launch (the selected text will be appended to it)\r\n- `wrapWithQuotes`: whether the selected text should be wrapped with quotes (true/false)\r\n\r\nTo make the search text more \"compact\" and handle multi-line selections, I'm concatenating the selected lines and replacing consecutive whitespaces with a single space (we may change this with something more clever in case).\r\n\r\n## Validation Steps Performed\r\nManual testing with single, multi-line, block selections.\r\nEnable/disable the `wrapWithQuotes` argument.\r\n\r\nCloses #10175 ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 36,
        "changed_files": 2,
        "created_at": "2023-06-07T17:10:02Z",
        "closed_at": "2023-06-09T18:18:35Z",
        "merged_at": "2023-06-09T18:18:34Z",
        "body": "This commit achieves fixes the issue as described in the title by\r\nchecking whether the `this` and `other` pointer are identical.\r\nAs an added bonus it makes the copy and move constructors slightly\r\ncheaper, as they don't try to destruct existing data anymore,\r\nwhich doesn't exist anyways.\r\n\r\n## Validation Steps Performed\r\n* It blends \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 372,
        "deletions": 252,
        "changed_files": 16,
        "created_at": "2023-06-07T15:45:42Z",
        "closed_at": "2023-06-10T13:17:19Z",
        "merged_at": "2023-06-10T13:17:19Z",
        "body": "For a 120x9001 terminal, a01500f reduced the private working set of\r\nconhost by roughly 0.7MB, presumably due to tighter `ROW` packing, but\r\nalso increased it by 2.1MB due to the addition of the `_charOffsets`\r\narray on each `ROW` instance. An option to fix this would be to only\r\nallocate a `_charOffsets` if the first wide or complex Unicode glyph\r\nis encountered. But on one hand this would be quite western-centric\r\nand unfairly hurt most languages that exist and on another we can get\r\nrid of the `_charOffsets` array entirely in the future by injecting\r\nZWNJs if a write begins with a combining glyph and just recount each\r\nrow from the start. That's still faster than fragmented memory.\r\n\r\nThis commit goes a different way and instead reduces the working\r\nset of conhost after it launches from 7MB down to just 2MB,\r\nby only committing ROWs when they're first used.\r\n\r\nFinally, it adds a \"scratchpad\" row which can be used to build\r\nmore complex contents, for instance to horizontally scroll them.\r\n\r\n## Validation Steps Performed\r\n* Traditional resize\r\n  * Horizontal shrinking works \u2705\r\n  * Vertical shrinking works \u2705 and cursor stays in the viewport \u2705\r\n* Reflow works \u2705\r\n* Filling the buffer with ASCII works \u2705 and no leaks \u2705\r\n* Filling the buffer with complex Unicode works \u2705 and no leaks \u2705\r\n* `^[[3J` erases scrollback \u2705\r\n* Test `ScrollRows` with a positive delta \u2705\r\n* I don't know how to test `Reset`. \u2754 Unit tests use it though",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-06-07T07:31:18Z",
        "closed_at": "2023-06-07T10:04:42Z",
        "merged_at": null,
        "body": "Remember to add the actual implementation for the IsHeadless() and EnableConptyModeForTests() functions based on your requirements.\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 719,
        "changed_files": 1,
        "created_at": "2023-06-05T11:26:32Z",
        "closed_at": "2023-06-07T10:04:59Z",
        "merged_at": null,
        "body": "My Attempt with less lines; not sure if it working okay or not. If not then just decline my PR\r\n\r\n## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 136,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-06-02T01:41:44Z",
        "closed_at": "2023-06-15T14:45:36Z",
        "merged_at": "2023-06-15T14:45:36Z",
        "body": "Performance of printing enwik8.txt at the following block sizes:\r\n4KiB (printf): 51MB/s -> 54MB/s\r\n128KiB (cat): 92MB/s -> 103MB/s\r\n\r\n## Validation Steps Performed\r\n* Rows are properly filled with whitespace at various\r\n  window sizes as observed under a debugger \u2705",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 344,
        "deletions": 199,
        "changed_files": 18,
        "created_at": "2023-06-02T00:55:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Performance of printing enwik8.txt at the following block sizes:\r\n4KiB (printf): 65MB/s -> 73MB/s\r\n128KiB (cat): 135MB/s -> 173MB/s\r\n\r\nThis commit is fairly problematic. Support for more than one rendering\r\nengine was hacked into `Renderer` rather forcefully and is not correct.\r\nAs such, this commit cannot fix cursor invalidation correctly either,\r\nand while some bugs are fixed (engines may see highly inconsistent\r\nTextBuffer and Cursor states), it introduces others (an error in the\r\nfirst engine may result in the second engine not executing).\r\nNeither of those are good and the underlying issue remains to be fixed.\r\n\r\n## Validation Steps Performed\r\n* TBD, this PR probably still contains bugs",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 26,
        "changed_files": 2,
        "created_at": "2023-06-02T00:47:14Z",
        "closed_at": "2023-07-05T19:26:15Z",
        "merged_at": "2023-07-05T19:26:15Z",
        "body": "Performance of printing enwik8.txt at the following block sizes:\r\n4KiB (printf): 78MB/s -> 93MB/s\r\n128KiB (cat): 117MB/s -> 156MB/s\r\n\r\nThe change itself is rather self-explanatory.\r\nA tighter, simpler loop runs faster.\r\n\r\n## Validation Steps Performed\r\nMixed ASCII/Unicode text output looks generally correct. \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 148,
        "deletions": 73,
        "changed_files": 2,
        "created_at": "2023-06-02T00:31:07Z",
        "closed_at": "2023-06-30T14:10:58Z",
        "merged_at": "2023-06-30T14:10:58Z",
        "body": "The added explicit vectorization allows us to skip plain text faster\r\nand pass it immediately to the deeper `TextBuffer` parts.\r\n\r\nPerformance of printing enwik8.txt at the following block sizes:\r\n4KiB (printf): 54MB/s -> 58MB/s\r\n128KiB (cat): 103MB/s -> 116MB/s\r\n\r\n## Validation Steps Performed\r\n* Works on x64 \u2705\r\n* Works on ARM \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-06-02T00:01:05Z",
        "closed_at": "2023-06-15T15:34:29Z",
        "merged_at": "2023-06-15T15:34:29Z",
        "body": "Performance of printing enwik8.txt at the following block sizes:\r\n4KiB (printf): 54MB/s -> 54MB/s\r\n128KiB (cat): 101MB/s -> 104MB/s\r\n\r\n## Validation Steps Performed\r\nThis change is easily verifiable via review.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 655,
        "changed_files": 15,
        "created_at": "2023-06-01T14:50:13Z",
        "closed_at": "2023-06-05T16:41:32Z",
        "merged_at": "2023-06-05T16:41:32Z",
        "body": "This removes the telemetry tracking which counted how many times each VT\r\nsequence was executed, and how many times there were \"failures\". This\r\ninformation isn't needed any more, and we were reaching the limit of how\r\nmany sequences we could track anyway.\r\n\r\nEssentially what's been removed is the `TermTelemetry` class, but we are\r\nstill tracking some statemachine telemetry in the `ParserTracing` class.\r\nAnd since that used the same trace logging provider as `TermTelemetry`,\r\nI've now moved that definition into the `tracing.cpp` file. \r\n\r\nThe code still compiles and runs without exploding.\r\n\r\nCloses #15482",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 79,
        "deletions": 47,
        "changed_files": 5,
        "created_at": "2023-05-31T14:39:55Z",
        "closed_at": "2023-06-08T23:56:05Z",
        "merged_at": "2023-06-08T23:56:05Z",
        "body": "06174a9 didn't properly fix the issue of us showing homoglyphs in our\r\nURI tooltip. This commit introduces a different approach where we\r\ndisplay both, the Punycode and Unicode encoding, whenever we encounter\r\nan IDN. This isn't perfect but simple to implement.\r\n\r\nCloses #15432\r\n\r\n## Validation Steps Performed\r\n* `https://www.xn--fcbook-3nf5b.com/` (which contains confusing glyphs)\r\n  is shown both in its Punycode and Unicode form simultaneously. \u2705",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-05-30T21:36:39Z",
        "closed_at": "2023-06-05T19:50:24Z",
        "merged_at": "2023-06-05T19:50:24Z",
        "body": "## Summary of the Pull Request\r\nThis removes the \"default\" text box from the UI Automation tree, thus preventing screen readers from navigating to it. This was a confusing scenario for users because the \"default\" tag was unclear if it was a part of the previous or next color scheme (i.e. consider hearing \"Campbell, default, Campbell PowerShell\"; it's unclear which one is default).\r\n\r\nThis also appends the \"default\" string to the `ToString` function of the color scheme view model. This makes it so that the combo box and list view visually appear the same, but can be quick searched or read out by the screen reader with the 'default' tag.\r\n\r\n## Validation Steps Performed\r\n- [x] Verified this works on Windows 11\r\n- [x] Verified this works on Windows 10\r\n- Scenarios tested:\r\n   - [x] saving settings after changing the default scheme\r\n   - [x] saving settings.json to force a refresh in SUI\r\n\r\nCloses #14401 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-05-30T20:46:47Z",
        "closed_at": "2023-06-05T23:36:09Z",
        "merged_at": "2023-06-05T23:36:09Z",
        "body": "This fixes a couple spots where I wasn't properly checking\r\nfor the existence of some optional D2D interfaces.\r\n\r\n## Validation Steps Performed\r\nI haven't tested this and don't intend to do it just yet.\r\nWindows Terminal requires build 19041 at least anyways.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 29,
        "changed_files": 3,
        "created_at": "2023-05-30T20:36:06Z",
        "closed_at": "2023-05-31T17:59:04Z",
        "merged_at": "2023-05-31T17:59:04Z",
        "body": "I wanted to show `til::static_map` to someone and noticed it hasn't been\r\nupdated since we updated to C++20. We can now make use of `constexpr`\r\n`std::sort` and `constinit` to skip the initialization of the maps in\r\n`KeyChordSerialization.cpp`. Also, I removed the comparator argument\r\nto make the map a little more compact.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 57,
        "deletions": 82,
        "changed_files": 10,
        "created_at": "2023-05-30T14:51:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is a WIP, but:\r\n\r\nCalling a hundred bespoke WinRT methods to determine what context menu items to show is not scalable!\r\n\r\nI also plan to add...\r\n\r\n```\r\nMenuAction::Copy (applicable when there is a selection)\r\nMenuAction::Paste (applicable when the control is not read-only)\r\nMenuAction::CopyLink (there's another branch for this one already :D)\r\n```\r\n\r\nI also moved ownership of knowing where the menu was opened to TermControl.\r\nIt could go down to Interactivity with some work.\r\nIt just felt wrong to have the Core remembering this user interaction state.\r\n\r\nI _also_ fixed some trivial resource duplication.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 35,
        "changed_files": 11,
        "created_at": "2023-05-29T23:13:23Z",
        "closed_at": "2023-06-02T18:41:50Z",
        "merged_at": "2023-06-02T18:41:50Z",
        "body": "When an `RIS` (hard reset) sequence is executed, ConHost will pass that\r\nthrough to the connected conpty terminal, which results in all modes\r\nbeing reset to their initial state. To work best, though, conpty needs\r\nto have the win32 input mode enabled, as well as the focus event mode.\r\nThis PR addresses that by explicitly requesting the required modes after\r\nan `RIS` is passed through.\r\n\r\nOriginally these modes were only set if the `--win32input` option was\r\ngiven, but there is really no need for that, since terminals that don't\r\nsupport them should simply ignore the request. To avoid that additional\r\ncomplication, I've now removed the option (i.e. ConHost will now always\r\nattempt to set the modes it needs).\r\n\r\nI've manually confirmed that keypresses are still passed through with\r\nwin32 input sequences after a hard reset, and that focus events are\r\nstill being generated. I've also updated the existing conpty round-trip\r\ntest for `RIS` to confirm that it's now also passing through the mode\r\nrequests that it needs.\r\n\r\nCloses #15461",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 185,
        "deletions": 99,
        "changed_files": 16,
        "created_at": "2023-05-29T01:24:38Z",
        "closed_at": "2023-06-09T00:02:50Z",
        "merged_at": "2023-06-09T00:02:50Z",
        "body": "The _Erase Color Mode_ determines what attributes are written to the\r\nbuffer when erasing content, or when new content is scrolled onto the\r\nscreen. When the mode is reset (which is the default), we erase with the\r\nactive colors, but with rendition attributes cleared. When the mode is\r\nset, we erase with the default attributes, i.e. with neither color nor\r\nrendition attributes applied.\r\n\r\nThis could be used to address the problem described in issue #10556.\r\n\r\nMost of the affected operations are handled within the `AdaptDispatch`\r\nclass, so I've simply updated them all to use a new helper method which\r\nreturns the appropriate erase attributes for the active mode.\r\n\r\nHowever, there were a couple of operations that are handled elsewhere,\r\nand which now require the erase attributes to be passed to them as a\r\nparameter.\r\n\r\n* The `TextBuffer::IncrementCircularBuffer` method, which is used to\r\nrecycle the topmost row when scrolling past the bottom of the buffer.\r\n\r\n* The `TextBuffer::SetCurrentLineRendition` method, which has to clear\r\nthe second half of the line when switching to a double width rendition.\r\n\r\n* The `ITerminalApi::UseAlternateScreenBuffer` method, which has to\r\nclear the screen when switching to the alternate buffer.\r\n\r\nThen there is also a Clear Buffer action in Windows Terminal, which is\r\nultimately handled by the `SCREEN_INFORMATION::ClearBuffer` method in\r\nConHost. That class has no access to the erase color mode, so has no way\r\nof knowing which attributes to use. So I've now rewritten it to use the\r\n`AdaptDispatch::EraseInDisplay` method to handle the erasing.\r\n\r\n## Validation Steps Performed\r\n\r\nI wrote a little test script that exercises the operations affected by\r\n`DECECM`, which @al20878 kindly tested for us on a real DEC VT525, and\r\nprovided screenshots of the output. I've manually confirmed that our\r\nimplementation exactly matches those results.\r\n\r\nI've also added a unit test that runs through the same set of operations\r\nand verified that each of them is using the appropriate attributes when\r\n`DECECM` is enabled and enabled.\r\n\r\nCloses #14983",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 350,
        "deletions": 209,
        "changed_files": 15,
        "created_at": "2023-05-28T08:32:06Z",
        "closed_at": "2023-05-28T11:10:56Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 944,
        "deletions": 574,
        "changed_files": 9,
        "created_at": "2023-05-28T08:31:38Z",
        "closed_at": "2023-05-28T11:12:14Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 575,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-28T08:31:19Z",
        "closed_at": "2023-05-28T11:12:23Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 79866,
        "deletions": 104,
        "changed_files": 282,
        "created_at": "2023-05-28T08:30:54Z",
        "closed_at": "2023-05-28T11:12:46Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2395,
        "deletions": 1877,
        "changed_files": 153,
        "created_at": "2023-05-28T08:30:13Z",
        "closed_at": "2023-05-28T11:13:21Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1940,
        "deletions": 866,
        "changed_files": 81,
        "created_at": "2023-05-28T08:28:14Z",
        "closed_at": "2023-05-28T11:13:42Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n-",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-26T16:09:36Z",
        "closed_at": "2023-05-26T19:31:22Z",
        "merged_at": "2023-05-26T19:31:22Z",
        "body": "RE: \r\n* #15454\r\n* MSFT:44725712 \"WindowsTerminal.exe!NonClientIslandWindow::OnSize\"\r\n* MSFT:44754014 \"NonClientIslandWindow::GetTotalNonClientExclusiveSize\"\r\n\r\nI think this should fix all of those, but I want to ship and verify live, since I can't repro this locally. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 18,
        "changed_files": 1,
        "created_at": "2023-05-26T10:21:32Z",
        "closed_at": "2023-05-26T18:09:00Z",
        "merged_at": "2023-05-26T18:09:00Z",
        "body": "This is a resurrection of #5629. As it so happens, this crash-on-exit was _not_ specific to my laptop. It's a bug in the XAML platform somewhere, only on Windows 10. \r\n\r\nIn #14843, we moved this leak into `becomeMonarch`. Turns out, we don't just need this leak for the monarch process, but for all of them. \r\n\r\nIt's not a real \"leak\", because ultimately, our `App` lives for the entire lifetime of our process, and then gets cleaned up when we do. But `dtor`ing the `App` - that's apparently a no-no.\r\n\r\nWas originally in #15424, but I'm pulling it out for a super-hotfix release. \r\n\r\n\r\nCloses #15410\r\n\r\nMSFT:35761869 looks like it was closed as no repro many moons ago. This should close out our hits there (firmly **40% of the crashes we've gotten on 1.18**)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-05-25T22:46:41Z",
        "closed_at": "2023-06-06T23:15:37Z",
        "merged_at": "2023-06-06T23:15:37Z",
        "body": "## Summary of the Pull Request\r\nFixing a problem where the repo build failed when the project location path contained space character.\r\n\r\n## References and Relevant Issues\r\nCloses #15370 \r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\nPlacing missing quote, amp and apos symbols when calling commands with filepath parameters.\r\n\r\n## Validation Steps Performed\r\nBuilt locally.\r\n\r\n## PR Checklist\r\n- [x] Closes #xxx\r\n- [x] Tests added/passed\r\n- [x] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [x] Schema updated (if necessary)\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-25T21:59:24Z",
        "closed_at": "2023-05-26T19:59:39Z",
        "merged_at": "2023-05-26T19:59:39Z",
        "body": "Yep it's that dumb\r\n\r\nCloses #15443\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-25T21:09:15Z",
        "closed_at": "2023-05-26T18:45:10Z",
        "merged_at": "2023-05-26T18:45:10Z",
        "body": "Make sure we always expand path env vars, even if they're REG_SZ in the registry.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\nOn some systems path vars are REG_SZ instead of REG_EXPAND_SZ. We need to make sure we always expand them. We looked at the system code, and it also makes to sure to always expand them.\r\n\r\n## Validation Steps Performed\r\nBuilt locally and made sure the problem went away. Also stepped through in the debugger to make sure things were working correctly.\r\n\r\nCloses #15442\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 190,
        "deletions": 19,
        "changed_files": 10,
        "created_at": "2023-05-25T17:57:10Z",
        "closed_at": "2023-06-06T23:17:03Z",
        "merged_at": "2023-06-06T23:17:03Z",
        "body": "<!-- Remember kids, it's always okay to punch nazis -->\r\n\r\n## Summary of the Pull Request\r\n\r\nAdd support for `$theme.window.frame`, `.unfocusedFrame`, and `.rainbowFrame`. The first two accept a `ThemeColor` to set the window frame, using [`DwmSetWindowAttribute`](https://learn.microsoft.com/en-us/windows/win32/api/dwmapi/nf-dwmapi-dwmsetwindowattribute) with [`DWMWA_BORDER_COLOR`](https://learn.microsoft.com/en-us/windows/win32/api/dwmapi/ne-dwmapi-dwmwindowattribute). `rainbowFrame` accepts a `bool`. When enabled, it'll cycle the color of the frame through all the hues, ala [this gif](https://user-images.githubusercontent.com/18356694/164307822-e4267965-2ce0-4294-8499-59c3ba7edbae.gif) (but, constantly, instead of just when the window moves). \r\n\r\nThis only works on Windows 11.\r\n\r\n## Validation Steps Performed\r\n* Works on Windows 11\r\n* Doesn't explode on Windows 10\r\n\r\n## PR Checklist\r\n- [x] Closes #12950\r\n- See also #3327\r\n- [x] Schema updated (if necessary)\r\n\r\n\r\n### other details\r\n\r\nThere's probably some impact to perf with `rainbowFrame`. It's one `DispatcherTimer` per window. That could probably be optimized somehow to like, one per process, but meh?\r\n\r\n### some sample json for copypasta\r\n\r\n```json\r\n{\r\n    \"name\": \"Accent Titlebar\",\r\n    \"tab\":\r\n    {\r\n        \"background\": \"terminalBackground\",\r\n        \"unfocusedBackground\": \"#00000000\",\r\n        \"showCloseButton\": \"hover\"\r\n    },\r\n    \"tabRow\":\r\n    {\r\n        \"background\": \"accent\"\r\n    },\r\n    \"window\":\r\n    {\r\n        \"applicationTheme\": \"system\",\r\n        \"frame\": \"accent\",\r\n        // \"frame\": \"terminalBackground\",\r\n        \"unfocusedFrame\": \"#ff0000\",\r\n        // \"unfocusedFrame\": null,\r\n        \"rainbowFrame\": true\r\n    }\r\n},\r\n```",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-05-25T16:20:32Z",
        "closed_at": "2023-05-25T18:21:58Z",
        "merged_at": "2023-05-25T18:21:58Z",
        "body": "This regressed in f06cd17. It seems like the change went untested,\r\nbecause it appends an extra \" after -startdir=none.\r\nThis changeset also avoids calling `append()` twice.\r\n\r\nCloses #15436\r\n\r\n## Validation Steps Performed\r\n* VS Developer Command Prompt works \u2705",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-24T22:31:05Z",
        "closed_at": "2023-05-25T18:22:07Z",
        "merged_at": "2023-05-25T18:22:07Z",
        "body": "TIL: `CreateCompatibleRenderTarget` does not initialize the bitmap\r\nit returns. You got to do that yourself just like in D3D.\r\n\r\n## Validation Steps Performed\r\n* Set `ATLAS_DEBUG_FORCE_D2D_MODE` to 1\r\n* Changing the cursor in the settings immediately updates it \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 20,
        "changed_files": 3,
        "created_at": "2023-05-24T21:59:58Z",
        "closed_at": "2023-05-26T19:30:58Z",
        "merged_at": "2023-05-26T19:30:58Z",
        "body": "`_p.MarkAllAsDirty()` sets `_p.scrollOffset` to 0, so we need to use\r\nthat instead of `_api.scrollOffset` when getting the offset.\r\nAdditionally, the previous code failed to release the swap chain\r\nwhen recreating the backend, which is technically not correct.\r\nI'm not sure to what issues this might have led, as it didn't had any\r\nnegative effects on my PC, but it's definitely not according to spec.\r\n\r\n## Validation Steps Performed\r\nDifficult to test but it seems alright.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 492,
        "deletions": 124,
        "changed_files": 13,
        "created_at": "2023-05-24T21:38:16Z",
        "closed_at": "2023-07-19T15:52:18Z",
        "merged_at": "2023-07-19T15:52:18Z",
        "body": "This is my proposed solution to #15384.\r\n\r\nBasically, the issue is that we cannot ever close a `DesktopWindowXamlSource` (\"DWXS\"). If we do, then any other thread that tries to access XAML metadata will explode, which happens frequently. A DWXS is inextricably linked to an HWND. That means we have to not only reuse DWXS's, but the HWNDs themselves. XAML also isn't agile, so we've got to keep the `thread` that the DWXS was started on alive as well. \r\n\r\nTo do this, we're going to introduce the ability to \"refrigerate\" and \"reheat\" window threads. \r\n* A window thread is \"**hot**\" if it's actively got a window, and is pumping window messages, and generally, is a normal thing. \r\n* When a window is closed, we need to \"**refrigerate**\" it's `WindowThread` and `IslandWindow`. `WindowEmperor` will take care of tracking the threads that are refrigerated. \r\n* When a new window is requested, the Emperor first try to \"**reheat**\"/\"**microwave**\" a refrigerated thread. When a thread gets reheated, we'll create a new AppHost (and `TerminalWindow`/`Page`), and we'll use the _existing_ `IslandWindow` for that instance. \r\n\r\n<sub>The metaphor is obviously ridiculous, but _you get it_ so who cares.</sub>\r\n\r\nIn this way, we'll keep all the windows we've ever created around in memory, for later reuse. This means that the leak goes from (~12MB x number of windows closed) to (~12MB x maximum number of simultaneously open Terminal windows). It's still not good. \r\n\r\nWe won't do this on Windows 11, because the bug that is the fundamental premise of this issue is fixed already in the OS. \r\n\r\n\r\n\r\n\r\nI'm not 100% confident in this yet. \r\n* [x] There's still a d3d leak of some sort on exit in debug builds. (maybe #15306 related)\r\n  * havent seen this in a while. Must have been a issue in an earlier revision. \r\n* [x] I need to validate more on Windows 11\r\n  * [x] **BAD**: Closing the last tab on Windows 11 doesn't close the window\r\n  * [x] **BAD**: Closing a window on Windows 11 doesn't close the window - it just closes the one tab item and keeps on choochin'\r\n  * [x] **BAD**: Close last tab, open new one, attempt to close window - ALL windows go \\*poof\\*. Cause of course. No break into post-mortem either. \r\n* [x] more comments\r\n* [ ] maybe a diagram\r\n* [x] Restoring windows is at the wrong place entirely? I once reopened the Terminal with two persisted windows, and it created one at 0,0\r\n* [x] Remaining code TODO!s: 0 (?)\r\n* [ ] \"warm-reloading\" `useTabsInTitlebar` (change while terminal is running after closing a window, open a new one) REALLY doesn't work. Obviously restores the last kind of window. Yike. \r\n\r\nis all about #15384\r\n\r\ncloses #15410 along the way. Might fork that fix off. ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-24T19:32:54Z",
        "closed_at": "2023-05-26T19:32:15Z",
        "merged_at": "2023-05-26T19:32:15Z",
        "body": "This regressed in a1f42e8 which only made changes to Windows Terminal\r\nbut forgot to make equivalent ones in OpenConsole/conhost.\r\nWithout this fix, line breaks in block selections are missing if the\r\nline doesn't force a wrap via an explicit newline.\r\n\r\nCloses #15153\r\n\r\n## Validation Steps Performed\r\n* Run Far or print long lines of text\r\n* Trigger block selection via Ctrl+M or Edit > Mark\r\n* Clipboard contains N-1 newlines lines for N selected rows \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-24T15:37:20Z",
        "closed_at": "2023-05-25T20:25:10Z",
        "merged_at": "2023-05-25T20:25:10Z",
        "body": "Because this looks like it's entirely broken in `main`, and possibly in 1.17(?)\r\n\r\nWe didn't take a strong ref to the coroutine parameter. As to be expected, that explodes. \r\n\r\nCloses #15412",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-24T14:21:31Z",
        "closed_at": "2023-05-25T18:21:56Z",
        "merged_at": "2023-05-25T18:21:56Z",
        "body": "Woops. Regressed in #15343. Fixes #15409.\r\n\r\n## Validation Steps Performed\r\n* Run `RenderingTests.exe`\r\n* Soft fonts work \u2705",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 48,
        "deletions": 1,
        "changed_files": 9,
        "created_at": "2023-05-24T09:35:34Z",
        "closed_at": "2023-06-30T00:15:47Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\nAdded menu flyout to \"Open JSON\" that takes you to the JSON parent folder instead.\r\nThis is in response to #12382 \r\nAdded comments for the one function I had to implement for the path. Nothing complicated.\r\n\r\n\r\n\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 16,
        "changed_files": 2,
        "created_at": "2023-05-23T17:37:36Z",
        "closed_at": "2023-06-09T23:06:29Z",
        "merged_at": "2023-06-09T23:06:29Z",
        "body": "Improvements and explanations:\r\n\r\n* Added proper indentation and spacing for better readability.\r\n* Added comments to explain the purpose of different sections of the\r\n  code.\r\n* Utilized the $LASTEXITCODE variable instead of $lastexitcode to ensure\r\n  consistency.\r\n* Changed the variable name from $testdlls to $testDlls for better\r\n  naming convention.\r\n* Moved the Exit 0 statement to the end (outside the if condition).\r\n* Since Exit statements terminate the script immediately, it's better to\r\n  have them at the end of the script to ensure that all necessary\r\n  cleanup or additional operations are performed before exiting.\r\n* These improvements enhance the code's readability, maintainability,\r\n  and adherence to best practices.\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 21,
        "changed_files": 6,
        "created_at": "2023-05-23T12:25:19Z",
        "closed_at": "2023-05-25T17:39:44Z",
        "merged_at": "2023-05-25T17:39:44Z",
        "body": "`til::rect`'s truthiness check (= rect is valid) returns `false` for\r\nany rects that have negative coordinates. This makes sense for buffer\r\nhandling, but breaks AtlasEngine, where glyph coordinates can go out\r\nof bounds and it's entirely valid for that to happen.\r\n\r\nCloses #15416\r\n\r\n## Validation Steps Performed\r\n* Use MesloLGM NF and print NF glyphs in the first row\r\n* Text rendering, selection, etc., still works \u2705",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-22T11:17:35Z",
        "closed_at": "2023-05-22T16:00:45Z",
        "merged_at": "2023-05-22T16:00:45Z",
        "body": "Re: #15384\r\n\r\nBasically, when we close a `DesktopWindowXamlSource`, it calls to `Windows_UI_Xaml!DirectUI::MetadataAPI::Reset`, which resets the XAML metadata provider _for the process_. So, closing one DWXS on one thread will force an A/V next time another thread tries to do something like... display a tooltip. Not immediately, but surely soon enough.\r\n\r\nThis was fixed in Windows 11 by os.2020!5837001. That wasn't backported to Windows 10.\r\n\r\nThis will cause a ~15MB memory leak PER WINDOW. OBVIOUSLY, this is bad, but it's less bad than crashing. \r\n\r\nWe're gonna keep using #15384 for other ideas here too. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-19T16:29:45Z",
        "closed_at": "2023-05-22T11:07:59Z",
        "merged_at": "2023-05-22T11:07:59Z",
        "body": "As discussed. Closes #15364.\r\n\r\nPrevents one crash on Windows 10. Opens the door to may more horrors.\r\n\r\nCo-authored by: @j4james\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-18T20:59:31Z",
        "closed_at": "2023-06-02T15:51:44Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\nCurrently, when pressing Ctrl + C to copy the selected text, the selection disappears.\r\nThis commit prevents the selection to disappear after doing Ctrl + C.\r\n\r\n## References and Relevant Issues\r\nhttps://github.com/microsoft/terminal/issues/15371\r\n\r\n## PR Checklist\r\n- [x] Closes https://github.com/microsoft/terminal/issues/15371\r\n- [x] Tests ~~added~~/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-18T15:51:36Z",
        "closed_at": "2023-05-18T16:27:34Z",
        "merged_at": "2023-05-18T16:27:34Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 31,
        "changed_files": 4,
        "created_at": "2023-05-17T23:28:17Z",
        "closed_at": "2023-05-18T15:22:29Z",
        "merged_at": "2023-05-18T15:22:29Z",
        "body": "It turns out that the store API *doesn't* tell us what the new version is. We were loading up our own package and checking its version instead.\r\n\r\nThe best we can do is tell users that an update--any update--is available.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 42,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-05-17T17:22:06Z",
        "closed_at": "2023-05-25T18:22:58Z",
        "merged_at": "2023-05-25T18:22:58Z",
        "body": "## Summary of the Pull Request\r\nAdd the \"Move Tab to New Window\" item to the context menu of the tabs \r\n\r\n## References and Relevant Issues\r\nhttps://github.com/microsoft/terminal/issues/15127\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\nAdd the \"Move Tab to New Window\" item to the context menu of the tabs. \r\n![Detailed_description_of_commit_PR1](https://github.com/microsoft/terminal/assets/15957528/915ac07b-1fdd-456b-b180-2645dbc29e48)\r\n\r\n## Validation Steps Performed\r\nChecked Code Style\r\nhttps://github.com/microsoft/terminal/blob/main/doc/STYLE.md\r\n\r\n## PR Checklist\r\n- [ V] Closes #15127\r\n-  [?] Tests added/passed\r\n- [ X] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ V] Schema updated (if necessary)\r\n",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 288,
        "deletions": 10,
        "changed_files": 11,
        "created_at": "2023-05-16T23:42:09Z",
        "closed_at": "2023-05-25T20:36:57Z",
        "merged_at": "2023-05-25T20:36:57Z",
        "body": "This PR introduces four new escapes sequences: `DECIC` (Insert Column),\r\n`DECDC` (Delete Column), `DECBI` (Back Index), and `DECFI` (Forward\r\nIndex), which allow for horizontal scrolling within a margin area.\r\n\r\n## References and Relevant Issues\r\n\r\nThis follows on from the horizontal margins PR #15084 to complete the\r\nrequirements for the horizontal scrolling extension.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThe implementation is fairly straightforward, since they're all built on\r\ntop of the existing `_ScrollRectHorizontally` method.\r\n\r\n## Validation Steps Performed\r\n\r\nThanks to @al20878, these operations have been extensively tested on a\r\nnumber of DEC terminals and I've manually confirmed our implementation\r\nmatches their behavior.\r\n\r\nI've also added a unit tests that covers the basic execution of each of\r\nthe operations.\r\n\r\nCloses #15109\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-05-16T22:19:25Z",
        "closed_at": "2023-05-16T22:59:36Z",
        "merged_at": "2023-05-16T22:59:36Z",
        "body": "horp dorp",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 116,
        "deletions": 32,
        "changed_files": 11,
        "created_at": "2023-05-16T19:48:24Z",
        "closed_at": "2023-06-09T22:22:21Z",
        "merged_at": "2023-06-09T22:22:21Z",
        "body": "When we detect a font that has a glyph for `U+E0B6`, we will switch the preview connection text to contain a special powerline prompt. This will allow people to see how different settings might impact their real-world environment.\r\n\r\nWhen we _don't_ detect such support, we fall back to the CMD-style `C:\\>` prompt.\r\n\r\nPros:\r\n- It's beautiful.\r\n\r\nCons:\r\n- More code\r\n\r\nRisks:\r\n- `U+E0B6` is part of the private use area, and fonts that have symbols there (such as Cirth as sub-allocated by the ConScript Unicode Registry) will result in something unexpected.\r\n- Actually, `E0B6` isn't part of base powerline... but I think this specific set of characters looks too good to pass up.\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 7,
        "changed_files": 6,
        "created_at": "2023-05-16T15:19:35Z",
        "closed_at": "2023-05-16T19:59:49Z",
        "merged_at": "2023-05-16T19:59:49Z",
        "body": "Our existing preview text was not very helpful in learning how different settings impacted the display of text in Terminal.\r\n\r\nThis new preview text contains:\r\n* Bold text, which is controlled by intenseTextStyle\r\n* Colors\r\n* Emoji\r\n* A cursor, which overlaps a single character to show inversion behavior",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 42,
        "changed_files": 1,
        "created_at": "2023-05-15T23:54:20Z",
        "closed_at": "2023-05-16T19:59:28Z",
        "merged_at": "2023-05-16T19:59:28Z",
        "body": "Some of these were reundant, and some didn't feel right when I read them.\r\n\r\nOh, and I got rid of all of these particularly unhelpful or non-additive resources:\r\n\r\n```\r\nColor Scheme        [                     v ]\r\nIs a color scheme\r\n```\r\n\r\nThe only one I am truly _iffy_ about is the one that newly says `OSC 2`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-05-15T23:29:17Z",
        "closed_at": "2023-05-16T20:01:31Z",
        "merged_at": "2023-05-16T20:01:31Z",
        "body": "I've changed the wording so that it flows better, as well.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 84,
        "deletions": 56,
        "changed_files": 7,
        "created_at": "2023-05-15T22:52:52Z",
        "closed_at": "2023-09-21T21:55:06Z",
        "merged_at": "2023-09-21T21:55:06Z",
        "body": "The Win32 API is significantly faster than the WinRT one, in the order\r\nof around 300-1000x depending on the CPU and CPU load.\r\n\r\nThis might slightly improve the situation around #15315, but I suspect\r\nthat it requires many more fixes. For instance, we don't really have a\r\nsingle text input \"queue\" into which we write. Multiple routines that\r\n`resume_background` just to `WriteFile` into the input pipe are thus\r\nracing against each other, contributing to the laggy feeling.\r\nI also fear that the modern Windows text stack might be inherently\r\nRPC based too, producing worse lag with rising CPU load.\r\n\r\nThis might fix #14323\r\n\r\n## Validation Steps Performed\r\n* Paste text from Edge \u2705\r\n* Paste text from Notepad \u2705\r\n* Right click the address bar in Explorer, choose \"Copy address\",\r\n  paste text into WT \u2705",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-05-15T16:45:54Z",
        "closed_at": "2023-05-15T18:40:41Z",
        "merged_at": "2023-05-15T18:40:41Z",
        "body": "This commit ensures that we pass the user's locale to `MapCharacters`.\r\n\r\n## Validation Steps Performed\r\nSee: https://heistak.github.io/your-code-displays-japanese-wrong/\r\nAfter modifying the `userLocaleName` to contain `ja-JP`, `zh-CN` and\r\n`zh-TW`, printing \"\u5203\u76f4\u6d77\u89d2\u9aa8\u5165\" produces the expected, localized result.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 7,
        "changed_files": 5,
        "created_at": "2023-05-15T15:15:45Z",
        "closed_at": "2023-05-15T18:40:14Z",
        "merged_at": "2023-05-15T18:40:14Z",
        "body": "This commit fixes 3 bugs that I found while working on another feature:\r\n* `GetGlyphIndices` doesn't return an error when the codepoint couldn't\r\n  be found, it simply returns a glyph index of 0.\r\n* `_resetGlyphAtlas` failed to reset the `linear_flat_set` \"load\" to 0\r\n  which would result in an unbounded memory growth over time.\r\n* `linear_flat_set` was missing move constructors/operators, which\r\n  would've led to crashes, etc., but thankfully we haven't made use\r\n  of these operators yet. But better fix it now than never.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 21,
        "changed_files": 2,
        "created_at": "2023-05-15T13:33:38Z",
        "closed_at": "2023-05-15T19:14:21Z",
        "merged_at": "2023-05-15T19:14:21Z",
        "body": "`TermControl` cannot change the text rendering engine after its\r\nconstruction. Fix the issue by deferring the construction until\r\nafter we got the initial profile settings.\r\n\r\n## Validation Steps Performed\r\n* A line height of 0.5 shows up with overlapping rows \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-05-15T12:54:10Z",
        "closed_at": "2023-05-15T18:46:40Z",
        "merged_at": "2023-05-15T18:46:40Z",
        "body": "We need to avoid calling `Present1()` with an empty dirty rect, but the\r\nbackends are what determines the resulting dirty rect, so we need to\r\nfirst run the backend code and then decide if we `Present1()` or not.\r\n\r\n## Validation Steps Performed\r\n* `Animate_scan.hlsl` shows a smoothly animated line \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 132,
        "deletions": 26,
        "changed_files": 3,
        "created_at": "2023-05-13T14:47:13Z",
        "closed_at": "2023-05-15T22:05:17Z",
        "merged_at": "2023-05-15T22:05:17Z",
        "body": "Overhangs for box glyphs can produce unsightly effects, where the\r\nantialiased edges of horizontal and vertical lines overlap between\r\nneighboring glyphs and produce \"boldened\" intersections.\r\nThis avoids the issue in most cases by simply clipping the glyph to the\r\nsize of a single cell. The downside is that it fails to work well for\r\ncustom line heights, etc.\r\n\r\n## Validation Steps Performed\r\n\r\n* With Cascadia Code, printing ``\"`u{2593}`n`u{2593}\"`` in pwsh\r\n  doesn't produce a brightened overlap anymore \u2705\r\n* ``\"`e#3`u{2502}`n`e#4`u{2502}\"`` produces a fat vertical line \u2705",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-05-12T15:04:24Z",
        "closed_at": "2023-05-12T22:22:21Z",
        "merged_at": "2023-05-12T22:22:21Z",
        "body": "Transient UIs are hard.\r\n\r\nRegressed in #15077.\r\n\r\nCloses #15305\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-05-12T14:49:23Z",
        "closed_at": "2023-05-12T18:26:05Z",
        "merged_at": "2023-05-12T18:26:05Z",
        "body": "Honestly, I don't really know where it regressed. There isn't time for me to go digging.\r\n\r\nSee also\r\n* #15313\r\n* #15164\r\n\r\nCloses #15326\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 54,
        "changed_files": 9,
        "created_at": "2023-05-12T14:31:56Z",
        "closed_at": "2023-05-15T14:11:22Z",
        "merged_at": "2023-05-15T14:11:22Z",
        "body": "XAML/WinUI may pump the event loop internally. One of the functions\r\nthat does this right now is `DesktopWindowXamlSource::Close()`.\r\n\r\nThis is problematic in the previous code, because we'd set `_window`\r\nto `nullptr` before calling `Close()` and so any of the `IslandWindow`\r\ncallbacks may be invoked during shutdown, which then try to potentially\r\naccess `_window` and end up crashing. This commit fixes the issue by\r\nsimply not nulling out the `_window` and calling `Close()` directly.\r\n\r\nFurthermore, `NonClientIslandWindow` may directly access WinUI\r\nobjects in its message handlers which also crashes.\r\n\r\nI've had this happen roughly ~1% of my test exits in a debug build\r\nand every single time on a (artificial) very slow CPU.\r\n\r\n## Validation Steps Performed\r\n* Closing a window destroys the rendering instance \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-05-11T23:52:24Z",
        "closed_at": "2023-05-12T20:15:50Z",
        "merged_at": "2023-05-12T20:15:50Z",
        "body": "`WindowEmperor` would exit as soon as the last window would enter\r\n`RundownForExit()`, which is too early and triggers leak checks.\r\nThis commit splits up the shutdown up into deregistering the window from\r\nthe list of windows and into actually decrementing the window count.\r\n\r\nCloses #15306\r\n\r\n## Validation Steps Performed\r\n* D2D leak warnings seem to disappear \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 25,
        "changed_files": 2,
        "created_at": "2023-05-11T23:43:45Z",
        "closed_at": "2023-05-12T18:14:08Z",
        "merged_at": "2023-05-12T18:14:08Z",
        "body": "After retrieving the items via `GetStorageItemsAsync()` inside a try\r\nclause it fails to check if the pointer is actually non-null.\r\nApart from this this commit fixes the unsafe use of `this` by properly\r\nusing `get_weak()`. Finally it allows >1 paths to be dropped.\r\n\r\n## Validation Steps Performed\r\n* Dropping >1 file works \u2705\r\n* Dropping >1 directory works \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 151,
        "deletions": 168,
        "changed_files": 6,
        "created_at": "2023-05-11T23:06:27Z",
        "closed_at": "2023-08-15T19:12:20Z",
        "merged_at": "2023-08-15T19:12:20Z",
        "body": "When a tab gets closed, `_RemoveTab` will call `TabBase::Shutdown()`,\r\nwhich then re-raises the `Closed` event, which will end up calling\r\n`_RemoveTab` again, etc. The only reason this didn't crash WT so far\r\nis because `_RemoveOnCloseRoutine` contains a `resume_foreground`,\r\nwhich would resolve the recursion and turn it into CPU usage.\r\nIt would spin as long as WinUI hasn't discard the tab object,\r\nwhich takes an unpredictable amount of time.\r\n\r\nRaising the `Closed` event from `Shutdown()` is unnecessary, because\r\nthe handlers of the event end up calling `_RemoveTab` anyways.\r\nTechnically the entire `Closed` event can be removed now, but I left it\r\nin anyways because resolving the architectural \"knot\" around the way\r\ntab closing after the last pane closes is implemented requires much\r\nmore significant changes.\r\n\r\nThis commit additionally removes the `_createCloseLock` mutex in `Pane`\r\nas it was very likely not working as intended anyways. Only some methods\r\nwere protected by it and it doesn't avoid any STA/MTA/NA issues either.\r\n\r\n## Validation Steps Performed\r\n* Closing tabs and panes always ends up calling `Shutdown()` \u2705\r\n\r\n\r\nCloses #14898",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 52,
        "changed_files": 4,
        "created_at": "2023-05-11T22:42:32Z",
        "closed_at": "2023-05-12T20:11:22Z",
        "merged_at": "2023-05-12T20:11:22Z",
        "body": "`ControlCore` contained two bugs:\r\n* Race condition on access of the 3 throttled funcs which may now\r\n  be `reset()` during tear out\r\n* The `ScrollPositionChanged` event emitter was written incorrectly\r\n  and would emit the event from the background thread without\r\n  throttling during tear out",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 32,
        "changed_files": 2,
        "created_at": "2023-05-11T22:12:51Z",
        "closed_at": "2023-05-12T20:15:36Z",
        "merged_at": "2023-05-12T20:15:36Z",
        "body": "We don't need to recreate the `MediaPlayer` to avoid the influence of\r\nmedia keys if we simply opt out of media key controls.\r\n\r\n## Validation Steps Performed\r\n* Set a random .wav as the bell sound\r\n* Bell is audible \u2705\r\n* Media keys have no effect while the sound plays \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 7,
        "changed_files": 5,
        "created_at": "2023-05-11T22:08:53Z",
        "closed_at": "2023-05-12T20:51:01Z",
        "merged_at": "2023-05-12T20:51:00Z",
        "body": "`native()` returns a `const std::wstring&`, whereas `wstring()`\r\nreturns a copy. Use the former to make path conversions cheaper.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 287,
        "deletions": 284,
        "changed_files": 9,
        "created_at": "2023-05-10T22:58:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This allows us to remove ExportFile (?) from the API surface of CascadiaSettings (???).\r\n\r\nIt will probably result in a small code size increase, but maybe we'll save that by making the .winmd smaller. :P",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 561,
        "deletions": 738,
        "changed_files": 24,
        "created_at": "2023-05-10T21:05:01Z",
        "closed_at": "2023-07-14T16:38:11Z",
        "merged_at": null,
        "body": "I went through random parts of Windows Terminal trying to fix as many\r\ntheoretical (and practical) bugs I could find. My initial idea was that\r\none of the biggest sources of easily detectable bugs are coroutines\r\nwhich do not properly hold onto their `this` pointer strongly across\r\nsuspension points. This commit fixes maybe about 3/4ths of those bugs.\r\nOther bugs, like `nullptr` crashes, are significantly harder to spot.\r\n\r\nTo do so I've removed `resume_foreground/background` from as many\r\ncoroutines as I could and then added assertions that data only got\r\naccessed on the UI threads. This allowed me to remove most coroutines.\r\nNext, I've added `get_weak/strong()` pointers to the remaining ones.\r\n\r\nAs a drive by it also improves the following:\r\n* `QuitAllRequestedArgs` technically isn't needed, because there was no\r\n  reason for `_saveWindowLayouts()` to yield to a background thread in\r\n  the first place.\r\n\r\n## Validation Steps Performed\r\n* TBA (I'll go through all changes and assemble a list of functionalities these affect)",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 54,
        "deletions": 68,
        "changed_files": 4,
        "created_at": "2023-05-10T20:31:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This simplifies the code (from the perspective of the CPU) by doing\r\nsome miniscule-feels-good optimizations like replacing `snprintf` with\r\nregular string concatenation and by doing an actual optimization by\r\nremoving the remaining calls to the WinRT `ApplicationModel` namespace.\r\n\r\nMore importantly however it fixes a bug: The only reason `elevate-shim`\r\nworked at all is because the shell extension passed \"wrong\" parameters\r\nto `CreateProcess`. Instead of repeating the application path in the\r\ncommand line argument again, as is convention in C and on Windows, and\r\ngetting the 2nd and following parameters as an argument to `wWinMain`,\r\nit used `GetCommandLineW` to get the original, broken command line.\r\nThis fixes the issue by passing the application path as the first\r\nargument, which allows `elevate-shim` to be called like any other app.\r\n\r\n## Validation Steps Performed\r\n* Deploy WT and restart explorer\r\n* Clicking \"Open in Terminal (Dev)\" works \u2705\r\n* Clicking \"Open in Terminal (Dev)\" while holding Ctrl+Shift\r\n  opens WT as admin \u2705",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-10T13:23:03Z",
        "closed_at": "2023-05-12T22:24:31Z",
        "merged_at": "2023-05-12T22:24:31Z",
        "body": "Don't go.\r\nTracked in #14957\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-05-10T12:48:10Z",
        "closed_at": "2023-05-11T12:03:47Z",
        "merged_at": "2023-05-11T12:03:47Z",
        "body": "As on the tin.\r\n\r\nBlocking for 1.18.\r\n\r\nTracked in #14957",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-05-09T19:11:35Z",
        "closed_at": "2023-05-12T19:26:48Z",
        "merged_at": "2023-05-12T19:26:48Z",
        "body": "I found that in all our Helix runs, we had a pesky dialog sitting on top of the Terminal. Probably the entire time.\r\n\r\nThis will, as a side effect, PGO the nearby font loader.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 35,
        "changed_files": 8,
        "created_at": "2023-05-08T21:19:13Z",
        "closed_at": "2023-05-10T18:04:42Z",
        "merged_at": "2023-05-10T18:04:42Z",
        "body": "Reverts #15164, because that's fixed upstream now.\r\n\r\nCloses #15139. \r\n\r\nReverts #15178, but also closes #15121, because that's fixed upstream.\r\n\r\nsee also:\r\n* https://github.com/microsoft/microsoft-ui-xaml/pull/8430\r\n* https://github.com/microsoft/microsoft-ui-xaml/pull/8420",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2023-05-05T19:10:43Z",
        "closed_at": "2023-05-08T17:50:34Z",
        "merged_at": "2023-05-08T17:50:34Z",
        "body": "This was removed in #14843, but the velocity flag wasn't.\r\n\r\nRelated to #14957",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-05-05T13:17:06Z",
        "closed_at": "2023-05-10T12:16:45Z",
        "merged_at": "2023-05-10T12:16:45Z",
        "body": "We need to act like a ConPTY just a little earlier in startup. My relevant notes start here: https://github.com/microsoft/terminal/issues/15245#issuecomment-1536150388. \r\n\r\nBasically, we'd create the first screen buffer with 9001 rows, because it would be created _before_ VtIo would be in a state to say \"yes, we're a conpty\". Then, if a CLI app emits an entire screenful of text _before_ the terminal has a chance to resize the conpty, then the conpty will explode during `_DoLineFeed`. That method is absolutely not expecting the buffer to get resized (and the old text buffer deallocated). \r\n\r\nInstead, this will treat the console as in ConPty mode as soon as `VtIo::Initialize` is called (this is during `ConsoleCreateIoThread`, which is right at the end of `ConsoleEstablishHandoff`, which is before the API server starts to process the client connect message).  THEORETICALLY, `VtIo` could `Initialize` then fail to create objects in `CreateIoHandlers` (which is what we used to treat as the moment that we were in conpty mode). However, if we do fail out of `CreateIoHandlers`, then the console itself will fail to start up, and just die. So I don't think that's needed.\r\n\r\nThis fixes #15245. I think this is PROBABLY also the solution to #14512, but I'm not gonna explicitly mark closed. We'll loop back on it. \r\n\r\n\r\n#### TODO\r\n* [x] I want to audit the uses of `CONSOLE_INFORMATION::IsInVtIoMode` before I commit to this.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-05-04T20:58:02Z",
        "closed_at": "2023-05-11T17:06:40Z",
        "merged_at": "2023-05-11T17:06:40Z",
        "body": "Adds support for CSI 18t to report the buffer screen size in characters.\r\n\r\nThis pull request adds support for **CSI 18t**. When submitted to the terminal, it will respond with **\"\\033[8;{A};{B}t\"** where **A** is equal to the **height** and **B** is equal to the **width** of the screen buffer in the number of characters (not pixels).\r\n\r\n## Validation Steps Performed\r\nManual tests against PowerShell 7 and ConHost.\r\nAdded adapterTest\r\n\r\nCloses #13944",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-05-04T11:53:37Z",
        "closed_at": "2023-05-15T20:10:44Z",
        "merged_at": "2023-05-15T20:10:44Z",
        "body": "_targets #15280_\r\n\r\nWhen ctrl+clicking on a profile, pre-evaluate the starting directory of that profile, and stash that in the commandline we pass to elevate shim.\r\n\r\nSo in the case of something like \"use parent process directory\", we'll run `elevate-shim new-tab -p {guid} -d \"C:\\\\the path\\\\of\\\\terminal\\\\.\"`\r\n\r\n\r\nCloses #15173\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 513,
        "deletions": 411,
        "changed_files": 15,
        "created_at": "2023-05-03T18:51:18Z",
        "closed_at": "2023-05-08T19:16:27Z",
        "merged_at": "2023-05-08T19:16:27Z",
        "body": "Oklab by Bj\u00f6rn Ottosson is a color space that has less irregularities\r\nthan the CIELAB color space used for \u0394E2000. The distance metric for\r\nOklab (\u0394EOK) is defined by CSS4 as the simple euclidian distance.\r\nThis allows us to drastically simplify the code needed to determine\r\na color that has enough contrast. The new implementation still lacks\r\nproper gamut mapping, but that's another and less important issue.\r\nI also made it so that text with the dim attribute gets adjusted just\r\nlike regular text, since this is an accessibility feature after all.\r\n\r\nThe new code is so much faster than the old code (12-125x) that I\r\ndropped any caching code we had. While this increases the CPU overhead\r\nwhen printing lots of indexed colors, the code is way less complex now.\r\n\"Increases\" in this case however means something in the order of 15-60ns\r\nper color change (as measured on my CPU). It's possible to further\r\nimprove the performance using explicit SIMD instructions, but I've\r\nleft that as a future improvement, since that will make the code quite\r\na bit more verbose and I didn't want to hinder the initial review.\r\n\r\nFinally, these new routines are also used for ensuring that the\r\nAtlasEngine cursors remains visible at all times.\r\n\r\nCloses #9610\r\n\r\n## Validation Steps Performed\r\n* When `adjustIndistinguishableColors` is enabled\r\n  colors are distinguishable \u2705\r\n* An inverted cursor on top of a `#7f7f7f` foreground & background\r\n  is still visible \u2705\r\n* A colored cursor on top of a background with identical color\r\n  is still visible \u2705\r\n* Cursors on a transparent background are visible \u2705",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2023-05-03T17:56:18Z",
        "closed_at": "2023-07-20T16:09:21Z",
        "merged_at": "2023-07-20T16:09:21Z",
        "body": "Adds an action to display a toast containing the Terminal's \"virtual\" CWD. \r\n\r\nAs described in https://github.com/microsoft/terminal/issues/4637#issuecomment-1531979200.\r\n\r\nUseful for debugging #5506 et. al. I almost left it as a debug-only feature, but figured it would be helpful for others in the #4637 landscape of things. ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 138,
        "deletions": 23,
        "changed_files": 12,
        "created_at": "2023-05-03T14:22:01Z",
        "closed_at": "2023-05-12T18:20:27Z",
        "merged_at": "2023-05-12T18:20:27Z",
        "body": "Before process model v3, each Terminal window was running in its own process, each with its own CWD. This allowed `startingDirectory: .` to work relative to the terminal's own CWD. However, now all windows share the same process, so there can only be one CWD. That's not great - folks who right-click \"open in terminal\", then \"Use parent process directory\" are only ever going to be able to use the CWD of the _first_ terminal opened. \r\n\r\nThis PR remedies this issue, with a theory we had for another issue. Essentially, we'll give each Terminal window a \"virtual\" CWD. The Terminal isn't actually in that CWD, the terminal is in `system32`. This also will prevent the Terminal from locking the directory it was originally opened in. \r\n\r\n* Closes #5506\r\n* There wasn't a 1.18 issue for \"Use parent process directory is broken\" yet, presumably selfhosters aren't using that feature\r\n* Related to #14957\r\n\r\nMany more notes on this topic in https://github.com/microsoft/terminal/issues/4637#issuecomment-1531979200\r\n\r\n\r\n> **Warning** \r\n> ## Breaking change\u203c\ufe0f\r\n\r\nThis will break a profile like \r\n\r\n```json\r\n{\r\n    \"commandline\": \"media-test.exe\",\r\n    \"name\": \"Use CWD for media-test\",\r\n    \"startingDirectory\": \".\"\r\n},\r\n```\r\n\r\nif the user right-clicks \"open in terminal\", then attempts to open that profile. There's some theoretical work we could do in a follow up to fix this, but I'm inclined to say that relative paths for `commandline`s were already dangerous and should have been avoided. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-05-03T13:48:16Z",
        "closed_at": "2023-05-04T19:08:09Z",
        "merged_at": "2023-05-04T19:08:09Z",
        "body": "Get the locale from `GetUserDefaultLocaleName` and pass it to\r\nDirectWrite's `GetGlyphs` / `GetGlyphPlacements`.\r\n\r\nThis change is very important for some fonts, which heavily depend on\r\nthe locl table, like Source Han Sans for instance.\r\n\r\nCloses #13685\r\n\r\n## Validation Steps Performed\r\n* Set font to Cascadia Code\r\n* Set locale to \"pl-PL\"\r\n* Type \"\u0106\"\r\n* The acute is less angled and almost vertical \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-05-01T15:39:04Z",
        "closed_at": "2023-05-02T18:22:12Z",
        "merged_at": "2023-05-02T18:22:12Z",
        "body": "Apparently, `ShowWindow` also sends a `WM_MOVE`, which we then turn around and use to dismiss open dialogs. \r\n\r\nCloses #15170\r\n\r\nRegressed in #13811",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-04-30T02:31:32Z",
        "closed_at": "2023-05-02T13:04:02Z",
        "merged_at": "2023-05-02T13:04:02Z",
        "body": "## Summary of the Pull Request\r\n\r\nWhen the screen is resized in ConHost via a VT escape sequence, the\r\nactive text attributes could end up being corrupted if they were set to\r\nsomething that the legacy console APIs didn't support (e.g. RGB colors).\r\nThis PR fixes that issue.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThe way a resize is implemented is by retrieving the buffer information\r\nwith `GetConsoleScreenBufferInfoEx`, updating the size fields, and then\r\nwriting the data back out again with `SetConsoleScreenBufferInfoEx`.\r\nHowever, this also results in the active attributes being updated via\r\nthe `wAttributes` field, and that's only capable of representing legacy\r\nconsole attributes.\r\n\r\nWe address this by saving the full `TextAttribute` value before it gets\r\ncorrupted in the `SetConsoleScreenBufferInfoEx` call, and then restore\r\nit again afterwards.\r\n\r\n## Validation Steps Performed\r\n\r\nI've added a unit test to verify the attributes are correctly preserved\r\nfor all VT resize operations, and I've also manually confirmed the test\r\ncase in #2540 is now working as expected.\r\n\r\n## PR Checklist\r\n- [x] Closes #2540\r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-04-29T15:15:53Z",
        "closed_at": "2023-06-22T22:17:47Z",
        "merged_at": "2023-06-22T22:17:47Z",
        "body": "By rewriting the first major copy loop in `CopyRangeFrom` to use\r\npointers/iterators instead of indices for iteration, the autovectorizer\r\nkicks in end neatly rewrites it as an unrolled SIMD loop. This improves\r\nperformance during traditional window resizes by roughly 2x and will\r\nbe quite helpful in the future for our more complex reflow resize.\r\n\r\nUnfortunately, MSVC unrolls the loop by 4x which is too much for our\r\npurpose, but there's no option to change that. It's still better than\r\nnot having any vectorization however, since it kicks in at 32 columns.\r\n\r\nIt also renames the function to `CopyTextFrom` be more in line with\r\nthe others and to avoid confusion, because it doesn't copy attributes.\r\n\r\n## Validation Steps Performed\r\n* Traditional resizing works \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 61,
        "deletions": 52,
        "changed_files": 2,
        "created_at": "2023-04-28T22:29:15Z",
        "closed_at": "2023-05-02T17:35:43Z",
        "merged_at": "2023-05-02T17:35:43Z",
        "body": "Just move session restoration into a helper function, as suggested by Leonard.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 131,
        "deletions": 115,
        "changed_files": 4,
        "created_at": "2023-04-28T21:55:37Z",
        "closed_at": "2023-05-08T19:02:02Z",
        "merged_at": "2023-05-08T19:02:02Z",
        "body": "This commit makes a few changes to avoid bugs, but they basically boil\r\ndown to: When we scroll by an entire viewport worth of content, we must\r\nensure that the scroll offset is 0, because otherwise the scroll rect\r\n(that's basically the viewport, but excluding the scroll offset) will\r\nend up being empty, which the `Present1` API chokes on. This commit\r\navoids this situation by shuffling around some code to first calculate\r\nthe dirty rows, _then_ check if it affects all of them and in that case\r\nsets the scroll offset to 0, and only then finally actually does any\r\nscrolling if there's still something to scroll.\r\n\r\n## Validation Steps Performed\r\n* Start pwsh\r\n* Zoom in twice with Ctrl+Scrollwheel\r\n* Print a few viewports worth of text\r\n* Press Ctrl+L\r\n* No errors \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 168,
        "deletions": 125,
        "changed_files": 12,
        "created_at": "2023-04-28T21:07:29Z",
        "closed_at": "2023-05-12T23:16:49Z",
        "merged_at": "2023-05-12T23:16:49Z",
        "body": "This PR adds support for the ANSI Line Feed/New Line mode (`LNM`), which\r\ndetermines whether outputting a linefeed control should also trigger a\r\ncarriage return, and whether the `Return` key should generate an `LF` in\r\naddition to `CR`.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nIn ConHost, there was already a console mode which handled the output\r\nside of things, but I've now also added a `TerminalInput` mode that\r\ncontrols the behavior of the `Return` key. When `LNM` is set, both the\r\noutput and input modes are enabled, and when reset, they're disabled.\r\n\r\nIf they're not already matching, then `LNM` has no effect, and will be\r\nreported as unknown when queried. This is the typical state for legacy\r\nconsole applications, which expect a linefeed to trigger a carriage\r\nreturn, but wouldn't want the `Return` key generating both `CR`+`LF`.\r\n\r\nAs part of this PR, I've also refactored the `ITerminalApi` interface to\r\nconsolidate what I'm now calling the \"system\" modes: bracketed paste,\r\nauto wrap, and the new line feed mode. This closes another gap between\r\nTerminal and ConHost, so both auto wrap, and line feed mode will now be\r\nsupported for conpty pass through.\r\n\r\n## Validation Steps Performed\r\n\r\nI've added an `LNM` test that checks the escape sequence is triggering\r\nboth of the expected mode changes, and added an additional `DECRQM` test\r\ncovering the currently implemented standard modes: the new `LNM`, and\r\nthe existing `IRM` (which wasn't previously tested). I've also extended\r\nthe `DECRQM` private mode test to cover `DECAWM` and Bracketed Paste\r\n(which we also weren't previously testing).\r\n\r\nI've manually tested `LNM` in Vttest to confirm the keyboard is working\r\nas expected.\r\n\r\nCloses #15167",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-04-28T15:21:34Z",
        "closed_at": "2023-04-28T23:10:19Z",
        "merged_at": "2023-04-28T23:10:19Z",
        "body": "If you were really fast, and closed one window, and then tried to drag the only tab out of the last remaining window, the Terminal could explode. It'd attempt to restore the previous window state, and explode.\r\n\r\nEasy way to stop this (also, be more robust): just don't attempt to restore windows during tear-out. That's obvious.\r\n\r\nThis is a part of #14957\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-04-28T14:35:12Z",
        "closed_at": "2023-05-01T15:20:24Z",
        "merged_at": "2023-05-01T15:20:24Z",
        "body": "This was in pursuit of #15156. I need an ack from OP to make sure this is good enough.\r\n\r\nRelated to #14957\r\n\r\nCloses #15156\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-04-28T11:40:29Z",
        "closed_at": "2023-05-02T17:33:51Z",
        "merged_at": "2023-05-02T17:33:51Z",
        "body": "Make the reset button accessible by adding description in reset.\r\n\r\nCloses #12044\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 6,
        "changed_files": 8,
        "created_at": "2023-04-27T19:20:31Z",
        "closed_at": "2023-05-11T03:32:27Z",
        "merged_at": "2023-05-11T03:32:27Z",
        "body": "Adds \r\n\r\n```\r\n        { \"command\": \"showContextMenu\", \"keys\": \"menu\" },\r\n```\r\n\r\nas a default action. This will manually invoke the control context menu (from #14775), even with the setting disabled.\r\n\r\nAs discussed with Dustin.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-04-27T19:17:31Z",
        "closed_at": "2023-05-11T03:20:25Z",
        "merged_at": "2023-05-11T03:20:25Z",
        "body": "As discussed in https://github.com/microsoft/terminal/issues/14051#issuecomment-1517973776\r\n\r\nregressed in #15189",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-27T19:16:09Z",
        "closed_at": "2023-04-28T19:25:04Z",
        "merged_at": "2023-04-28T19:25:04Z",
        "body": "As it says on the tin\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-27T15:44:21Z",
        "closed_at": "2023-05-01T14:43:38Z",
        "merged_at": "2023-05-01T14:43:38Z",
        "body": "Basically, just make sure that we register our `SettingsChanged` handler in `TerminalWindow` _after_ `TerminalWindow` is actually ready to handle it. _duh_. \r\n\r\nCloses #15209",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2023-04-27T15:27:31Z",
        "closed_at": "2023-04-28T23:05:29Z",
        "merged_at": "2023-04-28T23:05:29Z",
        "body": "A resurrection of the original nested \"Close\" menu from #7728. We discovered that nested flyouts crash in #8238. Those are fixed now though! So we can bring this back. \r\n\r\nThis also includes the \"Close Pane\" item from #15198.\r\n\r\n\r\n#### on a tab with panes:\r\n![image](https://user-images.githubusercontent.com/18356694/234910218-b96c6861-7cc7-4746-953c-2740a774b1d1.png)\r\n\r\n#### on a tab without panes:\r\n![image](https://user-images.githubusercontent.com/18356694/234910277-8b9221bc-ebaf-4e38-855c-7e35d6cd4411.png)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-04-27T14:43:49Z",
        "closed_at": "2023-04-27T17:08:32Z",
        "merged_at": "2023-04-27T17:08:32Z",
        "body": "This PR gives the atlas engine an attempt to retry a couple operations where it asks for debug flags when we're in debug mode. If you don't have the Graphics debugger and GPU profiler for DirectX installed, then these calls will fail, and we end up blowing up the renderer. Instead, just try again. \r\n\r\nOriginally, I actually thought I had hit #14082, but after sorting this out, it was just #14316.\r\n\r\ncloses #14316 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 9,
        "changed_files": 7,
        "created_at": "2023-04-26T19:17:27Z",
        "closed_at": "2023-04-28T22:50:12Z",
        "merged_at": "2023-04-28T22:50:12Z",
        "body": "_targets #15240_\r\n\r\n> Adds an action for immediately restarting the connection. I suspect most folks that wanted #3726 will be happy just with the <kbd>enter</kbd> solution from #14060, but this will work without having to `exit` the client. Just, relaunch whatever the commandline is. Easy peasy.  \r\n\r\nCloses #3726.\r\n\r\nObsoletes #14549",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 160,
        "deletions": 31,
        "changed_files": 13,
        "created_at": "2023-04-26T19:16:54Z",
        "closed_at": "2023-04-28T20:01:13Z",
        "merged_at": "2023-04-28T20:01:13Z",
        "body": "A different take on #14548.\r\n\r\n> We didn't love that a connection could transition back in the state diagram, from Closed -> Start. That felt wrong. To remedy this, we're going to allow the ControlCore to...\r\n\r\nASK the app to restart its connection. This is a much more sensible approach, than leaving the ConnectionInfo in the core and having the core do the restart itself. That's mental. \r\n\r\nCleanup from #14060\r\n\r\nCloses #14327\r\n\r\nObsoletes #14548",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 109,
        "deletions": 91,
        "changed_files": 9,
        "created_at": "2023-04-26T17:39:35Z",
        "closed_at": "2023-05-03T11:30:55Z",
        "merged_at": "2023-05-03T11:30:55Z",
        "body": "`IDWriteFontSetBuilder` is super expensive (~40ms of CPU for building a\r\nsingle font set on a high-end CPU from ~2021). Let's avoid the cost,\r\nby only constructing it if Cascadia Code is actually missing.\r\nTo not overcomplicate the code and to support any additional fonts we\r\nmight ship in the future, I'm not checking for the font name, and\r\ninstead I just construct the font set whenever any font is missing.\r\n\r\nPart of #5907\r\n\r\n## Validation Steps Performed\r\n* Breakpoints in FontCache aren't hit \u2705\r\n* App doesn't crash \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 69,
        "changed_files": 6,
        "created_at": "2023-04-25T21:39:04Z",
        "closed_at": "2023-05-03T11:21:47Z",
        "merged_at": "2023-05-03T11:21:47Z",
        "body": "This MR introduces `activeOnly ` for the `showCloseButton` theme option causing the close button only to appear on the active tab.\r\n\r\nThis is more or less following the approach explained here https://github.com/orgs/microsoft/projects/686/views/2?pane=issue&itemId=19775774 which indeed just works \ud83d\ude04 .\r\n\r\nYou notice when switching theme the close buttons is back on all tabs again as well.\r\n\r\nCloses #13672\r\n\r\nI didn't check specific unit tests for this. I hope by making this MR the pipeline will show if I broke something. Or just let me know if you want me to add something specific for this.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-25T21:03:20Z",
        "closed_at": "2023-04-25T21:36:21Z",
        "merged_at": "2023-04-25T21:36:21Z",
        "body": "Closes #15190 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-25T19:16:51Z",
        "closed_at": "2023-04-25T21:52:34Z",
        "merged_at": "2023-04-25T21:52:34Z",
        "body": "## Summary of the Pull Request\r\n\r\nThere are certain escape sequences that use the `VTParameters::subspan`\r\nmethod to access a subsection of the provided parameter list. When the\r\nparameter list is empty, that `subspan` call can end up using an offset\r\nthat is out of range, which causes the terminal to crash. This PR stops\r\nthat from happening by clamping the offset so it's in range.\r\n\r\n## References and Relevant Issues\r\n\r\nThis bug effected the `DECCARA` and `DECRARA` operations introduced in\r\nPR #14285, and the `DECPS` operation introduced in PR #13208.\r\n\r\n## Validation Steps Performed\r\n\r\nI've manually confirmed that the sequences mentioned above are no longer\r\ncrashing when executed with an empty parameter list, and I've added a\r\nlittle unit test that checks `VTParameters::subspan` method is returning\r\nthe expected results when passed an offset that is out of range.\r\n\r\n## PR Checklist\r\n- [x] Closes #15234\r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-04-25T15:13:35Z",
        "closed_at": "2023-04-25T20:25:30Z",
        "merged_at": "2023-04-25T20:25:30Z",
        "body": "Apparently, `std::function` is bad and we should feel bad. I friggen hate the c++ function pointer syntax, but [I do what I'm told](https://getyarn.io/yarn-clip/85c318d8-f4a7-4da6-ae20-23d7b737e71c)\r\n\r\nI missed this comment in #15020. Sorry!\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-04-25T15:09:58Z",
        "closed_at": "2023-04-25T20:58:14Z",
        "merged_at": "2023-04-25T20:58:14Z",
        "body": "It seemed dangerous to just have places all over Pane where we manipulate the whole cadre of TermControl events. Seemed ripe for a copypasta error. This moves that around, so there's only two methods for messing with the TermControl callbacks: `_setupControlEvents` and `_removeControlEvents`.\r\n\r\nCloses: nothing. This was an off-the-cuff commit that seemed valuable. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-04-24T18:49:17Z",
        "closed_at": "2023-04-25T14:43:51Z",
        "merged_at": "2023-04-25T14:43:51Z",
        "body": "See https://github.com/microsoft/terminal/issues/14957#issuecomment-1520522722.\r\n\r\nI think there's a race here that lets the WindowEmperor muck around with the window after it's done, but before we remove it from our list of threads. \r\n\r\nThis _should_ remove the thread from the list, _then_ null out the AppHost, then flush the XAML queue, preventing the A/V. \r\n\r\nCloses MSFT:43995981",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 52,
        "changed_files": 3,
        "created_at": "2023-04-22T15:24:21Z",
        "closed_at": "2023-04-23T10:49:03Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 375,
        "changed_files": 13,
        "created_at": "2023-04-21T22:34:14Z",
        "closed_at": "2023-04-25T16:28:55Z",
        "merged_at": "2023-04-25T16:28:55Z",
        "body": "The ability to build and run Terminal as a UWP application was removed in #12119. We left some of its vestiges around, but now there is no need for them.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-04-21T21:40:04Z",
        "closed_at": "2023-04-26T22:34:15Z",
        "merged_at": "2023-04-26T22:34:15Z",
        "body": "Adds support to jump list generation for icon paths that include an indirect reference e.g. `c:\\windows\\system32\\shell32.dll,214`\r\n\r\nIf given a path that has an indirect icon reference parse the path into component parts `filePath` and `iconIndex` and use `IShellLinkW::SetIconLocation` to set the Icon for the entry. Otherwise do what we always do.\r\n\r\nThis PR also introduces `til::to_int`, which is based on `til::to_ulong` and supports signed integers.\r\n\r\n## Validation Steps Performed\r\nIcons were visible in the jump list and in terminal next to the profiles.\r\n\r\nCloses #15205 \r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-21T15:45:29Z",
        "closed_at": "2023-04-21T21:36:19Z",
        "merged_at": "2023-04-21T21:36:19Z",
        "body": "Fixes a crash when pressing a keybinding in the settings tab. \r\n\r\nRegressed in #15203\r\n\r\nNoted in #14051\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-04-20T18:43:18Z",
        "closed_at": "2023-04-24T21:41:11Z",
        "merged_at": "2023-04-24T21:41:11Z",
        "body": "Just changing the Theme also doesn't seem to work by itself - there seems to be a way for the tab to set the deselected foreground onto itself as it becomes selected. If the mouse isn't over the tab, that can result in mismatched fg/bg's \r\n\r\nRegressed around #15078 \r\n\r\nCloses #15184",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-20T18:09:51Z",
        "closed_at": "2023-04-24T22:14:17Z",
        "merged_at": "2023-04-24T22:14:17Z",
        "body": "`WINRT_LEAN_AND_MEAN` removes a bunch of less often used parts of the C++/WinRT headers:\r\n\r\n- `std::hash` specializations for every object\r\n- `operator <<(ostream)` overloads for any `IStringable`\r\n- Interface producers for interfaces that are marked \"exclusive\"\r\n\r\nThere's only one place where we were using even one of these.\r\n\r\nEnabling this saves us (optimistically) 30 seconds of build time on the CI agents and shrinks our largest PCH (TerminalApp, x64, Debug) by about 150MiB.\r\n\r\nIt's not huge, but it's not nothing.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-20T15:47:03Z",
        "closed_at": "2023-04-25T21:42:09Z",
        "merged_at": "2023-04-25T21:42:09Z",
        "body": "We had a report in a mail thread that someone's Terminal windows were getting created hidden, and never showing themselves.\r\n\r\nAs a theory, I'm guessing that dwFlags didn't say that we should actually use `wShowWindow`. So, to be more correct, let's actually obey that.\r\n\r\nI'm gonna send this package to them to see if it fixes them.\r\n\r\nRelated to #14957.\r\n\r\nLikely regressed in #13838.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 67,
        "changed_files": 3,
        "created_at": "2023-04-19T12:13:19Z",
        "closed_at": "2023-04-25T22:28:07Z",
        "merged_at": "2023-04-25T22:28:07Z",
        "body": "The AppInitialized latency metric logs how long the application needs\r\nto initialize the UI. 5b434dc broke this metric, because it was now\r\nexecuting the code outside of the `Initialized` callback.\r\nIt's the difference between a \"latency\" of ~50ms and ~350ms.\r\n\r\nAs an added bonus it moves the `_ApplyStartupTaskStateChange` task\r\ninto the `Initialized` callback as well, because why not.\r\n\r\n## Validation Steps Performed\r\n* Breakpoint into \"AppInitialized\" - latency is now correct \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 235,
        "deletions": 169,
        "changed_files": 9,
        "created_at": "2023-04-18T17:23:56Z",
        "closed_at": "2023-04-20T12:31:45Z",
        "merged_at": "2023-04-20T12:31:45Z",
        "body": "This fixes 3 sources for animations:\r\n* `TabView`'s `EntranceThemeTransition` causes tabs to slowly slide in\r\n  from the bottom. Removing the transition requires you to override the\r\n  entire list of transitions obviously, which is a global change. Nice.\r\n  Am I glad I don't need to deal with the complexity of CSS. /s\r\n* `TabBase`, `SettingsTab` and `TerminalTab` where using a lot of\r\n  coroutines with `resume_foreground` even though almost none of the\r\n  functions are called from background tabs in the first place. This\r\n  caused us to miss the initial XAML drawing pass, which resulted in\r\n  animations when the tab icons would asynchronously pop into existence.\r\n  It also appears as if `resume_foreground`, etc. have a very high CPU\r\n  cost attached, which surprises me absolutely not at all given WinRT.\r\n\r\nThe improvement is difficult to quantify because the run to run\r\nvariation is very high. But it seems like this shaves about 10% off\r\nof the ~500ms startup delay on my PC depending on how you measure it.\r\n\r\nPart of #5907\r\n\r\n## PR Checklist\r\n* It starts when it should \u2705\r\n* It doesn't \"exit\" when it shouldn't \u2705\r\n  (Scrolling, Settings reload, Bell `\\a`, Progress `\\e]9;4;2;80\\e\\\\`)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 76,
        "deletions": 67,
        "changed_files": 9,
        "created_at": "2023-04-18T16:42:04Z",
        "closed_at": "2023-04-19T19:18:37Z",
        "merged_at": "2023-04-19T19:18:37Z",
        "body": "This sets `x:Load` to `false` for the two elements.\r\nOn my system, with Windows Defender disabled, this reduces CPU\r\nusage by 15ms and the visual delay during launch by 40ms.\r\n\r\nPart of #5907\r\n\r\n## Validation Steps Performed\r\n* Ctrl+Shift+P opens command palette \u2705\r\n* Context menu opens command palette \u2705\r\n* Context menu opens about dialog \u2705",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-04-18T15:25:24Z",
        "closed_at": "2023-04-18T15:31:27Z",
        "merged_at": null,
        "body": "## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\n## Validation Steps Performed\r\n\r\n## PR Checklist\r\n- [ ] Closes #xxx\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-18T10:14:39Z",
        "closed_at": "2023-04-20T13:18:13Z",
        "merged_at": "2023-04-20T13:18:13Z",
        "body": "Add automation heading level 1 to fix the about dialog by adding an automation property.\r\n\r\nAllows screen reader to pick up that this is a heading and read properly.\r\n\r\nCloses #11912",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-04-18T01:51:59Z",
        "closed_at": "2023-04-26T17:37:09Z",
        "merged_at": "2023-04-26T17:37:09Z",
        "body": "## Summary of the Pull Request\r\nAdding a 'Close Pane' menu item in the context menu.\r\n\r\n## References and Relevant Issues\r\n#13580 \r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\nIf a user decides to split a tab to create multiple panes through the context menu, they should be able to then close the pane via the context menu too. This PR introduces a new context menu item, 'Close Pane', that only appears when a user has 2 or more panes in a tab. When a user clicks close pane, the _active_pane will be closed.\r\n\r\n## Validation Steps Performed\r\n![close_pane_terminal](https://user-images.githubusercontent.com/98557455/232649000-8b521070-4f1b-4da9-8092-6ff802e91e2c.gif)\r\n\r\nAs it's my first PR, I still need to understand how to go through the testing suite.\r\n\r\n## PR Checklist\r\n- [x] Closes #13580 \r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 62,
        "changed_files": 7,
        "created_at": "2023-04-17T20:04:21Z",
        "closed_at": "2023-04-18T16:23:14Z",
        "merged_at": "2023-04-18T16:23:13Z",
        "body": "This sets `x:Load` to `false` for the two elements.\r\nOn my system, with Windows Defender disabled, this reduces CPU\r\nusage by 15ms and the visual delay during launch by 40ms.\r\n\r\nPart of #5907\r\n\r\n## PR Checklist\r\n* Ctrl+Shift+P opens command palette \u2705\r\n* Context menu opens command palette \u2705\r\n* Context menu opens about dialog \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 2,
        "changed_files": 5,
        "created_at": "2023-04-17T19:45:46Z",
        "closed_at": "2023-04-20T12:42:14Z",
        "merged_at": "2023-04-20T12:42:14Z",
        "body": "## Summary of the Pull Request\r\nAdd an infobar warning when a non-monospaced font is selected.\r\n## References and Relevant Issues\r\n#13389 \r\n## Detailed Description of the Pull Request / Additional comments\r\nI initially had the `IsOpen` property of the infobar bound to the `ShowAllFonts` checkbox property. However, I felt we could do better by adding a property for it since there was already a method defined to inspect whether the selected font was in the `MonoSpaceFontList`.\r\n## Validation Steps Performed\r\nWarning shows up when a non-monospaced font is selected either globally or on individual profiles. All existing tests continue to pass.\r\n<img width=\"868\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2086722/232594214-cd42397b-ce9d-499c-aa73-3feaa45e850e.png\">\r\n\r\n## PR Checklist\r\n- [x] Closes #13389 \r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-04-15T23:40:41Z",
        "closed_at": "2023-04-20T19:00:37Z",
        "merged_at": "2023-04-20T19:00:37Z",
        "body": "Default to XamlRoot when unable to find a focused object in DirectKeyEvents\r\n\r\nThis may not be the most appropriate \"fix\" for this. Certainly open to criticism and feedback. We are trapping the alt+space key chord on the win32 side and forwarding it to the xaml side. There we try to find a focused object by walking the xaml tree. If we are unable to find a focused object we return false and do nothing.  I suspect that the area that has focus that prevents this from working normally is on the win32 side.  Since we want to handle the system menu anyway and are explicitly trapping that key combo and forwarding it on I thought this was the best approach. If we cant find a focused object default to the xaml root.\r\n\r\n## Validation Steps Performed\r\nSystem menu opens as it should.\r\n\r\nCloses #14397 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 63,
        "changed_files": 2,
        "created_at": "2023-04-15T21:29:01Z",
        "closed_at": "2023-04-19T17:42:24Z",
        "merged_at": "2023-04-19T17:42:24Z",
        "body": "`WM_ACTIVATE` is sent on window creation, whereas `WM_SHOWWINDOW` is\r\nsent when the window is shown. Before we call `Peasant::ActivateWindow`\r\nin the `WM_ACTIVATE` handler, we try to get the virtual desktop GUID of\r\nour window, but since it's not shown yet during startup, there's also\r\nno GUID that can be retrieved. This results in an error log message and\r\nan all 0 GUID to be sent via `Peasant::ActivateWindow`.\r\nThe GUID of the window that actually spawned on the other hand is never\r\nreported until the first time you reactivate it again, leading to a\r\nnumber of subtle bugs around window activity.\r\n\r\nAdditionally, this commit fixes a race condition and pointer unsafety,\r\nby pulling all relevant member variables onto the coroutine's stack,\r\nbefore it yields itself to a background thread.\r\n\r\n## Validation Steps Performed\r\n- Set a trace breakpoint on `_peasantNotifyActivateWindow`\r\n- GUID is non-zero \u2705\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-04-14T17:47:33Z",
        "closed_at": "2023-04-17T13:28:29Z",
        "merged_at": "2023-04-17T13:28:29Z",
        "body": "This fixes the BreadcrumbBar issue that would crash into the debugger anytime you open the SUI on a second thread.\r\n\r\nSee #14957.\r\n\r\nMaybe also tracked in #15144 - let's have @j4james test when this merges. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-13T20:53:11Z",
        "closed_at": "2023-04-14T17:13:07Z",
        "merged_at": "2023-04-14T17:13:07Z",
        "body": "Fixes an issue when using both:\r\n\r\n```json\r\n    \"centerOnLaunch\": true,\r\n    \"firstWindowPreference\": \"persistedWindowLayout\",\r\n```\r\n\r\nIn this case, the Terminal would ignore the persisted location and still just center on launch. This has been really annoying while testing tear-out, as we keep re-opening all my debug windows as a stack on top of each other. ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 36,
        "changed_files": 3,
        "created_at": "2023-04-13T20:47:54Z",
        "closed_at": "2023-04-17T13:27:53Z",
        "merged_at": "2023-04-17T13:27:52Z",
        "body": "TL;DR: we stopped getting `TabView.TabItemsChanged`. This meant that the tab view would change its apparent order, but we wouldn't change the backing tab order. \r\n\r\nI'm fixing this by grabbing the index of the tab that starts the drag, and the index of the tab view item at the end of the drag, and using that to reorder our backing list. \r\n\r\nCloses #15121\r\n\r\nUpstream https://github.com/microsoft/microsoft-ui-xaml/issues/8388\r\n\r\nRegressed in #15078 - I'm pretty confident about this, since I've got a 1.18.931 build of the Terminal with tear-out, but not MUX 2.8.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-04-13T14:25:24Z",
        "closed_at": "2023-04-25T21:32:45Z",
        "merged_at": "2023-04-25T21:32:45Z",
        "body": "This bug causes AtlasEngine to render buffer contents with an incorrect\r\n`cellCount`, which may either cause it to draw the contents only\r\npartially, or potentially access the TextBuffer contents out of bounds.\r\n\r\n`EnablePainting` sets the `_viewport` to the current viewport for some\r\nunfortunate (and quite buggy/incorrect) caching purposes, which causes\r\n`_CheckViewportAndScroll()` to think that the viewport hasn't changed\r\nin the new window. We can ensure `_CheckViewportAndScroll()` works\r\nby also setting `_forceUpdateViewport` to `true`.\r\n\r\nPart of #14957\r\n\r\n## PR Checklist\r\n* Tear out a tab from a smaller window to a larger window\r\n* Renderer contents adept to the larger window size \u2705",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-04-12T11:44:09Z",
        "closed_at": "2023-04-14T21:15:09Z",
        "merged_at": "2023-04-14T21:15:09Z",
        "body": "The code changes are mostly self-explanatory: Just skip glyphs\r\nthat can never be inserted. I implemented it slightly incorrectly\r\n(a newline will be inserted every time you write such a wide glyph),\r\nbut it's a niche issue and I think the simplicity of the fix is\r\nmore important than its exact correctness.\r\n\r\nIt also contains a fix for some severe log spam due to\r\n`_PrepareForDoubleByteSequence` complaining in this situation.\r\nThe spam is so bad that it freezes the app for a few seconds\r\nduring text buffer reflow.\r\n\r\nCloses #7416\r\n\r\n## Validation Steps Performed\r\n* Open an extra pane and run `TerminalStress.exe` in there\r\n* Resize to 1 column\r\n* Doesn't hang \u2705",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 34,
        "changed_files": 2,
        "created_at": "2023-04-12T01:51:59Z",
        "closed_at": "2023-04-14T18:52:40Z",
        "merged_at": "2023-04-14T18:52:40Z",
        "body": "## Summary of the Pull Request\r\nThis pull request updates the implementation of the copy assignment operator for Pane::LayoutSizeNode to a more efficient version and eliminates the need for the _AssignChildNode code block. \r\n## References and Relevant Issues\r\n#11965 #11963 \r\n## Detailed Description of the Pull Request / Additional comments\r\nMy understanding of the discussion and intent of the two linked issues is that this is a more efficient way to implement the copy assignment operator for Pane.LayoutSizeNode and eliminates the need for the code block _AssignChildNode. Since both were relatively small changes, I combined the two in one PR. If that is not desirable, I can separate them. All existing tests continue to pass.\r\n\r\n<img width=\"769\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2086722/231326683-8f685f58-5748-4d49-8a38-80ef5db3d5a2.png\">\r\n\r\n## Validation Steps Performed\r\nAll existing tests pass. No visible changes in behavior of the terminal.\r\n## PR Checklist\r\n- [x] Closes #11963  \r\n- [x] Closes #11965 \r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-04-11T20:17:31Z",
        "closed_at": "2023-04-12T16:56:56Z",
        "merged_at": "2023-04-12T16:56:56Z",
        "body": "Don't generate a profile for rancher-desktop utility WSL distro\r\n\r\nAdds a check for rancher-desktop as well as docker. As mentioned in the discussion of this issue. This becomes much more difficult to maintain once other folks inevitably start to follow this pattern. But the easy win was up for grabs so I took it :)\r\n\r\nCloses #12757 ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-04-11T19:54:30Z",
        "closed_at": "2023-04-14T18:07:05Z",
        "merged_at": "2023-04-14T18:07:05Z",
        "body": "As discussed in #6507\r\n\r\nNewer builds of Windows do this automatically. However, this was spotted in the wild on 1.18. It's possible the threading changes created a situation where the OS-side fix no longer applied to us. So let's just do it manually. It doesn't have any side effects.\r\n\r\nI saw this once on Win11, but couldn't repro it this morning when I tried to add this fix. I'm just gonna assume this worked, despite the fact that I can't repro it on win11 anymore.\r\n\r\ncloses #6507\r\n\r\nSee also #14957\r\n\r\n## detailed description\r\n\r\n> `WindowsXamlManager::XamlCore::Initialize` calls `ConfigureCoreWindow`, which creates a `CoreWindow` on the thread\r\n\r\n> Problem is, we're calling that on the main thread (which doesn't have _any_ windows), and then eventually creating a `DesktopWindowXamlSource` on a second thread for the actual window\r\n\r\n> It's not that it \"manages a window\", it's that it \"manages xaml on Windows OS\". just use ICoreWindowInterop -- QI for ICoreWindowInterop and call get_WindowHandle.\r\n\r\nAlso see:\r\n* [ICoreWindowInterop](https://learn.microsoft.com/en-us/windows/win32/api/corewindow/nn-corewindow-icorewindowinterop)\r\n* [WindowsXamlManager.InitializeForCurrentThread](https://learn.microsoft.com/en-us/uwp/api/windows.ui.xaml.hosting.windowsxamlmanager.initializeforcurrentthread?view=winrt-22621#windows-ui-xaml-hosting-windowsxamlmanager-initializeforcurrentthread)\r\n* The source code in `onecoreuap\\windows\\dxaml\\xcp\\dxaml\\lib\\WindowsXamlManager_Partial.*`\r\n* os.2020!6102020 which fixed MSFT:33498969, MSFT:27807465, MSFT:21854264",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-04-11T19:50:22Z",
        "closed_at": "2023-04-20T17:13:40Z",
        "merged_at": "2023-04-20T17:13:40Z",
        "body": "Set the padding to the default TabViewHeaderPadding (8,0,0,0), but with\r\n-1 on the bottom. This prevents a small 1px gap that can appear on 150%\r\nscale displays between the tab item and the content. The 1 on top helps keep\r\nthe tab the correct relative height within the tab row.\r\n\r\n\r\nRegressed in #15078 \r\n\r\nSee also MSFT:40692364",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 74,
        "changed_files": 2,
        "created_at": "2023-04-11T16:44:48Z",
        "closed_at": "2023-04-17T14:53:59Z",
        "merged_at": "2023-04-17T14:53:59Z",
        "body": "* make the list of MenuItems observable, so the nav view can actually listen for changes to it\r\n* Use the MenuItemsSource to find the index to add at, rather than the MenuItems (which isn't accurate anymore)\r\n* Stash a single observable vector as the menuitemsource, and modify that whenever we need to do modifications.\r\n  * I attempted to create a new vector, then copy into the new one, then replace the MenuItemsSource with the new vector, but that _refused_ to work. So let's just... not.\r\n\r\nRegressed in #14630\r\nCloses #15140\r\n\r\nManually validated that this and #13673 are still fixed",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-04-11T14:50:18Z",
        "closed_at": "2023-04-12T16:57:25Z",
        "merged_at": "2023-04-12T16:57:25Z",
        "body": "Moves our `GetWindowLayoutRequested` handler AFTER the xaml island is started. The `AppHost::_GetWindowLayoutAsync` handler requires us to be able to work on our UI thread, which requires that we have a `Dispatcher` ready for us to move to. If we set up this callback in the ctor, then it is possible for there to be a time slice where\r\n* the monarch creates the peasant for us,\r\n* we get ctor'ed (registering the callback)\r\n* then the monarch attempts to query all _peasants_ for their layout, coming back to ask us even before XAML has been created.\r\n\r\nI believe this was the source of the crash that was reported in a mail thread. It actually happened to me once while debugging another branch. Alas, this was realy hard to hit in the first place, so I'm not _totally_ certain this fixes it.\r\n\r\nRelated to #14957\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-04-11T13:58:24Z",
        "closed_at": "2023-04-11T22:10:12Z",
        "merged_at": "2023-04-11T22:10:12Z",
        "body": "Yep, I forgot to not write them back to the settings file here.\r\n\r\nRegressed in #15108 \r\n\r\nCloses #15152 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 63,
        "changed_files": 10,
        "created_at": "2023-04-10T21:01:29Z",
        "closed_at": "2023-04-26T16:37:22Z",
        "merged_at": "2023-04-26T16:37:22Z",
        "body": "This adds support for XTerm's \"bracketed paste\" mode in ConHost. When\r\nenabled, any pasted text is bracketed with a pair of escape sequences,\r\nwhich lets the receiving application know that the content was pasted\r\nrather than typed.\r\n\r\n## References and Relevant Issues\r\n\r\nBracketed paste mode was added to Windows Terminal in PR #9034.\r\nAdding it to ConHost ticks one more item off the list in #13408. \r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThis only applies when VT input mode is enabled, since that is the way\r\nWindows Terminal currently works.\r\n\r\nWhen it comes to filtering, though, the only change I've made is to\r\nfilter out the escape character, and only when bracketed mode is\r\nenabled. That's necessary to prevent any attempts to bypass the\r\nbracketing, but I didn't want to mess with the expected behavior for\r\nlegacy apps if bracketed mode is disabled.\r\n\r\n## Validation Steps Performed\r\n\r\nManually tested in bash with `bind 'set enable-bracketed-paste on'` and\r\nconfirmed that pasted content is now buffered, instead of being executed\r\nimmediately.\r\n\r\nAlso tested in VIM, and confirmed that you can now paste preformatted\r\ncode without the autoindent breaking the formatting.\r\n\r\nCloses #395\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-04-10T19:43:48Z",
        "closed_at": "2023-04-18T16:23:18Z",
        "merged_at": "2023-04-18T16:23:18Z",
        "body": "## Summary of the Pull Request\r\nAdd subtext that lets the user know why Always show tabs is not toggleable in SUI. Also adds some additional information to the comment for this value that points to the Globals_ShowTitlebar.Header setting.\r\n\r\n## References and Relevant Issues\r\n#13984 \r\n## Detailed Description of the Pull Request / Additional comments\r\nSimple updates to the resources that add some additional helpful information for the user.\r\n## Validation Steps Performed\r\nVerified the updates show in the SUI and that they render correctly.\r\n## PR Checklist\r\n- [ ] Closes #13984 \r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [ ] Schema updated (if necessary)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-07T19:24:03Z",
        "closed_at": "2023-04-10T20:17:30Z",
        "merged_at": "2023-04-10T20:17:30Z",
        "body": "I have observed the test comment coming back from Helix with `&quot;` and friends in it.\r\n\r\nIt ends badly as you might imagine.\r\n\r\nThis unescape will be a no-op if the data is already well-formed.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-04-07T13:05:22Z",
        "closed_at": "2023-04-17T14:12:45Z",
        "merged_at": "2023-04-17T14:12:45Z",
        "body": "This pull request adds the requirement for the shift key to be pressed in addition to the control key.\r\n\r\nReferences #14810\r\nImplemented in #14873\r\n\r\nThis is follow up work from my last pull request that was merged that only required the control key to be pressed to launch the terminal as admin from the shell context menu. After some discussion it was decided that the shift key should be required as well as that is the norm on Windows.\r\n\r\n## Validation Steps Performed\r\n\r\nTested all combinations of shift+ctrl and verified that the terminal only requests elevation when a shift and control key are pressed together. The shell launches regularly if not.",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 42,
        "deletions": 19,
        "changed_files": 1,
        "created_at": "2023-04-07T00:01:26Z",
        "closed_at": "2023-04-20T12:47:06Z",
        "merged_at": "2023-04-20T12:47:06Z",
        "body": "This PR adds a convenience feature to New-UnpackagedTerminalDistribution that produces an unpackaged layout from an already-unpacked AppX, like the one Visual Studio registers.\r\n\r\n```powershell\r\nNew-UnpackagedTerminalDistribution `\r\n    -TerminalLayout path\\to\\bin\\x64\\Debug\\AppX `\r\n    -XamlAppX path\\to\\xaml\\2.8.appx\r\n```\r\n\r\nThe output item when you build an unpackaged layout is the temp folder in which the distribution was built. It will not make a zip file for you.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-04-06T20:38:05Z",
        "closed_at": "2023-04-06T21:32:41Z",
        "merged_at": "2023-04-06T21:32:41Z",
        "body": "Some of our automated tooling detects this as being a private API that we're accessing via LoadLibrary/GetProcAddress. It's not *wrong*, but it's also not *right*.\r\n\r\nIt's easier for us to just not do it (and save all the code for it!) in OpenConsole.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-04-06T20:03:51Z",
        "closed_at": "2023-04-11T22:59:25Z",
        "merged_at": "2023-04-11T22:59:25Z",
        "body": "When win32-input-mode is enabled, we generate an input sequence for both\r\nkey down and key up events. However, in the initial implementation the\r\nkey up sequence for most keypresses would be faked - they were generated\r\nat the same time as the key down sequence, regardless of when the key\r\nwas actually released. After this PR, we'll only generate the key up\r\nsequence once a key has actually been released.\r\n\r\n## References and Relevant Issues\r\n\r\nThe initial implementation of win32-input-mode was in PR #6309.\r\nThe spec for win32-input-mode was in PR #5887.\r\n\r\n## Validation Steps Performed\r\n\r\nI've manually tested this with an app that polls `ReadConsoleInput` in a\r\nloop and logs the results. With this PR applied, I can now see the key\r\nup events as a key is released, rather than when it was first pressed.\r\n\r\nWhen compared with conhost, though, there are some differences. When\r\ntyping a shifted key, e.g. `Shift`+`A`, WT generates key down and key up\r\nevents for both the `Shift` and the `A`, while conhost only generates\r\nboth events for the `Shift` - the `A` won't generate a key up event\r\nunless you release the `Shift` before the `A`. That seems more like a\r\nconhost flaw though.\r\n\r\nAnother case I tested was the Japanese Microsoft IME, which in conhost\r\nwill generate a key down event for the Japanese character being inserted\r\nfollowed by a key up event for for `Return`. WT generates key up events\r\nfor the ASCII characters being typed in the IME, then both a key down\r\nand key up event for the inserted Japanese character, and finally a key\r\nup event for `Return`. Both of those seem weird, but they still appear\r\nto work OK. \r\n\r\nThe current version of WT actually produces the most sensible behavior\r\nfor the IME - it just generates key up and key down events for the\r\ninserted character. But that's only because it's dropping most of the\r\nsystem generated key up events.\r\n\r\nCloses #8440\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-06T17:02:09Z",
        "closed_at": "2023-04-06T20:03:13Z",
        "merged_at": "2023-04-06T20:03:13Z",
        "body": "This was an oversight in the original implementation",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-04-06T00:02:19Z",
        "closed_at": "2023-04-06T20:01:00Z",
        "merged_at": "2023-04-06T20:01:00Z",
        "body": "The unpackaged distribution was made for this exact use, so let's *do it*!",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-04-05T22:00:10Z",
        "closed_at": "2023-04-05T22:52:05Z",
        "merged_at": "2023-04-05T22:52:05Z",
        "body": "This is a regression caused by 599b550. If I'm reading `stream.cpp`\r\nin cf87590 right, it returns `STATUS_SUCCESS` if `ReadCharacterInput`\r\nread at least 1 character. I think? this PR makes the code behave\r\nexactly equivalent. The old code is a bit of an \"acquired taste\"\r\nso it's a bit hard to tell.\r\n\r\nCloses #15116\r\n\r\n## PR Checklist\r\n* Run `more long_text_file.txt` in cmd\r\n* Press Spacebar\r\n* Scrolls down \u2705\r\n* Press Q\r\n* Exits \u2705",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-04-05T20:52:59Z",
        "closed_at": "2023-04-05T23:10:54Z",
        "merged_at": "2023-04-05T23:10:54Z",
        "body": "Big surprise, apparently W.F.Uri can parse the empty string into garbage!",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-04-05T19:01:15Z",
        "closed_at": "2023-04-05T22:04:59Z",
        "merged_at": "2023-04-05T22:04:59Z",
        "body": "Unpackaged installations don't have the luxury of magic package\r\nisolation to stop them from accidentally touching each other's monarchs.\r\nWe need to enforce that ourselves by making their monarch CLSIDs unique\r\nper install.\r\n\r\nWe'll use a v5 UUID based on the install folder to unique them.\r\n\r\nCloses #15117",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-04-04T21:02:20Z",
        "closed_at": "2023-04-06T15:51:57Z",
        "merged_at": "2023-04-06T15:51:57Z",
        "body": "Making Conhost pick up codepage from .lnk files.\r\n\r\nBecause of the wrong assignment order, the Conhost was not picking up the codepage stored in .lnk shortcut files. This change fixes this issue by changing the order of the assignment to the correct one.\r\n\r\nThis is a potential backward compatibility issue.\r\n\r\nSince this issue has been present in the codebase for years, this change runs a high risk of breaking backward compatibility with software that depends on incorrect behavior.\r\n\r\n## Validation Steps Performed\r\nTested fix manually (using **chcp** command, making sure each .lnk codepage was picked up.) against **Debug**/**Release** **x64** builds with **5** different .lnk files:\r\n\r\n1. Arabic codepage 1256\r\n2. Greek 869\r\n3. Latin2 852\r\n4. Thai 874\r\n5. Traditional Chinese 50229\r\n\r\nRan TAEF tests against **Debug**/**Release** **x64**/**x86** with identical results as **main** branch.\r\n\r\nTested against **invalid** codepage numbers by **manually manipulating .lnk file binary**. In case of an **invalid** codepage number, Conhost defaults to a **valid default one**, which I assume is expected behavior.\r\n\r\nCloses #14942",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 188,
        "deletions": 138,
        "changed_files": 13,
        "created_at": "2023-04-04T20:45:39Z",
        "closed_at": "2023-04-05T15:03:21Z",
        "merged_at": "2023-04-05T15:03:21Z",
        "body": "Upgrading clang-format lead to a few changes in the formatting\r\nof code inside macros. Apart from the upgrade, I've also spent\r\nsome time removing all options from .clang-format that are\r\nredundant with `BasedOnStyle: Microsoft`.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 75,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-04-04T18:47:08Z",
        "closed_at": "2023-04-06T16:50:31Z",
        "merged_at": "2023-04-06T16:50:31Z",
        "body": "This is a minimal version of the requests for #14858. In that thread we discussed FULL reverting the default themes to the old ones. In later discussion, we decided _meh_, let's just ship the legacy themes too, so it's easy to go back if you should choose. The default still remains the sane `dark`, but the `legacy*` themes are all right there, and given the same special treatment as the other inbox themes.\r\n\r\nCloses #14858\r\nCloses #14844\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 517,
        "deletions": 373,
        "changed_files": 64,
        "created_at": "2023-04-04T17:05:38Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This pull request introduces the module Microsoft.Terminal.UI.dll, and moves into it the following things:\r\n\r\n- Any `IDirectKeyListener`\r\n- All XAML converter helpers from around the project\r\n   - ... including `IconPathConverter` from TerminalSettingsModel\r\n   - ... but not `EmptyStringVisibilityConverter`, which has died\r\n\r\nIt also adds a XAML Markup Extension named `mtu:ResourceString`, which will allow us to refer to string resources directly from XAML. It will allow us to remove all of the places in the code where we manually set resources on XAML controls.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-04-04T16:17:42Z",
        "closed_at": "2023-04-13T18:38:39Z",
        "merged_at": "2023-04-13T18:38:39Z",
        "body": "This is a test PR for kicking the CI.\r\n\r\nLooking through this test, I seriously don't understand how this doesn't work. I mean, I don't really get how it _does_ work, but at this point in the tests, we've actually established that both `Nihilist.exe` _and_ openconsole are running. From my read, there's no reason these should be failing at this point. \r\n\r\nWe previously added a \"retry 5 times\" bit to this test, in #8534. That did work back then. So uh, just do that... again?",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 73,
        "deletions": 188,
        "changed_files": 4,
        "created_at": "2023-04-04T16:11:13Z",
        "closed_at": "2023-04-05T14:59:21Z",
        "merged_at": "2023-04-05T14:59:21Z",
        "body": "This will allow us to share the same fundamental text insertion\r\nlogic for both `ResizeTraditional` and `Reflow`, because both\r\ncan be implemented with `ROW::CopyRangeFrom`. It also replaces\r\nthe `BufferAllocator` struct with a `_allocateBuffer` function\r\nwhich will help us allocate scratch buffer rows in the future.\r\n\r\nCloses #14696\r\n\r\n## PR Checklist\r\n* Disable reflow resize in conhost\r\n* Print \"zhwik8.txt\" - a enwik8.txt equivalent of Chinese Wikipedia\r\n* Run `color 80` in cmd\r\n* Resize windows from 120 to 119 columns\r\n* Wide glyphs disappear and are replaced with whitespace \u2705\r\n* Resizing the window to >120 columns adds gray whitespace \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 32,
        "changed_files": 11,
        "created_at": "2023-04-04T11:53:22Z",
        "closed_at": "2023-04-04T15:19:20Z",
        "merged_at": "2023-04-04T15:19:20Z",
        "body": "C++ is a very well balanced and reasonable language, which is why\r\n`static` inside classes means \"shared between all instances\", whereas\r\n`static` outside of classes means \"not shared between all .cpp files\".\r\n\r\n32 years after this problem was written onto parchment it was fixed with\r\nthe introduction of inline variables in C++17, which tell the compiler\r\nto deduplicate variables the same way it deduplicates functions.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 59,
        "changed_files": 7,
        "created_at": "2023-04-03T23:38:47Z",
        "closed_at": "2023-04-04T16:33:18Z",
        "merged_at": "2023-04-04T16:33:18Z",
        "body": "I noticed this bug while resizing my window on my 150% scale display.\r\nEvery 3 \"snaps\" of the window size, it would fail to resize the text\r\nbuffer. I found that this occurs, because we convert the swap chain\r\nsize from a float into a double, which converts my 597.333313 height\r\ninto 597.33331298828125, which then multiplied by 1.5 results in\r\n895.999969482421875. If you just cast this to an integer, it'll\r\nresult in a height of 895px instead of the expected 896px.\r\n\r\nThis PR addresses the issue in two ways:\r\n* Replace casts to integers with `lrint` or `floor`, etc.\r\n* Remove many of the redundant double <> float conversions.\r\n\r\n## PR Checklist\r\n* Resizing my window always resizes the text buffer \u2705",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 23,
        "changed_files": 7,
        "created_at": "2023-04-03T23:00:13Z",
        "closed_at": "2023-04-04T21:11:13Z",
        "merged_at": "2023-04-04T21:11:13Z",
        "body": "The upgrade to Microsoft.UI.Xaml 2.8 was the last piece we needed to\r\nbreak our dependency on the App CRT *and* any CRT whatsoever.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-03T21:55:17Z",
        "closed_at": "2023-04-03T22:08:07Z",
        "merged_at": "2023-04-03T22:08:07Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-03T20:05:13Z",
        "closed_at": "2023-04-03T21:22:25Z",
        "merged_at": "2023-04-03T21:22:25Z",
        "body": "This will reduce the incidence of confusables, RTL, and non-printables messing with the display of the URL.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 14,
        "changed_files": 4,
        "created_at": "2023-04-03T19:35:51Z",
        "closed_at": "2023-04-04T14:21:44Z",
        "merged_at": "2023-04-04T14:21:44Z",
        "body": "Fixes a bug where you'd drag across the boundary and the new window would be at the wrong size\r\n\r\nrelated to #14957",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 319,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2023-04-03T14:47:22Z",
        "closed_at": "2023-04-03T18:21:22Z",
        "merged_at": "2023-04-03T18:21:22Z",
        "body": "This tool augments `vttest` by adding some things that are specific to\r\nus (like non-VT console attributes), and some things `vttest` is\r\nseemingly too old for (like emojis). I'm planning to add more \"pages\"\r\nof tests to the application in the future, whenever the need arises.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 47,
        "changed_files": 6,
        "created_at": "2023-04-03T14:29:21Z",
        "closed_at": "2023-04-03T18:39:37Z",
        "merged_at": "2023-04-03T18:39:37Z",
        "body": "Rendering hyperlinks is unneccessarily complex at the moment, because\r\nit requires you to implement `UpdateDrawingBrushes`, manually extract\r\nthe hyperlink flag from the given `TextAttribute` and save it until the\r\nnext call to `PaintBufferGridLines` which does not get that flag.\r\nThis isn't particularly clean as it assumes that `PaintBufferGridLines`\r\nwill be called after `UpdateDrawingBrushes` in the first place.\r\n\r\nInstead, we can simply pass the hyperlink flag to `UpdateDrawingBrushes`\r\nso that the renderers don't need to deal with this anymore.\r\n\r\n## PR Checklist\r\n* Hyperlinks show up with a dotted line \u2705\r\n* Hovering hyperlinks underline them \u2705",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 222,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2023-04-03T14:19:11Z",
        "closed_at": "2023-04-04T17:50:11Z",
        "merged_at": "2023-04-04T17:50:10Z",
        "body": "`til::linear_flat_set` is a primitive hash map with linear probing.\r\nThe implementation is slightly complicated due to the use of templates.\r\nI've strongly considered just writing multiple copies of this class,\r\nby hand since the code is indeed fairly trivial but ended up deciding\r\nagainst it, because this templated approach makes testing easier.\r\n\r\nThis class is in the order of 10x faster than `std::unordered_map`.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 135,
        "deletions": 3,
        "changed_files": 6,
        "created_at": "2023-04-03T13:58:27Z",
        "closed_at": "2023-04-04T13:47:37Z",
        "merged_at": "2023-04-04T13:47:37Z",
        "body": "It can be costly, difficult, or often impossible to compare two\r\ninstances of a struct. This little helper can simplify this.\r\n\r\nThe underlying idea is that changes in state occur much less often than\r\nthe amount of data that's being processed in between. As such, this\r\nhelper assumes that _any_ modification to the struct it wraps is a\r\nstate change. When you compare the modified instance with another\r\nthe comparison operator will then always return false. This makes\r\nstate changes potentially more costly, because more state might be\r\ninvalidated than was necessary, but on the other hand it makes both,\r\nthe code simpler and the fast-path (no state change) much faster.\r\n\r\nFor instance, let's look at the amount of data that represents a\r\nuser's chosen font: It encompasses the font family, size and weight,\r\nfont axes (a vector of tuples), dpi and cell height/width overrides.\r\nComparing all that data, every time the user changes anything, is\r\nfairly complex to code and maintain and costly at runtime, even though\r\nthe user will change the only font very seldomly. Instead, we can\r\noptimize for the common case of no font changes occuring and simply\r\nassume that if any font related field changed, all fields changed.\r\nThis is exactly what `til::generational` does.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-04-03T13:45:30Z",
        "closed_at": "2023-04-03T18:14:01Z",
        "merged_at": "2023-04-03T18:14:01Z",
        "body": "A trivial change. :)",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1025,
        "deletions": 351,
        "changed_files": 13,
        "created_at": "2023-04-03T01:08:49Z",
        "closed_at": "2023-05-15T22:32:30Z",
        "merged_at": "2023-05-15T22:32:30Z",
        "body": "This PR introduces two new escapes sequences: `DECLRMM` (Left Right\r\nMargin Mode), which enables the horizontal margin support, and `DECSLRM`\r\n(Set Left and Right Margins), which does exactly what the name suggests.\r\n\r\nA whole lot of existing operations have then been updated to take those\r\nhorizontal margins into account.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nThe main complication was in figuring out in what way each operation is\r\naffected, since there's a fair amount of variation.\r\n\r\n* When writing text to the buffer, we need to wrap within the horizontal\r\nmargins, but only when the cursor is also within the vertical margins,\r\notherwise we just wrap within the boundaries of the screen.\r\n\r\n* Not all cursor movement operations are constrained by the margins, but\r\nfor those that are, we clamp within both the vertical and horizontal\r\nmargins. But if the cursor is already outside the margins, it is just\r\nclamped at the edges of the screen.\r\n\r\n* The `ICH` and `DCH` operations are constrained by the horizontal\r\nmargins, but only when inside the vertical margins. And if the cursor is\r\noutside the horizontal margins, these operations have no effect at all.\r\n\r\n* The rectangular area operations are clamped within the horizontal\r\nmargins when in the origin mode, the same way they're clamped within the\r\nvertical margins.\r\n\r\n* The scrolling operations only scroll the area inside both horizontal\r\nand vertical margins. This includes the `IL` and `DL` operations, but\r\nthey also won't have any effect at all unless the cursor is already\r\ninside the margin area.\r\n\r\n* `CR` returns to the left margin rather than the start of the line,\r\nunless the cursor is already left of that margin, or outside the\r\nvertical margins.\r\n\r\n* `LF`, `VT`, `FF`, and `IND` only trigger a scroll at the bottom margin\r\nif the cursor is already inside both vertical and horizontal margins.\r\nThe same rules apply to `RI` when triggering a scroll at the top margin.\r\n\r\nAnother thing worth noting is the change to the `ANSISYSSC` operation.\r\nSince that shares the same escape sequence as `DECSLRM`, they can't both\r\nbe active at the same time. However, the latter is only meant to be\r\nactive when `DECLRMM` is set, so by default `ANSISYSC` will still work,\r\nbut it'll no longer apply once the `DECLRMM` mode is enabled.\r\n\r\n## Validation Steps Performed\r\n\r\nThanks to @al20878, these operations have been extensively tested on a\r\nnumber of DEC terminals and I've manually confirmed our implementation\r\nmatches their behavior.\r\n\r\nI've also extended some of our existing unit tests to cover at least the\r\nbasic margin handling, although not all of the edge cases.\r\n\r\nCloses #14876",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 322,
        "deletions": 262,
        "changed_files": 25,
        "created_at": "2023-04-01T18:43:00Z",
        "closed_at": "2023-04-11T23:01:11Z",
        "merged_at": "2023-04-11T23:01:11Z",
        "body": "Existing environment variables can be referenced by enclosing the name in percent characters (e.g. `%PATH%`).\r\n\r\nResurrects #9287 by @christapley.\r\n\r\nTests added and manually tested.\r\n\r\nCloses #2785\r\nCloses #9233\r\n\r\nCo-authored-by: Chris Tapley <chris.tapley.81@gmail.com>",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-03-31T19:47:18Z",
        "closed_at": "2023-03-31T20:49:13Z",
        "merged_at": "2023-03-31T20:49:12Z",
        "body": "Due to a bad merge a few commits back. This event should have had a revoker. \r\n\r\nProbably regressed in #14851 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 38,
        "changed_files": 5,
        "created_at": "2023-03-31T19:43:23Z",
        "closed_at": "2023-04-03T22:40:46Z",
        "merged_at": "2023-04-03T22:40:46Z",
        "body": "Updates the Terminal to Microsoft.UI.Xaml v2.8. \r\n\r\n* MUX 2.8 adds a dependency on WebView2, so we need to include that too.\r\n* See https://github.com/microsoft/microsoft-ui-xaml/pull/7574 for why we're adding the `.props`\r\n* The TabView thing: \r\n  > tl;dr: In >=MUX 2.7, we were updating our tab colors by doing a \"Visual State Dance\", as I called it. We'd manually change the `TabViewItem`'s VisualState to one that it wasn't in, then change it back to the one it should be in. This seemingly re-applied the new values of the brushes. However in 2.8, this seemingly didn't work anymore!\r\n  > \r\n  > So instead, we do a \"Theme Dance\", like so:\r\n  > ```c++\r\n  >   const auto& reqTheme = TabViewItem().RequestedTheme();\r\n  >   TabViewItem().RequestedTheme(ElementTheme::Light);\r\n  >   TabViewItem().RequestedTheme(ElementTheme::Dark);\r\n  >   TabViewItem().RequestedTheme(reqTheme);\r\n  >   ```\r\n  > This causes the `ThemeResource`s to be re-evaluated to the new values. \r\n  > We never got to the root cause of why this seems different in 2.8. It literally makes no sense. \r\n\r\n\r\n### checklist \r\n\r\n* [x] closes #13495",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-03-31T10:26:20Z",
        "closed_at": "2023-04-25T20:24:06Z",
        "merged_at": "2023-04-25T20:24:06Z",
        "body": "Original bug report #15049\r\nRelates to feature #1571 \r\n\r\nMenuFlyoutSubItem, when collapsing from profile selection, move focus back to the titlebar. \r\nAn extra Closing event handler is needed to keep focus on the command shell.\r\n\r\nCloses #15049 \r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 19,
        "changed_files": 3,
        "created_at": "2023-03-30T21:57:58Z",
        "closed_at": "2023-04-05T14:58:53Z",
        "merged_at": "2023-04-05T14:58:53Z",
        "body": "On a real VT terminal, most of the control characters that don't do\r\nanything are supposed to be filtered out, and not written to the buffer.\r\nUp to to now, though, we've only been filtering out `NUL`. This PR\r\nextends our control processing to filter the remaining characters that\r\naren't supposed to be displayed.\r\n\r\nWe introduced filtering for the `NUL` control in PR #3015.\r\n\r\nThe are two special cases worth mentioning.\r\n\r\n1. The `SUB` control's main purpose is to the cancel a control sequence\r\nthat is in progress, but it also needs to output an error character (a\r\nreverse question mark) to the display.\r\n\r\n2. The `DEL` control is typically filtered out, but when a 96-character\r\nset is designated, it can sometimes be mapped to a printable glyph that\r\nneeds to be displayed.\r\n\r\n## Validation Steps Performed\r\n\r\nI've manually tested that all the controls that are meant to be filtered\r\nout are no longer being displayed.\r\n\r\nI've also extended the existing `NUL` unit test to cover the full set of\r\ncontrols characters that are supposed to be filtered.\r\n\r\nCloses #10786\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-03-29T05:25:24Z",
        "closed_at": "2023-04-14T20:25:07Z",
        "merged_at": "2023-04-14T20:25:07Z",
        "body": "Hides the cursor when null, shows it when not.\r\nClear the screen any time the connection is changed.\r\n\r\n## Summary of the Pull Request\r\nPrevents the WPF Control from crashing when set back to null, clears the console and hides the mouse as well.\r\n## References and Relevant Issues\r\n#15061\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nIt say 3 ansi commands as well now:\r\n1) When the Connection is set to null the cursor is hidden (reflects what the default state is)\r\n2) When the Connection is set to a value and it was null before we show the cursor (not a breaking change as requires it to have been null which previously would cause a crash, except for for set)\r\n3) When the Connection is changed the screen is cleared.  A breaking change officially although not sure if there are use cases where this behavior is not desired.  For added safety we could make sure we are not being set to the same value we currently are.\r\n\r\nNone of the ansi commands are needed, users could do it all themselves as well, the behavior largely seemed natural though.  I didn't see any ansi constants anywhere so they are just hard coded with comments, but not sure if there is an established better practice.\r\n\r\nCloses #15061\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 22,
        "changed_files": 2,
        "created_at": "2023-03-28T00:41:05Z",
        "closed_at": "2023-03-28T19:03:42Z",
        "merged_at": "2023-03-28T19:03:41Z",
        "body": "## Summary of the Pull Request\r\n\r\nWhen saving and restoring the cursor position with origin mode enabled,\r\nwe originally matched the behavior of the early DEC terminals, which\r\nstored the position as an absolute offset. But if the margin boundaries\r\nwere changed prior to restoring the position, that could result in the\r\ncursor being outside the margins, potentially with negative coordinates.\r\n\r\nOur implementation avoided that bug by clamping the coordinates back\r\ninto range, but that's not how DEC ultimately fixed the issue. Starting\r\nwith the VT420, they began using relative coordinates (i.e. relative to\r\nthe margin origin), so a restored position could never end up negative.\r\nThis PR updates our implementation to match that newer behavior.\r\n\r\n## Validation Steps Performed\r\n\r\nThank to testing performed by @al20878, we know this was the algorithm\r\nused on the VT420, VT520, and VT525, and I've manually confirmed that\r\nour implementation now matches their behavior.\r\n\r\nI've also updated the `CursorSaveRestore` unit test which previously\r\ncovered our clamping behavior - it's now being used to confirm that\r\nwe're correctly using relative offsets when restoring the cursor.\r\n\r\n## PR Checklist\r\n- [x] Closes #15048\r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n- [ ] Schema updated (if necessary)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 10,
        "changed_files": 10,
        "created_at": "2023-03-27T16:33:11Z",
        "closed_at": "2023-03-31T22:12:00Z",
        "merged_at": "2023-03-31T22:12:00Z",
        "body": "This pull request implements portable mode for Windows Terminal, which\r\nwill make side by side deployment of different versions generally more\r\nfeasible.\r\n\r\nPortable mode was specified in #15032.\r\n\r\nThere are three broad categories of changes in this PR:\r\n\r\n1. Changes to settings loading.\r\n2. A new indicator in the settings UI plus a link to the portable mode\r\n   docs.\r\n3. A new application display name, `Terminal (Portable)`, which users\r\n   will hopefully include in their bug reports.\r\n\r\nIt's surprisingly small for how big a deal it is!\r\n\r\nRelated to #15034\r\nCloses #1386",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-03-27T16:29:46Z",
        "closed_at": "2023-03-28T15:23:58Z",
        "merged_at": "2023-03-28T15:23:58Z",
        "body": "[Flexible Virtualization] is a little more restrictive than `unvirtualizedResources`, but it's more descriptive and stands a chance of working on Windows 10.\r\n\r\nThis makes `unvirtualizedResources` actually work for us - we can tell the system exactly which registry keys we want to use. This is required for our registry writes to work on Windows 10.\r\n\r\n[Flexible Virtualization]: https://learn.microsoft.com/en-us/windows/msix/desktop/flexible-virtualization",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-26T11:55:02Z",
        "closed_at": "2023-03-27T16:44:54Z",
        "merged_at": "2023-03-27T16:44:54Z",
        "body": "This regression is caused by 0eff8c0. It previously said `.Y` here.\r\nI went through the diff again and found no other width/height mistake.\r\n\r\nCloses #14762\r\nCloses #15043",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-23T22:11:59Z",
        "closed_at": "2023-03-24T22:21:50Z",
        "merged_at": "2023-03-24T22:21:50Z",
        "body": ";)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 28,
        "changed_files": 3,
        "created_at": "2023-03-23T21:57:41Z",
        "closed_at": "2023-03-24T13:30:59Z",
        "merged_at": "2023-03-24T13:30:59Z",
        "body": "* These `Icon` bindings were to `Profile`s which aren't Observable, but it also doesn't matter\r\n* More c# warnings\r\n\r\nhopefully we'll just jump straight to real errors now.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-03-23T00:44:18Z",
        "closed_at": "2023-03-23T23:14:49Z",
        "merged_at": "2023-03-23T23:14:49Z",
        "body": "The PowerShell equivalent was added in the initial pull request, #7774.\r\n\r\nCloses #13721",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 269,
        "deletions": 10,
        "changed_files": 7,
        "created_at": "2023-03-22T23:39:54Z",
        "closed_at": "2023-03-30T21:38:11Z",
        "merged_at": "2023-03-30T21:38:11Z",
        "body": "Since the removal of the Win10-specific variant of the Terminal MSIX in\r\n#15031, there has been no officially-sanctioned (or even unofficially\r\ntested!) way to get an unzippable double-click-runnable version of\r\nWindows Terminal.\r\n\r\nDue to a quirk in the resource loading system, an unpackaged\r\ndistribution of Terminal needs to ship all of XAML's resources and all\r\nof is own resources in a single `resources.pri` file. The tooling to\r\nsupport this is minimal, and we were previously just coasting by on\r\nVisual Studio's generosity plus how the prerelease distribution of XAML\r\nembedded itself into the consuming package.\r\n\r\nThis pull request introduces a build phase plus a supporting script (or\r\nthree) that produces a ZIP file distribution of Windows Terminal when\r\ngiven a Terminal MSIX and an XAML AppX.\r\n\r\nThe three scripts are:\r\n\r\n1. A script to merge any number of PRI files and/or PRI dump files (made\r\n   with `makepri dump /dt detailed`)\r\n2. A script that specifically merges XAML's resources with Terminal's.\r\n   This is necessary because the XAML package emits a couple PRI\r\n   resources into Terminal's resources _even when it is not\r\n   co-packaged._ We need to remove the conflicting resources.\r\n3. Finally, a script to take a WT and XAML distribution and combine them\r\n   -- resources, files, everything -- and strip out the things that we\r\n   don't need. This script is an all-in-one that calls the other two and\r\n   produces a ZIP file at the end.\r\n\r\nThe final distribution is named after the PFN\r\n(`Microsoft.WindowsTerminal`, or `...Preview` or `WindowsTerminalDev`),\r\nthe version number and the architecture. When expanded, it produces a\r\ndirectory named `terminal-X.Y.Z.A` (version number.)\r\n\r\nI've also added the build script to the release pipeline.\r\n\r\nAs a treat, this also produces an unpackaged distribution out of every\r\nCI build... that way, contributors can download live deployable copies\r\nof WT Unpackaged to test out their changes. Pretty cool.\r\n\r\nRefs #1386",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-03-22T19:37:39Z",
        "closed_at": "2023-03-31T20:46:00Z",
        "merged_at": "2023-03-31T20:46:00Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 150,
        "changed_files": 19,
        "created_at": "2023-03-22T19:26:20Z",
        "closed_at": "2023-03-24T13:31:17Z",
        "merged_at": "2023-03-24T13:31:17Z",
        "body": "We ship a separate package to Windows 10, which contains a copy of XAML embedded in it, because of a bug in activating classes from framework packages while we're elevated.\r\n\r\nWe did this to avoid wasting disk space on Windows 11 installs (which is critical given that we're preinstalled in the Windows image.)\r\n\r\nThe fix for this issue was released in a servicing update in April 2022. Thanks to KB5011831, we no longer need this workaround!\r\n\r\nAnd finally, this means that we no longer need to depend on a copy of \"pre-release\" XAML. We only did that because it would copy all of its assets into our package.\r\n\r\nIntroduced in #12560\r\nCloses #14106\r\nCloses (discussion) #14981\r\nReverts #14660",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-03-22T18:15:11Z",
        "closed_at": "2023-03-24T13:30:38Z",
        "merged_at": "2023-03-24T13:30:38Z",
        "body": "If we get initialized with a window name, this will be called before XAML is stood up, and constructing a PropertyChangedEventArgs will throw. So don't.\r\n\r\n\r\nRegressed in #14843 \r\n\r\nRelated to #5000, #14957 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 372,
        "deletions": 9,
        "changed_files": 9,
        "created_at": "2023-03-21T20:34:39Z",
        "closed_at": "2023-05-03T17:41:37Z",
        "merged_at": "2023-05-03T17:41:37Z",
        "body": "## Summary of the Pull Request\r\n\r\nThis was a fever dream I had last July. What if, instead of `WINRT_PROPERTY` magic macros everywhere, we had actual templated versions you could debug into. \r\n\r\nSo instead of \r\n\r\n```c++\r\nWINRT_PROPERTY(bool, Deleted, false);\r\nWINRT_PROPERTY(OriginTag, Origin, OriginTag::None);\r\nWINRT_PROPERTY(guid, Updates);\r\n```\r\n\r\nyou'd do \r\n\r\n```c++\r\ntil::property<bool> Deleted{ false };\r\ntil::property<OriginTag> Origin{ OriginTag::None };\r\ntil::property<guid> Updates;\r\n```\r\n\r\n.... and then I just kinda kept doing that. So I did that for `til::event` and `til::forwarded_event` too.\r\n\r\n**AND THEN LAST WEEK**\r\n\r\nRaymond Chen was like: [\"this is a good idea\"](https://devblogs.microsoft.com/oldnewthing/20230317-00/?p=107946)\r\n\r\nSo here it is. \r\n\r\n## Validation Steps Performed\r\nAdded some simple tests.\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 64,
        "changed_files": 6,
        "created_at": "2023-03-21T18:20:25Z",
        "closed_at": "2023-03-21T20:18:22Z",
        "merged_at": "2023-03-21T20:18:22Z",
        "body": "Due to a limitation in the Windows App Installer UI, Terminal had to shell out to `reg.exe` to write the Delegation registry keys. The team in charge of AppInstaller lifted that (once by-policy) limitation.\r\n\r\nTherefore, we can remove our BODGY workaround.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 101,
        "deletions": 41,
        "changed_files": 16,
        "created_at": "2023-03-21T16:05:19Z",
        "closed_at": "2023-08-15T15:39:37Z",
        "merged_at": "2023-08-15T15:39:37Z",
        "body": "_targets #14943_\r\n\r\nWhen this is true, this will re-use the existing commandline to pre-filter the results. This is especially helpful for completing a suggestion based on the text that's already been typed.\r\n\r\nLike with command history, this requires that shell integration is enabled before it will work.## Summary of the Pull Request\r\n\r\n## References and Relevant Issues\r\n\r\nSee also #13445 \r\nAs spec'd in #14864 \r\n\r\n## Validation Steps Performed\r\n\r\nTested manually\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-03-21T10:57:30Z",
        "closed_at": "2023-03-22T17:37:09Z",
        "merged_at": "2023-03-22T17:37:09Z",
        "body": "When a `DECCRA` operation is copying content that spans a double width\r\nline, it's possible that some range of the bounding rectangle will be\r\noff-screen, and that range is not supposed to be copied. However, the\r\ncode checking for off-screen positions was using incorrect coordinates,\r\nso we would mistakenly copy content that shouldn't be copied, and drop\r\ncontent that should have been copied. This PR fixes that.\r\n\r\n## References and Relevant Issues\r\n\r\nThis was a regression introduced in PR #14650 when fixing an issue with\r\nhorizontal scrolling of DBCS characters.\r\n\r\n## Validation Steps Performed\r\n\r\nI manually verified this fixes the test case in #15019, and I've also\r\nadded a unit test that replicates that case.\r\n\r\nCloses #15019 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-03-20T22:21:16Z",
        "closed_at": "2023-03-20T22:38:21Z",
        "merged_at": "2023-03-20T22:38:21Z",
        "body": "It was brought to my attention that we should be more restrictive in which tasks we ovver a GitHub token to. Sorry!\r\n\r\nWith thanks to sitiom for the version parsing and the magic GitHub action syntax incantation for determining what is a prerelease.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 249,
        "deletions": 19,
        "changed_files": 12,
        "created_at": "2023-03-20T15:09:39Z",
        "closed_at": "2023-04-25T14:43:49Z",
        "merged_at": "2023-04-25T14:43:49Z",
        "body": "Adds a \"Select command\" and a \"Select output\" entry to the right-click context menu when the user has shell integration enabled. This lets the user quickly right-click on a command and select the entire commandline or all of its output.\r\n\r\nThis was a \"I'm waiting for reviews\" sorta idea. Seemed like a reasonable combination of features. Related to #13445, #11000.\r\n\r\nTested manually. \r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-03-17T17:31:09Z",
        "closed_at": "2023-03-17T18:52:24Z",
        "merged_at": "2023-03-17T18:52:24Z",
        "body": "Azure Devops jumps to these as the first \"error\" when you open a failing build. But these are warnings, not errors. So you're left hunting for the real error. _If only someone had scrollbar marks for indicating lines with error messages..._\r\n\r\nMay as well clean them up. \r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-03-17T17:29:48Z",
        "closed_at": "2023-03-17T22:12:32Z",
        "merged_at": "2023-03-17T22:12:32Z",
        "body": "The less we need the C++ runtime, the better.\r\n\r\nAs of 1.17, I measured this as growing our package by a fair amount...\r\nbut less than the size of XamlHost and all the forwarders combined.\r\n\r\nReducing our dependency surface makes us easier to deploy and more reliable.\r\n\r\n_as of 1.17 (2022-10)_\r\n\r\n| **File**                | **Before** | **After** |        **Delta** |\r\n| ----------------------- | ----------:| ---------:| ----------------:|\r\n| `OpenConsole`           |  1,273,344 | 1,359,360 |   +86,016 (84kb) |\r\n| `TerminalApp`           |  2,037,248 | 2,120,704 |   +83,456 (82kb) |\r\n| `TerminalControl`       |  1,412,608 | 1,502,720 |   +90,112 (88kb) |\r\n| `TerminalSettingsModel` |  1,510,912 | 1,621,504 | +110,592 (108kb) |\r\n| `wt`                    |     97,280 |   122,368 |   +25,088 (25kb) |\r\n| `WindowsTerminal`       |    508,928 |   575,488 |   +66,560 (65kb) |\r\n| **MSIX Overall**        |  6,488,301 | 6,799,017 | +310,716 (303kb) |\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-03-17T14:01:39Z",
        "closed_at": "2023-03-17T18:59:36Z",
        "merged_at": "2023-03-17T18:59:36Z",
        "body": "I don't think this is the resolution for #14581, but this can't hurt\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-03-16T11:11:28Z",
        "closed_at": "2023-03-16T16:51:54Z",
        "merged_at": "2023-03-16T16:51:54Z",
        "body": "## Summary of the Pull Request\r\n\r\nThis fixes a couple of audit failures in `TerminalCore` where the\r\ncompiler was complaining about functions that should have been declared\r\nas `noexcept`.\r\n\r\nThese failures have actually existed for a while, but you'd only see\r\nthem if you ran the audit build locally. They only recently started\r\nshowing up on the CI build server - I'm guessing because the compiler\r\nthere has now been upgraded.\r\n\r\n## Validation Steps Performed\r\n\r\nCompiled the audit build locally and it no longer fails.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 161,
        "deletions": 132,
        "changed_files": 8,
        "created_at": "2023-03-16T08:55:04Z",
        "closed_at": "2023-03-17T18:50:19Z",
        "merged_at": "2023-03-17T18:50:19Z",
        "body": "## Summary of the Pull Request\r\nAdds a global setting `compatibility.reloadEnvironmentVariables` with a default value of `true`. When set, during connection creation a new environment block will be generated to ensure it has the latest environment variables.\r\n\r\n## Validation Steps Performed\r\nManually tested - see video in the ~~first~~ second comment.\r\n\r\n## PR Checklist\r\n- [x] Closes #1125\r\n- [ ] Tests added/passed\r\n- [ ] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx\r\n- [x] Schema updated (if necessary)\r\n",
        "comments": 14
    },
    {
        "merged": true,
        "additions": 661,
        "deletions": 24,
        "changed_files": 13,
        "created_at": "2023-03-16T01:02:36Z",
        "closed_at": "2023-03-23T22:46:18Z",
        "merged_at": "2023-03-23T22:46:18Z",
        "body": "This PR introduces two new sequences, `DECRQPSR` and `DECRSPS`, which\r\nprovide a way for applications to query and restore the presentation\r\nstate reports. This includes the tab stop report (`DECTABSR`) and the\r\ncursor information report (`DECCIR`). \r\n\r\nOne part of the cursor information report contains the character set\r\ndesignations and mapped G-sets. But we weren't tracking that data in a\r\nway that could easily be reported, so I needed to do some refactoring in\r\nthe `TerminalOutput` class to make that accessible.\r\n\r\nOther than that, the rest was fairly straightforward. It was just a\r\nmatter of packaging up all the information into the correct format for\r\nthe returned `DCS` string, and in the case of the restore operations,\r\nparsing the incoming data and applying the new state. \r\n\r\n## Validation Steps Performed\r\n\r\nThanks to @al20878, we were able to test these operations on a real\r\nVT525, and I've manually verified that our implementation matches that\r\nbehavior. I've also added some unit tests covering both reports.\r\n\r\nCloses #14984",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 89,
        "deletions": 2,
        "changed_files": 13,
        "created_at": "2023-03-14T23:40:56Z",
        "closed_at": "2023-03-22T17:32:57Z",
        "merged_at": "2023-03-22T17:32:57Z",
        "body": "## Summary of the Pull Request\r\nPR adds functionality to enable or disable readOnly mode within panes. This functionality is different to toggling as if you call the same functionality twice, it will not toggle between states.\r\n\r\n## References and Relevant Issues\r\n- Closes https://github.com/microsoft/terminal/issues/14415\r\n- Documentation https://github.com/MicrosoftDocs/terminal/pull/645\r\n\r\n## Validation Steps Performed\r\n- Checked readOnly is enabled when command triggered\r\n- Checked readOnly is enabled when command triggered while read only already enabled\r\n- Checked readOnly is disabled when command triggered while read only is enabled\r\n- Checked readOnly stays disabled when command triggered while read only is disabled\r\n- Checked above with multiple tabs and split panes\r\n\r\n## PR Checklist\r\n- [ ] Closes #14415 \r\n- [X] Tests added/passed\r\n- [x] Documentation updated\r\n   - If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: https://github.com/MicrosoftDocs/terminal/pull/645\r\n- [X] Schema updated (if necessary)\r\n",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-03-14T19:55:52Z",
        "closed_at": "2023-03-17T18:29:43Z",
        "merged_at": "2023-03-17T18:29:43Z",
        "body": "Does two things related to URLs emitted via OSC8. \r\n\r\n* Allows `wsl$` and `wsl.localhost` as the hostname in `file://` URIs\r\n* Generally allows _all_ URIs that parse as a URI. \r\n\r\nThe relevant security comments: https://github.com/microsoft/terminal/pull/7526#issuecomment-764160208\r\n> this doesn't let a would-be attacker specify command-line arguments (ala \"cmd.exe /s /c do_a_bad_thing\") (using somebody else's reputation to cause mayhem)\r\n> \r\n> `ShellExecute` de-elevates because it bounces a launch request off the shell\r\n> \r\n> \"Works predictably for 15% of applications\" (h/t to PhMajerus' AXSH, and other on-Windows requestors) is better in so many ways than \"Works for 0% of applications\", in my estimation. Incremental progress :smile: while we work on features that'll make it even more broadly applicable.\r\n\r\nCloses #10188\r\nCloses #7562\r\n\r\n_discuss_",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 47,
        "deletions": 40,
        "changed_files": 4,
        "created_at": "2023-03-14T16:26:43Z",
        "closed_at": "2023-03-17T20:43:44Z",
        "merged_at": "2023-03-17T20:43:44Z",
        "body": "#14745 contains two regressions related to console alias handling:\r\n* When `ProcessAliases` expands the backup buffer into (an) aliased\r\n  command(s) it changes the `_bytesRead` field of `COOKED_READ_DATA`,\r\n  requiring us to re-read it and reconstruct the `input` string-view.\r\n* Multiline aliases are read line-by-line whereas #14745 didn't treat\r\n  them any different from regular single-line inputs.\r\n\r\n## Validation Steps Performed\r\nIn `cmd.exe` run\r\n```\r\ndoskey test=echo foo$Techo bar$Techo baz\r\ntest\r\n```\r\nThe output should look exactly like this:\r\n```\r\nC:\\>doskey test=echo foo$Techo bar$Techo baz\r\n\r\nC:\\>test\r\nfoo\r\n\r\nC:\\>bar\r\n\r\nC:\\>baz\r\n\r\nC:\\>\r\n```",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 85,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-03-14T15:36:10Z",
        "closed_at": "2023-03-17T19:16:47Z",
        "merged_at": "2023-03-17T19:16:47Z",
        "body": "This PR adds support for querying the color indices set by the `DECAC`\r\ncontrol, using the existing `DECRQSS` implementation.\r\n\r\n## References and Relevant Issues\r\n\r\nThe initial `DECRQSS` support was added in PR #11152.\r\nThe `DECAC` functionality was added in PR #13058, but at the time we\r\ndidn't know how to format the associated `DECRQSS` query.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nFor most `DECRQSS` queries, the setting being requested is identified by\r\nthe final characters of its escape sequence. However, for the `DECAC`\r\nsettings, you also need to include a parameter value, to indicate which\r\ncolor item you're querying.\r\n\r\nThis meant we needed to extend the `DECRQSS` parser, so I also took this\r\nopportunity to ensure we correctly parsed any parameter prefix chars. We\r\ndon't yet support any setting requiring a prefix, but this makes sure we\r\ndon't respond incorrectly if an app does query such a setting.\r\n\r\n## Validation Steps Performed\r\n\r\nThanks to @al20878, we've been able to test how these queries are parsed\r\non a real VT525 terminal, and I've manually verified our implementation\r\nmatches that behavior.\r\n\r\nI've also extended the existing `DECRQSS` unit test to confirm that we\r\nare responding to the `DECAC` queries as expected.\r\n\r\n## PR Checklist\r\n- [x] Closes #13091\r\n- [x] Tests added/passed\r\n- [ ] Documentation updated\r\n- [ ] Schema updated (if necessary)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 208,
        "deletions": 0,
        "changed_files": 11,
        "created_at": "2023-03-14T02:33:56Z",
        "closed_at": "2023-03-14T16:45:46Z",
        "merged_at": "2023-03-14T16:45:46Z",
        "body": "This PR implements the `DECRQCRA` escape sequence, which lets you\r\nrequest a checksum of a portion of the screen. This is most useful in\r\nautomated testing to verify that the generated screen content is what it\r\nwas expected to be. \r\n\r\nFor now this functionality is gated behind a feature flag which is only\r\nenabled for dev builds.\r\n\r\n## Detailed Description of the Pull Request / Additional comments\r\n\r\nI've done my best to match the DEC checksum algorithm as closely as\r\npossible, which we've determined by testing on a real VT525 terminal\r\n(many thanks to @al20878 for that).\r\n\r\nThe checksum is an unsigned 16-bit value that starts off at zero, and\r\nfrom which you then subtract the ordinal value of every character in the\r\nselected range. It's also affected by the rendition attributes in the\r\nselected cells.\r\n\r\n* Bold/Intense - subtract 0x80\r\n* Blinking - subtract 0x40\r\n* Reverse video - subtract 0x20\r\n* Underlined - subtract 0x10\r\n* Invisible - subtract 0x08\r\n* Protected - subtract 0x04\r\n* Background color - subtract the color index\r\n* Foreground color - subtract the color index * 0x10\r\n\r\nI should note that our ordinal calculation only matches DEC for the\r\ncharacters in the ASCII and Latin-1 range, because the original\r\nalgorithm predates Unicode. If we want to support the other character\r\nsets correctly we'll need custom mapping tables, but I didn't think that\r\nwas essential for now.\r\n\r\nIt's also worth mentioning that we don't handle \"empty\" cells correctly,\r\nbut that's not the fault of the checksum calculation - it's just that\r\nour default fill character is a space rather than a `NUL`.\r\n\r\n## Validation Steps Performed\r\n\r\nI've manually compared our implementation against the tests results that\r\n@al20878 got from the VT525, and confirmed that we match as well as was\r\nexpected (i.e. taking into account the limitations mentioned above).\r\n\r\nI've also added a few basic unit tests that verify we're generating the\r\nexpected checksums for the various renditions and color attributes.\r\n\r\nCloses #14974",
        "comments": 2
    }
]