[
    {
        "merged": false,
        "additions": 55,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-18T10:30:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "#### vim-patch:9.0.2044: Vim9: exceptions confuse defered functions\r\n\r\nProblem:  Vim9: exceptions confuse defered functions\r\nSolution: save and restore exception state when calling defered\r\n          functions\r\n\r\ncloses: vim/vim#13372\r\n\r\nhttps://github.com/vim/vim/commit/0672595fd50e9ae668676a40e28ebf66d7f52392\r\n\r\nCo-authored-by: Yegappan Lakshmanan <yegappan@yahoo.com>\r\n\r\n\r\n#### vim-patch:9.0.2045: tests: checking for swap files takes time\r\n\r\nProblem:  tests: checking for swap files takes time\r\nSolution: don't check for swap files  when test has been skipped\r\n\r\nCheck for swap files takes a considerable about of time, so don't do\r\nthat for skipped tests to avoid wasting time.\r\n\r\ncloses: vim/vim#13371\r\n\r\nhttps://github.com/vim/vim/commit/a0e1f06f04da3444e278ddf47e2ea3d5857a7dec",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-18T09:42:09Z",
        "closed_at": null,
        "merged_at": null,
        "body": "It's unreasonable to try pbcopy/pbpaste only when `has('mac')`.\r\nImagine that you only supports `win32yank.exe` when `has('win32') || has('win64')`, but obviously it's a common usage to call it in things like WSL where the platform is `wsl` or `linux`.\r\nFor the compability consideration I don't remove the old check and choose to append a new check after the if chain.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 6450,
        "deletions": 5369,
        "changed_files": 5,
        "created_at": "2023-10-18T09:18:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Added some improvements to the lua meta doc gen:\r\n\r\n* [x] fix indentation for params. This ensures param descriptions are not interpreted as a markdown code block\r\n* [x] better support for vim code blocks\r\n* [x] generate markdown code blocks for `vimfn`\r\n* [x] render help tags as `|tag|` instead of just `tag`  (useful with `<K>`)",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-18T02:35:18Z",
        "closed_at": "2023-10-18T02:48:58Z",
        "merged_at": "2023-10-18T02:48:58Z",
        "body": "# Description\nBackport of #25698 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-18T01:37:30Z",
        "closed_at": "2023-10-18T02:34:55Z",
        "merged_at": "2023-10-18T02:34:55Z",
        "body": "Fix #25697\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-10-17T23:19:54Z",
        "closed_at": "2023-10-17T23:29:26Z",
        "merged_at": "2023-10-17T23:29:26Z",
        "body": "# Description\nBackport of #25694 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-10-17T22:42:37Z",
        "closed_at": "2023-10-17T23:19:29Z",
        "merged_at": "2023-10-17T23:19:29Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 42,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-17T22:03:30Z",
        "closed_at": "2023-10-17T22:40:08Z",
        "merged_at": "2023-10-17T22:40:08Z",
        "body": "#### vim-patch:8.2.4497: wrong color for half of wide character next to pum scrollbar\r\n\r\nProblem:    Wrong color for half of wide character next to pum scrollbar.\r\nSolution:   Redraw the screen cell with the right color.\r\n\r\nhttps://github.com/vim/vim/commit/35d8c2010ea6ee5c9bcfa6a8285648172b92ed83\r\n\r\nCo-authored-by: Bram Moolenaar <Bram@vim.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 9,
        "changed_files": 5,
        "created_at": "2023-10-17T21:40:30Z",
        "closed_at": "2023-10-17T22:08:14Z",
        "merged_at": "2023-10-17T22:08:14Z",
        "body": "#### vim-patch:9.0.2041: trim(): hard to use default mask\n\nProblem:  trim(): hard to use default mask (partly revert v9.0.2040)\nSolution: use default mask when it is empty\n\nThe default 'mask' value is pretty complex, as it includes many\ncharacters.  Yet, if one needs to specify the trimming direction, the\nthird argument, 'trim()' currently requires the 'mask' value to be\nprovided explicitly.\n\nCurrently, an empty 'mask' will make 'trim()' call return 'text' value\nthat is passed in unmodified.  It is unlikely that someone is using it,\nso the chances of scripts being broken by this change are low.\n\nAlso, this reverts commit 9.0.2040 (which uses v:none for the default\nand requires to use an empty string instead).\n\ncloses: vim/vim#13358\n\nhttps://github.com/vim/vim/commit/8079917447e7436dccc2e4cd4a4a56ae0a4712f2\n\nvim-patch:9.0.2040: trim(): hard to use default mask\n\nProblem:  trim(): hard to use default mask\nSolution: Use default 'mask' when it is v:none\n\nThe default 'mask' value is pretty complex, as it includes many\ncharacters.  Yet, if one needs to specify the trimming direction, the\nthird argument, 'trim()' currently requires the 'mask' value to be\nprovided explicitly.\n\n'v:none' is already used to mean \"use the default argument value\" in\nuser defined functions.  See |none-function_argument| in help.\n\ncloses: vim/vim#13363\n\nhttps://github.com/vim/vim/commit/6e6386716f9494ae86027c6d34f657fd03dfec42\n\nCo-authored-by: Illia Bobyr <illia.bobyr@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 73,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T15:38:19Z",
        "closed_at": "2023-10-18T07:09:33Z",
        "merged_at": "2023-10-18T07:09:33Z",
        "body": "runtime(json5): include syntax script for json5 (vim/vim#13356)\n\nMerging syntax file from gutenye/json5.vim, modified to include proper\nvim header.\n\nSee: https://github.com/vim/vim/issues/8499\n\nhttps://github.com/vim/vim/commit/5a33ce2a661fb836d4c5c489f2a850172a23e0b0\n\nCo-authored-by: Rolf Vidar Mazunki Hoksaas <32819373+mazunki@users.noreply.github.com>\nCo-authored-by: Guten Ye <ywzhaifei@gmail.com>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-17T14:59:02Z",
        "closed_at": "2023-10-18T09:18:39Z",
        "merged_at": "2023-10-18T09:18:38Z",
        "body": "It's easier to debug and to customize scripting if there are sub-targets\nthat build up each target.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 251,
        "deletions": 13,
        "changed_files": 9,
        "created_at": "2023-10-17T13:43:39Z",
        "closed_at": "2023-10-17T14:43:42Z",
        "merged_at": "2023-10-17T14:43:42Z",
        "body": "#### vim-patch:9.0.2035: [security] use-after-free with wildmenu\n\nProblem:  [security] use-after-free with wildmenu\nSolution: properly clean up the wildmenu when exiting\n\nFix wildchar/wildmenu/pum memory corruption with special wildchar's\n\nCurrently, using `wildchar=<Esc>` or `wildchar=<C-\\>` can lead to a\nmemory corruption if using wildmenu+pum, or wrong states if only using\nwildmenu. This is due to the code only using one single place inside the\ncmdline process loop to perform wild menu clean up (by checking\n`end_wildmenu`) but there are other odd situations where the loop could\nhave exited and we need a post-loop clean up just to be sure. If the\nclean up was not done you would have a stale popup menu referring to\ninvalid memory, or if not using popup menu, incorrect status line (if\n`laststatus=0`).\n\nFor example, if you hit `<Esc>` two times when it's wildchar, there's a\nhard-coded behavior to exit command-line as a failsafe for user, and if\nyou hit `<C-\\><C-\\><C-N>` it will also exit command-line, but the clean\nup code would not have hit because of specialized `<C-\\>` handling.\n\nFix Ctrl-E / Ctrl-Y to not cancel/accept wildmenu if they are also\nused for 'wildchar'/'wildcharm'. Currently they don't behave properly,\nand also have potentially memory unsafe behavior as the logic is\ncurrently not accounting for this situation and try to do both.\n(Previous patch that addressed this: vim/vim#11677)\n\nAlso, correctly document Escape key behavior (double-hit it to escape)\nin wildchar docs as it's previously undocumented.\n\nIn addition, block known invalid chars to be set in `wildchar` option,\nsuch as Ctrl-C and `<CR>`. This is just to make it clear to the user\nthey shouldn't be set, and is not required for this bug fix.\n\ncloses: vim/vim#13361\n\nhttps://github.com/vim/vim/commit/8f4fb007e4d472b09ff6bed9ffa485e0c3093699\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 148,
        "deletions": 56,
        "changed_files": 9,
        "created_at": "2023-10-17T13:05:01Z",
        "closed_at": "2023-10-17T13:42:34Z",
        "merged_at": "2023-10-17T13:42:34Z",
        "body": "#### vim-patch:9.0.2037: A few remaining cmdline completion issues with C-E/Y\n\nProblem:  A few remaining cmdline completion issues with C-E/Y\nSolution: Fix cmdline completion fuzzy/Ctrl-E/Ctrl-Y/options when not\n          used at the end\n\nFix cmdline completion fuzzy/Ctrl-E/Ctrl-Y/options when not used at the end\n\nA few places in the cmdline completion code only works properly when the\nuser hits Tab (or 'wildchar') at the end of the cmdline, even though\nit's supposed to work even in the middle of the line.\n\nFor fuzzy search, `:e ++ff`, and `:set hl=`, fix completion code to make\nsure to use `xp_pattern_len` instead of assuming the entire `xp_pattern`\nis the search pattern (since it contains texts after the cursor).\n\nFix Ctrl-E / Ctrl-Y to not jump to the end when canceling/accepting a\nwildmenu completion. Also, make them work even when not using\n`set wildoptions+=pum` as there is no drawback to doing so.\n(Related issue where this was brought up: vim/vim#13331)\n\ncloses: vim/vim#13362\n\nhttps://github.com/vim/vim/commit/209ec90b9b9bd948d76511c9cd2b17f47a97afe6\n\nCherry-pick ex_getln.c changes from patch 9.0.2035.\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T12:33:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "First, thanks very much for merging #25391 @tbung! This is a very useful feature which makes my day. Previously I was using the [nvim-ufo](https://github.com/kevinhwang91/nvim-ufo), but having a native solution is much faster and less troublesome.\r\n\r\nThis is a proposed fix to bug #25684 and also my first time contributing to the project. I am looking forward to hearing back.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-17T09:23:04Z",
        "closed_at": "2023-10-17T09:49:23Z",
        "merged_at": "2023-10-17T09:49:23Z",
        "body": "#### vim-patch:9.0.2039: completion shows current word after completion restart\n\nProblem:  completion shows current word after completion restart\nSolution: remove the word being completed after completion restart\n\nThe word being completed is shown in a completion list after completion\nrestart, because it isn't removed from the current buffer before\nsearching for matches.\n\nAlso adjust `Test_complete_add_onechar` to match the new behavior.\n\ncloses: vim/vim#13349\n\nhttps://github.com/vim/vim/commit/2e3cd52fa02b1a208c97992b1bca3b04f7be66d4\n\nCo-authored-by: nwounkn <nwounkn@gmail.com>",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-17T09:15:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When I was using the function `vim.api.nvim_win_set_cursor`, I tried to set `row` and `col` to very large values. The former resulted in an expected error, but the latter did not, which made me feel strange because it was not mentioned in the documentation. This commit adds this.\r\n\r\nThis is my first time making a PR in such a large project. If there is anything wrong with what I have done, please point it out. \ud83d\ude04\r\n\r\nAfter cloning the Neovim repository, I directly ran the `make doc` command, but encountered the following error:\r\n\r\n```\r\nSetting log level to ERROR\r\nTraceback (most recent call last):\r\n  File \"/home/shellraining/Documents/learnsth/neovim/scripts/gen_[vimdoc.py](http://vimdoc.py/)\", line 1399, in <module>\r\n    main(Doxyfile, args)\r\n  File \"/home/shellraining/Documents/learnsth/neovim/scripts/gen_[vimdoc.py](http://vimdoc.py/)\", line 1272, in main\r\n    fail(f'no sections for target: {target} (look for errors near \"Preprocessing\" log lines above)')\r\n  File \"/home/shellraining/Documents/learnsth/neovim/scripts/gen_[vimdoc.py](http://vimdoc.py/)\", line 388, in fail\r\n    raise RuntimeError(s)\r\nRuntimeError: no sections for target: lua (look for errors near \"Preprocessing\" log lines above)\r\nninja: build stopped: subcommand failed.\r\n```\r\n\r\nhow can I solve this problem?",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T22:56:33Z",
        "closed_at": "2023-10-17T20:34:40Z",
        "merged_at": "2023-10-17T20:34:40Z",
        "body": "Fixes #25673\r\n\r\nNot sure if we should even be opening the inspector in floating windows though.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T20:39:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "fix of issue 25654",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T20:33:46Z",
        "closed_at": "2023-10-16T20:37:10Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-10-16T19:23:35Z",
        "closed_at": "2023-10-16T19:35:29Z",
        "merged_at": null,
        "body": "fix of issue 25654",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 425,
        "deletions": 479,
        "changed_files": 9,
        "created_at": "2023-10-16T18:56:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "#25394 unified the interfaces for setting number and boolean options. However, there is still a separate `set_string_option` function that is used for setting a string option. This PR removes that function and merges it with `set_option`.\r\n\r\nRef: #25672",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-10-16T13:13:21Z",
        "closed_at": "2023-10-16T19:17:06Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-16T08:18:39Z",
        "closed_at": "2023-10-16T08:41:17Z",
        "merged_at": "2023-10-16T08:41:17Z",
        "body": "#### vim-patch:9.0.2033: gcc overflow-warning for f_resolve\n\nProblem:  gcc overflow-warning for f_resolve\nSolution: use pointer p instead of pointer q[-1]\n\nSuppress the following warning:\n```\nfilepath.c: In function \u2018f_resolve\u2019:\nfilepath.c:2162:27: warning: writing 1 byte into a region of size 0 [-Wstringop-overflow=]\n 2162 |                     q[-1] = NUL;\n```\n\nCloses: vim/vim#13352\ncloses: vim/vim#13353\n\nhttps://github.com/vim/vim/commit/215c3261a25f7a99e8711a3b3c6158119c6aea9e\n\nCo-authored-by: Ken Takata <kentkt@csc.jp>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 36,
        "changed_files": 26,
        "created_at": "2023-10-16T08:16:55Z",
        "closed_at": "2023-10-16T08:36:26Z",
        "merged_at": "2023-10-16T08:36:26Z",
        "body": "#### vim-patch:dbf749bd5aae\n\nruntime: Fix more typos (vim/vim#13354)\n\n* Fix more typos\n\n* Fix typos in ignored runtime/ directory\n\nhttps://github.com/vim/vim/commit/dbf749bd5aaef6ea2d28bce081349785d174d96a\n\nCo-authored-by: Viktor Sz\u00e9pe <viktor@szepe.net>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-15T19:37:26Z",
        "closed_at": "2023-10-16T15:52:49Z",
        "merged_at": "2023-10-16T15:52:49Z",
        "body": "Fixes #25662 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-10-15T19:09:55Z",
        "closed_at": "2023-10-15T19:21:54Z",
        "merged_at": "2023-10-15T19:21:54Z",
        "body": "# Description\nBackport of #24714 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T12:28:57Z",
        "closed_at": "2023-10-15T13:13:34Z",
        "merged_at": "2023-10-15T13:13:34Z",
        "body": "fixup for the backport 4f6e4c5447b25316e2defd4a04ca85115b34f71c\n(which forgot that release-0.9 still uses luarocks)\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-15T10:24:43Z",
        "closed_at": "2023-10-15T11:36:19Z",
        "merged_at": "2023-10-15T11:36:19Z",
        "body": "Fix #25645",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 176,
        "deletions": 8,
        "changed_files": 6,
        "created_at": "2023-10-15T09:15:32Z",
        "closed_at": "2023-10-15T09:52:08Z",
        "merged_at": "2023-10-15T09:52:08Z",
        "body": "#### vim-patch:9.0.2025: no cmdline completion for ++opt args\n\nProblem:  no cmdline completion for ++opt args\nSolution: Add cmdline completion for :e ++opt=arg and :terminal\n          [++options]\n\ncloses: vim/vim#13319\n\nhttps://github.com/vim/vim/commit/989426be6e9ae23d2413943890206cbe15d9df38\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-10-15T08:46:02Z",
        "closed_at": "2023-10-15T09:14:19Z",
        "merged_at": "2023-10-15T09:14:19Z",
        "body": "#### vim-patch:9.0.2031: TextChangedI may be triggered by non-insert mode change\r\n\r\nProblem:  `TextChangedI` can trigger on entering Insert mode if there\r\n          was previously a change not in Insert mode.\r\nSolution: Make it trigger only when text is actually changed in Insert\r\n          mode.\r\n\r\ncloses: vim/vim#13338\r\n\r\nhttps://github.com/vim/vim/commit/d7ae263af8f6a2da55ce3702d18c53ab1418bca7\r\n\r\nCo-authored-by: Evgeni Chasnovski <evgeni.chasnovski@gmail.com>",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-15T08:36:52Z",
        "closed_at": "2023-10-15T09:02:17Z",
        "merged_at": "2023-10-15T09:02:17Z",
        "body": "#### vim-patch:9.0.2030: no max callback recursion limit\r\n\r\nProblem:  no max callback recursion limit\r\nSolution: bail out, if max call recursion for callback functions\r\n          has been reached.\r\n\r\nThis checks the 'maxfuncdepth' setting and throws E169 when a callback\r\nfunction recursively calls itself.\r\n\r\ncloses: vim/vim#13339\r\n\r\nhttps://github.com/vim/vim/commit/47510f3d6598a1218958c03ed11337a43b73f48d\r\n\r\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 10,
        "changed_files": 8,
        "created_at": "2023-10-15T08:29:45Z",
        "closed_at": "2023-10-15T09:19:01Z",
        "merged_at": "2023-10-15T09:19:01Z",
        "body": "#### vim-patch:9.0.2032: cannot get mouse click pos for tab or virt text\n\nProblem:  Cannot accurately get mouse clicking position when clicking on\n          a TAB or with virtual text.\nSolution: Add a \"coladd\" field to getmousepos() result.\n\ncloses: vim/vim#13335\n\nhttps://github.com/vim/vim/commit/f5a94d5165bb9e390797da50a1fa7a87df3fbee4",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-15T00:51:51Z",
        "closed_at": "2023-10-15T01:05:28Z",
        "merged_at": "2023-10-15T01:05:28Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-14T22:39:03Z",
        "closed_at": "2023-10-14T23:35:28Z",
        "merged_at": "2023-10-14T23:35:28Z",
        "body": "# Description\nBackport of #25649 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-14T22:20:45Z",
        "closed_at": "2023-10-14T22:38:43Z",
        "merged_at": "2023-10-14T22:38:43Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 13,
        "changed_files": 9,
        "created_at": "2023-10-14T21:10:01Z",
        "closed_at": "2023-10-16T15:13:38Z",
        "merged_at": "2023-10-16T15:13:37Z",
        "body": "The LSP website will redirect these to the current version of the spec.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-14T20:24:14Z",
        "closed_at": "2023-10-16T16:59:33Z",
        "merged_at": "2023-10-16T16:59:33Z",
        "body": "This fixes a resizing issue when opening the man pages in vertical, closing and then opening horizontally and vice versa\r\n\r\nfixes: #25457\r\n\r\n## Short video:\r\n\r\nhttps://github.com/neovim/neovim/assets/29375815/1f4d5c06-3359-48a5-b825-906bf9d30f92\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-14T14:06:56Z",
        "closed_at": "2023-10-14T14:41:33Z",
        "merged_at": "2023-10-14T14:41:33Z",
        "body": "Problem:  no filetype detection for Debian sources\nSolution: Add new deb822sources filetype\n\ncloses: vim/vim#13320\n\nhttps://github.com/vim/vim/commit/bd734c3bead9e167eb6875f62cc06fab2379c422\n\nCo-authored-by: James McCoy <jamessan@jamessan.com>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 15,
        "changed_files": 2,
        "created_at": "2023-10-14T14:04:38Z",
        "closed_at": "2023-10-14T15:07:09Z",
        "merged_at": "2023-10-14T15:07:09Z",
        "body": "runtime(tcsh): Update ftplugin (vim/vim#13327)\n\nFix b:browsefilter deletion error when calling b:undo_ftplugin.\n\nFixes vim/vim#13167\n\nhttps://github.com/vim/vim/commit/7687238e1b0d2f26ba57e1bdf76f782eaa43af3a\n\nCo-authored-by: dkearns <dougkearns@gmail.com>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-14T11:42:52Z",
        "closed_at": "2023-10-14T12:09:50Z",
        "merged_at": "2023-10-14T12:09:50Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 68,
        "changed_files": 18,
        "created_at": "2023-10-14T11:27:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The benefits are primarily being able to transition from using\r\nExternalProject to FetchContent, which is more flexible and requires\r\nless hacks than ExternalProject to work properly. Other various\r\nquality-of-life features such as `-B` and `-S` flags are also included.\r\n\r\nReference: #24004",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 70,
        "deletions": 34,
        "changed_files": 5,
        "created_at": "2023-10-14T11:08:14Z",
        "closed_at": "2023-10-14T11:28:42Z",
        "merged_at": "2023-10-14T11:28:42Z",
        "body": "#### vim-patch:2bbd0d30eebd\n\nruntime(doc): Improve command-line completion docs (vim/vim#13331)\n\n* Improve command-line completion docs\n\nAdd more details about 'ignorecase' and its effect on cmdline\ncompletion.\n\nMake sure keys used in wildmenu are properly documented and linked in the\nkeys' documentation entries, and in `:h index` for proper\ncross-referencing, as wildmenu popup is slightly different from\ninsert-mode popup menu.\n\n* Fix docs typos\n\nhttps://github.com/vim/vim/commit/2bbd0d30eebdea66c0da3895e83d999ed6ad83fb\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 6,
        "changed_files": 7,
        "created_at": "2023-10-14T10:50:30Z",
        "closed_at": "2023-10-14T11:18:25Z",
        "merged_at": "2023-10-14T11:18:25Z",
        "body": "#### vim-patch:9.0.2022: getmousepos() returns wrong index for TAB char\n\nProblem:  When clicking in the middle of a TAB, getmousepos() returns\n          the column of the next char instead of the TAB.\nSolution: Break out of the loop when the vcol to find is inside current\n          char. Fix invalid memory access when calling virtcol2col() on\n          an empty line.\n\ncloses: vim/vim#13321\n\nhttps://github.com/vim/vim/commit/b583eda7031b1f6a3469a2537d0c10ca5fa5568e",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-14T10:28:58Z",
        "closed_at": "2023-10-14T15:07:36Z",
        "merged_at": "2023-10-14T15:07:36Z",
        "body": "manual backport of https://github.com/neovim/neovim/pull/23420\n\n@rafikdraoui\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-14T09:34:46Z",
        "closed_at": "2023-10-14T10:39:24Z",
        "merged_at": "2023-10-14T10:39:24Z",
        "body": "#### vim-patch:9.0.2021: Coverity complains about change in charset\n\nProblem:  Coverity complains about change in charset (after v9.0.2017)\nSolution: check pointer t at index 0\n\ncloses: vim/vim#13322\n\nhttps://github.com/vim/vim/commit/cd6ee6935811ab223605a3f39a550d26a617867d\n\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-10-14T07:04:29Z",
        "closed_at": "2023-10-14T07:50:49Z",
        "merged_at": "2023-10-14T07:50:49Z",
        "body": "Problem:\r\n  The next command after `silent !{cmd}` or `silent lua print('str')`\r\n  prints an empty line before printing a message, because these commands\r\n  set `msg_didout = true` despite not printing any messages.\r\n\r\nSolution:\r\n  Set `msg_didout = true` only if `msg_silent == 0`",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-10-14T05:17:38Z",
        "closed_at": "2023-10-14T05:53:52Z",
        "merged_at": "2023-10-14T05:53:52Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-10-14T01:17:36Z",
        "closed_at": "2023-10-14T06:55:01Z",
        "merged_at": "2023-10-14T06:55:01Z",
        "body": "Problem:\r\n  The next command after `silent !{cmd}` or `silent lua print('str')`\r\n  prints an empty line before printing a message, because these commands\r\n  set `msg_didout = true` despite not printing any messages.\r\n\r\nSolution:\r\n  Set `msg_didout = true` only if `msg_silent == 0`\r\n\r\nfixes #12099",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 45,
        "changed_files": 10,
        "created_at": "2023-10-13T22:19:20Z",
        "closed_at": "2023-10-14T01:58:31Z",
        "merged_at": "2023-10-14T01:58:31Z",
        "body": "#### vim-patch:8.1.0822: peeking and flushing output slows down execution\r\n\r\nProblem:    Peeking and flushing output slows down execution.\r\nSolution:   Do not update the mode message when global_busy is set.  Do not\r\n            flush when only peeking for a character. (Ken Takata)\r\n\r\nhttps://github.com/vim/vim/commit/cb574f415486adff645ce384979bfecf27f5be8c",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-13T16:46:06Z",
        "closed_at": "2023-10-17T01:51:36Z",
        "merged_at": "2023-10-17T01:51:36Z",
        "body": "Problem:\r\nWhen enabling diagnostics, there can be diagnostics for unloaded buffer, but some handlers nevertheless attempt to set extmarks in such buffers.\r\n\r\nSolution:\r\n* Exit underline/virtual_text handler if buffer is not loaded.\r\n* Don't require is_loaded as precondition for show(), because handlers don't necessarily depend on it.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-13T13:18:13Z",
        "closed_at": "2023-10-13T13:43:06Z",
        "merged_at": "2023-10-13T13:43:06Z",
        "body": "Fix #25626\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 65,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-10-13T08:55:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #24032\r\n\r\nSomehow, `file://` is a wrong one?  https://en.wikipedia.org/wiki/File_URI_scheme#How_many_slashes?\r\n\r\n~~It works on `file:/`, `file://`, and `file:///` somehow?~~\r\n\r\nChangelog:\r\n* Added more test cases and also have windows example. \r\n* Not handling `file://` as it is based on a host. \r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 68,
        "deletions": 2,
        "changed_files": 7,
        "created_at": "2023-10-13T06:51:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fix #25598 ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-13T02:49:28Z",
        "closed_at": "2023-10-13T02:54:03Z",
        "merged_at": null,
        "body": "fixed multiple typos in runtime/doc/pi_netrw.txt. Line no 1812: changed 'requestor' to 'requester'. Line no 2935: changed 'exten' to 'extent'.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T02:46:19Z",
        "closed_at": "2023-10-13T02:47:15Z",
        "merged_at": null,
        "body": "Inside runtime/doc/starting.txt fixed a typo in line no: 1310. Changed 'Globa' into 'Global'",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-13T02:37:28Z",
        "closed_at": "2023-10-13T02:40:43Z",
        "merged_at": null,
        "body": "fixed multiple typos in runtime/doc/pi_netrw.txt. \r\nLine no 1812: changed 'requestor' to 'requester'. \r\nLine no 2935: changed 'exten' to 'extent'. ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T02:31:39Z",
        "closed_at": "2023-10-13T02:40:33Z",
        "merged_at": null,
        "body": "Inside runtime/doc/starting.txt fixed a typo in line no: 1310. Changed 'Globa' into 'Global'",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-12T16:51:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR builds upon the work done in PR #24724, it addresses an issue where right-aligned virtual text could overlap with, and consequently delete, existing text on a line. The changes in this PR modify the `draw_virt_text` function to calculate the available space for drawing right-aligned virtual text. If the virtual text is too long to fit within the available space, it now starts drawing immediately after the existing text, effectively truncating the virtual text to prevent overlap.\r\n\r\nChanges:\r\n- Modified `draw_virt_text` function to check available space for right-aligned virtual text.\r\n- Adjusted `item->draw_col` to start drawing virtual text after existing text if it's too long.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 28,
        "changed_files": 1,
        "created_at": "2023-10-12T13:16:43Z",
        "closed_at": "2023-10-12T14:04:16Z",
        "merged_at": "2023-10-12T14:04:16Z",
        "body": "- unnecessary separate describe() group\r\n- clear() wasn't called in the describe() group\r\n- unnecessary indirection in function parameters",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-12T07:40:04Z",
        "closed_at": "2023-10-12T07:53:06Z",
        "merged_at": "2023-10-12T07:53:06Z",
        "body": "# Description\nBackport of #25612 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-12T07:20:06Z",
        "closed_at": "2023-10-12T07:39:39Z",
        "merged_at": "2023-10-12T07:39:39Z",
        "body": "Fix #25610\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 42,
        "changed_files": 2,
        "created_at": "2023-10-12T06:39:18Z",
        "closed_at": "2023-10-14T07:06:41Z",
        "merged_at": "2023-10-14T07:06:41Z",
        "body": "Found a bug in the snippet parser while working on #25301. The current grammar requires `}` to be escaped, but this should instead depend on the context of the text node.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-12T06:37:31Z",
        "closed_at": "2023-10-12T07:14:23Z",
        "merged_at": null,
        "body": "Scenario:\r\n```lua\r\nlocal payload = '\\x93\\x02\\xa6\\x72\\x65\\x64\\x72\\x61\\x77\\x91\\x92\\xa9\\x67\\x72\\x69\\x64\\x5f\\x6c\\x69\\x6e\\x65\\x95\\x02\\x00\\x00\\x90\\xc2'\r\n```\r\n\r\nHover over `payload` will cause an error. Prefer inexact hover window dimensions over erroring out.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 22,
        "changed_files": 2,
        "created_at": "2023-10-11T23:54:45Z",
        "closed_at": "2023-10-12T00:21:02Z",
        "merged_at": "2023-10-12T00:21:02Z",
        "body": "Fix #22892\r\n\r\n#### vim-patch:9.0.2018: complete_info() returns wrong index\r\n\r\nProblem:  complete_info() returns wrong index\r\nSolution: Make order of 'info' in completion_info consistent\r\n\r\nStart the iteration from the same point and follow the same direction as\r\ndone when assigning the completion numbers. This way we remove the\r\ndependence on the completion direction and make the order of 'info'\r\nconsistent.\r\n\r\ncloses: vim/vim#12971\r\n\r\nhttps://github.com/vim/vim/commit/69fb5afb3bc9da24c2fb0eafb0027ba9c6502fc2\r\n\r\nCo-authored-by: LemonBoy <thatlemon@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-11T22:54:06Z",
        "closed_at": "2023-10-11T23:34:15Z",
        "merged_at": "2023-10-11T23:34:15Z",
        "body": "#### vim-patch:9.0.2017: linebreak applies for leading whitespace\r\n\r\nProblem:  linebreak applies for leading whitespace\r\nSolution: only apply linebreak, once we have found non-breakat chars in\r\n          the line\r\n\r\ncloses: vim/vim#13243\r\n\r\nhttps://github.com/vim/vim/commit/dd75fcfbdff1934c6e531b5a89ebc636318bf4a2\r\n\r\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-10-11T22:37:24Z",
        "closed_at": "2023-10-11T23:38:57Z",
        "merged_at": "2023-10-11T23:38:57Z",
        "body": "#### vim-patch:8.2.3064: Vim9: in script cannot set item in uninitialized list\r\n\r\nProblem:    Vim9: in script cannot set item in uninitialized list.\r\nSolution:   When a list is NULL allocate an empty one.\r\n\r\nhttps://github.com/vim/vim/commit/e65081d1b591f16dc6e380a830d87565c5eb7b03\r\n\r\nCo-authored-by: Bram Moolenaar <Bram@vim.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-11T22:18:09Z",
        "closed_at": "2023-10-11T22:49:12Z",
        "merged_at": "2023-10-11T22:49:12Z",
        "body": "Fix #25276\r\n\r\n#### vim-patch:9.0.2017: linebreak applies for leading whitespace\r\n\r\nProblem:  linebreak applies for leading whitespace\r\nSolution: only apply linebreak, once we have found non-breakat chars in\r\n          the line\r\n\r\ncloses: vim/vim#13243\r\n\r\nhttps://github.com/vim/vim/commit/dd75fcfbdff1934c6e531b5a89ebc636318bf4a2\r\n\r\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 48,
        "changed_files": 4,
        "created_at": "2023-10-11T20:23:04Z",
        "closed_at": "2023-10-15T16:48:22Z",
        "merged_at": "2023-10-15T16:48:22Z",
        "body": "A lot of code inside HAVE_WORKING_LIBINTL doesn't really depend on a \"working libintl\". For instance ex_language is also used for \":lang collate\" and \":lang time\".\r\n\r\nAlso \":lang C\" should not fail just because translations aren't available (it just means use the default text).\r\n\r\n- [x] Steel need to clean up some mess, like the mess in `get_mess_env()`",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-11T20:03:45Z",
        "closed_at": "2023-10-11T21:54:41Z",
        "merged_at": "2023-10-11T21:54:41Z",
        "body": "Problem:  INI files not detected\r\nSolution: detect uppercase .INI as dosini files\r\n\r\nIt previo\\~1 only worked for lower-case .ini files, but upperc\\~1 .INI is\r\nalso somewhat common on account of DOS' old 8.3 upperc\\~2 only filena\\~1. [sic]\r\n\r\ncloses: vim/vim#13316\r\n\r\nhttps://github.com/vim/vim/commit/4a82bdfaa8022402b1ca0f0000c94c47a13f1014\r\n\r\nCo-authored-by: Martin Tournoij <martin@arp242.net>\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 35,
        "changed_files": 4,
        "created_at": "2023-10-11T13:59:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "See https://savannah.gnu.org/news/?group=gettext",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-11T08:53:44Z",
        "closed_at": "2023-10-11T16:52:52Z",
        "merged_at": null,
        "body": "Fixed:\r\n`runtime/doc/channel.txt` -> typo\r\n`runtime/doc/ft_rust.txt` -> trailing space",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 117,
        "deletions": 47,
        "changed_files": 5,
        "created_at": "2023-10-11T06:10:47Z",
        "closed_at": "2023-10-11T07:03:59Z",
        "merged_at": "2023-10-11T07:03:59Z",
        "body": "Fix broken naming convention",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-11T03:30:06Z",
        "closed_at": "2023-10-12T08:50:29Z",
        "merged_at": "2023-10-12T08:50:29Z",
        "body": "picked out of: https://github.com/neovim/neovim/pull/25057\r\n\r\nauthor: @lewis6991",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-11T02:20:53Z",
        "closed_at": "2023-10-11T09:58:07Z",
        "merged_at": "2023-10-11T09:58:07Z",
        "body": "Small fix.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-10T22:58:52Z",
        "closed_at": "2023-10-10T23:24:38Z",
        "merged_at": "2023-10-10T23:24:38Z",
        "body": "Using fnameescape() for the path argument of findfile() and finddir() is\nwrong, as fnameescape() is intended to be used for parts of Ex commands,\nnot function arguments.\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-10-10T22:35:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "WIP/playing around",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 247,
        "changed_files": 9,
        "created_at": "2023-10-10T21:51:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Resolves #20666.\r\n\r\nWindows 8.1 is EOL, therefore vtpcon is not needed anymore.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 32,
        "changed_files": 14,
        "created_at": "2023-10-10T20:57:52Z",
        "closed_at": "2023-10-16T18:15:41Z",
        "merged_at": "2023-10-16T18:15:41Z",
        "body": "Ensure bundled libraries and include directories are always searched\nfirst before any others. This will provide a more consistent experience\nas the search order of the builtin find_ functions can vary depending on\nsystem. This should make the build process faster when building with\nbundled deps as we limit the search to only the .deps directory.\nSeparating the search between .deps and everything makes debugging\nfind_-related problems simpler if you need to check how dependencies are\nfound.\n\nFor libraries, we divide the search process into the following order:\n1. Only search in .deps directory and only search for static libraries.\n2. Only search in .deps directory and search for all libraries.\n3. Search everywhere and search for all libraries.\n\nMake an exception for FindLibintl.cmake as changing the search order\nseems to break some tests on macos.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-10T20:20:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Related commit on master:\r\n\r\n0c2ca48e5f from Marco Hinz 2018-11-17 `doc/python: 'neovim' module was renamed to 'pynvim'.`",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T19:22:47Z",
        "closed_at": "2023-10-11T17:46:44Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 13477,
        "deletions": 5730,
        "changed_files": 291,
        "created_at": "2023-10-10T18:34:43Z",
        "closed_at": "2023-10-10T18:38:38Z",
        "merged_at": null,
        "body": "just updating",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 11,
        "changed_files": 10,
        "created_at": "2023-10-10T17:29:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 57,
        "deletions": 33,
        "changed_files": 8,
        "created_at": "2023-10-10T16:03:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T15:05:11Z",
        "closed_at": "2023-10-10T15:14:00Z",
        "merged_at": null,
        "body": "closes #25580",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-10T13:51:16Z",
        "closed_at": "2023-10-10T22:50:50Z",
        "merged_at": null,
        "body": "Follow-up of https://github.com/neovim/neovim/pull/25571\r\n\r\n# Problem\r\n\r\nNot able to pass a escaped name with spaces into `finddir` or `findfile`.\r\n\r\n`finddir('folder name', 'C:/temp')` works.\r\n`finddir(fnameescape('folder name'), 'C:/temp')` does not work.\r\n\r\n# Solution\r\n\r\nUse the **FNAME_UNESC** flag on `find_file_in_path_option` that is used by `finddir` and `findfile`.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 126,
        "deletions": 50,
        "changed_files": 4,
        "created_at": "2023-10-10T13:00:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": "refactor: use a more idiomatic loop to iterate over the cells\r\nfixes: #25184\r\n\r\nThere are two cases in which the following assertion would fail:\r\n\r\nhttps://github.com/neovim/neovim/blob/f67517bba30b6233bea85e1f6a8505171142d4ca/src/nvim/msgpack_rpc/unpacker.c#L467\r\n\r\n1. If `g->ncells = 0`. Update this to be legal.\r\n2. If an EOF is reached while parsing `wrap`. In this case, the unpacker attempts to resume from `cells`, which is a bug. Create a new state for parsing `wrap`.\r\n\r\nReference: https://neovim.io/doc/user/ui.html#ui-event-grid_line",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T10:49:47Z",
        "closed_at": "2023-10-10T20:23:55Z",
        "merged_at": "2023-10-10T20:23:55Z",
        "body": "Problem: Certain compilers (primarily GCC) do not recognize an exhaustive enum switch statement as being exhaustive. This manifests in the form of compiler errors in exhaustive switch statements where each case has a return statement but there isn't a catch-all return statements. These compiler errors are spurious in the context of the Neovim codebase. So #25533 added the `UNREACHABLE` macro to denote apart of the code that's unreachable, which was used after every such switch statement to tell the compiler to treat the switch statement as exhaustive. However, the macro is mentioned nowhere in the style guide,and new contributors would not have any natural way of learning about it as it stands now. This would lead to confusion when they inevitably encounter one of these compiler errors.\r\n\r\nSolution: Add a style guideline which shows how to use the `UNREACHABLE` macro to fix these compiler errors.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-10T08:36:02Z",
        "closed_at": "2023-10-10T09:33:30Z",
        "merged_at": "2023-10-10T09:33:30Z",
        "body": "This is a followup to #24739 after #24888 is resolved.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-10T07:17:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 5
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-10-10T03:43:16Z",
        "closed_at": "2023-10-10T14:03:55Z",
        "merged_at": "2023-10-10T14:03:55Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 5,
        "changed_files": 6,
        "created_at": "2023-10-09T23:16:44Z",
        "closed_at": "2023-10-10T00:22:33Z",
        "merged_at": "2023-10-10T00:22:32Z",
        "body": "Removing this behavior causes more inconsistencies and bugs.\r\n\r\nPartially reverts #24350\r\nRelated #25324",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 171,
        "deletions": 28,
        "changed_files": 8,
        "created_at": "2023-10-09T22:50:25Z",
        "closed_at": "2023-10-10T01:15:21Z",
        "merged_at": "2023-10-10T01:15:21Z",
        "body": "#### vim-patch:9.0.2009: cmdline-completion for comma-separated options wrong\n\nProblem:  cmdline-completion for comma-separated options wrong\nSolution: Fix command-line expansions for options with filenames with\n          commas\n\nFix command-line expansions for options with filenames with commas\n\nCmdline expansion for option values that take a comma-separated list\nof file names is currently not handling file names with commas as the\ncommas are not escaped. For such options, the commas in file names need\nto be escaped (to differentiate from a comma that delimit the list\nitems). The escaped comma is unescaped in `copy_option_part()` during\noption parsing.\n\nFix as follows:\n- Cmdline completion for option values with comma-separated file/folder\n  names will not start a new match when seeing `\\\\,` and will instead\n  consider it as one value.\n- File/folder regex matching will strip the `\\\\` when seeing `\\\\,` to\n  make sure it can match the correct files/folders.\n- The expanded value will escape `,` with `\\\\,`, similar to how spaces\n  are escaped to make sure the option value is correct on the cmdline.\n\nThis fix also takes into account the fact that Win32 Vim handles file\nname escaping differently. Typing '\\,' for a file name results in it\nbeing handled literally but in other platforms '\\,' is interpreted as a\nsimple ',' and commas need to be escaped using '\\\\,' instead.\n\nAlso, make sure this new logic only applies to comma-separated options\nlike 'path'. Non-list options like 'set makeprg=<Tab>' and regular ex\ncommands like `:edit <Tab>` do not require escaping and will continue to\nwork.\n\nAlso fix up documentation to be clearer. The original docs are slightly\nmisleading in how it discusses triple slashes for 'tags'.\n\ncloses: vim/vim#13303\nrelated: vim/vim#13301\n\nhttps://github.com/vim/vim/commit/54844857fd6933fa4f6678e47610c4b9c9f7a091\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-09T22:32:25Z",
        "closed_at": "2023-10-09T23:06:35Z",
        "merged_at": "2023-10-09T23:06:35Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T21:30:34Z",
        "closed_at": "2023-10-09T21:56:28Z",
        "merged_at": "2023-10-09T21:56:28Z",
        "body": "#### vim-patch:9.0.2008: test: undofile left behind\n\nProblem:  test: undofile left behind\nSolution: cleanup undofile\n\nfix: tmp file not deleted when running make test_undo\n\nTemporary file `.Xtestfile.txt.un~` was left running `make test_undo`\nand vim was configured with:\n```\n./configure --with-features=normal --enable-gui=no --enable-terminal\n```\n\ncloses: vim/vim#13304\n\nhttps://github.com/vim/vim/commit/b07b9dc4dafe2aad5ee752a51f06acacae210fef\n\nCo-authored-by: Dominique Pell\u00e9 <dominique.pelle@tomtom.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 21,
        "changed_files": 1,
        "created_at": "2023-10-09T20:30:27Z",
        "closed_at": "2023-10-09T20:30:52Z",
        "merged_at": "2023-10-09T20:30:52Z",
        "body": "# Description\nBackport of #25534 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-10-09T16:37:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I believe I have fixed the json_decode function so that it allows for json objects with empty string keys as it should.\r\n\r\nResolves #20757.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 31,
        "changed_files": 3,
        "created_at": "2023-10-09T15:35:08Z",
        "closed_at": "2023-10-09T18:27:48Z",
        "merged_at": "2023-10-09T18:27:48Z",
        "body": "- add reviewers\n- correct cache key\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-09T11:39:56Z",
        "closed_at": "2023-10-09T13:05:37Z",
        "merged_at": "2023-10-09T13:05:37Z",
        "body": "Followup to https://github.com/neovim/neovim/pull/25236 \r\n\r\n    *** CID 466056:  Control flow issues  (DEADCODE)\r\n    /src/nvim/window.c: 6951 in file_name_in_line()\r\n    6945       // Search backward for first char of the file name.\r\n    6946       // Go one char back to \":\" before \"//\", or to the drive letter before \":\\\" (even if \":\"\r\n    6947       // is not in 'isfname').\r\n    6948       while (ptr > line) {\r\n    6949         if ((len = (size_t)(utf_head_off(line, ptr - 1))) > 0) {\r\n    6950           ptr -= len + 1;\r\n    >>>     CID 466056:  Control flow issues  (DEADCODE)\r\n    >>>     Execution cannot reach the expression \"path_has_drive_letter(ptr - 2)\" inside this statement: \"if (vim_isfilec((uint8_t)pt...\".\r\n    6951         } else if (vim_isfilec((uint8_t)ptr[-1])\r\n    6952                    || (len >= 2 && path_has_drive_letter(ptr - 2))\r\n    6953                    || ((options & FNAME_HYP) && path_is_url(ptr - 1))) {\r\n    6954           ptr--;\r\n    6955         } else {\r\n    6956           break;\r\n\r\n\r\n## Todo\r\n\r\n- revisit `path_has_drive_letter`",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 226,
        "deletions": 0,
        "changed_files": 7,
        "created_at": "2023-10-09T11:18:02Z",
        "closed_at": "2023-10-10T14:36:55Z",
        "merged_at": "2023-10-10T14:36:55Z",
        "body": "`:[count]fclose[!]` close `count` floating window by zindex sort or `!` close all floating windows\r\n\r\nFix #9663",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-09T11:05:22Z",
        "closed_at": "2023-10-09T14:39:31Z",
        "merged_at": "2023-10-09T14:39:31Z",
        "body": "backport https://github.com/neovim/neovim/pull/25464\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T10:37:39Z",
        "closed_at": "2023-10-09T10:47:35Z",
        "merged_at": "2023-10-09T10:47:35Z",
        "body": "# Description\nBackport of #25557 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-09T10:17:46Z",
        "closed_at": "2023-10-09T10:18:43Z",
        "merged_at": "2023-10-09T10:18:43Z",
        "body": "# Description\nBackport of #25523 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T09:30:38Z",
        "closed_at": "2023-10-09T10:37:15Z",
        "merged_at": "2023-10-09T10:37:15Z",
        "body": "update vendored libmpack-lua to match\n\nhttps://github.com/libmpack/libmpack-lua/releases/tag/1.0.11\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-09T07:46:11Z",
        "closed_at": "2023-10-09T08:14:37Z",
        "merged_at": "2023-10-09T08:14:37Z",
        "body": "Fix #24888\n\nThis avoid the hang mentioned in #24888, and also matches TUI better.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 11,
        "changed_files": 8,
        "created_at": "2023-10-09T04:05:29Z",
        "closed_at": "2023-10-09T22:34:49Z",
        "merged_at": "2023-10-09T22:34:49Z",
        "body": "This PR:\r\n- Adds `@meta _` to the type files that should not be required (the [LuaLS docs](https://github.com/LuaLS/lua-language-server/wiki/Annotations#meta) say that \"giving the name _ will make it unable to be required\"). Still keeping the `error(...)` since it has a more accurate message.\r\n- <s>Changes the return type of `nvim_buf_get_extmark_by_id` from `int[]` to array/table, since if `opts.details` is set then the last entry will be a dict. Unfortunately it seems like the type generator script cannot narrow the type down to `(int|table)[]`.</s> Removing this for now since this would require deprecating `nvim_buf_get_extmark_by_id` and it involves a larger change.\r\n- Changes the return type of `shiftwidth` to `integer`.\r\n- Fixes #25516.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T03:41:01Z",
        "closed_at": "2023-10-09T04:25:33Z",
        "merged_at": null,
        "body": "Fix #24888",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T21:32:57Z",
        "closed_at": "2023-10-09T07:25:27Z",
        "merged_at": "2023-10-09T07:25:27Z",
        "body": "moar ARM64 fixbugs\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 878,
        "deletions": 184,
        "changed_files": 19,
        "created_at": "2023-10-08T21:17:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Goal: Make `nvim_open_win` and `nvim_win_set_config` support opening splits, and moving floating windows into splits.\r\n\r\nChanges to `FloatConfig`:\r\n- It is now called `WinConfig`\r\n- Its name in the `win_T` struct is now `w_config` instead of `w_float_config` (can revert if wanted, but figured it makes sense with the WinConfig change)\r\n- The `win` prop is now also used to determine which window should be split\r\n  - Zero should split the current window, non-zero should split a specific window, and nil should create a top-level split.\r\n  - A side-affect of this is that split windows can now be moved with `nvim_win_set_config`.\r\n- Added `vertical` and `split` props for controlling split position\r\n\r\nAdditionally, `win_split_ins` now returns the `win_T*` pointer to the newly created window on success, and `NULL` on failure, as it can initialize windows and it is useful (required for this PR) to have a pointer to the new window after creating it.\r\n\r\n**Needs Discussion**:\r\n- Removing `relative = \"\"` entirely, or leaving it for compatibility\r\n- Using `win=-1`  vs `win=nil` for top-level splits (would allow for `win=nil` to split the current window) ([related](https://github.com/neovim/neovim/pull/25550#issuecomment-1756655060))\r\n\r\nTODO:\r\n- [x] Tests\r\n- [x] Docs\r\n- [x] Create `split` prop\r\n- [x] Add `vertical` boolean prop as an alias for `split=\"left\"` / `split=\"below\"`\r\n- [x] Validation for updated win configs\r\n- [x] Handle case of window already being a normal window\r\n- [x] Rename `FloatConfig` to `WinConfig`\r\n  - [x] Rename `win_T.w_float_config` to `win_T.w_config` \r\n- [x] Update `nvim_win_get_config`\r\n  - [x] Add `width`, `height`, and `split` props\r\n- [x] Non-floats should use `relative=nil`, not `relative=\"\"`\r\n  - [ ] Should `relative=\"\"` be removed entirely? It is not needed anymore, but removing it breaks many plugins as checking `win_config.relative ~= \"\"` is a common way to check if a window is floating.\r\n- [x] Apply width / height props to created splits\r\n- [x] More tests\r\n  - [x] Opening windows in non-current tabpage\r\n  - [x] Moving windows to other tabpages\r\n  - [x] Ensure set_config being called with the retval of get_config is a no-op\r\n\r\nhttps://github.com/neovim/neovim/assets/38540736/6a8e2d38-d0b4-4de5-bcca-e5d605f5609f\r\n\r\nfixes #14315 (maybe)",
        "comments": 22
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-08T21:06:49Z",
        "closed_at": "2023-10-09T19:52:56Z",
        "merged_at": "2023-10-09T19:52:56Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T19:54:58Z",
        "closed_at": "2023-10-08T20:20:17Z",
        "merged_at": null,
        "body": "- doc: mark example in remote_plugin with >plugin\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T19:07:36Z",
        "closed_at": "2023-10-08T19:49:30Z",
        "merged_at": null,
        "body": "I believe \"created through with\" is grammatically incorrect. In theory you can say \"created through\" or \"created with\" but not both at the same time. But \"created via\" is a better alternative, IMO.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-08T19:02:25Z",
        "closed_at": "2023-10-08T19:50:30Z",
        "merged_at": null,
        "body": "https://neovim.io/doc/user/lua-guide.html:\n\n> - remap: By default, all mappings are nonrecursive by default (i.e., [vim.keymap.set()](https://neovim.io/doc/user/lua.html#vim.keymap.set()) behaves like [:noremap](https://neovim.io/doc/user/map.html#%3Anoremap)). If the {rhs} is itself a mapping that should be executed, set remap = true:\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 49,
        "changed_files": 16,
        "created_at": "2023-10-08T18:43:00Z",
        "closed_at": "2023-10-10T10:19:41Z",
        "merged_at": "2023-10-10T10:19:41Z",
        "body": "Problem: The style guide states that all switch statements that are not conditional on an enum must have a `default` case, but does not give any explicit guideline for switch statements that are conditional on enums. As a result, a `default` case is added in many enum switch statements, even when the switch statement is exhaustive. This is not ideal because it removes the ability to have compiler errors to easily detect unchanged switch statements when a new possible value for an enum is added.\r\n\r\nSolution: Add explicit guidelines for switch statements that are conditional on an enum, clarifying that a `default` case is not necessary if the switch statement is exhaustive. Also refactor pre-existing code with unnecessary `default` cases.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 53,
        "deletions": 52,
        "changed_files": 9,
        "created_at": "2023-10-08T17:18:22Z",
        "closed_at": "2023-10-08T21:31:49Z",
        "merged_at": "2023-10-08T21:31:49Z",
        "body": "runtime: make command name for &iskeywordprg more unique (vim/vim#13297)\n\nSee https://github.com/vim/vim/pull/13213/commits by @dkearns:\nRename 'keywordprg' user command to ShKeywordPrg as this is just a\nleaking implementation detail.\n\nhttps://github.com/vim/vim/commit/1e33cd72b60a119a038952bb658862d038602f76\n\nCo-authored-by: Enno <Konfekt@users.noreply.github.com>\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 65,
        "deletions": 2,
        "changed_files": 6,
        "created_at": "2023-10-08T10:33:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "support config pum and pum float preview window border, float preview window align position.\r\n\r\nunlock after #24723 \r\n\r\nFix #15551 ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-08T09:09:04Z",
        "closed_at": "2023-10-08T09:16:23Z",
        "merged_at": null,
        "body": "Problem:\r\n  `vim.mpack.encode` fails to encode a table with some string keys if\r\n  all keys form a sequence 1..n, because `lmpack_objlen` uses\r\n  `lua_isnumber` to determine if a key is a number\r\n\r\n  From Lua 5.1 reference manual:\r\n\r\n  `int lua_isnumber (lua_State *L, int index);`\r\n  Returns 1 if the value at the given acceptable index is a number or a\r\n  string convertible to a number, and 0 otherwise\r\n\r\nSolution:\r\n  Use `lua_type` instead\r\n\r\nfixes #16837",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-08T04:35:10Z",
        "closed_at": "2023-10-08T08:09:26Z",
        "merged_at": "2023-10-08T08:09:26Z",
        "body": "fixes #25521",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T04:23:53Z",
        "closed_at": "2023-10-08T05:42:47Z",
        "merged_at": null,
        "body": "Fixes #25521",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-10-07T23:27:57Z",
        "closed_at": "2023-10-08T10:36:39Z",
        "merged_at": "2023-10-08T10:36:39Z",
        "body": "- fix(PVS/V547): expression is always true/false\n\n- fix(PVS/V592): expression is enclosed by parentheses twice",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-07T20:01:45Z",
        "closed_at": "2023-10-07T20:02:30Z",
        "merged_at": "2023-10-07T20:02:30Z",
        "body": "This is to prevent reports on generated files.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 76,
        "deletions": 825,
        "changed_files": 5,
        "created_at": "2023-10-07T15:47:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 21,
        "changed_files": 1,
        "created_at": "2023-10-07T15:05:18Z",
        "closed_at": "2023-10-07T16:25:43Z",
        "merged_at": "2023-10-07T16:25:43Z",
        "body": "Problem: macOS universal release script hardcoded the homebrew bottle name for `gettext -- which includes the macOS version for which it was built -- breaking the release when homebrew dropped support for that version and removed all bottles for it.\r\n\r\nSolution: remove the defensive `gettext` hack, which isn't (currently) necessary.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-07T14:41:20Z",
        "closed_at": "2023-10-07T18:57:55Z",
        "merged_at": "2023-10-07T18:57:55Z",
        "body": "Problem: The style guide currently recommends having a `default:` case for switch statements that are not conditional on an enumerated value. Additionally, it recommends using `assert(false)` if `default:` is unreachable. This is problematic because `assert()` only runs on debug builds, which may lead to confusing breakages in release builds. Moreover, this suggestion is followed nowhere in the C code and `abort()` is used everywhere instead.\r\n\r\nSolution: Suggest using `abort()` instead of `assert(false)`, that way the program always terminates if a logically unreachable case is reached.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-07T08:46:51Z",
        "closed_at": "2023-10-09T08:48:24Z",
        "merged_at": "2023-10-09T08:48:24Z",
        "body": "Fixes #14955\r\n\r\nTested using \r\n\r\n```sh\r\nnvim -u NORC\r\necho nvim_get_option(\"mousehide\")\r\n```\r\n\r\nTests; Passed functional test; `TEST_FILE=test/functional/ui/options_spec.lua make functionaltest`\r\n\r\nThis PR just adds an option to be visible, there is no actual implementation as per #14955. ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-06T22:15:54Z",
        "closed_at": "2023-10-07T08:11:22Z",
        "merged_at": "2023-10-07T08:11:22Z",
        "body": "Problem:  Some unused code in move.c and string.c\nSolution: Remove it\n\ncloses: vim/vim#13288\n\nhttps://github.com/vim/vim/commit/580c1fcb4ad85360cd3a361c3c8e37b534153d60\n\nCo-authored-by: dundargoc <gocdundar@gmail.com>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-06T21:59:44Z",
        "closed_at": "2023-10-06T22:32:06Z",
        "merged_at": "2023-10-06T22:32:06Z",
        "body": "#### vim-patch:9.0.1995: Invalid memory access with empty 'foldexpr'\r\n\r\nProblem:  Invalid memory access when 'foldexpr' returns empty string.\r\nSolution: Check for NUL.\r\n\r\ncloses: vim/vim#13293\r\n\r\nhttps://github.com/vim/vim/commit/a991ce9c083bb8c02b1b1ec34ed35728197050f3",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-10-06T21:53:31Z",
        "closed_at": "2023-10-06T23:01:55Z",
        "merged_at": "2023-10-06T23:01:55Z",
        "body": "#### vim-patch:9.0.1990: strange error number\r\n\r\nProblem:  strange error number\r\nSolution: change error number,\r\n          add doc tag for E1507\r\n\r\ncloses: vim/vim#13270\r\n\r\nhttps://github.com/vim/vim/commit/ea746f9e862092aef3d4e95c64d116759b9fabe0\r\n\r\nCo-authored-by: Christ van Willegen <cvwillegen@gmail.com>\r\n\r\n\r\n#### vim-patch:27e12c7669e3\r\n\r\nruntime(doc): remove E1520 tag (vim/vim#13289)\r\n\r\nhttps://github.com/vim/vim/commit/27e12c7669e36a8f60fefa9db9a08024efeb06e8",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 65,
        "deletions": 80,
        "changed_files": 5,
        "created_at": "2023-10-06T21:14:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Deleting a cpo flag a day keeps the doctor away\r\n\r\nWe don't need two different ways to indent LISP code",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-06T20:50:48Z",
        "closed_at": "2023-10-06T22:48:35Z",
        "merged_at": "2023-10-06T22:48:35Z",
        "body": "runtime(sh): Update ftplugin (vim/vim#13213)\n\nRename 'keywordprg' user command to ShKeywordPrg as this is just a\nleaking implementation detail.\n\nhttps://github.com/vim/vim/commit/2a281ccca017fb5e8ffd20a86aa390431224a2fd\n\nCo-authored-by: dkearns <dougkearns@gmail.com>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-06T16:00:25Z",
        "closed_at": "2023-10-09T14:52:29Z",
        "merged_at": "2023-10-09T14:52:29Z",
        "body": "This adds the checks in https://neovim.io/doc/reports/clang/ when using\nclang-tidy. The strategy is to enable all clang-analyzer checks, and\ndisable only the checks for the warnings that exist currently. This\nallows us to eliminate each warning type without blocking ongoing work,\nbut also without adding bugs for already eliminated warnings.\n\nThe plan is to eventually eliminate https://neovim.io/doc/reports/clang/\nby completely integrating it into the clang-tidy check.\n\nAlso add make and cmake targets `clang-analyzer` to run this check.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-06T12:44:16Z",
        "closed_at": "2023-10-09T09:50:44Z",
        "merged_at": "2023-10-09T09:50:44Z",
        "body": "\"VimEnter foo\" was accepted as a valid event name for \"VimEnter\". Events delimited with commas, eg. \"VimEnter,BufRead\", were also accepted, even though only the first event was actually parsed.\r\n\r\nFix #25517",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-06T11:40:40Z",
        "closed_at": "2023-10-07T09:10:28Z",
        "merged_at": "2023-10-07T09:10:28Z",
        "body": "Fix #4334",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T07:51:52Z",
        "closed_at": "2023-10-06T08:18:33Z",
        "merged_at": "2023-10-06T08:18:33Z",
        "body": "- vim-patch:f449825ae238\n- vim-patch:0e958410046a\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-06T07:30:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Hovering over `TSNode:descendant_for_range` gives\r\n\r\n```lua\r\n(field) TSNode.descendant_for_range: fun(self: TSNode, integer: any, integer: any, integer: any, integer: any):TSNode?\r\n```\r\n\r\nWhich is not the correct signature",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 105,
        "deletions": 152,
        "changed_files": 10,
        "created_at": "2023-10-05T13:00:06Z",
        "closed_at": "2023-10-06T09:21:47Z",
        "merged_at": "2023-10-06T09:21:47Z",
        "body": "This finalizes the long running refactor from the old TUI-focused grid implementation where text-drawing cursor was not separated from the visible cursor.\r\n\r\nStill, the pattern of setting cursor position togheter with updating a line was convenient. So introduce grid_line_cursor_goto() to still allow this pattern but now being explicit about it.\r\n\r\nOnly having batched drawing functions makes code involving drawing a bit longer. but it is better to be explicit, and this highlights cases where multiple small redraws can be grouped togheter. This was the case for most of the changed places (messages, lastline, and :intro)",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 402,
        "deletions": 235,
        "changed_files": 11,
        "created_at": "2023-10-05T12:52:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "resolves #25069\r\n\r\nrefactor!: `vim.lsp.inlay_hint()` -> `vim.lsp.inlay_hint.toggle()`\r\n\r\nProblem\r\n---\r\nThe LSP specification allows inlay hints to include tooltips, clickable label parts, and code actions; but Neovim provides no API to query for these.\r\n\r\nSolution\r\n---\r\nAdd minimal viable extension point from which plugins can query for inlay hints in a range, in order to build functionality on top of.\r\n\r\nPossible Next Steps\r\n---\r\n\r\n- Add `virt_text_idx` field to `vim.fn.getmousepos()` return value, for usage in mappings of `<LeftMouse>`, `<C-LeftMouse>`, etc",
        "comments": 18
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-05T12:45:15Z",
        "closed_at": "2023-10-06T07:52:24Z",
        "merged_at": "2023-10-06T07:52:24Z",
        "body": "Problem:  No filetype detection for just files\r\nSolution: Detect just files (*.just, justfile, etc)\r\n\r\ncloses: vim/vim#13271\r\n\r\nhttps://github.com/vim/vim/commit/3d90f71b764e67b1eb12fc6a9a4b9e2fca6dc087\r\n\r\nvim-patch:b6d01f13: runtime(just): Correct filetype detection pattern and style  \r\n\r\nCo-authored-by: dundargoc <gocdundar@gmail.com>\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-05T09:36:59Z",
        "closed_at": "2023-10-05T11:31:15Z",
        "merged_at": "2023-10-05T11:31:15Z",
        "body": "fixes #25145\r\n\r\n> The application shall ensure that the function returns an integer less\r\nthan, equal to, or greater than 0, if the first argument is considered\r\nrespectively less than, equal to, or greater than the second. If two\r\nmembers compare as equal, their order in the sorted array is unspecified.\r\n\r\nhttps://pubs.opengroup.org/onlinepubs/009696899/functions/qsort.html",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-05T06:39:48Z",
        "closed_at": "2023-10-05T07:08:18Z",
        "merged_at": "2023-10-05T07:08:18Z",
        "body": "runtime(netrw): error when trying to :bd unloaded buffer\n\ncloses: vim/vim#13215\ncloses: vim/vim#13082\n\nhttps://github.com/vim/vim/commit/4dbb2669e9ed9ec6864705dcb569715e417e1303\n\nCo-authored-by: yasuda <yasuda@kyoto-sr.co.jp>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 82,
        "deletions": 15,
        "changed_files": 3,
        "created_at": "2023-10-04T23:09:18Z",
        "closed_at": "2023-10-04T23:48:38Z",
        "merged_at": "2023-10-04T23:48:38Z",
        "body": "#### vim-patch:9.0.1983: scrolling inactive window not possible with cursorbind\r\n\r\nProblem:  Scrolling non-current window using mouse is inconsistent\r\n          depending on 'scrollbind'/'scrolloff' and different from GUI\r\n          vertical scrollbar when 'cursorbind' is set.\r\nSolution: Don't move cursor in non-current windows for 'cursorbind' if\r\n          cursor in the current window didn't move.\r\n\r\ncloses: vim/vim#13219\r\n\r\nhttps://github.com/vim/vim/commit/8e5f26ec6a1446aabffa7a0a7819a7462372a5b8",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-04T22:44:24Z",
        "closed_at": "2023-10-04T23:36:15Z",
        "merged_at": "2023-10-04T23:36:15Z",
        "body": "Fix #25479\r\n\r\n#### vim-patch:9.0.1981: not being able to scroll up in diff mode\r\n\r\nProblem:  Cannot scroll up in diff mode with many filler lines and zero\r\n          'scrolloff'.\r\nSolution: Invalidate w_cline_row before calling comp_botline().\r\n\r\ncloses: vim/vim#13256\r\n\r\nhttps://github.com/vim/vim/commit/0583491277dea9d14e000051c26405b90d839072",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-04T20:19:20Z",
        "closed_at": "2023-10-06T22:16:29Z",
        "merged_at": null,
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 187,
        "deletions": 229,
        "changed_files": 9,
        "created_at": "2023-10-04T18:44:34Z",
        "closed_at": "2023-10-08T21:32:25Z",
        "merged_at": "2023-10-08T21:32:25Z",
        "body": "The 'arabicshape' feature of vim is a transformation of unicode text to make arabic and some related scripts look better at display time. In particular the content of a cell will be adjusted depending on the (original) content of the cells just before and after it.\r\n\r\nThis is implemented by the arabic_shape() function in nvim. Before this commit, shaping was invoked in four different contexts:\r\n\r\n- when rendering buffer text in win_line()\r\n- in line_putchar() for rendering virtual text\r\n- as part of grid_line_puts, used by messages and statuslines and similar\r\n- as part of draw_cmdline() for drawing the cmdline\r\n\r\nThis replaces all these with a post-processing step in grid_put_linebuf(), which has become the entry point for all text rendering after recent refactors.\r\n\r\nAn aim of this is to make the handling of multibyte text yet simpler. One of the main reasons multibyte chars needs to be \"parsed\" into codepoint arrays of composing chars is so that these could be inspected for the purpose of shaping. This can likely be vastly simplified in many contexts where only the total length (in bytes) and width of composed char is needed.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 55,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T12:43:10Z",
        "closed_at": "2023-10-04T16:48:17Z",
        "merged_at": null,
        "body": "# Problem\r\n\r\nNavigation marks are not properly used after opening a file through `netrw`.\r\n\r\n# Solution\r\n\r\nPatched the `@*` and `@+` logic from Vim's `netrw`.\r\n\r\n--- \r\n\r\nI wasn't able to find the exact commit that this was introduced that's why I didn't create this as a patch commit.\r\n\r\nFixes #24721.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-04T00:10:29Z",
        "closed_at": "2023-10-04T00:53:49Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 193,
        "deletions": 70,
        "changed_files": 8,
        "created_at": "2023-10-03T22:32:48Z",
        "closed_at": "2023-10-03T23:53:47Z",
        "merged_at": "2023-10-03T23:53:47Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-10-03T22:05:23Z",
        "closed_at": "2023-10-03T22:23:09Z",
        "merged_at": "2023-10-03T22:23:09Z",
        "body": "# Description\nBackport of #25424 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 73,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-03T21:44:54Z",
        "closed_at": "2023-10-04T08:35:47Z",
        "merged_at": null,
        "body": "Add an ability to provide a custom highlight group for a tree-sitter capture through metadata, in a similar fashion to conceal and priority.\r\nFeature as presented in the docs doesn't add much value since capture name can be set to match he hl group name, but it gives an ability to dynamically define hl groups via custom directives. Here's a trivial example:\r\n\r\nTo highlight a defined list of strings with the provided color that is defined through variable, we can now do something like this:\r\n\r\n```query\r\n; highlights.scm for lua\r\n(string (string_content) @my_string (#set-custom-colors! @my_string))\r\n```\r\n\r\n```lua\r\nlocal my_colors = {\r\n  yes = \"#00FF00\",\r\n  no = \"#FF0000\",\r\n  maybe = \"#FFFF00\"\r\n\r\n}\r\n\r\nfor name, color in pairs(my_colors) do\r\n  vim.cmd(string.format('hi MyColor%s guifg=%s', name:lower(), color))\r\nend\r\n\r\nvim.treesitter.query.add_directive(\"set-custom-colors!\", function(match, _, source, pred, metadata)\r\n  local node = match[pred[2]]\r\n  if node then\r\n    local text = vim.treesitter.get_node_text(node, source)\r\n    if my_colors[text:lower()] then\r\n      metadata.hl_group = string.format('MyColor%s', text:lower())\r\n    end\r\n  end\r\nend)\r\n```\r\n\r\nExample result:\r\n![screenshot_2023_10_03_23_43_12](https://github.com/neovim/neovim/assets/1782860/eb9df442-a5a1-49bd-82ea-33b39b680d6d)\r\n\r\n\r\nCreating draft PR for now. Once and if confirmed, I'll make it ready for review.\r\n",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 43,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-03T19:12:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Problem:\r\n  rbuffer_consumed assertion fails if Unpacker fails to parse msgpack,\r\n  because it doesn't consume bytes on errors\r\n\r\nSolution:\r\n  Call rbuffer_consumed_compact only if Unpacker isn't closed  \r\n\r\nfixes #23781",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-03T18:21:24Z",
        "closed_at": "2023-10-09T22:08:58Z",
        "merged_at": "2023-10-09T22:08:58Z",
        "body": "# Problem\r\n\r\nLibUV doesn't find files and directories when calling `uv_fs_stat` with escaped spaces (`'\\ '`).\r\n\r\n# Solution\r\n\r\nUnescape the file name and path before calling `uv_fs_stat`. \r\n\r\nFixes #25324.\r\n\r\nI have confirmed that the new tests failed before the changes.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-03T12:25:46Z",
        "closed_at": "2023-10-03T12:54:43Z",
        "merged_at": "2023-10-03T12:54:43Z",
        "body": "Fix #25490\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-03T11:26:50Z",
        "closed_at": "2023-10-04T14:24:33Z",
        "merged_at": "2023-10-04T14:24:33Z",
        "body": "\r\nFix #25474",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T10:25:50Z",
        "closed_at": "2023-10-03T10:32:58Z",
        "merged_at": "2023-10-03T10:32:58Z",
        "body": "# Description\nBackport of #25274 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-03T06:17:39Z",
        "closed_at": "2023-10-03T06:32:47Z",
        "merged_at": "2023-10-03T06:32:47Z",
        "body": "#### vim-patch:2dfc22908e43\r\n\r\nruntime(doc): remove E1507 help tag, which is no longer used (vim/vim#13254)\r\n\r\nhttps://github.com/vim/vim/commit/2dfc22908e432f63d200e1fc4f024645c87b8bf3",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 61,
        "deletions": 120,
        "changed_files": 2,
        "created_at": "2023-10-03T04:40:55Z",
        "closed_at": "2023-10-03T05:07:04Z",
        "merged_at": "2023-10-03T05:07:04Z",
        "body": "Problem:  Visual highlight is inconsistent on a folded line with\n          treesitter foldtext.\nSolution: Don't added Folded highlight as it is already in background.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T03:54:46Z",
        "closed_at": "2023-10-03T04:13:05Z",
        "merged_at": "2023-10-03T04:13:05Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-03T03:24:55Z",
        "closed_at": "2023-10-03T03:42:41Z",
        "merged_at": "2023-10-03T03:42:41Z",
        "body": "# Description\nBackport of #25481 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-03T03:01:58Z",
        "closed_at": "2023-10-03T03:24:33Z",
        "merged_at": "2023-10-03T03:24:33Z",
        "body": "Fix #25466\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-10-03T00:25:44Z",
        "closed_at": "2023-10-03T02:23:03Z",
        "merged_at": "2023-10-03T02:23:03Z",
        "body": "Fix #25472\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-02T23:02:54Z",
        "closed_at": "2023-10-02T23:45:51Z",
        "merged_at": "2023-10-02T23:45:51Z",
        "body": "#### vim-patch:9.0.1975: xattr: permission-denied errors on write\r\n\r\nProblem:  xattr: permission-denied errors on write\r\nSolution: ignore those errors\r\n\r\nhttps://github.com/vim/vim/commit/993b17569b5acffe2d8941d1709a55da4e439755\r\n\r\nN/A patches:\r\nvim-patch:9.0.1965: wrong auto/configure script\r\nvim-patch:9.0.1966: configure prints stray 6 when checking libruby\r\n\r\nCo-authored-by: Gene C <arch@sapience.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 103,
        "deletions": 102,
        "changed_files": 3,
        "created_at": "2023-10-02T22:57:42Z",
        "closed_at": "2023-10-02T23:45:37Z",
        "merged_at": "2023-10-02T23:45:37Z",
        "body": "#### vim-patch:9.0.1973: Clean up cmdline option completion code\n\nProblem:  Clean up cmdline option completion code\nSolution: Fix various minor problems\n\n- Fix manual array size calculations to just use `ARRAY_LENGTH()`.\n- Fix unintentional typo in comments due to copy-paste error.\n- Fix assert_equal() usages to pass the expected value to first\n  parameter instead of 2nd one to avoid confusion.\n- Fix signed vs unsigned warnings\n- Correct misplaced comments about set_op_T and set_prefix_T\n  and fix a typo in another comment\n\ncloses: vim/vim#13249\ncloses: vim/vim#13237\n\nhttps://github.com/vim/vim/commit/6d113472601fa6f3a444a95ef7b11d4309215117\n\nN/A patch:\nvim-patch:9.0.1976: style: space before tab in optionstr.c\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-02T22:29:41Z",
        "closed_at": "2023-10-02T23:24:54Z",
        "merged_at": "2023-10-02T23:24:54Z",
        "body": "#### vim-patch:9.0.1972: win32: missing '**' expansion test\n\nProblem:  win32: missing '**' expansion test (after v9.0.1947)\nSolution: Add test for MS-Windows\n\nwin32: Add \"**\" test\n\nVim supports \"**\" on MS-Windows. However, it is not tested by\n`Test_glob_extended_bash`.\n\nUnlike Unix, it doesn't use 'shell' and doesn't support {,} expansion.\nSo, I added as a separate test.\n\nrelated: vim/vim#13205\ncloses: vim/vim#13250\n\nhttps://github.com/vim/vim/commit/4a1ad5556423dca5f5b7ee39f143579e67569ae1\n\nCo-authored-by: Ken Takata <kentkt@csc.jp>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 7,
        "changed_files": 9,
        "created_at": "2023-10-02T22:27:46Z",
        "closed_at": "2023-10-02T23:24:37Z",
        "merged_at": "2023-10-02T23:24:37Z",
        "body": "#### vim-patch:ba77bbb5c775\r\n\r\nruntime(doc): fix typos.\r\n\r\n* Fix typo in document (Related: vim/vim#12516)\r\n* Fix E1363 duplication\r\n* Fix one more typo.\r\n\r\nhttps://github.com/vim/vim/commit/ba77bbb5c775663a8b55871f753d7b1b570bb9ba\r\n\r\nCo-authored-by: h_east <h.east.727@gmail.com>\r\n\r\n\r\n#### vim-patch:20f48d5b2ddb\r\n\r\nruntime(doc): mention how to disable folding in diff mode (vim/vim#13242)\r\n\r\nhttps://github.com/vim/vim/commit/20f48d5b2ddb9fdc29e83f0da6f31f895eaeab47\r\n\r\nCo-authored-by: dundargoc <33953936+dundargoc@users.noreply.github.com>\r\n\r\n\r\n#### vim-patch:cd39b69b0200\r\n\r\nruntime(doc): add missing error numbers in the help.  (vim/vim#13241)\r\n\r\nhttps://github.com/vim/vim/commit/cd39b69b0200005622db7291bbacff95bd03a3d0\r\n\r\nCo-authored-by: Yegappan Lakshmanan <4298407+yegappan@users.noreply.github.com>",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-02T17:43:29Z",
        "closed_at": "2023-10-03T23:32:08Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 139,
        "deletions": 242,
        "changed_files": 10,
        "created_at": "2023-10-02T12:47:12Z",
        "closed_at": "2023-10-03T18:56:43Z",
        "merged_at": "2023-10-03T18:56:43Z",
        "body": "msg_puts_display was more complex than necessary in nvim, as in nvim, it no longer talks directly with a terminal.\r\n\r\nIn particular we don't need to scroll the grid before emitting the last char. The TUI already takes care of things like that, for terminals where it matters. This improves the behavior in GUI and many terminals, where it actually is safe to write to the bottom right screen cell, as shown in updated tests.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 7,
        "changed_files": 6,
        "created_at": "2023-10-02T12:46:46Z",
        "closed_at": "2023-10-02T22:19:30Z",
        "merged_at": "2023-10-02T22:19:30Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-02T07:52:30Z",
        "closed_at": "2023-10-06T12:44:51Z",
        "merged_at": "2023-10-06T12:44:51Z",
        "body": "This PR should close #18155 ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 246,
        "deletions": 189,
        "changed_files": 61,
        "created_at": "2023-10-02T01:52:19Z",
        "closed_at": "2023-10-02T02:45:33Z",
        "merged_at": "2023-10-02T02:45:33Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 52,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-01T17:58:41Z",
        "closed_at": "2023-10-02T20:14:19Z",
        "merged_at": "2023-10-02T20:14:19Z",
        "body": "The haskell-language-server supports resolve only for a subset of code\nactions. For many code actions trying to resolve the `edit` property\nresults in an error, but the unresolved action already contains a\ncommand that can be executed without issue.\n\nThe protocol specification is unfortunately a bit vague about this,\nand what the haskell-language-server does seems to be valid.\n\nExample:\n\n    newtype Dummy = Dummy Int\n    instance Num Dummy where\n\nTriggering code actions on \"Num Dummy\" and choosing \"Add placeholders\nfor all missing methods\" resulted in:\n\n    -32601: No plugin enabled for SMethod_CodeActionResolve, potentially available: explicit-fields, importLens, hlint, overloaded-record-dot\n\nWith this change it will insert the missing methods:\n\n    instance Num Dummy where\n      (+) = _\n      (-) = _\n      (*) = _\n      negate = _\n      abs = _\n      signum = _\n      fromInteger = _\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-01T15:42:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #23136",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 157,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2023-10-01T15:09:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes #25365.\r\n\r\nThese changes fix the weird behavior described in #25365, by applying two simple changes:\r\n- remove all entries of a buffer from the jump list when deleting it\r\n- not adding a new entry to the jump list if the next buffer to be displayed was also found in the jump list\r\n\r\nThis makes the jump list behave exactly as you would expect when deleting buffers",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 53,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-10-01T14:36:17Z",
        "closed_at": "2023-10-01T15:08:59Z",
        "merged_at": null,
        "body": "Closes #25365.\r\n\r\nThese changes fix the weird behavior described in #25365, by applying two simple changes:\r\n- remove all entries of a buffer from the jump list when deleting it\r\n- not adding a new entry to the jump list if the next buffer to be displayed was also found in the jump list\r\n\r\nThis makes the jump list behave exactly as you would expect when deleting buffers",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 16,
        "changed_files": 1,
        "created_at": "2023-10-01T13:51:57Z",
        "closed_at": "2023-10-01T14:16:05Z",
        "merged_at": "2023-10-01T14:16:04Z",
        "body": "Co-authored-by: Yegappan Lakshmanan <yegappan@yahoo.com>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1519,
        "deletions": 187,
        "changed_files": 25,
        "created_at": "2023-10-01T10:38:28Z",
        "closed_at": "2023-10-01T13:05:12Z",
        "merged_at": "2023-10-01T13:05:12Z",
        "body": "#### vim-patch:9.0.1958: cannot complete option values\n\nProblem:  cannot complete option values\nSolution: Add completion functions for several options\n\nAdd cmdline tab-completion for setting string options\n\nAdd tab-completion for setting string options on the cmdline using\n`:set=` (along with `:set+=` and `:set-=`).\n\nThe existing tab completion for setting options currently only works\nwhen nothing is typed yet, and it only fills in with the existing value,\ne.g. when the user does `:set diffopt=<Tab>` it will be completed to\n`set diffopt=internal,filler,closeoff` and nothing else. This isn't too\nuseful as a user usually wants auto-complete to suggest all the possible\nvalues, such as 'iblank', or 'algorithm:patience'.\n\nFor set= and set+=, this adds a new optional callback function for each\noption that can be invoked when doing completion. This allows for each\noption to have control over how completion works. For example, in\n'diffopt', it will suggest the default enumeration, but if `algorithm:`\nis selected, it will further suggest different algorithm types like\n'meyers' and 'patience'. When using set=, the existing option value will\nbe filled in as the first choice to preserve the existing behavior. When\nusing set+= this won't happen as it doesn't make sense.\n\nFor flag list options (e.g. 'mouse' and 'guioptions'), completion will\ntake into account existing typed values (and in the case of set+=, the\nexisting option value) to make sure it doesn't suggest duplicates.\n\nFor set-=, there is a new `ExpandSettingSubtract` function which will\nhandle flag list and comma-separated options smartly, by only suggesting\nvalues that currently exist in the option.\n\nNote that Vim has some existing code that adds special handling for\n'filetype', 'syntax', and misc dir options like 'backupdir'. This change\npreserves them as they already work, instead of converting to the new\ncallback API for each option.\n\ncloses: vim/vim#13182\n\nhttps://github.com/vim/vim/commit/900894b09a95398dfc75599e9f0aa2ea25723384\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>\n\n\n#### vim-patch:9.0.1960: Make CI checks more strict\n\nProblem:  Make CI checks more strict\nSolution: Add -Wstrict-prototypes -Wmissing-prototypes to CI,\n          fix uncovered problems\n\nAdd -Wstrict-prototypes -Wmissing-prototypes warnings check to CI\n\nAdd two new warnings to CI, silence some Perl related build-warnings:\n\n- `strict-prototypes` helps prevent declaring a function with an empty\n  argument list, e.g. `int func()`. In C++, that's equivalent to `int\n  func(void)`, but in C, that means a function that can take any number\n  of arguments which is rarely what we want.\n\n- `missing-prototypes` makes sure we use `static` for file-only internal\n  functions. Non-static functions should have been declared on a\n  prototype file.\n\n- Add `no-compound-token-split-by-macro` to the perl cflags, since it\n  throws out a bunch of perl-related warnings that make the CI log\n  unnecessary verbose and hard to read. This seems to happen only with\n  clang 12 and above.\n\nWhen applying those changes, it already uncovered a few warnings, so fix\nup the code as well (fix prototypes, make the code static, remove\nshadowed var declaration)\n\nGTK header needs to have #pragma warning suppressiong because GTK2\nheaders will warn on `-Wstrict-prototypes`, and it's included by gui.h\nand so we can't just turn off the warning in a couple files.\n\ncloses: vim/vim#13223\ncloses: vim/vim#13226\n\nhttps://github.com/vim/vim/commit/f7f746b1672909ae57d2eec97253d6627f6c0887\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>\n\n\n#### vim-patch:9.0.1961: 'listchars' completion misses \"multispace\" and \"leadmultispace\"\n\nProblem:  Cmdline completion for 'listchars' fields doesn't include\n          \"multispace\" and \"leadmultispace\" (after 9.0.1958).\nSolution: Include \"multispace\" and \"leadmultispace\" in lcstab.\n\ncloses: vim/vim#13225\n\nhttps://github.com/vim/vim/commit/1f025b01e29be6fce907d0379602b45031d6998f\n\n\n#### vim-patch:9.0.1968: cmdline completion should consider key option\n\nProblem:  cmdline completion should consider key option\nSolution: Disable cmdline completion for key option, slightly\n          refactor how P_NO_CMD_EXPAND is handled\n\nHarden crypto 'key' option: turn off cmdline completion, disable set-=\n\n\"set-=\" can be used maliciously with a crypto key, as it allows an\nattacker (who either has access to the computer or a plugin author) to\nguess a substring by observing the modified state. Simply turn off\nset+=/-=/^= for this option as there is no good reason for them to be\nused.\n\nUpdate docs to make that clear as well.\n\nAlso, don't allow cmdline completion for 'key' as it just shows *****\nwhich is not useful and confusing to the user what it means (if the user\naccidentally hits enter they will have replaced their key with \"*****\"\ninstead).\n\nMove logic to better location, don't use above 32-bit for flags\n\nMove P_NO_CMD_EXPAND to use the unused 0x20 instead of going above\n32-bits, as currently the flags parameter is only 32-bits on some\nsystems. Left a comment to warn that future additions will need to\nchange how the flags work either by making it 64-bit or split into two\nmember vars.\n\nAlso, move the logic for detecting P_NO_CMD_EXPAND earlier so it's not\nup to each handler to decide, and you won't see the temporary \"...\" that\nVim shows while waiting for completion handler to complete.\n\ncloses: vim/vim#13224\n\nhttps://github.com/vim/vim/commit/6ee7b521fa7531ef356ececc8be7575c3800f872\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 70,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2023-10-01T08:10:33Z",
        "closed_at": "2023-10-01T08:39:31Z",
        "merged_at": "2023-10-01T08:39:31Z",
        "body": "closes #24390\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-01T07:31:23Z",
        "closed_at": "2023-10-01T08:29:55Z",
        "merged_at": "2023-10-01T08:29:55Z",
        "body": "#### vim-patch:9.0.1967: xattr errors not translated\r\n\r\nProblem:  xattr errors not translated\r\nSolution: mark for translation, consistently capitalize\r\n          first letter.\r\n\r\ncloses: vim/vim#13236\r\n\r\nhttps://github.com/vim/vim/commit/7ece036d72cf639b05d3936183220bec7179bf63",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-30T22:00:59Z",
        "closed_at": "2023-09-30T22:04:57Z",
        "merged_at": null,
        "body": "Cirrus CI now has a monthly free compute limit.\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-30T21:53:24Z",
        "closed_at": "2023-09-30T22:08:47Z",
        "merged_at": "2023-09-30T22:08:47Z",
        "body": "#### vim-patch:9.0.1964: xattr support fails to build on MacOS X\n\nProblem:  xattr support fails to build on MacOS X\nSolution: Disable xattr support for MacOS X\n\nMacOS X uses the same headers and functions sys/xattr.h but the function\nsignatures for xattr support are much different, so building fails.\n\nSo let's for now disable xattr support there.\n\ncloses: vim/vim#13230\ncloses: vim/vim#13232\n\nhttps://github.com/vim/vim/commit/a4dfbfed89e26a766e30cca62c18e710eec81c3f\n\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 5712,
        "deletions": 5712,
        "changed_files": 55,
        "created_at": "2023-09-30T14:09:02Z",
        "closed_at": "2023-09-30T16:39:23Z",
        "merged_at": null,
        "body": "Having the current style not be aligned with the style guide is\nconfusing for new contributors and leads to lots of wasteful\ndiscussions.\n\nExceptions are the docstrings that affect the output of the\ndocumentation, which have been left alone for the time being.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 147,
        "deletions": 2,
        "changed_files": 8,
        "created_at": "2023-09-30T13:41:14Z",
        "closed_at": "2023-09-30T14:38:10Z",
        "merged_at": "2023-09-30T14:38:10Z",
        "body": "#### vim-patch:9.0.1962: No support for writing extended attributes\r\n\r\nProblem:  No support for writing extended attributes\r\nSolution: Add extended attribute support for linux\r\n\r\nIt's been a long standing issue, that if you write a file with extended\r\nattributes and backupcopy is set to no, the file will loose the extended\r\nattributes.\r\n\r\nSo this patch adds support for retrieving the extended attributes and\r\ncopying it to the new file. It currently only works on linux, mainly\r\nbecause I don't know the different APIs for other systems (BSD, MacOSX and\r\nSolaris).  On linux, this should be supported since Kernel 2.4 or\r\nsomething, so this should be pretty safe to use now.\r\n\r\nEnable the extended attribute support with normal builds.\r\n\r\nI also added it explicitly to the :version output as well as make it\r\nable to check using `:echo has(\"xattr\")`, to have users easily check\r\nthat this is available.\r\n\r\nIn contrast to the similar support for SELINUX and SMACK support (which\r\nalso internally uses extended attributes), I have made this a FEAT_XATTR\r\ndefine, instead of the similar HAVE_XATTR.\r\n\r\nAdd a test and change CI to include relevant packages so that CI can\r\ntest that extended attributes are correctly written.\r\n\r\ncloses: vim/vim#13203\r\n\r\nhttps://github.com/vim/vim/commit/e085dfda5d8dde064b0332464040959479696d1c\r\n\r\nCo-authored-by: Christian Brabandt <cb@256bit.org>\r\n\r\n\r\n#### vim-patch:9.0.1963: Configure script may not detect xattr\r\n\r\nProblem:  Configure script may not detect xattr correctly\r\nSolution: include sys/xattr instead of attr/xattr,\r\n          make Test_write_with_xattr_support() test\r\n          xattr feature correctly\r\n\r\nThis also applies to the Smack security feature, so change the include\r\nand configure script for it as well.\r\n\r\ncloses: vim/vim#13229\r\n\r\nhttps://github.com/vim/vim/commit/6de4e58cf27a3bb6e81653ca63b77e29d1bb46f2",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 293,
        "deletions": 288,
        "changed_files": 4,
        "created_at": "2023-09-30T12:00:47Z",
        "closed_at": "2023-09-30T12:38:04Z",
        "merged_at": "2023-09-30T12:38:04Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1436,
        "deletions": 1430,
        "changed_files": 2,
        "created_at": "2023-09-30T11:01:17Z",
        "closed_at": "2023-09-30T11:36:33Z",
        "merged_at": "2023-09-30T11:36:33Z",
        "body": "#### vim-patch:9.0.1366: functions for setting options are in random order\n\nProblem:    Functions for setting options are in random order.\nSolution:   Sort functions alphabetically. (Yegappan Lakshmanan,\n            closes vim/vim#12082)\n\nhttps://github.com/vim/vim/commit/ad60898aa47b44fdece12d28c471fb50df27fb50\n\nCo-authored-by: Yegappan Lakshmanan <yegappan@yahoo.com>",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-30T09:49:31Z",
        "closed_at": "2023-09-30T10:11:11Z",
        "merged_at": null,
        "body": "According `:h TSNode`, the class `TSNode` has a method `field`, but it has no annotation. This PR adds the missing annotation.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 121,
        "deletions": 98,
        "changed_files": 2,
        "created_at": "2023-09-30T09:12:23Z",
        "closed_at": "2023-09-30T09:38:05Z",
        "merged_at": "2023-09-30T09:38:05Z",
        "body": "Needed for completion of 'listchars'/'fillchars' values.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1187,
        "deletions": 1110,
        "changed_files": 106,
        "created_at": "2023-09-30T05:38:30Z",
        "closed_at": "2023-09-30T06:41:35Z",
        "merged_at": "2023-09-30T06:41:35Z",
        "body": "- Move vimoption_T to option.h\n- option_defs.h is for option-related types\n- option_vars.h corresponds to Vim's option.h\n- option_defs.h and option_vars.h don't include each other\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 188,
        "deletions": 165,
        "changed_files": 131,
        "created_at": "2023-09-30T03:05:53Z",
        "closed_at": "2023-09-30T04:05:28Z",
        "merged_at": "2023-09-30T04:05:28Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-30T02:17:38Z",
        "closed_at": "2023-09-30T07:52:54Z",
        "merged_at": null,
        "body": "This PR includes the i3wm subconfigs files in runtime/lua/vim/filetype.lua so that they are syntax highlighted by neovim.\r\n\r\nIn version 4.20, [i3wm](https://i3wm.org/) added a new feature that allows users to divide their config files into smaller subconfigs and include them in the main config file using \"include <filepath>\" statement [(here's docs about it)](https://i3wm.org/docs/userguide.html#include).",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-30T01:32:39Z",
        "closed_at": "2023-09-30T01:42:12Z",
        "merged_at": null,
        "body": "In version 4.20, [i3wm](https://i3wm.org/) added a new feature that allows users to divide their config files into smaller subconfigs and include them in the main config file using \"include <filepath>\" statement [(here's docs about it)](https://i3wm.org/docs/userguide.html#include).\r\n\r\nThis PR includes the subconfigs file in runtime/lua/vim/filetype.lua so that they are also syntax highlighted by neovim by default.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-30T00:03:25Z",
        "closed_at": "2023-09-30T00:35:29Z",
        "merged_at": "2023-09-30T00:35:29Z",
        "body": "Functional tests don't check for an environment variable before printing\r\nASAN logs, so oldtests shouldn't either.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 15,
        "changed_files": 6,
        "created_at": "2023-09-29T22:48:38Z",
        "closed_at": "2023-09-29T23:21:42Z",
        "merged_at": "2023-09-29T23:21:42Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 21,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-29T22:43:04Z",
        "closed_at": "2023-09-29T22:43:37Z",
        "merged_at": null,
        "body": "# Description\nBackport of #24758 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-29T22:42:05Z",
        "closed_at": "2023-09-29T22:44:31Z",
        "merged_at": null,
        "body": "# Description\nBackport of #25389 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 133,
        "deletions": 138,
        "changed_files": 28,
        "created_at": "2023-09-29T22:29:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "long is 32 bits on windows, while it is 64 bits on other architectures.\nThis makes the type suboptimal for a codebase meant to be\ncross-platform. Replace it with more appropriate integer types.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-09-29T22:03:37Z",
        "closed_at": "2023-09-29T22:30:10Z",
        "merged_at": "2023-09-29T22:30:10Z",
        "body": "Fix #10563\r\n\r\n#### vim-patch:9.0.1956: Custom completion skips orig cmdline if it invokes glob()\r\n\r\nProblem:  Custom cmdline completion skips original cmdline when pressing\r\n          Ctrl-P at first match if completion function invokes glob().\r\nSolution: Move orig_save into struct expand_T.\r\n\r\ncloses: vim/vim#13216\r\n\r\nhttps://github.com/vim/vim/commit/28a23602e8f88937645b8506b7915ecea6e09b18",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 280,
        "deletions": 290,
        "changed_files": 52,
        "created_at": "2023-09-29T21:55:28Z",
        "closed_at": "2023-10-09T09:45:46Z",
        "merged_at": "2023-10-09T09:45:46Z",
        "body": "long is 32 bits on windows, while it is 64 bits on other architectures.\nThis makes the type suboptimal for a codebase meant to be\ncross-platform. Replace it with more appropriate integer types.\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-29T20:45:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The filetype option may contain multiple file type names (dot-separated).\r\nWe now allow the document selector to match any of those names.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-29T17:25:56Z",
        "closed_at": "2023-10-03T22:04:19Z",
        "merged_at": "2023-10-03T22:04:19Z",
        "body": "# Problem\r\n\r\nWhen expanding wildcards some special characters on Windows are not being accounted.\r\n\r\n# Solution\r\n\r\nConsidering `{` and `$` on the logic.\r\n\r\n---\r\n\r\nFixes #24421.\r\nFixes #22661.\r\n\r\nVim resolves this by having two different methods `dos_expandpath` and `unix_expandpath`.\r\n\r\nShould I add tests on `test/functional/vimscript/glob_spec.lua` for this?",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-29T15:32:49Z",
        "closed_at": "2023-09-29T15:57:03Z",
        "merged_at": "2023-09-29T15:57:03Z",
        "body": "Use `tic -x` instead of `tic` to include any unknown capabilities in a modern `terminfo.src` as user-defined ones, instead of dropping them. Modern ncurses behavior with `tic -x` will not change.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-29T15:15:57Z",
        "closed_at": "2023-09-29T15:25:05Z",
        "merged_at": null,
        "body": "Recommend `tic -x` instead of `tic` in docs instructions on compiling a local terminfo to support modern terminals. `tic -x` includes any unknown capabilities in `terminfo.src` as user-defined ones vs. dropping them. Modern ncurses `tic -x` behavior will not change.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-29T15:00:51Z",
        "closed_at": "2023-09-29T15:18:03Z",
        "merged_at": null,
        "body": "Recommend `tic -x` instead of `tic` in docs instructions on compiling a local terminfo to support modern terminals. `-x` enables older ncurses to accommodate unknown capabilities as user-defined ones vs. build failing. Modern ncurses `tic` is unaffected.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 176,
        "deletions": 199,
        "changed_files": 33,
        "created_at": "2023-09-29T14:19:35Z",
        "closed_at": "2023-09-29T18:07:16Z",
        "merged_at": "2023-09-29T18:07:16Z",
        "body": "continuation of #25396 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 247,
        "deletions": 249,
        "changed_files": 33,
        "created_at": "2023-09-29T13:46:42Z",
        "closed_at": "2023-10-03T20:02:56Z",
        "merged_at": "2023-10-03T20:02:56Z",
        "body": "long is 32 bits on windows, while it is 64 bits on other architectures.\nThis makes the type suboptimal for a codebase meant to be\ncross-platform. Replace it with more appropriate integer types.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-29T11:52:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Avoid before value overwrite by default value.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 250,
        "deletions": 63,
        "changed_files": 11,
        "created_at": "2023-09-29T10:58:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Close #23775\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-09-29T03:22:56Z",
        "closed_at": "2023-10-11T20:38:58Z",
        "merged_at": "2023-10-11T20:38:58Z",
        "body": "Fixes #25375",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-29T02:36:37Z",
        "closed_at": "2023-09-29T05:05:09Z",
        "merged_at": "2023-09-29T05:05:09Z",
        "body": "# Description\nBackport of #25399 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-09-28T23:29:01Z",
        "closed_at": "2023-09-28T23:39:01Z",
        "merged_at": "2023-09-28T23:39:01Z",
        "body": "# Description\nBackport of #24769 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-09-28T22:42:59Z",
        "closed_at": "2023-09-28T23:05:22Z",
        "merged_at": "2023-09-28T23:05:22Z",
        "body": "#### vim-patch:02902b547bdb\n\nruntime(doc): text-objects: document how escaped delimiters are handled\n\nhttps://github.com/vim/vim/commit/02902b547bdb3ba480a52c90dce742201241f224\n\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 109,
        "deletions": 109,
        "changed_files": 5,
        "created_at": "2023-09-28T22:03:02Z",
        "closed_at": "2023-09-28T22:52:02Z",
        "merged_at": "2023-09-28T22:52:02Z",
        "body": "#### vim-patch:9.0.1950: Vim9: error codes spread out\n\nProblem:  Vim9: error codes spread out\nSolution: group them together and reserve 100\n          more for future use\n\nReserve 100 error codes for future enhancements to the Vim9 class\nsupport\n\ncloses: vim/vim#13207\n\nhttps://github.com/vim/vim/commit/413f83990f15d5d59d27ab741670f527a7a3feb8\n\nCo-authored-by: Yegappan Lakshmanan <yegappan@yahoo.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-28T11:17:19Z",
        "closed_at": "2023-09-28T12:20:25Z",
        "merged_at": "2023-09-28T12:20:25Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 29,
        "changed_files": 4,
        "created_at": "2023-09-28T01:24:10Z",
        "closed_at": "2023-09-29T15:37:14Z",
        "merged_at": "2023-09-29T15:37:14Z",
        "body": "Let the culling of `vim.lsp.util` begin.\r\n\r\nPart of #25272. ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-28T00:54:42Z",
        "closed_at": "2023-09-29T02:36:15Z",
        "merged_at": "2023-09-29T02:36:15Z",
        "body": "Linux added these types to their userspace headers in [6.5], which causes unit tests to fail like\r\n\r\n```\r\n-------- Running tests from test/unit/api/private_helpers_spec.lua\r\nRUN       vim_to_object converts true: 17.00 ms ERR\r\ntest/unit/helpers.lua:748: test/unit/helpers.lua:732: (string) '\r\ntest/unit/helpers.lua:264: ';' expected near '__s128' at line 194'\r\nexit code: 256\r\n\r\nstack traceback:\r\n\ttest/unit/helpers.lua:748: in function 'itp_parent'\r\n\ttest/unit/helpers.lua:784: in function <test/unit/helpers.lua:774>\r\n```\r\n\r\nSince we don't use these types, they can be ignored to avoid LuaJIT's C parser choking on them.\r\n\r\n[6.5]: https://github.com/torvalds/linux/commit/224d80c584d3016cb8d83d1c33914fdd3508aa8c",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 7,
        "changed_files": 5,
        "created_at": "2023-09-27T21:23:35Z",
        "closed_at": "2023-09-28T22:51:08Z",
        "merged_at": "2023-09-28T22:51:08Z",
        "body": "#### vim-patch:9.0.1946: filename expansion using ** in bash may fail\r\n\r\nProblem:  filename expansion using ** in bash may fail\r\nSolution: Try to enable the globstar setting\r\n\r\nStarting with bash 4.0 it supports extended globbing using the globstar\r\nshell option. This makes matching recursively below a certain directory\r\nusing the ** pattern work as expected nowadays.  However, we need to\r\nexplicitly enable this using the 'shopt -s globstar' bash command.\r\n\r\nSo let's check the bash environment variable $BASH_VERSINFO (which is\r\nsupported since bash 3.0 and conditionally enable the globstar option,\r\nif the major version is at least 4. For older bashs, this at least\r\nshouldn't cause errors (unless one is using really ancient bash 2.X or\r\nsomething).\r\n\r\ncloses: vim/vim#13144\r\n\r\nhttps://github.com/vim/vim/commit/9eb1ce531527a7177d16373b0f8689bbcd3d5f73\r\n\r\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 16,
        "changed_files": 4,
        "created_at": "2023-09-27T21:06:02Z",
        "closed_at": "2023-09-27T21:22:10Z",
        "merged_at": "2023-09-27T21:22:10Z",
        "body": "#### vim-patch:5277cfaf8afe\n\nruntime(doc): mention mouse scrolling in scrollbind-quickadj (vim/vim#13190)\n\nhttps://github.com/vim/vim/commit/5277cfaf8afe847b7d4dcde6057fbecb001ab64e",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 382,
        "deletions": 413,
        "changed_files": 42,
        "created_at": "2023-09-27T20:48:18Z",
        "closed_at": "2023-09-27T21:49:47Z",
        "merged_at": "2023-09-27T21:49:47Z",
        "body": "we will still have crazy amounts of permutations of message.c functions anyway, see sketch below\r\n\r\n![image](https://github.com/neovim/neovim/assets/1363104/f284b322-94e1-48b3-9b04-0650eedd6aac)\r\n\r\n\r\nAnd explicit `0` attr around the code base is a good thing. Each highlights a missed opportunity to add some _color_ to the life of the user.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 200,
        "deletions": 246,
        "changed_files": 7,
        "created_at": "2023-09-27T18:16:38Z",
        "closed_at": "2023-09-29T15:54:06Z",
        "merged_at": "2023-09-29T15:54:06Z",
        "body": "The screen grid refactors will continue until morale improves. Jokes aside, this is quite a central installment in the series.\r\n\r\nBefore this refactor, there were two fundamentally distinct codepaths for getting some text on the screen:\r\n\r\n- the win_line() -> grid_put_linebuf() -> ui_line() call chain used for buffer text, with `linebuf_char` as a temporary scratch buffer\r\n- the grid_line_start/grid_line_puts/grid_line_flush() -> ui_line() path used for every thing else: statuslines, messages and the command line. Here the `grid->chars[]` array itself doubles as a scratch buffer.\r\n\r\nWith this refactor, the later family of functions still exist, however they now as well render to linebuf_char just like win_line() did, and grid_put_linebuf() is called in the end to calculate delta changes. This means we don't need any duplicate logic for delta calculations anymore.\r\n\r\nLater down the line, it will be possible to share more logic operating on this scratch buffer, like doing 'rightleft' reversal and arabic shaping as a post-processing step.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 665,
        "deletions": 722,
        "changed_files": 20,
        "created_at": "2023-09-27T17:33:12Z",
        "closed_at": "2023-10-16T18:41:36Z",
        "merged_at": "2023-10-16T18:41:36Z",
        "body": "Problem: There is a separate function for setting an option for each type, which are currently `set_string_option`, `set_num_option`, `set_bool_option`, `do_set_option_value`, `do_set_num_option`, `do_set_bool_option`, `do_set_option_string`. This leads to a lot of unnecessary code duplication and also vastly reduces maintainability and extensibility.\r\n\r\nSolution: Unify most ways of setting options to a single `set_option` function, cleaning up a lot of code duplication and greatly simplifying the options code, thus making it a lot more extensible and making it easier to add more option types. This PR unifies everything besides some functions used for string options (`set_string_option`, `did_set_string_option`, etc.). Unification of the code paths for setting string options and all other options will be done in a follow-up PR.\r\n\r\nBREAKING CHANGE: This breaks the `OptionSet` autocommand, as the `v:` values associated with it (`v:option_new`, `v:option_old`, `v:option_oldlocal` and `v:option_oldglobal`) are now the same type as the option, instead of all option values being converted to strings.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 238,
        "deletions": 167,
        "changed_files": 4,
        "created_at": "2023-09-27T17:30:49Z",
        "closed_at": "2023-09-27T20:20:03Z",
        "merged_at": "2023-09-27T20:20:03Z",
        "body": "- vim-patch:347459423903\r\n- vim-patch:02774f99cebc\r\n- vim-patch:54f70cf0780a\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 288,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2023-09-27T16:58:34Z",
        "closed_at": "2023-10-01T19:10:51Z",
        "merged_at": "2023-10-01T19:10:51Z",
        "body": "Since #25209 got merged, `foldtext` can be highlighted with treesitter. This PR adds `vim.treesitter.foldtext` next to `vim.treesitter.foldexpr` that shows the first line of the fold with treesitter highlighting.\r\n\r\n![Screenshot 2023-09-27 at 18 55 43](https://github.com/neovim/neovim/assets/4084982/1e6bf121-55e1-4828-9152-9e027a16bc4c)\r\n",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-27T14:01:00Z",
        "closed_at": "2023-09-27T15:43:40Z",
        "merged_at": "2023-09-27T15:43:40Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-27T11:01:28Z",
        "closed_at": "2023-09-27T11:28:17Z",
        "merged_at": "2023-09-27T11:28:17Z",
        "body": "# Description\nBackport of #25383 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-27T10:02:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Problem:\r\n---\r\nMisuse of `get_node()` is common:\r\nhttps://github.com/search?q=get_node_at_cursor+language%3Alua&type=code\r\n\r\nSolution:\r\n---\r\nAdd a note clarifying proper usage.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 156,
        "deletions": 14,
        "changed_files": 9,
        "created_at": "2023-09-27T09:24:06Z",
        "closed_at": "2023-09-30T11:40:35Z",
        "merged_at": "2023-09-30T11:40:35Z",
        "body": "https://github.com/neovim/neovim/assets/41671631/0e79ab69-0977-48a5-b73a-b687dc5767b5\r\n\r\n\r\nFix #16747\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 204,
        "deletions": 100,
        "changed_files": 7,
        "created_at": "2023-09-27T08:22:06Z",
        "closed_at": "2023-09-27T10:51:40Z",
        "merged_at": "2023-09-27T10:51:40Z",
        "body": "#### vim-patch:8.2.3517: TextChanged does not trigger after TextChangedI\n\nProblem:    TextChanged does not trigger after TextChangedI.\nSolution:   Store the tick separately for TextChangedI. (Christian Brabandt,\n            closes vim/vim#8968)\n\nhttps://github.com/vim/vim/commit/db3b44640d69ab27270691a3cab8d83cc93a0861\n\nCo-authored-by: Christian Brabandt <cb@256bit.org>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-27T07:27:40Z",
        "closed_at": "2023-09-27T10:58:44Z",
        "merged_at": "2023-09-27T10:58:43Z",
        "body": "#### vim-patch:8.2.3467: CursorHoldI event interferes with \"CTRL-G U\"\n\nProblem:    CursorHoldI event interferes with \"CTRL-G U\". (Naohiro Ono)\nSolution:   Restore the flag for \"CTRL-G U\" after triggering CursorHoldI.\n\nhttps://github.com/vim/vim/commit/5a9357d0bff9059f547906d8d03b31bca7215af1\n\nCo-authored-by: Bram Moolenaar <Bram@vim.org>\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-09-27T01:43:11Z",
        "closed_at": "2023-09-27T02:48:15Z",
        "merged_at": "2023-09-27T02:48:14Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-27T01:23:35Z",
        "closed_at": "2023-10-12T23:27:46Z",
        "merged_at": "2023-10-12T23:27:45Z",
        "body": "### PROBLEM\r\n\r\nCurrently `:echoerr` prints multi-line strings in a single line\r\nas `:echom` does (Note: `:echon` can print multi-line strings well).\r\nThis makes stacktrace printed via echoerr difficult to read.\r\n\r\nRelated to #25350\r\n\r\nExample code:\r\n\r\n    try\r\n      lua error(\"lua stacktrace\")\r\n    catch\r\n      echoerr v:exception\r\n    endtry\r\n\r\nOutput:\r\n\r\n    Error detected while processing a.vim[5]..a.vim:\r\n    line    4:\r\n    Vim(lua):E5108: Error executing lua [string \":lua\"]:1: lua stacktrace^@stack traceback:^@^I[C]: in function 'error'^@^I[string \":lua\"]:1: in main chunk\r\n\r\n### SOLUTION\r\n\r\nAllow echoerr to print multiline messages (e.g., lua exceptions),\r\nbecause this command is usually used to print stacktraces.\r\n\r\nOutput after the fix:\r\n\r\n    Error detected while processing a.vim[5]..a.vim:\r\n    line    4:\r\n    Vim(lua):E5108: Error executing lua [string \":lua\"]:1: lua stacktrace\r\n    stack traceback:\r\n            [C]: in function 'error'\r\n            [string \":lua\"]:1: in main chunk\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 254,
        "deletions": 257,
        "changed_files": 33,
        "created_at": "2023-09-26T21:23:03Z",
        "closed_at": "2023-09-29T12:56:34Z",
        "merged_at": "2023-09-29T12:56:34Z",
        "body": "long is 32-bits even on 64-bit windows which makes the type suboptimal\nfor a codebase meant to be cross-platform.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 47,
        "changed_files": 5,
        "created_at": "2023-09-26T19:25:19Z",
        "closed_at": "2023-09-27T11:21:30Z",
        "merged_at": "2023-09-27T11:21:30Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 25,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-09-26T17:21:38Z",
        "closed_at": "2023-09-26T18:00:43Z",
        "merged_at": null,
        "body": "Fixes https://github.com/neovim/neovim/issues/25372",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-25T22:14:19Z",
        "closed_at": "2023-09-25T22:25:46Z",
        "merged_at": "2023-09-25T22:25:46Z",
        "body": "# Description\nBackport of #25362 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-25T20:15:30Z",
        "closed_at": "2023-09-26T07:37:47Z",
        "merged_at": "2023-09-26T07:37:47Z",
        "body": "runtime(sh): only invoke bash help in ftplugin if it has been detected to be bash (vim/vim#13171)\n\nhttps://github.com/vim/vim/commit/54e1f56cf2a5f74ee11baba170afff867e5d9f99\n\nCo-authored-by: Eisuke Kawashima <e-kwsm@users.noreply.github.com>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-25T15:00:20Z",
        "closed_at": "2023-09-25T16:06:54Z",
        "merged_at": "2023-09-25T16:06:54Z",
        "body": "FFI: Fix ffi.abi(\"pauth\")\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-25T14:38:19Z",
        "closed_at": "2023-09-25T22:13:58Z",
        "merged_at": "2023-09-25T22:13:58Z",
        "body": "Problem: No commentstring is set for D buffers after removing the default C-style commentstring\r\n\r\nSame solution than neovim#23039",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 311,
        "deletions": 305,
        "changed_files": 25,
        "created_at": "2023-09-25T13:28:35Z",
        "closed_at": "2023-09-25T15:21:51Z",
        "merged_at": null,
        "body": "Replace the stl/stlnc character under a vertical split with a half block (`\u2590`).\r\n\r\nresolves #22052",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 57,
        "changed_files": 12,
        "created_at": "2023-09-25T10:59:01Z",
        "closed_at": "2023-09-25T17:00:31Z",
        "merged_at": "2023-09-25T17:00:31Z",
        "body": "A lot of updated places in the docs were already incorrect since long since they did not reflect the default behaviour.\r\n\r\n\"[dos format]\" could've been argued being better for discoverability but that ship has already sailed as it is no longer displayed by default.\r\n\r\nAlso, getting rid of some noise makes it easier to discover and focus on the 'shortmess' flags which _are_ somewhat useful to customize behavior.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 48,
        "changed_files": 6,
        "created_at": "2023-09-25T10:25:39Z",
        "closed_at": "2023-09-25T16:16:25Z",
        "merged_at": "2023-09-25T16:16:25Z",
        "body": "This was only used to avoid the effect of SHM_OVERALL. This can easily\r\nbe handled in isolation, instead of clearing out all of 'shortmess' which\r\nhas unwanted side effects and mystifies what really is going on.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-09-25T04:21:26Z",
        "closed_at": "2023-09-26T07:43:44Z",
        "merged_at": "2023-09-26T07:43:44Z",
        "body": "- Adding the operator annotation for `pattern1 - pattern2`, `-pattern` and `pattern % func`.\r\n- Removing the redundant operator annotations from the `Capture` alias, since those are already defined in the `Pattern` type.\r\n- Adding `|nil` to some return types.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-25T03:06:36Z",
        "closed_at": "2023-09-25T03:16:18Z",
        "merged_at": "2023-09-25T03:16:18Z",
        "body": "# Description\nBackport of #25354 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-25T02:46:20Z",
        "closed_at": "2023-09-25T03:06:16Z",
        "merged_at": "2023-09-25T03:06:16Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 10,
        "changed_files": 5,
        "created_at": "2023-09-25T00:23:49Z",
        "closed_at": "2023-09-25T00:53:37Z",
        "merged_at": "2023-09-25T00:53:37Z",
        "body": "# Description\nBackport of #25351 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 261,
        "deletions": 668,
        "changed_files": 6,
        "created_at": "2023-09-24T23:34:36Z",
        "closed_at": "2023-10-02T20:21:35Z",
        "merged_at": "2023-10-02T20:21:35Z",
        "body": "Preliminary work for https://github.com/neovim/neovim/pull/25301.\r\n\r\nThe purpose of this PR is to replace the [existing parser implementation](https://github.com/neovim/neovim/blob/master/runtime/lua/vim/lsp/_snippet.lua) by an LPEG grammar. This grammar strictly follows the [EBNF snippet grammar](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.18/specification/#snippet_syntax) defined by LSP. \r\n\r\nI've also updated the structure of the nodes to be generic and contain their \"payload\" in `data` (yayyy type annotations!).\r\n\r\nTODOs:\r\n- [x] Update tests.\r\n- [x] Replace usages of `_snippet` by `_snippet_grammar` in `vim.lsp.util`. <s>The reason I haven't done this yet is because I'm unsure of the use cases of `vim.lsp.util.parse_snippet`. It seems to simply invoke [`tostring` on the snippet node](https://github.com/neovim/neovim/blob/b917db062fc673dfbbc6a8c722b05101319ab44e/runtime/lua/vim/lsp/_snippet.lua#L189), but that function doesn't even cover all node types?</s> I've modified `vim.lsp.util.parse_snippet` to just return the \"raw\" snippet tree, which is pretty much what the current implementation does. I'm unsure if we should deprecate this function; it feels weird to provide this \"dummy\" snippet parser if snippet support isn't even set in the client's capabilities.",
        "comments": 20
    },
    {
        "merged": true,
        "additions": 44,
        "deletions": 10,
        "changed_files": 5,
        "created_at": "2023-09-24T23:15:52Z",
        "closed_at": "2023-09-25T00:23:25Z",
        "merged_at": "2023-09-25T00:23:25Z",
        "body": "Fix #25350\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 5,
        "created_at": "2023-09-24T22:39:55Z",
        "closed_at": "2023-09-24T23:15:20Z",
        "merged_at": "2023-09-24T23:15:20Z",
        "body": "#### vim-patch:790f9a890cee\n\nruntime(doc): Add a missing '<' to the help of strutf16len() (vim/vim#13168)\n\nhttps://github.com/vim/vim/commit/790f9a890ceeb9539776265cba0f026fb2c96790\n\nCo-authored-by: a5ob7r <12132068+a5ob7r@users.noreply.github.com>\n\n\n#### vim-patch:960822a11f70\n\nruntime(doc): grammar fixes in doc (vim/vim#13164)\n\nhttps://github.com/vim/vim/commit/960822a11f70d2ed7e78b42fb6b75a9f8839ec9f\n\nCo-authored-by: Dominique Pell\u00e9 <dominique.pelle@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 124,
        "deletions": 122,
        "changed_files": 3,
        "created_at": "2023-09-24T22:04:25Z",
        "closed_at": "2023-09-24T22:31:52Z",
        "merged_at": "2023-09-24T22:31:52Z",
        "body": "#### vim-patch:9.0.1938: multispace wrong when scrolling horizontally\r\n\r\nProblem:  multispace wrong when scrolling horizontally\r\nSolution: Update position in \"multispace\" or \"leadmultispace\" also in\r\n          skipped chars. Reorder conditions to be more consistent.\r\n\r\ncloses: vim/vim#13147\r\n\r\nhttps://github.com/vim/vim/commit/abc808112ee5df58a9f612f2bb5a65389c2c14e1",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-24T21:58:40Z",
        "closed_at": "2023-09-24T22:23:43Z",
        "merged_at": "2023-09-24T22:23:43Z",
        "body": "#### vim-patch:9.0.1937: missing test for mouse click + 'virtedit'\r\n\r\nProblem:  missing test for mouse click + 'virtedit'\r\nSolution: Add test for clicking after eol with 'virtualedit' and wrapped\r\n          line\r\n\r\ncloses: vim/vim#13157\r\n\r\nhttps://github.com/vim/vim/commit/46a0582ffa4ea79b112ac01e25adccf93b49cd9d",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-09-24T21:51:34Z",
        "closed_at": "2023-09-24T22:19:19Z",
        "merged_at": "2023-09-24T22:19:19Z",
        "body": "#### vim-patch:9.0.1931: make test_compilers fails on ubuntu\n\nProblem:  make test_compilers fails on ubuntu\nSolution: set LC_ALL=C\n\nfix: make test_compiler failed on xubuntu 22.04.3\n\nProblem: 'make test_compiler' failed on Linux xubuntu 22.04.3 but\n         succeeded on e.g. macOS. To reproduce:\n```\n$ ./configure --with-features=huge --enable-gui=no --enable-perlinterp=yes\n$ make -j12\n$ cd vim/src/testdir\n$ make test_compiler\n...snip...\nFound errors in Test_compiler():\ncommand line..script /home/dope/sb/vim/src/testdir/runtest.vim[601]..function RunTheTest[54]..Test_compiler line 24: command did not fail: clist\ncommand line..script /home/dope/sb/vim/src/testdir/runtest.vim[601]..function RunTheTest[54]..Test_compiler line 30: Pattern '\\\\n \\\\d\\\\+ Xfoo.pl:3: Global symbol \"$foo\" requires explicit package name' does not match '\\n19 Xfoo.pl:3: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?)'\nmake: *** [Makefile:70: test_compiler] Error 1\n```\nSolution: set `LC_ALL` to \"C\" in `Test_compiler()`\n\ncloses: vim/vim#13173\n\nhttps://github.com/vim/vim/commit/ca0ffc0d63727850c520a80929698e4c199b17f4\n\nCo-authored-by: Dominique Pell\u00e9 <dominique.pelle@tomtom.com>\n\n\n#### vim-patch:9.0.1934: :bwipe fails after switching window from aucmd_win.\n\nProblem:  :bwipe fails after switching window from aucmd_win.\nSolution: Decrement b_nwindows after switching back to aucmd_win.\n\ncloses: vim/vim#13160\n\nhttps://github.com/vim/vim/commit/46bdae036ac4121e305fc3ed4ef3f9fc928dcb25",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2023-09-24T20:20:08Z",
        "closed_at": "2023-09-28T04:57:22Z",
        "merged_at": "2023-09-28T04:57:22Z",
        "body": "Specifically, recommend adding a space after i.e. `--- @see`.\n\nThe \"space\" variant is common for the vast majority of docstring formats\nsuch as doxygen, javadoc and typescript.",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-09-24T14:11:19Z",
        "closed_at": "2023-09-25T09:34:05Z",
        "merged_at": "2023-09-25T09:34:05Z",
        "body": "The \"f\" flag was removed in f7da4722570617bd8927e7aa533fa9a608c45bba.\nThe value of the \"f\" flag is no longer listed in the 'shortmess'\ndescription and it cannot be disabled, so having it in the default value\nis pointless and confusing.\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-24T14:04:49Z",
        "closed_at": "2023-09-24T14:19:17Z",
        "merged_at": "2023-09-24T14:19:17Z",
        "body": "# Description\nBackport of #25342 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-24T13:41:00Z",
        "closed_at": "2023-09-24T14:04:29Z",
        "merged_at": "2023-09-24T14:04:29Z",
        "body": "Fix #25340\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 23,
        "changed_files": 2,
        "created_at": "2023-09-24T13:34:29Z",
        "closed_at": "2023-09-24T14:03:55Z",
        "merged_at": "2023-09-24T14:03:55Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 103,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-24T05:20:39Z",
        "closed_at": "2023-09-24T08:29:07Z",
        "merged_at": "2023-09-24T08:29:07Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 267,
        "deletions": 178,
        "changed_files": 15,
        "created_at": "2023-09-24T04:28:51Z",
        "closed_at": "2023-10-04T13:31:26Z",
        "merged_at": "2023-10-04T13:31:26Z",
        "body": "# Problem:\r\nThe swapfile \"E325: ATTENTION\" dialog is displayed when editing a file already open in another (running) Nvim. Usually this behavior is annoying and irrelevant:\r\n- \"Recover\" and the other options (\"Open readonly\", \"Quit\", \"Abort\") are almost never wanted.\r\n- swapfiles are less relevant for \"multi-Nvim\" since 'autoread' is enabled by default.\r\n  - Even less relevant if user enables 'autowrite'.\r\n\r\n# Solution:\r\n\r\n<img width=\"444\" alt=\"image\" src=\"https://github.com/neovim/neovim/assets/1359421/87e750f1-6e52-4adb-ae1c-fbe6f52c3a02\">\r\n\r\nDefine a default SwapExists handler which does the following:\r\n1. If the swapfile is owned by a running Nvim process (matching the current user), automatically chooses \"(E)dit anyway\" (caveat: this creates a new, extra swapfile, which is mostly harmless and ignored except by `:recover` or `nvim -r`.\r\n2. Shows a 1-line \"ignoring swapfile...\" message.\r\n3. Users can disable the default SwapExists handler via `autocmd! nvim_swapfile`.\r\n\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-09-24T02:51:51Z",
        "closed_at": "2023-09-24T03:20:23Z",
        "merged_at": "2023-09-24T03:20:23Z",
        "body": "Oldtests clean up after themselves, and the options that need operators\nto align with Vim all deny duplicates, so there is no need to set them\nto default.\n\nAlso make the variable name that test_listchars.vim uses to align with\nVim more obvious.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-09-24T02:29:04Z",
        "closed_at": "2023-09-25T04:39:59Z",
        "merged_at": "2023-09-25T04:39:59Z",
        "body": "Updating examples, type annotations, and internal usages to make sure we're not using deprecated stuff.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 99,
        "deletions": 106,
        "changed_files": 1,
        "created_at": "2023-09-23T23:39:33Z",
        "closed_at": "2023-09-24T00:05:18Z",
        "merged_at": "2023-09-24T00:05:18Z",
        "body": "- Make indent consistent.\n- Remove outdated \"Only single integration test\" comment.\n- Don't use setup() as function name as it's used by busted.\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-23T16:30:17Z",
        "closed_at": "2023-09-23T16:33:09Z",
        "merged_at": null,
        "body": "- headers kan have no more than three levels\r\n- both start and end marker for preformatted text should be at the start of the line",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 20,
        "changed_files": 7,
        "created_at": "2023-09-23T14:47:32Z",
        "closed_at": "2023-09-23T19:18:06Z",
        "merged_at": "2023-09-23T19:18:06Z",
        "body": "Not everything needs to be crazy overconfigurable.\r\n\r\nAlso fixes a warning in latest clang which doesn't approve of the funky math switch statement.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 178,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-09-23T14:34:05Z",
        "closed_at": "2023-09-23T14:45:44Z",
        "merged_at": "2023-09-23T14:45:44Z",
        "body": "# Description\nBackport of #25328 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 178,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-09-23T13:57:23Z",
        "closed_at": "2023-09-23T14:33:45Z",
        "merged_at": "2023-09-23T14:33:45Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-23T13:28:13Z",
        "closed_at": "2023-09-23T13:29:02Z",
        "merged_at": "2023-09-23T13:29:02Z",
        "body": "# Description\nBackport of #25316 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-23T13:25:18Z",
        "closed_at": "2023-09-24T02:58:49Z",
        "merged_at": "2023-09-24T02:58:49Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 219,
        "deletions": 71,
        "changed_files": 5,
        "created_at": "2023-09-23T09:49:18Z",
        "closed_at": "2023-09-24T02:57:10Z",
        "merged_at": "2023-09-24T02:57:10Z",
        "body": "Fix #25294",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-23T08:17:16Z",
        "closed_at": "2023-09-23T08:46:44Z",
        "merged_at": "2023-09-23T08:46:44Z",
        "body": "another day, another bugfix\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-23T08:00:01Z",
        "closed_at": "2023-09-23T08:13:58Z",
        "merged_at": "2023-09-23T08:13:58Z",
        "body": "# Description\nBackport of #25321 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-23T07:32:13Z",
        "closed_at": "2023-09-23T07:59:38Z",
        "merged_at": "2023-09-23T07:59:38Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-23T06:43:19Z",
        "closed_at": "2023-09-23T06:53:20Z",
        "merged_at": "2023-09-23T06:53:20Z",
        "body": "# Description\nBackport of #25318 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-09-23T06:11:05Z",
        "closed_at": "2023-09-23T06:26:29Z",
        "merged_at": "2023-09-23T06:26:29Z",
        "body": "# Description\nBackport of #25317 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-23T04:46:37Z",
        "closed_at": "2023-09-23T06:43:00Z",
        "merged_at": "2023-09-23T06:43:00Z",
        "body": "Fix #17797\r\nClose #25314",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-09-23T04:07:52Z",
        "closed_at": "2023-09-23T04:41:09Z",
        "merged_at": "2023-09-23T04:41:09Z",
        "body": "#### vim-patch:8.2.4609: :unhide does not check for failing to close a window\r\n\r\nProblem:    :unhide does not check for failing to close a window.\r\nSolution:   When closing a window fails continue with the next one.  Do not\r\n            try closing the autocmd window.\r\n\r\nhttps://github.com/vim/vim/commit/6f2465d336a9d4afe392db4084ef7e9db17e67c1\r\n\r\nCo-authored-by: Bram Moolenaar <Bram@vim.org>",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-23T03:40:29Z",
        "closed_at": "2023-09-23T09:49:34Z",
        "merged_at": "2023-09-23T09:49:34Z",
        "body": "PROBLEM: The builtin python3 provider cannot auto-detect python3.12\r\nwhen g:python3_host_prog is not set. As a result, when python3 on $PATH\r\nis currently python 3.12, neovim will fail to load python3 provider\r\nand result in `has(\"python3\") == 0`, e.g.,\r\n\"Failed to load python3 host. You can try to see what happened by ...\"\r\n\r\nROOT CAUSE: the `system()` call from `provider#pythonx#DetectByModule`\r\ndoes not ignore python warnings, and `pkgutil.get_loader` will print\r\na warning message in the very first line:\r\n```\r\n<string>:1: DeprecationWarning: 'pkgutil.get_loader' is deprecated and\r\nslated for removal in Python 3.14; use importlib.util.find_spec() instead\r\n```\r\n\r\nSOLUTION:\r\n- Use `importlib.util.find_spec` instead (python >= 3.4)\r\n- Use `-W ignore` option to prevent any potential warning messages\r\n\r\nWORKAROUND (for *old* neovim versions):\r\n\r\n```lua\r\n-- Put this in your init.lua before any has(\"python3\") call\r\nvim.g.python3_host_prog = \"python3\"\r\n```\r\n```vim\r\n\" Put this in your init.vim before any has(\"python3\") call\r\nlet g:python3_host_prog = \"python3\"\r\n```",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 29,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-23T03:23:34Z",
        "closed_at": "2023-10-05T18:24:11Z",
        "merged_at": null,
        "body": "A quick fix for now, some relevant discussions are in https://github.com/NixOS/nixpkgs/issues/229275 (thanks nifoc)\r\n\r\nThere was a fix to FindLpeg.cmake since https://github.com/neovim/neovim/issues/23395 to address the first part of this (to use imported liblpeg), but Nix + darwin users never had much love from the second part - discover liblpeg's location.\r\n\r\nThere's also subtle difference in `CMAKE_SHARED_LIBRARY_SUFFIX` https://gitlab.kitware.com/cmake/cmake/-/issues/21189.\r\n\r\n> macOS distinguishes between shared libraries and loadable modules.  CMAKE_SHARED_LIBRARY_SUFFIX is set to .dylib for shared libraries.  CMAKE_SHARED_MODULE_SUFFIX is set to .so for loadable modules (e.g. dlopen).  See the [add_library](https://cmake.org/cmake/help/v3.18/command/add_library.html#normal-libraries) command's SHARED and MODULE options.\r\n\r\nlpeg's make always exports `liblpeg.so` for darwin via gcc; clang builds to `.dylib`. I'm still not an expert with C/C++ build system yet, let alone the Mach-O differences that leads to this.\r\n\r\n~~I'd imagine a sister PR where it changes `CMAKE_SHARED_LIBRARY_SUFFIX` onto `CMAKE_SHARED_MODULE_SUFFIX` for a consistent `.so` output. I'm not sure how much this would break for other platforms.~~\r\n\r\nEDIT: This does not work since neovim uses `clang` as a compiler backend and expects `.dylib` on darwin anyways\r\n\r\n```\r\n% \u276f nix build .#                                  \r\nwarning: Git tree '/Users/<>/local_repos/neovim' is dirty\r\nerror: builder for '/nix/store/1fk5q3jgp074gdkb1qx951lb9h9bq8s8-neovim-unwrapped-dirty.drv' failed with exit cod\r\ne 2;\r\n       last 10 log lines:\r\n       > [  0%] Building C object src/nvim/CMakeFiles/nlua0.dir/__/mpack/mpack_core.c.o\r\n       > [  0%] Building C object src/nvim/CMakeFiles/nlua0.dir/__/nlua0.c.o\r\n       > -- Using NVIM_VERSION: v0.10.0-dev\r\n       > [  0%] Built target update_version_stamp\r\n       > [  0%] Linking C shared module ../../lib/libnlua0.so\r\n       > ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB) file '/nix/store/v1byly3yi0q45psbbi14v1qq\r\nak6v5rak-luajit-2.1.0-2022-10-04-env/lib/lua/5.1/lpeg.so' for architecture arm64\r\n       > clang-11: error: linker command failed with exit code 1 (use -v to see invocation)\r\n       > make[2]: *** [src/nvim/CMakeFiles/nlua0.dir/build.make:178: lib/libnlua0.so] Error 1\r\n       > make[1]: *** [CMakeFiles/Makefile2:616: src/nvim/CMakeFiles/nlua0.dir/all] Error 2\r\n       > make: *** [Makefile:156: all] Error 2\r\n       For full logs, run 'nix log /nix/store/1fk5q3jgp074gdkb1qx951lb9h9bq8s8-neovim-unwrapped-dirty.drv'.\r\n\r\n```\r\n\r\nhttps://github.com/neovim/neovim/blob/c26b39a9aa56e834262753e08372240fde9dcdf1/cmake/FindLpeg.cmake#L1",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-23T02:20:53Z",
        "closed_at": "2023-09-23T06:43:01Z",
        "merged_at": null,
        "body": "Fix #17797",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-09-23T02:03:10Z",
        "closed_at": "2023-09-23T03:00:20Z",
        "merged_at": "2023-09-23T03:00:20Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 330,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-22T22:25:27Z",
        "closed_at": "2023-09-24T20:10:10Z",
        "merged_at": "2023-09-24T20:10:10Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-22T20:01:13Z",
        "closed_at": "2023-09-22T22:02:45Z",
        "merged_at": "2023-09-22T22:02:45Z",
        "body": "There doesn't seem to be a reason why this module isn't included.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 22,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-22T14:52:02Z",
        "closed_at": "2023-09-23T09:31:11Z",
        "merged_at": null,
        "body": "\r\nFix #25294 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 74,
        "deletions": 46,
        "changed_files": 5,
        "created_at": "2023-09-22T09:32:20Z",
        "closed_at": "2023-09-22T09:56:06Z",
        "merged_at": "2023-09-22T09:56:06Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-22T09:23:28Z",
        "closed_at": "2023-09-24T17:43:55Z",
        "merged_at": "2023-09-24T17:43:55Z",
        "body": "First PR - hoping to fix https://github.com/neovim/neovim/issues/25291 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 53,
        "changed_files": 7,
        "created_at": "2023-09-22T07:07:24Z",
        "closed_at": "2023-09-22T07:36:25Z",
        "merged_at": "2023-09-22T07:36:25Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 42,
        "deletions": 34,
        "changed_files": 2,
        "created_at": "2023-09-22T05:53:20Z",
        "closed_at": "2023-09-22T06:21:58Z",
        "merged_at": "2023-09-22T06:21:58Z",
        "body": "Fix #25302",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 747,
        "deletions": 34,
        "changed_files": 11,
        "created_at": "2023-09-22T03:49:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Defines the minimal API for LSP snippet support. The initial design is:\r\n1. `vim.snippet.expand` receives the snippet text and parses it using the LPEG grammar.\r\n2. The snippet's children are transformed as follows:\r\n    - Known variables are replaced by their values (e.g. `$TM_FILENAME` becomes `foo.txt`), falling back to their defaults when provided.\r\n    - When a variable is unknown, the name of the variable is inserted and it is transformed into a placeholder _(haven't done this yet)_.\r\n    - Placeholders have their text[^1] inserted.\r\n    - With choice nodes, the first value is inserted (see below for future work).\r\n    - Text nodes are inserted as given.\r\n3. Based on `expandtab` and the indentation of the current line, the snippet is indented accordingly. \r\n4. The snippet text is set in the current buffer.\r\n5. To \"fill out\" the snippet, tabstops can be navigated using `vim.snippet.jump(direction)` (using `1` for jumping forward and `-1` for backwards). `vim.snippet.jumpable(direction)` can also be used before jumping to check if the jump in the given direction is valid.\r\n6. The snippet session is cancelled when reaching the final tabstop (`$0`) or when the cursor moves outside the snippet's tabstops. Tabstops can be customized with the `SnippetTabstop` highlight group.\r\n\r\nNote that the following features remain yet to be implemented in more mature versions of the snippet API:\r\n- Variable transformations via regexes.\r\n- Choice placeholders, in which the user can select from a given set of options to insert.\r\n- Nested placeholders. Right now the value of a placeholder is simply converted to a string and inserted.\r\n\r\nPending discussion items in this PR:\r\n- [X] _My use of `Range4` despite it being a \"Treesitter\" type_: Seems like we're fine with this given that [we plan on refactoring ranges/positions anyway](https://github.com/neovim/neovim/issues/25509).\r\n- [x] _Currently `vim.snippet.jump` uses `vim.snippet.jumpable` to check that the movement is valid. Do we want to instead ask the user to invoke `jumpable` first and remove the check?_ No harm in keeping the check.\r\n- [x] _I'm not 100% sure about the name of `vim.snippet.cancel`, since sometimes it does cancel the snippet session but it's also invoked when the snippet navigation is complete. Do we want to give it another name?_ Looks like we're all happy with `vim.snippet.exit`.\r\n\r\n[^1]: When I say that the text of a node is inserted, I don't mean the raw table string, but the output from [`Node:__tostring()`](https://github.com/neovim/neovim/blob/a041d8ac118f45b9e20d4975737f25a548cb6337/runtime/lua/vim/lsp/_snippet_grammar.lua#L85).",
        "comments": 18
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-22T02:54:21Z",
        "closed_at": "2023-09-22T04:00:36Z",
        "merged_at": null,
        "body": "how about this @zeertzjq ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-21T22:10:13Z",
        "closed_at": "2023-09-21T22:51:47Z",
        "merged_at": "2023-09-21T22:51:47Z",
        "body": "- Don't complete when there is pending input.\r\n- Use vim.list_contains() instead of vim.tbl_contains().",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-21T22:01:37Z",
        "closed_at": "2023-09-21T22:06:12Z",
        "merged_at": null,
        "body": "I have just installed a local terminfo to allow me to get undercurl supported on RHEL 7, using ncurses 5 over ssh using mintty.\r\n\r\nThe current instructions mean if `tic` hits extended codes it does not understand, which is a lot of them, it will discard them from the new terminfo.\r\n\r\nBy adding the flag `-x`, supported since 1999 (https://invisible-island.net/ncurses/NEWS.html#index-t990301), `tic` will try to include any new features automatically as custom user flags, including undercurl.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 75,
        "deletions": 13,
        "changed_files": 4,
        "created_at": "2023-09-21T14:46:55Z",
        "closed_at": "2023-09-21T21:44:46Z",
        "merged_at": "2023-09-21T21:44:46Z",
        "body": "#### vim-patch:9.0.1923: curswant wrong on click with 've' and 'nowrap' set\n\nProblem:  curswant wrong on click with 've' and 'nowrap' set\nSolution: Add w_leftcol to mouse click column.\n\ncloses: vim/vim#13142\n\nhttps://github.com/vim/vim/commit/db54e989b5cff3cc6442dfc500e3962cc1c0b6d0",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-21T13:13:05Z",
        "closed_at": "2023-09-21T13:18:10Z",
        "merged_at": null,
        "body": "Fix #23869 ",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 180,
        "deletions": 169,
        "changed_files": 3,
        "created_at": "2023-09-21T12:51:48Z",
        "closed_at": "2023-09-21T13:26:37Z",
        "merged_at": null,
        "body": "While reading through the docs I noticed that in a few places code blocks are done via merely indenting them and therefore don't have any highlighting. Since the backtick syntax is used in some code blocks I converted all remaining code blocks in `src/nvim/README.md`, `test/README.md` and `CONTRIBUTING.md` to that, too.\r\n\r\nFor the BPF code in `src/nvim/README.md` I chose `c` as highlighting identifier, as there is no bpf one afaik and `c` seems to do a reasonably good job here. I also fixed some minor  inconsistency in the listing where it didn't follow the 2-space indentation.\r\n\r\nWhile this doesn't make a huge difference for the shell listings especially on Github, I think it looks a lot nicer when reading those files locally. Also the listing would be consistent then.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-21T10:36:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "WIP\r\n\r\n- [ ] update :fclose docs https://github.com/neovim/neovim/pull/25561/files#r1353070087",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-09-21T08:21:32Z",
        "closed_at": "2023-09-21T10:58:26Z",
        "merged_at": "2023-09-21T10:58:26Z",
        "body": "Fix #21608\r\n\r\nIf nvim exited with nonzero status this is for one of the two reasons:\r\n- `:cquit` was invoked. This is used by users and plugins to communicate a result, like a nonzero status will fail a `git commit` operation\r\n- There was an internal error or deadly signal. in this case an error message was likely written to stderr or to the screen.\r\n\r\nIn the latter case, the error message was often hidden by the TUI exiting altscreen mode, which erases all visible terminal text.\r\n\r\nThis change prevents this in the latter case, while still cleaning up the terminal properly when `:cquit` was deliberatily invoked. Other cleanup like exiting mouse mode and raw mode is still done.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-21T06:47:43Z",
        "closed_at": "2023-09-21T10:36:20Z",
        "merged_at": null,
        "body": "CONTRIBUTING.md recommends reading `:help dev-doc-lua`, which does not exist but `dev-lua-doc` does.\r\n\r\nSince the existing `dev-lua-doc` section comes after `dev-doc` and before `dev-lua`, it seemed to make more sense to namespace the section under `dev-doc-*` instead of `dev-lua-*`.\r\n\r\n`dev-lua-doc` had no references in the codebase.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-09-21T06:44:03Z",
        "closed_at": "2023-09-22T23:08:03Z",
        "merged_at": "2023-09-22T23:08:03Z",
        "body": "The docs for `schedule` and `schedule_wrap` do not clearly explain why you would use one vs the other. By expanding the `schedule_wrap` docs, its intended usage is hopefully clearer.\r\n\r\n- Explicitly state that `schedule_wrap` returns a function in the one line summary.\r\n- Remove the usage of the term \"defer\" to avoid confusion with `vim.defer_fn` which calls `vim.schedule_wrap` internally.\r\n- Mention that arguments are passed along.\r\n- Include some example usage.\r\n- Rename param from `cb` to `callback` to match vim.schedule",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 25,
        "changed_files": 1,
        "created_at": "2023-09-21T06:39:09Z",
        "closed_at": "2023-09-21T07:06:07Z",
        "merged_at": "2023-09-21T07:06:06Z",
        "body": "#### vim-patch:a7aba6ca5033\n\nruntime(doc): format jumplist examples more consistently (vim/vim#13137)\n\nhttps://github.com/vim/vim/commit/a7aba6ca5033a85839d997d29d5ca88a1f2acf8f",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-21T05:55:28Z",
        "closed_at": "2023-09-21T06:16:44Z",
        "merged_at": "2023-09-21T06:16:44Z",
        "body": "more bugfixes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 278,
        "deletions": 59,
        "changed_files": 6,
        "created_at": "2023-09-21T02:22:58Z",
        "closed_at": "2023-09-21T04:05:08Z",
        "merged_at": "2023-09-21T04:05:08Z",
        "body": "#### vim-patch:9.0.1919: Wrong curswant when clicking on empty line or with vsplits\n\nProblem:  Wrong curswant when clicking on empty line or with vsplits.\nSolution: Don't check for ScreenCols[] before the start of the window\n          and handle empty line properly.\n\ncloses: vim/vim#13132\n\nhttps://github.com/vim/vim/commit/03cd697d635f1b0e7ffe21cf8244a8fb755f2ddb",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 25,
        "changed_files": 6,
        "created_at": "2023-09-21T02:04:58Z",
        "closed_at": "2023-09-23T22:46:46Z",
        "merged_at": "2023-09-23T22:46:46Z",
        "body": "\"Types are good.\" - @sid-6581 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-20T23:03:49Z",
        "closed_at": "2023-09-20T23:38:19Z",
        "merged_at": "2023-09-20T23:38:19Z",
        "body": "# Description\nBackport of #25277 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 116,
        "deletions": 68,
        "changed_files": 6,
        "created_at": "2023-09-20T23:03:12Z",
        "closed_at": "2023-09-20T23:37:04Z",
        "merged_at": "2023-09-20T23:37:04Z",
        "body": "#### vim-patch:9.0.1921: not possible to use the jumplist like a stack\r\n\r\nProblem:  not possible to use the jumplist like a stack\r\nSolution: Add the 'jumpoptions' setting to make the jumplist\r\n          a stack.\r\n\r\nAdd an option for using jumplist like tag stack\r\n\r\nrelated: vim/vim#7738\r\ncloses: vim/vim#13134\r\n\r\nported from NeoVim:\r\n\r\n- https://neovim.io/doc/user/motion.html#jumplist-stack\r\n- neovim/neovim@39094b3\r\n- https://vi.stackexchange.com/questions/18344/how-to-change-jumplist-behavior\r\n\r\nBased on the feedback in the previous PR, it looks like many people like\r\nthis option.\r\n\r\nhttps://github.com/vim/vim/commit/87018255e3ad0f4dfa03e20318836d24af721caf\r\n\r\nCo-authored-by: Yegappan Lakshmanan <yegappan@yahoo.com>\r\nCo-authored-by: butwerenotthereyet <58348703+butwerenotthereyet@users.noreply.github.com>",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-20T22:07:19Z",
        "closed_at": "2023-09-20T23:03:26Z",
        "merged_at": "2023-09-20T23:03:26Z",
        "body": "Fix #25273\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-20T21:44:11Z",
        "closed_at": "2023-09-20T22:32:35Z",
        "merged_at": "2023-09-20T22:32:35Z",
        "body": "patch 9.0.1918: No filetype detection for Authzed filetypes\n\nProblem:  No filetype detection for Authzed filetypes\nSolution: Detect the *.zed file extension as authzed filetype\n\ncloses: vim/vim#13129\n\nhttps://github.com/vim/vim/commit/5790a54166793554d16f6a85d8824632860b8b37\n\nCo-authored-by: Matt Polzin <mpolzin@workwithopal.com>\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-20T21:34:17Z",
        "closed_at": "2023-09-21T20:08:13Z",
        "merged_at": "2023-09-21T20:08:13Z",
        "body": "If `-export_dynamic` is not passed to the linker, then Link Time\nOptimization may inline and remove global functions even though\nENABLE_EXPORTS is set to true.\n\nCloses https://github.com/neovim/neovim/issues/25295.\nCloses https://github.com/kevinhwang91/nvim-ufo/issues/162.\nCloses https://github.com/neovim/neovim/issues/25295.\n\nCo-authored-by: Carlo Cabrera <30379873+carlocab@users.noreply.github.com>",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-20T19:50:05Z",
        "closed_at": "2023-09-21T07:36:41Z",
        "merged_at": "2023-09-21T07:36:41Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 194,
        "deletions": 184,
        "changed_files": 9,
        "created_at": "2023-09-20T19:22:01Z",
        "closed_at": "2023-09-23T16:29:19Z",
        "merged_at": "2023-09-23T16:29:19Z",
        "body": "This is a step in an ongoing refactor where the \"grid_puts\" and \"grid_put_linebuf\" code paths will share more of the implementation (in particular for delta calculation, doublewidth and 'arabicshape' handling). But it also makes sense by its own as a cleanup, and is thus committed separately.\r\n\r\nBefore this change many of the low level grid functions grid_puts, grid_fill etc could both be used in a standalone fashion but also as part of a batched line update which would be finally transmitted as a single grid_line call (via ui_line() ). This was initially useful to quickly refactor pre-existing vim code to use batched logic safely.\r\n\r\nHowever, this pattern is not really helpful for maintainable and newly written code, where the \"grid\" and \"row\" arguments are just needlessly repeated. This simplifies these calls to just use grid and row as specified in the initial grid_line_start(grid, row) call.\r\n\r\nThis also makes the intent clear whether any grid_puts() call is actually part of a batch or not, which is better in the long run when more things get refactored to use effective (properly batched) updates.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 29,
        "changed_files": 7,
        "created_at": "2023-09-20T18:53:07Z",
        "closed_at": "2023-09-24T02:49:47Z",
        "merged_at": "2023-09-24T02:49:47Z",
        "body": "Not technically a fix as the original behavior\u2014to use `^` and `=` when `StatusLine` and `StatusLineNC` are the same\u2014was intended, but as discussed in [this issue](https://github.com/neovim/neovim/issues/19803), it was agreed upon to modify this behavior to always use stl/stlnc.\r\n\r\nClose #19803",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-20T18:23:22Z",
        "closed_at": "2023-09-21T12:44:15Z",
        "merged_at": null,
        "body": "While reading the doc for `OptionSet` autocmd I've found the option `'key'`, and jumping to its documentation I end up in `vim_diff.txt` in the list of removed options:\r\nhttps://github.com/neovim/neovim/blob/23c21e763074d401e8b36a91e6568bebc1655ce9/runtime/doc/vim_diff.txt#L654\r\n\r\nSo I think this mention can be removed.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-09-20T13:21:01Z",
        "closed_at": "2023-09-20T13:48:12Z",
        "merged_at": "2023-09-20T13:48:12Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 7,
        "changed_files": 1,
        "created_at": "2023-09-20T12:43:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The previous text referred to Bram being back to a full time job.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 184,
        "deletions": 26,
        "changed_files": 3,
        "created_at": "2023-09-20T09:26:26Z",
        "closed_at": "2023-09-20T14:39:55Z",
        "merged_at": "2023-09-20T14:39:54Z",
        "body": "Fixes #25066",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 33,
        "changed_files": 5,
        "created_at": "2023-09-20T08:22:18Z",
        "closed_at": "2023-09-20T10:17:10Z",
        "merged_at": "2023-09-20T10:17:10Z",
        "body": "This is not used as part of the logic to actually implement TUI line wrapping. In vim (especially gvim) it is used to emulate terminal-style text selection. But in nvim we don't do that, and have no plans to reintroduce it.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-20T05:12:09Z",
        "closed_at": "2023-09-20T08:48:08Z",
        "merged_at": null,
        "body": "Added a callback property which takes the selected code action as an argument and is called after applying the code action.\r\n#25259 ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-20T04:57:36Z",
        "closed_at": "2023-09-22T11:51:51Z",
        "merged_at": "2023-09-22T11:51:51Z",
        "body": "This is incorrect in the following scenario:\r\n1. The language tree is Lua > Vim > Lua.\r\n2. An edit simultaneously wipes out the `_regions` of all nodes, while taking the Vim injection off-screen.\r\n3. The Vim injection is not re-parsed, so the child Lua `_regions` is still `nil`.\r\n4. The child Lua is assumed, incorrectly, to occupy the whole document.\r\n5. This causes the injections to be parsed again, resulting in Lua > Vim > Lua > Vim.\r\n6. Now, by the same process, Vim ends up with its range assumed over the whole document. Now the parse is broken and results in broken highlighting and poor performance.\r\n\r\nIt should be fine to instead treat an unparsed node as occupying nothing (i.e. effectively non-existent). Since, either:\r\n- The parent was just parsed, hence defining `_regions`\r\n- The parent was not just parsed, in which case this node doesn't need to be parsed either.\r\n\r\nAdditionally, the name `has_regions` is confusing; it seems to simply mean the opposite of \"root\" or \"full_document\". However, we do not touch it in this PR.\r\n\r\nFixes: #25252",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 34,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-20T04:31:14Z",
        "closed_at": "2023-09-20T06:00:52Z",
        "merged_at": "2023-09-20T06:00:52Z",
        "body": "As the title advertises.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 113,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-09-19T22:56:22Z",
        "closed_at": "2023-09-26T13:31:36Z",
        "merged_at": "2023-09-26T13:31:35Z",
        "body": "Closes #24166\r\n\r\nAdded a transform functionality base on `has` that can be set on the metadata files.\r\n\r\nIf this makes sense I can add docs about it.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-09-19T22:56:19Z",
        "closed_at": "2023-09-19T23:21:32Z",
        "merged_at": "2023-09-19T23:21:32Z",
        "body": "# Description\nBackport of #25228 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-09-19T22:38:40Z",
        "closed_at": "2023-09-19T22:54:46Z",
        "merged_at": "2023-09-19T22:54:46Z",
        "body": "# Description\nBackport of #25248 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-09-19T22:02:49Z",
        "closed_at": "2023-09-19T22:37:30Z",
        "merged_at": "2023-09-19T22:37:30Z",
        "body": "#### vim-patch:9.0.1915: r_CTRL-C works differently in visual mode\r\n\r\nProblem:  r_CTRL-C works differently in visual mode\r\nSolution: Make r_CTRL-C behave consistent in visual mode\r\n          in terminal and Windows GUI\r\n\r\nin visual mode, r CTRL-C behaves strange in Unix like environments. It\r\nseems to end visual mode, but still is waiting for few more chars,\r\nhowever it never seems to replace it by any characters and eventually\r\njust returns back into normal mode.\r\n\r\nIn contrast in Windows GUI mode, r_CTRL-C replaces in the selected area\r\nall characters by a literal CTRL-C.\r\n\r\nNot sure why it behaves like this. It seems in the Windows GUI, got_int\r\nis not set and therefore behaves as if any other normal character has\r\nbeen pressed.\r\n\r\nSo remove the special casing of what happens when got_int is set and\r\nmake it always behave like in Windows GUI mode. Add a test to verify it\r\nalways behaves like replacing in the selected area each selected\r\ncharacter by a literal CTRL-C.\r\n\r\ncloses: vim/vim#13112\r\n\r\nhttps://github.com/vim/vim/commit/476733f3d06876c7ac105e064108c973a57984d3\r\n\r\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-09-19T12:38:15Z",
        "closed_at": "2023-09-20T09:11:52Z",
        "merged_at": "2023-09-20T09:11:52Z",
        "body": "Related to https://github.com/neovim/neovim/pull/20582.\r\n\r\nWhen in Neovide, it's visible that cursor keeps jumping to window separator areas. This fixes the problem using the solution proposed in https://github.com/neovim/neovim/pull/20582#issuecomment-1306852641.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 42,
        "deletions": 62,
        "changed_files": 2,
        "created_at": "2023-09-19T10:27:59Z",
        "closed_at": "2023-09-19T10:45:11Z",
        "merged_at": "2023-09-19T10:45:11Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-19T05:05:06Z",
        "closed_at": "2023-09-19T16:31:42Z",
        "merged_at": null,
        "body": "Closes #25237\r\n\r\nI know that I'm missing the documentation but I wanted to get a review first.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-18T22:47:06Z",
        "closed_at": "2023-09-18T23:07:25Z",
        "merged_at": "2023-09-18T23:07:25Z",
        "body": "#### vim-patch:346ac1429c5a\r\n\r\nruntime(doc): add help tag describing object-selection\r\n\r\nhttps://github.com/vim/vim/commit/346ac1429c5afb23bace295106aea1b305443435\r\n\r\nCo-authored-by: Christian Brabandt <cb@256bit.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 37,
        "changed_files": 1,
        "created_at": "2023-09-18T22:07:02Z",
        "closed_at": "2023-09-18T22:41:59Z",
        "merged_at": "2023-09-18T22:41:59Z",
        "body": "#### vim-patch:9.0.1908: undefined behaviour upper/lower function ptrs\n\nProblem:  undefined behaviour upper/lower function ptrs\nSolution: Fix UBSAN error in regexp and simplify upper/lowercase\n          modifier code\n\nThe implementation of \\u / \\U / \\l / \\L modifiers in the substitute\ncommand relies on remembering the state by setting function pointers on\nfunc_all/func_one in the code. The code signature of `fptr_T` is\nsupposed to return void* (due to C function signatures not being able to\nreturn itself due to type recursion), and the definition of the\nfunctions (e.g. to_Upper) didn't follow this rule, and so the code tries\nto cast functions of different signatures, resulting in undefined\nbehavior error under UBSAN in Clang 17. See vim/vim#12745.\n\nWe could just fix `do_Upper`/etc to just return void*, which would fix\nthe problem. However, these functions actually do not need to return\nanything at all. It used to be the case that there was only one pointer\n\"func\" to store the pointer, which is why the function needs to either\nreturn itself or NULL to indicate whether it's a one time or ongoing\nmodification. However, c2c355df6f094cdb9e599fd395a78c14486ec697\n(7.3.873) already made that obsolete by introducing `func_one` and\n`func_all` to store one-time and ongoing operations separately, so these\nfunctions don't actually need to return anything anymore because it's\nimplicit whether it's a one-time or ongoing operation. Simplify the code\nto reflect that.\n\ncloses: vim/vim#13117\n\nhttps://github.com/vim/vim/commit/d25021cf036c63d539f845a1ee05b03ea21d61ff\n\nCo-authored-by: Yee Cheng Chin <ychin.git@gmail.com>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 8,
        "changed_files": 7,
        "created_at": "2023-09-18T20:21:39Z",
        "closed_at": "2023-10-06T12:39:36Z",
        "merged_at": "2023-10-06T12:39:36Z",
        "body": "First time contributing!\r\n\r\nThe solution has to remove colon (:) from `isfname` on Windows, so I marked the commit with the breaking change flag.\r\nI treated `:\\` it as a special case just like `:/`.\r\n\r\n# Problem\r\n\r\nOn Windows, \"gf\" fails on a filepath that has a line:column suffix. Example:\r\n\r\n    E447: Can't find file \"src/app/core/services/identity/identity.service.ts:64:23\"\r\n\r\n# Solution\r\n\r\nColon is not a valid filename character on Windows (except for the drive-letter), so including \":\" in 'isfname' is wrong.\r\n\r\nFixes #25160\r\nRelated #24032",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-18T19:59:53Z",
        "closed_at": "2023-09-19T04:39:30Z",
        "merged_at": null,
        "body": "Fixes #25014",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 21,
        "changed_files": 7,
        "created_at": "2023-09-18T17:12:53Z",
        "closed_at": "2023-09-27T17:09:55Z",
        "merged_at": "2023-09-27T17:09:55Z",
        "body": "This is a minimum viable product to allow paths in `NVIM_APPNAME`. It is enough to fix #23056 and close #24966\r\n\r\nThe current implementation means a user with multiple configs will end up with a lot of messy directories that may not be clear they relate to neovim (depending on what the appname they used once and then forgot about was).\r\n\r\nAllowing the appname to include sub-directories would mean that they can choose to group all these together,\r\ne.g.\r\n```\r\nNVIM_APPNAME=\"neovim-configs/first-config\" nvim\r\nNVIM_APPNAME=\"neovim-configs/second-config\" nvim\r\n```\r\nIt would also allow the user to clone someones dotfiles repo and then reach the config without moving it from the repo (this is a key part to how [dotfyle-cli](https://github.com/rorynesbitt/dotfyle-cli) works),\r\ne.g.\r\n```\r\ngit clone git@github.com:user/dotfiles ~/.config/user/dotfiles\r\nNVIM_APPNAME=\"user/dotfiles/.config/nvim\" nvim\r\n```\r\n\r\nI am looking for feedback about what else would need to be included in this for it to be merged.\r\nI don't know c but I'm willing to do what I can if pointed in the right direction\r\n\r\nFrom the relevant issue:\r\n- ~updated stdpath logic in various places~\r\n- [x] update to the docs\r\n- [x] block the inclusion of `../` in the appname",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-18T08:58:49Z",
        "closed_at": "2023-09-18T12:24:18Z",
        "merged_at": "2023-09-18T12:24:18Z",
        "body": "This is to keep docs about debugging tests in a single place. Adapted from https://github.com/neovim/neovim/wiki/FAQ#using-gdb-to-step-through-functional-tests\r\n\r\nIt seemed strange to me that information about debugging tests was in the FAQ in the first place. Isn't that section on debugging meant to help users provide more info when reporting issues?",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 2,
        "changed_files": 7,
        "created_at": "2023-09-18T06:51:45Z",
        "closed_at": "2023-09-26T12:20:11Z",
        "merged_at": "2023-09-26T12:20:11Z",
        "body": "add `force` option and make `nvim_set_hl` works like `highlight` command\r\n\r\n\r\nFix #21119\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-09-18T03:56:15Z",
        "closed_at": "2023-09-18T04:16:33Z",
        "merged_at": "2023-09-18T04:16:33Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-18T00:02:24Z",
        "closed_at": "2023-09-20T09:04:30Z",
        "merged_at": "2023-09-20T09:04:30Z",
        "body": "Added documentation on rest of $XDG environment variables available in stdpath(): #25205 \r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-17T23:07:32Z",
        "closed_at": "2023-09-17T23:22:20Z",
        "merged_at": "2023-09-17T23:22:20Z",
        "body": "# Description\nBackport of #25223 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 74,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T22:42:01Z",
        "closed_at": "2023-09-17T23:07:55Z",
        "merged_at": "2023-09-17T23:07:55Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-17T18:52:26Z",
        "closed_at": "2023-09-17T23:07:08Z",
        "merged_at": "2023-09-17T23:07:08Z",
        "body": "Fixes a use after free issue that was causing a lot of crashes when running debug builds on Windows. `xfree()` would fill the freed memory in debug builds, causing the `QUEUE_REMOVE` to fail because the node pointers were gone.\r\n\r\nThis fixes a lot of crashing tests in debug builds. Bringing up a terminal in debug builds also no longer causes an immediate crash.\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 251,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-09-17T17:20:39Z",
        "closed_at": "2023-09-17T20:52:56Z",
        "merged_at": "2023-09-17T20:52:56Z",
        "body": "- vim-patch:e30d8e4ce01d\n- vim-patch:d8b86c937a41\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-17T17:19:15Z",
        "closed_at": "2023-09-17T20:26:10Z",
        "merged_at": "2023-09-17T20:26:10Z",
        "body": "Problem:  No support for liquidsoap filetypes\nSolution: Add liquidsoap filetype detection code\n\ncloses: vim/vim#13111\n\nhttps://github.com/vim/vim/commit/6b5efcdd8e976d2ab2554b22c4220c5e88de4717\n\nCo-authored-by: Romain Beauxis <toots@rastageeks.org>\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T15:20:24Z",
        "closed_at": "2023-09-17T15:21:18Z",
        "merged_at": null,
        "body": "This PR adds proper filetype detection for liquidsoap script files.\r\n\r\nLiquidsoap is scripting language for creating media streams and more. It's got about [1.5k](https://github.com/search?type=code&q=NOT+is%3Afork+path%3A*.liq) script files on github.\r\n\r\nThanks for your consideration!",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 116,
        "deletions": 597,
        "changed_files": 18,
        "created_at": "2023-09-17T13:28:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Cirrus CI has introduced monthly limits on CI usage, which no longer\nmakes it a viable alternative for us. More information:\nhttps://cirrus-ci.org/blog/2023/07/17/limiting-free-usage-of-cirrus-ci/\n\nThis PR is a WIP as I don't know what the best path forward is for us\nyet. I will investigate how other projects deal with this problem and\nexperiment different ideas.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-17T13:03:42Z",
        "closed_at": "2023-09-17T13:31:51Z",
        "merged_at": "2023-09-17T13:31:51Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-17T12:33:15Z",
        "closed_at": "2023-09-17T13:01:20Z",
        "merged_at": "2023-09-17T13:01:20Z",
        "body": "#### vim-patch:8.2.4173: cannot use an import in 'foldexpr'\r\n\r\nProblem:    Cannot use an import in 'foldexpr'.\r\nSolution:   Set the script context to where 'foldexpr' was set.\r\n            Fix that the script context was not set for all buffers.\r\n\r\nhttps://github.com/vim/vim/commit/e70dd11ef41f69bd5e94f630194e6b3c4f3f2102\r\n\r\nCo-authored-by: Bram Moolenaar <Bram@vim.org>",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 439,
        "deletions": 171,
        "changed_files": 25,
        "created_at": "2023-09-17T12:14:22Z",
        "closed_at": "2023-09-19T10:32:41Z",
        "merged_at": "2023-09-19T10:32:41Z",
        "body": "Previously, a screen cell would occupy 28+4=32 bytes per cell as we always made space for up to MAX_MCO+1 codepoints in a cell.\r\n\r\nAs an example, even a pretty modest 50*80 screen would consume\r\n\r\n    50*80*2*32 = 256000, i e a quarter megabyte\r\n\r\nWith the factor of two due to the TUI side buffer, and even more when using msg_grid and/or ext_multigrid\r\n\r\nThis instead stores a 4-byte union of either:\r\n- a valid UTF-8 sequence up to 4 bytes\r\n- an escape char which is invalid UTF-8 (0xFF) plus a 24-bit index to a glyph cache\r\n\r\nThis avoids allocating space for huge composed glyphs _upfront_, while still keeping rendering such glyphs reasonably fast (1 hash table lookup + one plain index lookup). If the same large glyphs are using repeatedly on the screen, this is still a net reduction of memory/cache consumption. The only case which really gets worse is if you blister the screen full with crazy emojis and zalgo text and even this case only leads to 4 extra bytes per char.\r\n\r\nWhen only <= 4-byte glyphs are used, plus the 4-byte attribute code, i e 8 bytes in total there is a factor of four reduction of memory use. Memory which will be quite hot in cache as the screen buffer is scanned over in win_line() buffer text drawing",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-17T09:26:33Z",
        "closed_at": "2023-09-17T10:27:08Z",
        "merged_at": "2023-09-17T10:27:08Z",
        "body": "The updates will continue until morale improves.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 52,
        "deletions": 31,
        "changed_files": 3,
        "created_at": "2023-09-17T09:02:38Z",
        "closed_at": "2023-09-17T18:52:36Z",
        "merged_at": "2023-09-17T18:52:36Z",
        "body": "Problem:\r\nWith incremental injection parsing, injected languages' parsers parse only the relevant regions and stores the result in _trees with the index of the corresponding region. Therefore, there can be holes in _trees.\r\n\r\nSolution:\r\n* Use generic table functions where appropriate.\r\n* Fix type annotations and docs.\r\n\r\nFixes #25191",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 16,
        "changed_files": 1,
        "created_at": "2023-09-17T07:06:03Z",
        "closed_at": "2023-09-17T07:06:30Z",
        "merged_at": null,
        "body": "`vim._ts_has_language` works brilliantly as a cache when the parser file is found. However, if no parser file is found, `has_parser` will keep trying to open the file, which will block the main thread with slow I/O operations, leading to significant lag on, e.g. `languagetree.lua`.\r\n\r\nI found this out when I uninstalled the `comment` parser (should have been a performance bump but interestingly revealed this bug).\r\n\r\nThe cache is scoped to the `LanguageTree` instance, and the only way to effectively cache bust is to create a new `LanguageTree`. I'm open to a different cache policy, ideas are welcome.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 214,
        "deletions": 16,
        "changed_files": 7,
        "created_at": "2023-09-17T06:24:51Z",
        "closed_at": "2023-09-17T12:29:19Z",
        "merged_at": "2023-09-17T12:29:19Z",
        "body": "Unlike #23471 this uses result of Vimscript expression instead of Lua.\r\nDirect support for Lua expressions may be added later after deciding what is the best syntax.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 21,
        "changed_files": 1,
        "created_at": "2023-09-17T03:07:02Z",
        "closed_at": "2023-09-17T03:40:31Z",
        "merged_at": "2023-09-17T03:40:31Z",
        "body": "#### vim-patch:8.2.2356: Vim9: \":put =expr\" does not handle a list properly\r\n\r\nProblem:    Vim9: \":put =expr\" does not handle a list properly.\r\nSolution:   Use the same logic as eval_to_string_eap().\r\n\r\nhttps://github.com/vim/vim/commit/883cf97f109d2ff281cf77f7b2e3bb44aced7cb3\r\n\r\nCo-authored-by: Bram Moolenaar <Bram@vim.org>\r\n\r\n\r\n#### vim-patch:9.0.1633: duplicate code for converting float to string\r\n\r\nProblem:    Duplicate code for converting float to string.\r\nSolution:   Use tv_get_string(). (closes vim/vim#12521)\r\n\r\nhttps://github.com/vim/vim/commit/19dfa276c37dcf657922c6f9b48cf2954191e8b6",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 49,
        "changed_files": 4,
        "created_at": "2023-09-17T00:51:47Z",
        "closed_at": "2023-09-17T01:06:22Z",
        "merged_at": "2023-09-17T01:06:22Z",
        "body": "# Description\nBackport of #25204 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 49,
        "changed_files": 4,
        "created_at": "2023-09-17T00:22:42Z",
        "closed_at": "2023-09-17T00:48:14Z",
        "merged_at": "2023-09-17T00:48:14Z",
        "body": "Fix #25203\n\nAlso reformat tutor.tutor.json to use 2-space indent while at it.\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 9,
        "changed_files": 5,
        "created_at": "2023-09-16T22:45:35Z",
        "closed_at": "2023-09-16T23:12:42Z",
        "merged_at": "2023-09-16T23:12:42Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 142,
        "deletions": 72,
        "changed_files": 9,
        "created_at": "2023-09-16T22:10:49Z",
        "closed_at": "2023-09-20T12:42:42Z",
        "merged_at": "2023-09-20T12:42:42Z",
        "body": "Fixes perf regression revealed by #25143",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T22:08:12Z",
        "closed_at": "2023-09-16T22:18:20Z",
        "merged_at": "2023-09-16T22:18:20Z",
        "body": "# Description\nBackport of #25199 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T21:48:17Z",
        "closed_at": "2023-09-16T22:07:53Z",
        "merged_at": "2023-09-16T22:07:53Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-16T15:47:09Z",
        "closed_at": "2023-09-17T10:33:01Z",
        "merged_at": "2023-09-17T10:33:01Z",
        "body": "N-Jim does not sounds like \"Ninja\", and the joke doesn't really land.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-16T15:46:00Z",
        "closed_at": "2023-09-16T22:35:12Z",
        "merged_at": "2023-09-16T22:35:12Z",
        "body": "Closes #21506",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-16T15:13:19Z",
        "closed_at": "2023-09-16T16:02:27Z",
        "merged_at": "2023-09-16T16:02:27Z",
        "body": "Problem:\r\nIt doesn't make much sense to flatten each region (= list of ranges). This coincidentally worked for region with a single range.\r\n\r\nSolution:\r\nCustom function for combining regions.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 127,
        "deletions": 16,
        "changed_files": 3,
        "created_at": "2023-09-16T15:12:31Z",
        "closed_at": "2023-09-21T10:06:40Z",
        "merged_at": "2023-09-21T10:06:40Z",
        "body": "Fixes #24339\r\n\r\nrust-analyzer sends \"Invalid offset\" error in such cases. Some other servers handle it specially.\r\n\r\nLSP spec mentions that \"A range is comparable to a selection in an editor\". Most editors don't handle trailing newlines the same way Neovim/Vim does, it's clearly visible if it's present or not. With that in mind it's understandable why sending end position as simply the start of the line after the last one is considered invalid in such cases.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 48,
        "deletions": 12,
        "changed_files": 4,
        "created_at": "2023-09-16T14:41:44Z",
        "closed_at": "2023-09-25T12:52:49Z",
        "merged_at": null,
        "body": "07080f67f introduced changes to `iter_captures()` by adding arguments to\r\nthe created iterator to control each iteration step. However this breaks\r\nusages of `iter_captures()` in for-loops since the arguments of\r\niterators should be the invariant state and control variable, see:\r\nhttps://www.lua.org/pil/7.3.html.\r\n\r\nThis change fixes that by introducing a new function\r\n`captures_iterator()` which by design cannot be used in for-loops, and\r\nrestores `iter_captures()` to return a stateless iterator (function with\r\nno arguments).\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-16T12:18:11Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When float height is 1 and before window has winbar set . reset it to empty on float win avoid trigger no room.\r\n\r\n\r\nFix #19464",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-16T11:10:45Z",
        "closed_at": "2023-09-17T10:23:23Z",
        "merged_at": "2023-09-17T10:23:23Z",
        "body": "\r\nFix #23474",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-16T10:43:13Z",
        "closed_at": "2023-09-16T13:24:25Z",
        "merged_at": "2023-09-16T13:24:25Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 42,
        "deletions": 35,
        "changed_files": 3,
        "created_at": "2023-09-16T10:42:29Z",
        "closed_at": "2023-09-16T12:52:42Z",
        "merged_at": "2023-09-16T12:52:42Z",
        "body": "Problem\r\n---\r\nIf a highlighter query returns a significant number of predicate non-matches, the highlighter will scan well past the end of the window.\r\n\r\nSolution\r\n---\r\nIn the iterator returned from `iter_captures`, accept an optional parameter `until_line`. If no parameter provided, the behavior is unchanged, hence this is a non-invasive tweak.\r\n\r\nFixes: #25113 nvim-treesitter/nvim-treesitter#5057",
        "comments": 34
    },
    {
        "merged": true,
        "additions": 55,
        "deletions": 103,
        "changed_files": 1,
        "created_at": "2023-09-16T09:53:15Z",
        "closed_at": "2023-09-16T10:43:30Z",
        "merged_at": "2023-09-16T10:43:30Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 110,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-16T08:11:22Z",
        "closed_at": "2023-09-16T12:59:21Z",
        "merged_at": "2023-09-16T12:59:21Z",
        "body": "`marktree_move` is making the tree out of order at:\r\n\r\nhttps://github.com/neovim/neovim/blob/be10d65bfafe056025ffffa2c1131712b9a493a5/src/nvim/marktree.c#L1188\r\n\r\nBecause `key` is at the new position, and `x->key[new_i]` is also at the new position, this comparison spuriously returns true, which causes `x->key[i]` to be updated in-place even when it needs to be moved.\r\n\r\nThis causes crashes down the line, since the ordering of `MTNode.key` is an invariant that must be preserved.\r\n\r\nCo-Authored-By: bfredl <bjorn.linse@gmail.com>\r\nFixes: #25157",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T05:27:55Z",
        "closed_at": null,
        "merged_at": null,
        "body": "not sure there is need a don't copy or restore opt.\r\n\r\nFix #24973\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-16T04:44:35Z",
        "closed_at": "2023-09-16T08:39:54Z",
        "merged_at": "2023-09-16T08:39:54Z",
        "body": "If you would insert element X at position j, then if you are moving that\r\nsame element X from position i < j, you should move it to position j -\r\n1, because you are losing an element.\r\n    \r\nThis error caused a gap to be left in the array, so that it looked like\r\n[x, null, y] instead of [x, y], where len = 2. This triggered #25147.\r\n    \r\nFixes: #25147",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-16T04:20:18Z",
        "closed_at": "2023-09-16T04:41:13Z",
        "merged_at": null,
        "body": "EDIT: Ugh, I fumbled the `git` command. New PR is at https://github.com/neovim/neovim/pull/25183",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 20,
        "deletions": 13,
        "changed_files": 4,
        "created_at": "2023-09-16T01:15:57Z",
        "closed_at": "2023-09-16T17:06:00Z",
        "merged_at": "2023-09-16T17:05:59Z",
        "body": "Addressing https://github.com/neovim/neovim/pull/25161#issuecomment-1720825837.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-15T16:12:52Z",
        "closed_at": "2023-09-17T13:32:01Z",
        "merged_at": null,
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-15T14:50:13Z",
        "closed_at": "2023-09-15T22:01:16Z",
        "merged_at": "2023-09-15T22:01:16Z",
        "body": "runtime(forth): Fix :unlet error in ftplugin (vim/vim#13090)\n\nFixes vim/vim#13089.\n\nhttps://github.com/vim/vim/commit/c1f8bb37c6a8e0babc2a41f16860763b57c23fa1\n\nCo-authored-by: dkearns <dougkearns@gmail.com>\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 106,
        "deletions": 19,
        "changed_files": 5,
        "created_at": "2023-09-15T12:07:44Z",
        "closed_at": "2023-09-15T12:30:50Z",
        "merged_at": "2023-09-15T12:30:50Z",
        "body": "Also make virt_text_hide work properly.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 31,
        "changed_files": 2,
        "created_at": "2023-09-15T10:46:44Z",
        "closed_at": "2023-09-15T11:12:21Z",
        "merged_at": "2023-09-15T11:12:21Z",
        "body": "# Description\nBackport of #25125 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 18,
        "changed_files": 10,
        "created_at": "2023-09-15T07:44:11Z",
        "closed_at": "2023-10-10T17:20:33Z",
        "merged_at": "2023-10-10T17:20:33Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-15T07:27:42Z",
        "closed_at": "2023-09-15T07:56:53Z",
        "merged_at": "2023-09-15T07:56:53Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-15T06:05:17Z",
        "closed_at": "2023-09-15T07:10:00Z",
        "merged_at": "2023-09-15T07:10:00Z",
        "body": "yet more ARM64 fixes\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 52,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-15T06:04:46Z",
        "closed_at": "2023-09-15T06:54:43Z",
        "merged_at": "2023-09-15T06:54:43Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 92,
        "deletions": 50,
        "changed_files": 4,
        "created_at": "2023-09-15T03:05:20Z",
        "closed_at": "2023-09-15T04:35:27Z",
        "merged_at": "2023-09-15T04:35:27Z",
        "body": "Fix #25158\r\n\r\nTODO: `virt_text_hide` doesn't work for the first char on a wrapped screen line, and it's not clear how to fix that.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-15T01:26:09Z",
        "closed_at": "2023-09-15T08:10:37Z",
        "merged_at": "2023-09-15T08:10:37Z",
        "body": "Backport of #25151.\r\n\r\nFixes: #24531",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-09-14T22:22:06Z",
        "closed_at": "2023-09-14T23:17:13Z",
        "merged_at": "2023-09-14T23:17:13Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 73,
        "changed_files": 7,
        "created_at": "2023-09-14T19:43:45Z",
        "closed_at": "2023-09-18T17:21:15Z",
        "merged_at": null,
        "body": "This keeps the CI logs relatively clean while still giving the\nopportunity aqcuire the nvimlog information if needed.\n\nCloses https://github.com/neovim/neovim/issues/18373",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 43,
        "changed_files": 6,
        "created_at": "2023-09-14T18:47:07Z",
        "closed_at": "2023-09-15T10:10:56Z",
        "merged_at": "2023-09-15T10:10:56Z",
        "body": "As agreed in https://github.com/neovim/neovim/pull/24703#discussion_r1321719133.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-14T17:20:17Z",
        "closed_at": "2023-09-15T14:32:48Z",
        "merged_at": "2023-09-15T14:32:47Z",
        "body": "Ref: https://github.com/neovim/neovim/pull/25118#discussion_r1326128103\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 22,
        "changed_files": 2,
        "created_at": "2023-09-14T13:13:31Z",
        "closed_at": "2023-10-14T07:47:20Z",
        "merged_at": "2023-10-14T07:47:20Z",
        "body": "Follw up to https://github.com/neovim/neovim/commit/63b3408551561127f7845470eb51404bcd6f547b\n\n`is_pull` should be optional, otherwise it is an API change that\nintroduces warnings in consumers.\n\nAlso fixes the type annotation of `_client_pull_namespaces` where the\nkey is a string.\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-14T13:05:49Z",
        "closed_at": "2023-09-20T07:19:00Z",
        "merged_at": "2023-09-20T07:19:00Z",
        "body": "Problem: winhl receive and set the wrong format value even if nvim through an error\r\n\r\nSolution: validate winhl value.\r\n\r\nFix #24586",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 88,
        "deletions": 4,
        "changed_files": 6,
        "created_at": "2023-09-14T11:13:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Might be jumping the gun on this (not very critical), but it was low-cost to just post it.\r\n\r\nIt replaces the lost recursive functionality from #25118 and mainly it would just exist to nudge people away from coming up with something worse.",
        "comments": 19
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-14T09:20:26Z",
        "closed_at": "2023-09-15T08:33:26Z",
        "merged_at": "2023-09-15T08:33:26Z",
        "body": "Also simplify home detection with os_homedir()\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-14T08:17:22Z",
        "closed_at": "2023-09-15T23:23:59Z",
        "merged_at": null,
        "body": "Addresses https://github.com/neovim/neovim/issues/24168 \r\n\r\nThis feature helps to synchronously run code actions before writing a file - for example during a `BufWritePre` autocmd - so that they don't suffer from race conditions.\r\n\r\nThis PR adds a 'sync' option to `vim.lsp.code_action()` (aswell as a `timeout_ms`). This is similar to `vim.lsp.format({ async = false, timeout_ms = 1000 })`, but given that the exsiting behaviour is async, I used `sync` in this case - people would expect the default to be `sync=false`. I added some `vim.notify` notifications which seemed appropriate.\r\n\r\nAn implementation question-mark: `vim.lsp.code_action()` does not return the results/error of the code action, because there is nothing to return when it's run asynchronously. Would it be better to introduce a second variant `vim.lsp.code_action_sync()` and return results from that variant? It would be a bigger change, but I'm happy to do it, if that's preferred.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-14T07:10:34Z",
        "closed_at": "2023-09-14T09:36:09Z",
        "merged_at": "2023-09-14T09:36:09Z",
        "body": "Fixes: #24531",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 13,
        "changed_files": 1,
        "created_at": "2023-09-14T07:04:56Z",
        "closed_at": "2023-10-14T09:31:17Z",
        "merged_at": "2023-10-14T09:31:16Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 102,
        "deletions": 1,
        "changed_files": 8,
        "created_at": "2023-09-14T05:32:07Z",
        "closed_at": "2023-09-19T09:50:00Z",
        "merged_at": "2023-09-19T09:50:00Z",
        "body": "Problem: We don't have an option (like vim's 'fixed') to truncate float screen when screen width overflows the screen.\r\n\r\nSolution: Add `fixed` in `nvim_open_win`.\r\n\r\nFix https://github.com/neovim/neovim/issues/10811",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 50,
        "deletions": 42,
        "changed_files": 9,
        "created_at": "2023-09-14T01:38:16Z",
        "closed_at": "2023-09-14T07:10:46Z",
        "merged_at": null,
        "body": "`language.add()` also calls `language.register()` which violates the single responsibility principle and functional purity, and abets issues like #24531.\r\n\r\nAlthough some of these issues are user error, what if someone does want `get_lang(ft) != ft` even when a parser named `ft` is available, or for any other legitimate reason wishes to load without registering?\r\n\r\nIn fact, several current usages are not even to load the parser, but to check whether it exists, so the registration side-effect is especially unnecessary.\r\n\r\nThis patch also \"breaks\" callers of `language.add()` to do `language.load()` without `language.register()`, but for those cases: https://xkcd.com/1172/\r\n\r\nCloses: #24531",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-14T01:20:50Z",
        "closed_at": "2023-09-14T01:34:53Z",
        "merged_at": "2023-09-14T01:34:53Z",
        "body": "# Description\nBackport of #24983 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 84,
        "deletions": 50,
        "changed_files": 2,
        "created_at": "2023-09-13T23:55:36Z",
        "closed_at": "2023-09-16T10:12:06Z",
        "merged_at": "2023-09-16T10:12:06Z",
        "body": "`resolve_lang` is applied to `@injection.language` when it's supplied as a capture:\r\n\r\nhttps://github.com/neovim/neovim/blob/f5953edbac14febce9d4f8a3c35bdec1eae26fbe/runtime/lua/vim/treesitter/languagetree.lua#L766-L768\r\n\r\nIf we want to support `metadata['injection.language']` (as per #22518 and [tree-sitter upstream](https://tree-sitter.github.io/tree-sitter/syntax-highlighting#language-injection)) then the behavior should be consistent.\r\n\r\nFixes: nvim-treesitter/nvim-treesitter#4918\r\nFixes: MDeiml/tree-sitter-markdown#106",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 200,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-09-13T23:42:43Z",
        "closed_at": "2023-09-13T23:54:05Z",
        "merged_at": "2023-09-13T23:54:05Z",
        "body": "# Description\nBackport of #25133 to `release-0.9`.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 181,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-13T20:46:50Z",
        "closed_at": "2023-09-13T21:05:17Z",
        "merged_at": null,
        "body": "Update runtime files\n\nhttps://github.com/vim/vim/commit/9b03d3e75b4274493bbe76772d7b92238791964c\n\nCo-authored-by: Bram Moolenaar <Bram@vim.org>\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-13T18:58:35Z",
        "closed_at": "2023-09-14T06:40:53Z",
        "merged_at": "2023-09-14T06:40:53Z",
        "body": "Closes https://github.com/neovim/neovim/issues/19838\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-13T16:16:26Z",
        "closed_at": "2023-09-13T17:19:39Z",
        "merged_at": null,
        "body": "`src/nvim/screen.c` does not exist now. So I replaced `screen.c` for `undo.c` in `src/nvim/README.md`\r\nThe reason I chose `undo.c` is that there is module-specific details are documented at the top of the file.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1361,
        "deletions": 1256,
        "changed_files": 43,
        "created_at": "2023-09-13T13:50:37Z",
        "closed_at": "2023-09-14T13:23:01Z",
        "merged_at": "2023-09-14T13:23:01Z",
        "body": "Still a few things not quite right, but this is probably ~90% correct already.\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-13T13:17:12Z",
        "closed_at": "2023-09-13T14:37:13Z",
        "merged_at": null,
        "body": "The documentation of vim.regex references a match() method on regex objects which does not exist. What was meant is probably regex:match_str()",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 118,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2023-09-13T12:15:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Create a `CmdlineCharPre` autocommand that works like `InsertCharPre` for the cmdline.\r\n\r\nAddresses issue #23813.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 200,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-09-13T11:29:33Z",
        "closed_at": "2023-09-13T23:42:23Z",
        "merged_at": "2023-09-13T23:42:23Z",
        "body": "Fix #14735\r\nFix #17853\r\nFix #18925",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 121,
        "deletions": 21,
        "changed_files": 6,
        "created_at": "2023-09-13T11:12:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "# Problem:\r\n- [visual star](https://github.com/neovim/neovim/pull/21677) (`:help v_star-default`) does not handle linewise-visual mode (\"V\").\r\n- `vim.region()` clobbers `v:maxcol` result of `getpos()`.\r\n- `getpos('v')` result is misleading for linewise-visual (\"V\") selection, which means callers need special handling of \"V\".\r\n\r\n# Solution:\r\n- Return `v:maxcol` for `getpos('v')` column during linewise-visual mode.\r\n- Introduce `line('v$')` / `getpos('v$')`. It's equivalent to cursor position except during linewise-visual mode.\r\n\r\n# TODO:\r\n- tests for vim.region()\r\n\r\n# Related\r\n\r\n- https://github.com/neovim/neovim/issues/18155",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-13T09:39:51Z",
        "closed_at": "2023-09-16T13:24:55Z",
        "merged_at": "2023-09-16T13:24:55Z",
        "body": null,
        "comments": 0
    }
]