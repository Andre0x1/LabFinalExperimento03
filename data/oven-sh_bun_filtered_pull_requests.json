[
    {
        "merged": false,
        "additions": 23,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-18T07:36:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nClose: #6570\r\nClose: #3639\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 54,
        "deletions": 21,
        "changed_files": 4,
        "created_at": "2023-10-18T00:13:21Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis fixes an issue where the `port` in the `Host` header was not defined on WebSocket upgrade. This also removes 2 cache headers that are not needed.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-17T23:33:04Z",
        "closed_at": "2023-10-17T23:56:28Z",
        "merged_at": "2023-10-17T23:56:28Z",
        "body": "### What does this PR do?\r\n\r\nFixes https://github.com/oven-sh/bun/issues/4766\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\nIf Zig files changed:\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-   Hard to test without using a valid GH token. I am open to suggestions though.  However, the command has been validated locally\r\n\r\n- [x] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T16:20:58Z",
        "closed_at": "2023-10-17T16:23:11Z",
        "merged_at": "2023-10-17T16:23:10Z",
        "body": "In this example there is no server variable in the context, and here it makes more sense to use ws.publish. It is explained below that once the serve is done, the server.publish can be used.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-17T12:00:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis add the agent header that some repos expect to be there\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\nI tried to build bun locally however I couldnt get it to build (I read the getting started)\r\n\r\nIs this something that you guys want? (if so I can look further into adding tests ect)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T10:58:05Z",
        "closed_at": "2023-10-17T15:59:06Z",
        "merged_at": "2023-10-17T15:59:06Z",
        "body": "### What does this PR do?\r\n\r\nI just simplified the filter for `index.d.ts` a little.\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 271,
        "deletions": 29,
        "changed_files": 7,
        "created_at": "2023-10-17T03:35:41Z",
        "closed_at": "2023-10-17T23:34:03Z",
        "merged_at": "2023-10-17T23:34:03Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T23:32:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This stub implements `performance.getEntriesByName` to return a empty array. I'm not famiilar enough yet with the codebase to entirely implement the api but this might be a short term solution.\r\n\r\nShould fix(i didn't verify this): https://github.com/oven-sh/bun/issues/6537\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nI tested that the function does return a empty array.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 142,
        "deletions": 33,
        "changed_files": 15,
        "created_at": "2023-10-16T20:51:12Z",
        "closed_at": "2023-10-16T22:14:16Z",
        "merged_at": "2023-10-16T22:14:16Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-16T20:06:42Z",
        "closed_at": "2023-10-16T20:11:04Z",
        "merged_at": "2023-10-16T20:11:04Z",
        "body": null,
        "comments": 2
    },
    {
        "merged": false,
        "additions": 2575,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-10-16T16:24:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nthis pr ports postgres.js tests for bun's postgresql client\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 65,
        "deletions": 42,
        "changed_files": 1,
        "created_at": "2023-10-16T14:18:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nClose: #5315. \r\n\r\nPlease take a look at this https://github.com/oven-sh/bun/issues/5315#issuecomment-1719291283 first. About the IPv6 hosts, see the discussion in https://github.com/moby/moby/issues/35954. \r\n\r\nPreviously, uWebSockets would iterate the results of `getaddrinfo` in order of IPv6 and IPv4 priorities, and if it failed, it would return an error immediately. This PR will attempt to bind to the IPv4 address under the same hostname when IPv6 fails (if the hostname is bound to both IPv6 and IPv4).\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nmanual testing.\r\n\r\n#### Test step \r\n\r\nThis issue can also be reproduced on the host machine.\r\n\r\n- index.js\r\n\r\n```JavaScript\r\nconst net = require(\"net\");\r\n\r\nconst server = new net.Server();\r\n\r\nserver.on(\"listening\", () => {\r\n  console.log(\"listen success\");\r\n  server.close();\r\n});\r\n\r\nserver.on(\"error\", err => {\r\n  console.log(err);\r\n  server.close();\r\n});\r\n\r\nserver.listen(3000, \"localhost\");\r\n```\r\n\r\nAdd following lines to your `/etc/hosts`.\r\n\r\n```\r\n127.0.0.1 localhost\r\n::1     localhost ip6-localhost ip6-loopback\r\n```\r\n\r\nThen disable ipv6 on loopback interface.\r\n\r\n```Bash\r\nsudo sysctl net.ipv6.conf.lo.disable_ipv6=1\r\n```\r\n\r\nRun `index.js`, Bun 1.0.6 will print \r\n\r\n```\r\nerror: Failed to listen at localhost\r\n code: \"EADDRNOTAVAIL\"\r\n```\r\n\r\nUse this pr's patch will print \"listen success\".\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 5573,
        "deletions": 398,
        "changed_files": 37,
        "created_at": "2023-10-16T03:53:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis adds a fast builtin postgres client to bun, under a new `bun:sql` module.\r\n\r\n```zig\r\n\r\n\u276f bun bun-sql.ts\r\ncpu: Apple M1 Max\r\nruntime: bun 1.0.6 (arm64-darwin)\r\n\r\nbenchmark                                         time (avg)             (min \u2026 max)       p75       p99      p995\r\n------------------------------------------------------------------------------------ -----------------------------\r\nSELECT \"Id\" FROM \"OrderDetail\" LIMIT 10 x 10  137.02 \u00b5s/iter (101.38 \u00b5s \u2026 736.17 \u00b5s) 137.58 \u00b5s 396.83 \u00b5s 566.54 \u00b5s\r\nSELECT * FROM \"OrderDetail\" LIMIT 10 x 10     161.61 \u00b5s/iter    (128.04 \u00b5s \u2026 1.5 ms) 162.46 \u00b5s 255.75 \u00b5s 598.13 \u00b5s\r\n\r\n\u276f node postgresjs-sql.mjs\r\ncpu: Apple M1 Max\r\nruntime: node v20.8.0 (arm64-darwin)\r\n\r\nbenchmark                                                         time (avg)             (min \u2026 max)       p75       p99      p995\r\n---------------------------------------------------------------------------------------------------- -----------------------------\r\nSELECT \"Id\" FROM \"OrderDetail\" LIMIT 10 x 10 - \"postgres.js\"  235.55 \u00b5s/iter      (148.17 \u00b5s \u2026 1 ms) 239.67 \u00b5s 585.38 \u00b5s 706.42 \u00b5s\r\nSELECT \"Id\" FROM \"OrderDetail\" LIMIT 10 x 10 - \"pg\"           427.25 \u00b5s/iter   (349.88 \u00b5s \u2026 3.33 ms) 440.92 \u00b5s 632.79 \u00b5s   1.32 ms\r\nSELECT * FROM \"OrderDetail\" LIMIT 10 x 10 - \"postgres.js\"     261.75 \u00b5s/iter     (205.5 \u00b5s \u2026 1.7 ms) 270.71 \u00b5s 338.46 \u00b5s 480.88 \u00b5s\r\nSELECT * FROM \"OrderDetail\" LIMIT 10 x 10 - \"pg\"              511.38 \u00b5s/iter   (435.42 \u00b5s \u2026 2.69 ms) 510.75 \u00b5s   1.02 ms   1.77 ms\r\n```\r\n\r\n<details>\r\n\r\n<summary>bun-sql.ts</summary>\r\n\r\n```ts\r\nimport { sql, Sql } from \"bun:sql\";\r\nimport { bench, run } from \"mitata\";\r\nprocess.env.DATABASE_URL = \"postgres://jarred@localhost:5432/northwind\";\r\n\r\nbench(`SELECT \"Id\" FROM \"OrderDetail\" LIMIT 10 x 10`, async () => {\r\n  const promises = new Array(10);\r\n  for (let i = 0; i < 10; i++) {\r\n    promises[i] = sql`SELECT \"Id\" FROM \"OrderDetail\" LIMIT 10`;\r\n  }\r\n  const results = await Promise.all(promises);\r\n});\r\n\r\nbench(`SELECT * FROM \"OrderDetail\" LIMIT 10 x 10`, async () => {\r\n  const promises = new Array(10);\r\n  for (let i = 0; i < 10; i++) {\r\n    promises[i] = sql`SELECT * FROM \"OrderDetail\" LIMIT 10`;\r\n  }\r\n  const results = await Promise.all(promises);\r\n});\r\n\r\nawait run();\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>postgresjs-sql.mjs</summary>\r\n\r\n```js\r\nimport SQL from \"postgres\";\r\nimport { bench, run } from \"mitata\";\r\nimport pg from \"pg\";\r\nconst client = new pg.Client({\r\n  database: \"northwind\",\r\n  user: \"jarred\",\r\n});\r\nawait client.connect();\r\nconst sql = SQL({\r\n  // This is the default\r\n  hostname: \"localhost\",\r\n  port: 5432,\r\n  username: \"jarred\",\r\n  password: \"\",\r\n  database: \"northwind\",\r\n});\r\n\r\nbench(\r\n  `SELECT \"Id\" FROM \"OrderDetail\" LIMIT 10 x 10 - \"postgres.js\"`,\r\n  async () => {\r\n    const promises = new Array(10);\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      promises[i] = sql`SELECT \"Id\" FROM \"OrderDetail\" LIMIT 10`;\r\n    }\r\n    const results = await Promise.all(promises);\r\n  }\r\n);\r\n\r\nconst query = {\r\n  // give the query a unique name\r\n  name: \"select-order-details\",\r\n  text: `SELECT \"Id\" FROM \"OrderDetail\" LIMIT 10`,\r\n  values: [],\r\n};\r\nbench(`SELECT \"Id\" FROM \"OrderDetail\" LIMIT 10 x 10 - \"pg\"`, async () => {\r\n  const promises = new Array(10);\r\n\r\n  for (let i = 0; i < 10; i++) {\r\n    promises[i] = client.query(query);\r\n  }\r\n  const results = await Promise.all(promises);\r\n});\r\n\r\nbench(`SELECT * FROM \"OrderDetail\" LIMIT 10 x 10 - \"postgres.js\"`, async () => {\r\n  const promises = new Array(10);\r\n\r\n  for (let i = 0; i < 10; i++) {\r\n    promises[i] = sql`SELECT * FROM \"OrderDetail\" LIMIT 10`;\r\n  }\r\n  const results = await Promise.all(promises);\r\n});\r\n\r\nconst query2 = {\r\n  // give the query a unique name\r\n  name: \"select-order-star-details\",\r\n  text: `SELECT * FROM \"OrderDetail\" LIMIT 10`,\r\n  values: [],\r\n};\r\nbench(`SELECT * FROM \"OrderDetail\" LIMIT 10 x 10 - \"pg\"`, async () => {\r\n  const promises = new Array(10);\r\n\r\n  for (let i = 0; i < 10; i++) {\r\n    promises[i] = client.query(query2);\r\n  }\r\n  const results = await Promise.all(promises);\r\n});\r\n\r\nawait run();\r\n\r\nprocess.exit(0);\r\n```\r\n</details>\r\n\r\nTODO before shipping:\r\n- [ ] Fix GC issue with lots of allocations. Most likely missing a GCDeferralContext.\r\n- [ ] Fix error handling \r\n- [ ] Handle integers and dates and more data types\r\n- [ ] Password authentication\r\n- [ ] Unix socket support\r\n- [ ] TLS\r\n- [ ] Docs. Mention we have a more limited feature set and to consider using the `postgres` package if we are missing a feature they need\r\n\r\nIdeally, we would copy someone else's test suite. \r\n\r\nSome more configuration we should add:\r\n- timeouts and retries\r\n\r\n### How did you verify your code works?\r\n\r\nThis needs test coverage, particularly:\r\n- the various data types\r\n- errors\r\n- Multiple simultaneous connections\r\n- Stress tests\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-10-15T23:59:03Z",
        "closed_at": "2023-10-16T20:37:14Z",
        "merged_at": "2023-10-16T20:37:14Z",
        "body": "### What does this PR do?\r\n\r\nThis fix toStrictEqual on compare two same URLs.\r\n\r\nThis line on **Bun__deepEquals**, always return false if the URLs are equal on strict.\r\n`return url1->wrapped().href() != url2->wrapped().href();`\r\n\r\nOn toStrictEqual should continue checking additional properties like toEqual.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\nFixes: #6492 \r\nCorrelated issue: https://github.com/oven-sh/bun/issues/4089\r\nCorrelated fix: https://github.com/oven-sh/bun/pull/4105\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 102,
        "deletions": 8,
        "changed_files": 1,
        "created_at": "2023-10-15T22:00:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nAdds all missing fields for `bun init` that are available in `npm init`, making it now a completely drop-in replacement for `npm init`.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n![Screenshot_20231016_025649](https://github.com/oven-sh/bun/assets/86865279/744befe0-f549-47f3-a1c8-78b706187c70)\r\n\r\n![Screenshot_20231016_025522](https://github.com/oven-sh/bun/assets/86865279/fe3d9da3-eac0-4de3-86bf-26b0e7288b78)\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 38,
        "changed_files": 2,
        "created_at": "2023-10-15T21:53:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nFix: #6504\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 18,
        "changed_files": 6,
        "created_at": "2023-10-15T20:14:25Z",
        "closed_at": "2023-10-16T22:19:38Z",
        "merged_at": "2023-10-16T22:19:38Z",
        "body": "### What does this PR do?\r\n\r\nAdd threadId property missing on `Worker` instance from `node:worker_threads` module.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T17:44:48Z",
        "closed_at": "2023-10-16T23:41:41Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nMore accurate description of import.meta.dir\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 46,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-15T02:49:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "In the docs it seamed to suggest this is something supported, it seamed to be only supported in JSDOMFiles or blob. \r\n\r\nThis Adds the 2 properties `type` and `lastModified` to be supported on `Bun.file`\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6507\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 57,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2023-10-14T16:59:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis adds the functionality to print Object's class name if it exists matching Node's functionality.\r\n\r\nThis is my re-attempt from my earlier PR of https://github.com/oven-sh/bun/pull/6019\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [X] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-14T03:09:51Z",
        "closed_at": "2023-10-14T03:37:06Z",
        "merged_at": "2023-10-14T03:37:06Z",
        "body": "### What does this PR do?\r\nfixes a test in `bun-update.test.ts`\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-14T00:53:39Z",
        "closed_at": "2023-10-14T03:37:49Z",
        "merged_at": "2023-10-14T03:37:49Z",
        "body": "### What does this PR do?\r\nfixes #6449 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test and tested issue manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T19:21:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nTest showing lines-and-columns@^1.1.6 always installs the wrong version.\r\n\r\n* It always installs `1.2.0` which is deprecated and not  he latest semver matching version.\r\n* The latest semver-matching version is `1.2.4`.\r\n\r\nThis PR does not include a fix. I can probably pick up Zig, but I don't know where the bug is occurring.\r\n\r\nThis issue is discussed further in #5914.\r\n\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThis test verifies that an existing bug.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n- [X] I included a test for existing code",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-10-13T18:22:46Z",
        "closed_at": "2023-10-14T23:16:50Z",
        "merged_at": "2023-10-14T23:16:50Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFix: #6071\r\nFix: #6121\r\nFix: #4982\r\nFix: #5902 \r\nFix: #1623 \r\n\r\npg should execute big queries and exit with this code:\r\n```js\r\nconst client = new pg.Client({\r\n     connectionString: DATABASE_URL,\r\n     ssl: { rejectUnauthorized: false },\r\n});\r\nawait client.connect();\r\nconst res = await client.query(`SELECT * FROM users LIMIT 1000`);\r\nconsole.log(res.rows);\r\nawait client.end()\r\n```\r\nsequelize should work and exit with this code:\r\n```js\r\nconst sequelize = new Sequelize(DATABASE_URL, {dialect: 'postgres'});\r\nconsole.log(await sequelize.query('SELECT * FROM users LIMIT 1000;', {type: QueryTypes.SELECT}))\r\nawait sequelize.close()\r\n```\r\n\r\nknex should work and exit now with this code:\r\n```js\r\n\r\nimport Knex from \"knex\";\r\n\r\nconst knex = Knex({\r\n  client: \"pg\",\r\n  connection: DATABASE_URL,\r\n});\r\n\r\nconst { rows } = await knex.raw(\"`SELECT * FROM users LIMIT 1000\");\r\nconsole.log(rows);\r\nawait knex.destroy();\r\n```\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated test + existing tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 63,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T16:21:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis PR adds Reejs to Bun guides.\r\n\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T08:47:06Z",
        "closed_at": "2023-10-13T16:33:45Z",
        "merged_at": "2023-10-13T16:33:45Z",
        "body": "### What does this PR do?\r\n\r\nThis fixes an obvious typo in CONTRIBUTING.md\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 140,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T08:16:18Z",
        "closed_at": "2023-10-14T01:03:32Z",
        "merged_at": "2023-10-14T01:03:32Z",
        "body": "### What does this PR do?\r\n\r\nAdds basic documentation on how to containerize  a bun application using docker\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 429,
        "deletions": 216,
        "changed_files": 9,
        "created_at": "2023-10-13T06:04:01Z",
        "closed_at": "2023-10-13T06:05:20Z",
        "merged_at": "2023-10-13T06:05:20Z",
        "body": "This seemed to hit the tipping point of how much content we can reasonably pack into /docs/cli/install, so this PR also creates new pages for add/remove/update/link/pm. I think it's a big improvement from a discoverability perspective.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 267,
        "deletions": 99,
        "changed_files": 15,
        "created_at": "2023-10-13T02:52:14Z",
        "closed_at": "2023-10-17T03:01:24Z",
        "merged_at": "2023-10-17T03:01:24Z",
        "body": "### What does this PR do?\r\n\r\nFixes #6394, this also does a pass over the code I wrote and improves it a bit.\r\n\r\nResults of the organizing this means we have this new binding:\r\n\r\n```zig\r\nconst serialized = value.serialize(globalThis) orelse return false;\r\ndefer serialized.deinit();\r\n\r\nwriter.write(serialized.data); // .data is a []const u8\r\n```\r\n\r\nHave to test more but this may finally fix Next.js/Nuxt IPC issues.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 43,
        "changed_files": 2,
        "created_at": "2023-10-13T00:20:37Z",
        "closed_at": "2023-10-14T00:47:05Z",
        "merged_at": "2023-10-14T00:47:05Z",
        "body": "### What does this PR do?\r\n\r\nFixes `Bun.dns` and `node:dns` from returning incorrect addresses when a `family` is specified. This was because we were not setting the proper hints.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\nCloses #6452\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-12T22:41:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The `pathToFileURL` was not handling the case that when a relative link is passed, it should convert it to a absolute url and prepend the top_folder, or otherwise described, resolve the path before creating the url.\r\n\r\nThis does that by calling into buns Path api and using its `resolve` function.\r\n\r\nTheres the detail that i used preprocessor directives to determine whether we are on windows because there does not seam to be a easy way to get that at runtime in the `BunObject.cpp` file.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6456\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 42,
        "changed_files": 12,
        "created_at": "2023-10-12T22:11:09Z",
        "closed_at": "2023-10-13T02:38:33Z",
        "merged_at": "2023-10-13T02:38:33Z",
        "body": "### What does this PR do?\r\n\r\n- bump version\r\n- Workaround https://github.com/ziglang/zig/issues/16197 by using explicit `@as`\r\n- Changes to std library and `@fabs` -> `@abs`\r\n- typo toJSReponse -> toJSRe**s**ponse\r\n\r\nzig builds on M2 go from ~55 second --> ~50 second \ud83c\udf89",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 227,
        "deletions": 10,
        "changed_files": 4,
        "created_at": "2023-10-12T20:11:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\nWhen cloning a `Request` or `Response` before its body was settled(resolved) it would simply ignore the body and provide a empty one, this came from the fact that the `await fetch(..)` promise is resolved before the entire body is received in cases of bigger requests.\r\n\r\nThis changes that by introducing a ref back to the original response for clones AND making the original response(to which the FetchTasklet is also referenced) keep track of its clones, no matter the levels of clones in order to be able to resolve their bodies too when the response completes.\r\n\r\n**Note**: This introduces a two way memory reference(ptrs) between the requests, i used a ArrayList of ptrs as well as a optional ptr for the original_response, the links are correctly unrefed when each response is finalized but maybe theres a more idiomatic way to archive this in zig rather then this two way ref approach.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/4765\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n## To test this\r\nthe interval is not actually needed its to keep the process alive when testing deallocation of the responses,\r\n```js\r\nconst f = async () => {\r\n    const res = await fetch(\"https://github.com/\");\r\n    console.log(\"resolved\");\r\n    const clone = res.clone();\r\n    const text1 = await clone.clone().text();\r\n    const text2 = await clone.text();\r\n    const orig = await res.text();\r\n    console.log(text1.length, text2.length, orig.length, text2 === text1)\r\n\r\n}\r\nawait f()\r\nsetInterval(() => {}, 500)\r\n```\r\n\r\nTo test the serve part:\r\n```js\r\nconst handle_req = async(request) => {\r\n\r\n    console.log(\"awaiting first\")\r\n    const data1 = await request.clone().clone().text();\r\n    console.log(\"awaiting second\")\r\n    const data2 = await request.clone().text();\r\n    console.log(data1, data2)// Output \"\" empty string.\r\n    return new Response(\"hello world\");\r\n}\r\nconst r = Bun.serve({\r\n    async fetch(request) {\r\n       return handle_req(request) \r\n    }\r\n});\r\n\r\n```",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T19:40:11Z",
        "closed_at": "2023-10-16T20:43:44Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\nIt is a failing test I believe should pass. This test passes if the value written is in the range `[0x00, 0x7F]` but fails if the value written is in the range `[0x80, 0xFF]`. I filed [this bug report](https://github.com/oven-sh/bun/issues/6467) that links to this PR.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-12T14:36:56Z",
        "closed_at": "2023-10-12T20:51:24Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n1. Fix typo in the zsh code tab\r\n2. arrange the order to align with the code tabs\r\n3. add a direct troubleshooting to add the installation path based on the shell name.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/A\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n\r\ncc: @colinhacks \r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 113,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T13:26:45Z",
        "closed_at": "2023-10-13T18:14:58Z",
        "merged_at": "2023-10-13T18:14:58Z",
        "body": "### What does this PR do?\r\n\r\nAdds a guide for using `systemd` to run a bun application as a daemon\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-12T11:56:43Z",
        "closed_at": "2023-10-16T22:17:13Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n\r\n\r\nadds an instant dev enviroment configuration for gitpod\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 453,
        "deletions": 12,
        "changed_files": 12,
        "created_at": "2023-10-12T10:01:30Z",
        "closed_at": "2023-10-17T20:18:14Z",
        "merged_at": "2023-10-17T20:18:14Z",
        "body": "### What does this PR do?\r\n\r\n- Close: https://github.com/oven-sh/bun/issues/6413\r\n- Close: https://github.com/oven-sh/bun/issues/5850\r\n\r\n\r\nPreviously, when obtaining the address, we used the `hostname` field, which could result in getting the string `localhost`. This PR implemented the `address()` function in zig side.\r\n\r\nhttps://github.com/oven-sh/bun/blob/1bf28e0d77a8b2261befbdb708cefd03e0126960/src/js/node/http.ts#L448-L457\r\n\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T09:04:59Z",
        "closed_at": "2023-10-12T22:11:36Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-12T07:59:23Z",
        "closed_at": "2023-10-12T08:00:27Z",
        "merged_at": "2023-10-12T08:00:27Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 640,
        "deletions": 31,
        "changed_files": 7,
        "created_at": "2023-10-12T06:49:23Z",
        "closed_at": "2023-10-12T07:44:16Z",
        "merged_at": "2023-10-12T07:44:16Z",
        "body": "### What does this PR do?\r\n\r\noverrides and resolutions. yippee\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 146,
        "deletions": 14,
        "changed_files": 5,
        "created_at": "2023-10-12T04:39:09Z",
        "closed_at": "2023-10-12T22:02:05Z",
        "merged_at": "2023-10-12T22:02:05Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 132,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-12T02:47:29Z",
        "closed_at": "2023-10-12T03:41:13Z",
        "merged_at": "2023-10-12T03:41:13Z",
        "body": "### What does this PR do?\r\nfixes #6416 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-11T17:02:45Z",
        "closed_at": "2023-10-16T22:18:27Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThe command bun install -g @oven/zig doesn't register ZIG path in my ZSH environment, adding the simple instructions above whe fix them adding all bun/bin in my zig environment\r\n\r\nexport PATH=\"$PATH:$HOME/.bun/bin\"\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-11T05:55:01Z",
        "closed_at": "2023-10-16T22:31:14Z",
        "merged_at": "2023-10-16T22:31:14Z",
        "body": "### What does this PR do?\r\n\r\nFixes the missing subprocess argument in the ipc handler\r\n\r\n- Documentation or TypeScript types (it's okay to leave the rest blank in this case) (Added in a separate PR)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests for IPC and tested using the built version\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 99,
        "deletions": 8,
        "changed_files": 13,
        "created_at": "2023-10-11T01:53:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\nadds a field to bunfig.toml to enable/disable using the github api for installing github dependencies\r\n\r\nerror message example:\r\n<img width=\"654\" alt=\"Screenshot 2023-10-10 at 6 49 53 PM\" src=\"https://github.com/oven-sh/bun/assets/35280289/f20ecf5f-a89e-4d00-9288-a5d3de6390c4\">\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 122,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-10T12:39:33Z",
        "closed_at": "2023-10-10T22:35:06Z",
        "merged_at": "2023-10-10T22:35:06Z",
        "body": "### What does this PR do?\r\n\r\nAdding the missing documentation for the IPC feature on Bun.spawn\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-10T11:51:58Z",
        "closed_at": "2023-10-10T22:36:28Z",
        "merged_at": "2023-10-10T22:36:28Z",
        "body": "### What does this PR do?\r\n\r\nremoval of incorrect information about **bunx** `--bun` flag : \"After Bun 1.0 this flag will no longer be necessary.\"\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-10T09:00:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Hello,\r\n\r\nfirst of all I want to express that I'm new to bun. I've tried to built an SvelteKit application and ran into the same issue as #4723. Afterwards I jumped down deep into that rabbit hole :-D \r\n\r\nFixes #4723\r\n\r\nPossible related to some extend to one or more of #4671 #5935 #5943 #4896 #5306 #1446 \r\n\r\n### What does this PR do?\r\n\r\nThe error handling between calling zig syscalls and using libc is different. Within zigs implementation, and therefore it's clone within bun, the return value of a syscall is of type usize. Libc implemenations use a signed integer namely c_int. As soon as libc is linked every response code of a syscall is interpreted via the libc errno function, but not every syscall is made through the libc interface. Only a few syscalls on aarch64 are used from libc every other one is called through zig itself. This could lead to errors beeing misinterpreted as success, cause its strictly positive and therefore not an error for the libc implementation. If an open syscall internally fails but is interpreted as a success the following write syscall would operate on a wrong file descriptor resulting in error bad file descriptor (EBADF).\r\n\r\n### How did you verify your code works?\r\n\r\nI've built a release version of bun and verified that the expected behaviour is observed.\r\nBefore that I've built a reproducer to force the bad behaviour.\r\n\r\n1. Create a _index.ts_ with the below content.\r\n2. Create a directory called test `mkdir test`\r\n3. Run bun via `bun index.ts`\r\n4. This should result in ISDIR error, cause the file gets opened an the syscall fails with _ERRISDIR_ but instead the open succeeds and the stat afterwards gets an _EBADF_.\r\n\r\n# TypeScript reproducer\r\n\r\n```TypeScript\r\nimport fs from \"fs\";\r\nfs.writeFileSync(`test`, `hello world`);\r\n```\r\n\r\nThe error from the second syscall is correctly interpreted as this is run on aarch64 and bun uses libc stat on aarch64.\r\n\r\nhttps://github.com/oven-sh/bun/blob/6301778a589254e2c3c0d95f768fce303f528b03/src/sys.zig#L31-L50\r\n\r\n## Before\r\n```\r\n# ./packages/bun-linux-aarch64/bun index.ts\r\n1 | import fs from \"fs\";\r\n2 | fs.writeFileSync(`test`, `hello world`);\r\n   ^\r\nEBADF: Bad file descriptor\r\n    fd: \"-21\"\r\n syscall: \"write\"\r\n   errno: -9\r\n\r\n      at /home/user/tmp/bun/index.ts:2:0\r\n```\r\n\r\n## After\r\n```\r\n# ./packages/bun-linux-aarch64/bun index.ts\r\n1 | import fs from \"fs\";\r\n2 | fs.writeFileSync(`test`, `hello world`);\r\n   ^\r\nEISDIR: Is a directory\r\n   path: \"test\"\r\n syscall: \"open\"\r\n   errno: -21\r\n\r\n      at /home/user/tmp/bun/index.ts:2:0\r\n```\r\n\r\n# Zig reproducer\r\n\r\n```Zig\r\nconst std = @import(\"std\");\r\nconst os = std.os;\r\nconst linux = os.linux;\r\nconst system = linux;\r\nconst builtin = @import(\"builtin\");\r\n\r\npub fn main() !void {\r\n    std.log.info(\"libc {}\", .{builtin.link_libc});\r\n    const rc_libc = system.openat(@as(system.fd_t, @intCast(-100)), \"test\", 321, 438);\r\n    switch (os.errno(rc_libc)) {\r\n        .SUCCESS => std.log.info(\"success\", .{}),\r\n        .ISDIR => std.log.info(\"is directory\", .{}),\r\n        else => return,\r\n    }\r\n\r\n    const rc_linux = system.openat(@as(system.fd_t, @intCast(-100)), \"test\", 321, 438);\r\n    switch (linux.getErrno(rc_linux)) {\r\n        .SUCCESS => std.log.info(\"success\", .{}),\r\n        .ISDIR => std.log.info(\"is directory\", .{}),\r\n        else => return,\r\n    }\r\n}\r\n```\r\n\r\n## Output after building with _zig build-exe main.zig_\r\n```\r\ninfo: libc false\r\ninfo: is directory\r\ninfo: is directory\r\n```\r\n\r\n## Output after building with _zig build-exe main.zig --library c_\r\n```\r\ninfo: libc true\r\ninfo: success\r\ninfo: is directory\r\n```",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 344,
        "deletions": 17,
        "changed_files": 8,
        "created_at": "2023-10-10T07:20:23Z",
        "closed_at": "2023-10-11T03:05:58Z",
        "merged_at": "2023-10-11T03:05:58Z",
        "body": "### What does this PR do?\r\nmakes `install.peer` default to true in `bunfig.toml`. also makes installing peer dependencies work\r\n\r\nfixes #5567\r\ncloses #5565 \r\nfixes #5209 \r\nfixes #5128 \r\nfixes #4472 \r\nfixes #3410 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 698,
        "deletions": 277,
        "changed_files": 8,
        "created_at": "2023-10-10T07:11:36Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n- Add hand-written helptext for each top-level command\r\n- Warn on unrecognized flags instead of aborting early\r\n- Organize CLI flags better\r\n- Do not warn on unrecognized flags when argv[0] is node (`--bun`)",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-10T01:19:54Z",
        "closed_at": "2023-10-14T00:52:57Z",
        "merged_at": "2023-10-14T00:52:57Z",
        "body": "### What does this PR do?\r\n\r\nThis implement deprecated node DNS lookup behavior.\r\nReference: [https://nodejs.org/api/deprecations.html#DEP0118](https://nodejs.org/api/deprecations.html#DEP0118)\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\nFixes #5547",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 303,
        "deletions": 61,
        "changed_files": 29,
        "created_at": "2023-10-10T00:50:00Z",
        "closed_at": "2023-10-10T02:56:48Z",
        "merged_at": "2023-10-10T02:56:48Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis fix fetch behavior on error cases, fix HTTP destroying too early causing missing parts/events not to be emitted, fix AbortSignal.timeout, fix proper closing/ending off fetch when aborted, and also fix the state of readable streams to be used not only empty.\r\n\r\nFix #6366\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-09T06:03:52Z",
        "closed_at": "2023-10-11T03:08:32Z",
        "merged_at": "2023-10-11T03:08:32Z",
        "body": "fix for #6012 \r\n\r\n```\r\nstd.fs.path.extension(filename_str); \r\n// return extension name with a dot(.) the ex: somefile.pdf -> .pdf\r\n```\r\n\r\n```\r\nbun.HTTP.MimeType.byExtensionNoDefault()\r\n// expects extension name without any dot(.)  \r\n```\r\n\r\n\r\nverified the code runs on my local build\r\n\r\n![image](https://github.com/oven-sh/bun/assets/20675891/d21b856d-8055-4ae8-9315-d86841e9ff88)\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T04:49:47Z",
        "closed_at": "2023-10-09T18:47:00Z",
        "merged_at": "2023-10-09T18:47:00Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nBefore\r\n<img width=\"270\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/5362563/8111a133-1103-4112-869d-1972fa7e98e3\">\r\n\r\nAfter\r\n<img width=\"255\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/5362563/6e893333-3226-4ad6-b254-5ef50db1f5b3\">\r\n\r\n\r\nThe preview of array variables in the debugger view is sorted and misleading\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nBuild the local version of extension and verify it in the vscode\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-10-09T02:34:41Z",
        "closed_at": "2023-10-11T04:13:42Z",
        "merged_at": "2023-10-11T04:13:42Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds serialization and deserialization of the trustedDependencies field from the package.json field in the lockfile. I added an 8 byte flag to the lockfile to indicate if the field is present or not.\r\n\r\nPlease let me know if you'd like this change implemented differently and I'd be happy to make changes.\r\n\r\nThis PR closes #5472 \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-08T12:35:57Z",
        "closed_at": "2023-10-14T00:51:37Z",
        "merged_at": "2023-10-14T00:51:37Z",
        "body": "### What does this PR do?\r\n\r\nThis PR fixes the `path` field in error messages within `Bun.write`. Close: #6336\r\n\r\n#### 1\r\n```JavaScript\r\n// 1. `./baz.txt` exists.\r\n// 2. `foo/` doesn't exist.\r\nawait Bun.write('./foo/bar.txt', Bun.file('./baz.txt'));\r\n\r\n// Output:\r\n// ENOENT: No such file or directory\r\n//    path: \"./baz.txt\"\r\n//  syscall: \"open\"\r\n//    errno: -2\r\n\r\n```\r\n\r\nhttps://github.com/oven-sh/bun/blob/35109160ca5d439116bedeb3302ec3745e2895d5/src/bun.js/webcore/blob.zig#L2292\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/35109160ca5d439116bedeb3302ec3745e2895d5/src/bun.js/webcore/blob.zig#L2197-L2200\r\n\r\nThe `path` field in the error message will use the value from the second parameter. This happens because in the `doOpenFile` function, we do not assign the `path` field to the error, the error context is incomplete. And when rejecting, it defaults to the source's path.\r\n\r\n----\r\n\r\n#### 2\r\n```JavaScript\r\nawait Bun.write(\"./foo/bar.txt\", \"\");\r\n\r\n// Output\r\n// 1 | await Bun.write(\"./foo/bar.txt\", \"\");\r\n//          ^\r\n// ENOENT: No such file or directory\r\n//  syscall: \"open\"\r\n//    errno: -2\r\n\r\n```\r\n\r\nIn the `writeStringToFileFast` function, the `path` field is not assigned.\r\n\r\nhttps://github.com/oven-sh/bun/blob/35109160ca5d439116bedeb3302ec3745e2895d5/src/bun.js/webcore/blob.zig#L1043C1-L1043C1\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 504,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-08T09:19:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nSupport CMake as meta build system, and hopefully deprecating GNU Make soon.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-07T20:44:33Z",
        "closed_at": "2023-10-09T18:52:16Z",
        "merged_at": "2023-10-09T18:52:16Z",
        "body": "### What does this PR do?\r\n\r\nAdds build commands for Fedora to the codetabs in development.md\r\n\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 32,
        "changed_files": 1,
        "created_at": "2023-10-07T16:31:48Z",
        "closed_at": "2023-10-10T22:38:28Z",
        "merged_at": null,
        "body": "The Vite guide references running Vite commands using `bunx --bun vite`. This should no longer be required since Bun 1.0 (according to documentation on the same page), so we can fall back to `bun run` instead.\r\n\r\n### What does this PR do?\r\n\r\nThis replaces the instructions for running Vite with `bunx  --bun` with 'regular' `bun run` commands.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 41621,
        "deletions": 251,
        "changed_files": 53,
        "created_at": "2023-10-07T07:41:11Z",
        "closed_at": "2023-10-11T09:27:07Z",
        "merged_at": "2023-10-11T09:27:07Z",
        "body": "### What does this PR do?\r\n\r\nIf you do not have a `bun.lockb`, but a `package-lock.json` exists, this PR reads that data and generates a bun lockfile in memory, and uses that for the install.\r\n\r\nI think the migration can be made faster, but people will ideally only run this once per project, so it is fine.\r\n\r\n<img width=\"562\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/24465214/7b970e30-6cb6-405d-bb53-c0e48e4e7a69\">\r\n\r\nIf a `yarn.lock` or `pnpm-lock.yaml` exists, a warning is printed\r\n\r\n<img width=\"752\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/24465214/b17dbd33-e60f-4bdd-a38c-3257826341db\">\r\n\r\nAll of the above only happens if no `bun.lockb` is present. so this has no perf impact on existing projects.\r\n\r\nYou can also run `bun pm migrate` to run just the migrator code path, useful for testing.\r\n\r\nThere are some situations where this migration is not 100% accurate to what npm installs, which is due to bugs and limitations/optimizations of Bun's package hoisting logic.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-07T02:17:33Z",
        "closed_at": "2023-10-07T03:14:44Z",
        "merged_at": "2023-10-07T03:14:44Z",
        "body": "### What does this PR do?\r\n\r\nWe were not calling inflateEnd, which caused fetch() requests with gzip/deflate to leak memory\r\n\r\n![hmasd](https://github.com/oven-sh/bun/assets/709451/e54002dd-e980-44b7-a194-3374cd017c82)\r\n\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nMemory usage is more stable now",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-06T19:47:15Z",
        "closed_at": "2023-10-07T02:22:38Z",
        "merged_at": "2023-10-07T02:22:38Z",
        "body": "Returning `undefined` simply falls through to the next plugin, or to the default loader.\r\nThis behaviour is defined by esbuild, and supported by Bun, but the types don't reflect it properly. This PR fixes that.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-06T10:26:02Z",
        "closed_at": "2023-10-06T10:26:42Z",
        "merged_at": "2023-10-06T10:26:42Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-06T00:58:09Z",
        "closed_at": "2023-10-09T18:48:07Z",
        "merged_at": "2023-10-09T18:48:07Z",
        "body": "### What does this PR do?\r\n\r\nFixing a couple typos I found looking at the docs.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 45,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-10-05T15:16:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nExtends the bundler minification to include a `symbols` option, which when enabled removes arguments provided to `Symbol()`.  \r\n\r\n```ts\r\n// Before\r\nconst my_symbol = Symbol('foo_bar');\r\n\r\n// After\r\nconst my_symbol = Symbol();\r\n```\r\n\r\nBoth `Symbol.for(...)` and `Symbol.iterator` are left untouched. In 99% of cases, the description provided to `Symbol()` is only used for debugging purposes and therefore makes sense to remove these for production. In the rare event that someone is relying on symbol inspection, this can simply be disabled.\r\n\r\n[I implemented the same optimization into Terser](https://github.com/terser/terser/pull/582) under the `unsafe_symbols` flag.\r\n\r\n> [!NOTE]\r\n> As a note, this is my first time writing anything in Zig and my first time touching the Bun codebase. Please let me know if there's any mistakes or anything I should have done differently.\r\n\r\n### How did you verify your code works?\r\n\r\nIn addition to adding an automated test `minify/SymbolMinification` to `bundler_minify.test.ts`, I've also compiled Bun locally and tested the functionality of the new feature.\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T14:11:02Z",
        "closed_at": "2023-10-09T18:52:40Z",
        "merged_at": null,
        "body": "Make `Install` section on par with https://bun.sh/docs/installation\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-05T13:37:34Z",
        "closed_at": "2023-10-09T18:49:50Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis change is for Developers documentation, so it informs the developers that they need to install unzip before installing bun.\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- ### How did you verify your code works? -->\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 8,
        "changed_files": 4,
        "created_at": "2023-10-05T09:28:18Z",
        "closed_at": "2023-10-05T23:43:59Z",
        "merged_at": "2023-10-05T23:43:59Z",
        "body": "### What does this PR do?\r\n\r\n- Fix `close_connection` behaviour. When `should_connection` is `true`, set `state |= HTTP_CONNECTION_CLOSE`.\r\n- Fix incomplete HTTP response, adding the `\\r\\n` between the header and body (even empty).\r\n\r\nClose: #6031\r\n\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T08:11:54Z",
        "closed_at": "2023-10-09T18:51:41Z",
        "merged_at": "2023-10-09T18:51:41Z",
        "body": "added commands to install unzip package and to check Linux kernel version\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 271,
        "deletions": 18,
        "changed_files": 4,
        "created_at": "2023-10-05T03:42:58Z",
        "closed_at": "2023-10-05T05:46:21Z",
        "merged_at": "2023-10-05T05:46:21Z",
        "body": "### What does this PR do?\r\nfixes #5027\r\nfixes #5691 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-05T01:03:51Z",
        "closed_at": "2023-10-05T04:28:23Z",
        "merged_at": "2023-10-05T04:28:23Z",
        "body": "#6309\r\n\r\nPerhaps the root of the problem is that `this[kInternalSocketData]` should be set at this point..? This just uses optional chaining through the whole expression make this more crash-resistant anyway.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-04T22:27:08Z",
        "closed_at": "2023-10-10T22:39:20Z",
        "merged_at": "2023-10-10T22:39:20Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-04T18:35:29Z",
        "closed_at": "2023-10-09T18:47:38Z",
        "merged_at": "2023-10-09T18:47:38Z",
        "body": "The exit code support is between 0-255 and not only in the signed positive range (0-127).\r\nNode.js does not seam to throw on a bigger integer and just wraps around, but throwing a error is a good approach and makes the behaviour more defined.\r\n\r\nThis allows the range to be 0-255.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6284\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-04T15:46:50Z",
        "closed_at": "2023-10-05T04:29:55Z",
        "merged_at": "2023-10-05T04:29:55Z",
        "body": "### What does this PR do?\r\n\r\nThis updates the bunfig documentation to make it obvious that this is where plugins should be passed. It might seem obvious with the current documentation. I promise you, it's not.\r\n\r\n- [X] Documentation or TypeScript types\r\n- [ ] Code changes\r\n\r\nFixes https://github.com/oven-sh/bun/issues/6297",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T14:01:57Z",
        "closed_at": "2023-10-05T23:43:43Z",
        "merged_at": "2023-10-05T23:43:43Z",
        "body": "### What does this PR do?\r\n\r\nThis removes the check in SubtleCrypto importKey() for JWK Ed25519 \"alg\" member values. These have been removed in https://github.com/WICG/webcrypto-secure-curves/pull/24\r\n\r\nThe other portion (JWK Ed25519 \"alg\" member export) was not even implemented as far as i can see.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 165,
        "deletions": 1,
        "changed_files": 7,
        "created_at": "2023-10-04T12:39:15Z",
        "closed_at": "2023-10-11T03:27:20Z",
        "merged_at": "2023-10-11T03:27:20Z",
        "body": "### What does this PR do?\r\n\r\n\r\n- [x] adds `toEqualIgnoringWhitespace` to bun test utils\r\n- [x] adds `strings.removeWhitespace` to zig strings utils\r\n\r\n### How did you verify your code works?\r\n- [x] I ran bun test on `expect.test.js` & `jest-extended.test.js`\r\n- [x] I included a test for the new code\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n- [x] I ran `make codegen` to regenerate the C++ and Zig code\r\n\r\nrelated to https://github.com/oven-sh/bun/issues/1825\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-04T11:29:17Z",
        "closed_at": "2023-10-09T18:50:08Z",
        "merged_at": "2023-10-09T18:50:08Z",
        "body": "fixed some minor documentation.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-10-04T11:03:49Z",
        "closed_at": "2023-10-10T19:59:09Z",
        "merged_at": null,
        "body": "### What does this PR do?\n\nCloses #6287\n\n<!-- **Please explain what your changes do**, example: -->\n\n<!--\n\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\n\n-->\n\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\n- [ ] Code changes\n\n### How did you verify your code works?\n\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\n\n<!-- I wrote automated tests -->\n\n<!-- If JavaScript/TypeScript modules or builtins changed:\n\n- [ ] I ran `make js` and committed the transpiled changes\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\n- [ ] I included a test for the new code, or an existing test covers it\n\n-->\n\n<!-- If Zig files changed:\n\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\n- [ ] I or my editor ran `zig fmt` on the changed files\n- [ ] I included a test for the new code, or an existing test covers it\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\n-->\n\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\n\n- [ ] I added TypeScript types for the new methods, getters, or setters\n-->\n\n<!-- If dependencies in tests changed:\n\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\n-->\n\n<!-- If functions were added to exports.zig or bindings.zig\n\n- [ ] I ran `make headers` to regenerate the C header file\n\n-->\n\n<!-- If \\*.classes.ts files were added or changed:\n\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\n-->\n\n<!-- If a new builtin ESM/CJS module was added:\n\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\n- [ ] I added a test that imports the module\n- [ ] I added a test that require() the module\n-->\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-10-04T06:17:22Z",
        "closed_at": "2023-10-05T23:03:22Z",
        "merged_at": "2023-10-05T23:03:22Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 15,
        "changed_files": 4,
        "created_at": "2023-10-04T04:55:22Z",
        "closed_at": "2023-10-05T04:29:35Z",
        "merged_at": "2023-10-05T04:29:35Z",
        "body": "### What does this PR do?\r\n\r\nMicro-optimize AbortSignal a little\r\n\r\n- Slightly reduce memory usage of `AbortSignal` by setting the inline capacity of the `Vector`  used within to 2 instead of the default of 6\r\n- Instead of creating a JS object for AbortSignal, we can create the C++ one and lazily create the GC'd version\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 40,
        "changed_files": 13,
        "created_at": "2023-10-04T02:52:07Z",
        "closed_at": "2023-10-04T02:56:34Z",
        "merged_at": "2023-10-04T02:56:34Z",
        "body": null,
        "comments": 6
    },
    {
        "merged": true,
        "additions": 110,
        "deletions": 305,
        "changed_files": 8,
        "created_at": "2023-10-03T23:35:30Z",
        "closed_at": "2023-10-10T23:34:35Z",
        "merged_at": "2023-10-10T23:34:35Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/A\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n### Reason and Changes\r\n\r\n#### Added **Scaffolding** section (`docs/scaffolding/`)\r\n* The project creation (folder scaffolding) should not put inside intro, it should be a new section before cli `bun run`\r\n* Intro shall focus on the overall first time usage, like how to install and Quickstart.\r\n* `bun init` and `bun create` shall be separated into two different sub pages, as users shall use either `bun init` or `bun create` to scaffold a new project.  (`docs/scaffolding/bun-create.md` and `docs/scaffolding/bun-init.md`)\r\n* typescript settings shall be part of the scaffolding, not intro. (`docs/scaffolding/typescript.md`)\r\n\r\n#### Extracted `bun add --global` into separate sub page. (`docs/install/global-install.md`)\r\n* `bun add --global` is not to adding package to the local project folder.\r\n* As it does not modify any file (e.g. `package.json`) inside the local project folder, it should be extracted as a new sub page.\r\n\r\n#### Relocated or Removed obsoleted files `docs/typescript.md`, `docs/cli/bun-init.md`, and `docs/templates.md`\r\n\r\n#### Added Information in `installation.md` for the manual global installation setup in macOS / Linux (bash).\r\n\r\n#### Updated `nav.ts` accordingly\r\n\r\n#### Updated `README.md` for the revised docs path.\r\n\r\n#### Added `bun --version` and `bun --revision` in `installation.md` for users to check the installation.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-03T21:27:35Z",
        "closed_at": "2023-10-05T04:31:29Z",
        "merged_at": "2023-10-05T04:31:29Z",
        "body": "### What does this PR do?\r\n\r\n`parseUrl(url).query` is supposed to be an object and not a `URLSearchParams`\r\n\r\n### How did you verify your code works?\r\n\r\nI didn't, this needs a test",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T13:15:18Z",
        "closed_at": "2023-10-07T14:48:33Z",
        "merged_at": null,
        "body": "Example of requestIP usage\r\n\r\n### What does this PR do?\r\n\r\nThis add a new example in the Bun.serve doc to explain how to get a request IP.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-03T08:45:33Z",
        "closed_at": "2023-10-03T19:03:57Z",
        "merged_at": "2023-10-03T19:03:57Z",
        "body": "### What does this PR do?\r\n\r\nClose: #6252\r\n\r\n```JavaScript\r\nconst blob = new Blob([\"0123456789\"]);\r\nconsole.log(await blob.slice(2, 8).slice(0, 3).text());\r\n// Output:\r\n// node: 234\r\n// bun: 012\r\n```\r\n\r\n`offset` is overwritten by `relativeStart`, causing `blob.slice().slice()` to always use the parameters from the last `slice` call. This Add the current `offset` to the new blob slice.\r\n\r\nhttps://github.com/oven-sh/bun/blob/47651f321ae5eb82686da5d759e9b1b5b12340ad/src/bun.js/webcore/blob.zig#L3010-L3012\r\n\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 346,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2023-10-03T07:40:57Z",
        "closed_at": "2023-10-03T09:17:25Z",
        "merged_at": "2023-10-03T09:17:25Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T05:42:10Z",
        "closed_at": "2023-10-03T16:11:53Z",
        "merged_at": "2023-10-03T16:11:53Z",
        "body": "### What does this PR do?\r\n\r\nUse token from cookies, not from ws.data\r\n\r\n- [x ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/a\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T04:06:22Z",
        "closed_at": "2023-10-03T16:11:03Z",
        "merged_at": "2023-10-03T16:11:03Z",
        "body": "### What does this PR do?\r\n\r\nAdd MIT as license information in the package.json of `bun-types`\r\n\r\n### How did you verify your code works?\r\n\r\nNo code changed\r\n\r\n### Assumtions\r\n\r\n`bun-types` is distributed under MIT just like the rest of the Bun project as indicated here: https://bun.sh/docs/project/licensing\r\n\r\n\r\n### Background\r\n\r\nI use bun for bundling and testing, so I depend on bun-types. But without the license information in the package.json I get this FOSSA warning\r\n\r\n![image](https://github.com/oven-sh/bun/assets/1063454/e5ee6382-65bd-45c5-8240-3dcaa8c9e5c9)\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 131,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-10-03T00:20:50Z",
        "closed_at": "2023-10-04T00:39:45Z",
        "merged_at": "2023-10-04T00:39:45Z",
        "body": "### What does this PR do?\r\n\r\n```sh\r\nbun run doesnotexist # => exits with 1\r\nbun run --if-present doesnotexist # => exits with 0\r\n```\r\n\r\nCloses #5670\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-02T23:51:16Z",
        "closed_at": "2023-10-03T01:00:17Z",
        "merged_at": "2023-10-03T01:00:17Z",
        "body": "### What does this PR do?\r\n\r\n`bun install` would previously read `GITHUB_API_DOMAIN` to check for Github's API. This environment variable does not exist in Github Actions, it is instead `GITHUB_API_URL`.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 35,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-02T21:03:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis commit makes node:os freemem on Linux behave like Node.js. \r\n\r\nNode.js uses libuv's `uv_get_free_memory`, which first calls `uv__read_proc_meminfo` to read the available memory from /proc/meminfo. If reading /proc/meminfo fails, then the libuv implementation falls back to a `sysinfo` call. This commit emulates this behavior.\r\n\r\nThis fixes [#3944](https://github.com/oven-sh/bun/issues/3944).\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\nIt is possible to mock /proc/meminfo, but this requires elevated priviledges. One can create the desired /proc/meminfo values and store them in a file. \r\n\r\n```\r\n#!/bin/bash\r\nunshare --mount bash -c '\r\n  mount --bind ./cooked_memavailable.txt /proc/meminfo\r\n  free -k\r\n'\r\n```\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-10-02T20:45:20Z",
        "closed_at": "2023-10-03T00:59:39Z",
        "merged_at": "2023-10-03T00:59:39Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds a warning on start when the SIMD-enabled build of Bun is used on a CPU that lacks SIMD support\r\n\r\n\r\nWhen using a SIMD-enabled build of Bun when the CPU doesn't support SIMD, Bun may crash with an \"Illegal Instruction\" error and no other explanation\r\n\r\nWe detect this in the install scripts, but it doesn't always seem to work and Zig doesn't support multi function versioning (https://github.com/ziglang/zig/issues/1018). \r\n\r\n\r\n### How did you verify your code works?\r\n\r\nManual",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-02T09:40:40Z",
        "closed_at": "2023-10-02T09:42:18Z",
        "merged_at": "2023-10-02T09:42:18Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-02T00:44:18Z",
        "closed_at": "2023-10-03T16:12:38Z",
        "merged_at": "2023-10-03T16:12:37Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nUpdate the `tsconfig.json` file generated from the `bun init` command shown in the documentation to the `tsconfig.json` generated from the actual `bun init`.\r\n\r\nThe screenshot below is the code of the `tsconfig.json` file created with `bun init` in `bun@1.0.3`.\r\n\r\n<img width=\"400\" alt=\"bun\" src=\"https://github.com/oven-sh/bun/assets/39112954/f393fa1f-3725-4f8e-b76e-0210f7515812\">\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/A\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-01T22:52:07Z",
        "closed_at": "2023-10-02T22:18:55Z",
        "merged_at": "2023-10-02T22:18:55Z",
        "body": "### What does this PR do?\r\n\r\nUpdate development.md.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-10-01T20:39:51Z",
        "closed_at": "2023-10-01T23:55:05Z",
        "merged_at": "2023-10-01T23:55:05Z",
        "body": "### What does this PR do?\r\n\r\nWhen trying to find the relevant package.json file\r\n\r\nInstead of openat(cwd, dir) -> openat(dir, \"package.json\"), just do openat(dir + \"/package.json\") essentially\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-01T20:31:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "// TODO: remove Buffer.from() when readFileSync() returns Buffer\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 64,
        "deletions": 19,
        "changed_files": 3,
        "created_at": "2023-10-01T20:16:20Z",
        "closed_at": "2023-10-03T01:01:59Z",
        "merged_at": "2023-10-03T01:01:59Z",
        "body": "### What does this PR do?\r\n\r\n- Set the default timeout for `fetch` to 5 minutes instead of 60 seconds\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-01T06:32:53Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nLambda string response doesn't need to be stringified. This is especially important when we want to respond to services such as Congito, which require JSON output.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nAdded type check for string:\r\n\r\n```javascript\r\nbody: response === null ? null : (typeof response === 'string' ? response : JSON.stringify(response)),\r\n```",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-01T03:37:50Z",
        "closed_at": "2023-10-01T19:55:38Z",
        "merged_at": "2023-10-01T19:55:38Z",
        "body": "### What does this PR do?\r\n\r\n`process.kill` should return `true` on success, not `undefined`. It affected some code used to test for the existence of a process. e.g.\r\n \r\n```JavaScript\r\nfunction processExist(pid) {\r\n  try {\r\n    return kill(pid, 0);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nconsole.log(processExist(process.pid));\r\nconsole.log(processExist(234234));\r\n```\r\n\r\nRef: https://github.com/nodejs/node/blob/092fb9f541ce8cc07289b5a69eb93892445739f5/lib/internal/process/per_thread.js#L211-L237\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-10-01T01:59:32Z",
        "closed_at": "2023-10-01T05:59:43Z",
        "merged_at": "2023-10-01T05:59:43Z",
        "body": "### What does this PR do?\r\n\r\n\"Connection refused\" and connection timeouts can be caused by the first initial socket address returned in `getaddrinfo` being unable to connect. So we must loop through the linked list of socket addresses returned to find one which does successfully connect. This PR does that. Previously, we were not doing that.\r\n\r\nThis is likely to fix the following, but these are all difficult to reproduce so it's pretty hard to know for sure.\r\n\r\nFixes #4066\r\nFixes #6204\r\nFixes #5548\r\nFixes #6101\r\nFixes #4832\r\n\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 172,
        "deletions": 22,
        "changed_files": 5,
        "created_at": "2023-09-30T07:02:20Z",
        "closed_at": "2023-09-30T09:50:38Z",
        "merged_at": "2023-09-30T09:50:38Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 204,
        "deletions": 22,
        "changed_files": 6,
        "created_at": "2023-09-30T02:39:00Z",
        "closed_at": "2023-09-30T03:45:52Z",
        "merged_at": "2023-09-30T03:45:52Z",
        "body": "### What does this PR do?\r\n\r\n- Fixes a hang in the HTTP client that could occur in `bun install` on installs with manifest cached\r\n- Fixes an infinite loop that could occur when\r\n\r\nFixes https://github.com/oven-sh/bun/issues/5831\r\nFixes https://github.com/oven-sh/bun/issues/4066\r\nFixes https://github.com/oven-sh/bun/issues/4561 (msot likely)\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-30T01:01:43Z",
        "closed_at": "2023-10-05T23:12:07Z",
        "merged_at": "2023-10-05T23:12:07Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nAdds a test that was missing in https://github.com/oven-sh/bun/pull/6122\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n- [x] Just a test case\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nRan locally\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 154,
        "deletions": 45,
        "changed_files": 8,
        "created_at": "2023-09-29T22:05:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 102,
        "deletions": 16,
        "changed_files": 4,
        "created_at": "2023-09-29T21:24:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nIn this PR:\r\n- `os.cpus()` gets static CPU frequency from `/proc/cpuinfo` as a fallback if dynamic CPU frequency from `/sys/devices/system/cpu/cpu{}/cpufreq/scaling_cur_freq` is not available, which is a common scenario in VM or container. The static CPU frequency is compatible with Node.js.\r\n- `os.availableParallelism()` now recognize CPU affinity mask got from `sched_getaffinity()` and cgroup v2 CPU quota got from `cpu.max` controller. This is compatible with Node.js and Rust. \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests covered `os.cpus()` and `os.availableParallelism()`. I verified the features added in this PR by manual testing. Because testing this PR involves system-wide or process-wide setting, it is difficult to write automatic test. If you have a solution please tell me :)\r\n\r\nJavaScript/TypeScript modules or builtins changed:\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\nZig files changed:\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [x] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 29,
        "changed_files": 10,
        "created_at": "2023-09-29T20:44:38Z",
        "closed_at": "2023-09-29T23:17:54Z",
        "merged_at": "2023-09-29T23:17:54Z",
        "body": "### What does this PR do?\r\n\r\nMainly handles Unix Socket cases. In node:http, `socket()` should return {} on unix socket. In `server.requestIp` this returns null.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nAdds a test for unix sockets.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 622,
        "deletions": 111,
        "changed_files": 17,
        "created_at": "2023-09-29T10:15:13Z",
        "closed_at": "2023-09-29T23:34:21Z",
        "merged_at": "2023-09-29T23:34:21Z",
        "body": "### What does this PR do?\r\n\r\nDefine a virtual module that can be imported or required \r\n\r\nDefine a plugin:\r\n```js\r\nimport { plugin } from \"bun\";\r\nplugin({\r\n  name: \"i am virtual!\",\r\n  setup(builder) {\r\n    builder.module(\"my-virtual-module-async\", async () => {\r\n      // check\r\n      await Bun.sleep(1);\r\n      return {\r\n        exports: {\r\n          hello: \"world\",\r\n        },\r\n        loader: \"object\",\r\n      };\r\n    });\r\n\r\n    builder.module(\"my-virtual-module-sync\", () => {\r\n      return {\r\n        exports: {\r\n          hello: \"world\",\r\n        },\r\n        loader: \"object\",\r\n      };\r\n    });\r\n  },\r\n});\r\n```\r\n\r\nExample usage:\r\n```ts\r\n  it(\"modules are overridable\", async () => {\r\n    // @ts-expect-error\r\n    let { hello, there } = await import(\"my-virtual-module-sync\");\r\n    expect(there).toBeUndefined();\r\n    expect(hello).toBe(\"world\");\r\n\r\n    Bun.plugin({\r\n      setup(builder) {\r\n        builder.module(\"my-virtual-module-sync\", () => ({\r\n          exports: {\r\n            there: true,\r\n          },\r\n          loader: \"object\",\r\n        }));\r\n      },\r\n    });\r\n\r\n    {\r\n      const { there, hello } = require(\"my-virtual-module-sync\");\r\n      expect(there).toBe(true);\r\n      expect(hello).toBeUndefined();\r\n    }\r\n\r\n    Bun.plugin({\r\n      setup(builder) {\r\n        builder.module(\"my-virtual-module-sync\", () => ({\r\n          exports: {\r\n            yo: true,\r\n          },\r\n          loader: \"object\",\r\n        }));\r\n      },\r\n    });\r\n\r\n    {\r\n      // @ts-expect-error\r\n      const { there, hello, yo } = await import(\"my-virtual-module-sync\");\r\n      expect(yo).toBe(true);\r\n      expect(hello).toBeUndefined();\r\n      expect(there).toBeUndefined();\r\n    }\r\n  });\r\n```\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 553,
        "deletions": 47,
        "changed_files": 20,
        "created_at": "2023-09-29T09:24:03Z",
        "closed_at": "2023-09-29T10:39:26Z",
        "merged_at": "2023-09-29T10:39:26Z",
        "body": "### What does this PR do?\r\n\r\nImplements `server.requestIp`; Fixes #3540\r\n\r\nSupersedes #4559, thank you Parzival for getting the initial work, mainly around actually getting to the IP address. I added port support, trying to optimize the # of calls, as well as implement a lightweight object for JS.\r\n\r\nThis also makes `node:http` socket.address/remoteAddress/remotePort/remoteFamily work\r\n\r\nDoes not fix #4660 but this probably lays out most of the work for it to work.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNew tests.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 48,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-29T06:07:40Z",
        "closed_at": "2023-09-29T07:03:59Z",
        "merged_at": "2023-09-29T07:03:59Z",
        "body": "### What does this PR do?\r\nFixes #6053\r\n\r\n### How did you verify your code works?\r\n\r\nUpdated test",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-29T05:42:00Z",
        "closed_at": "2023-10-02T22:18:29Z",
        "merged_at": "2023-10-02T22:18:29Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-29T02:53:10Z",
        "closed_at": "2023-09-29T06:20:26Z",
        "merged_at": "2023-09-29T06:20:26Z",
        "body": "### What does this PR do?\r\n\r\nWe are reporting an older version of Node v18 that some packages are specifically checking and throwing errors on as being outdated. This upgrades the reported version to latest.\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-09-28T23:37:24Z",
        "closed_at": "2023-09-29T23:13:50Z",
        "merged_at": "2023-09-29T23:13:50Z",
        "body": "In the case of creating a Request with the parameters `(Request, object)`, there was a bug that method and headers are set from the default created by the init rather then the already present value from the request param. This is because for a to me unknown reason the order in which the parameters are processed is reversed.\r\n\r\nThis fixes that by adding a check which stops the defaults from being set, unless they are explicitly passed, but only in this specific case.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6144\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-28T23:05:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 272,
        "deletions": 241,
        "changed_files": 11,
        "created_at": "2023-09-28T20:56:10Z",
        "closed_at": "2023-10-16T22:57:17Z",
        "merged_at": "2023-10-16T22:57:17Z",
        "body": "### What does this PR do?\r\n\r\nRestructures `Response`/`Body` a little, moving `Body.Init` under `Response`.  Also adds `statusText` handling to `Response.Init` (which fixes the linked bug).  This had a few other knock-on effects, like moving `@\"200\"`/`@\"404\"` out of `Body` (again to `Response`.)\r\n\r\nfixes #5753\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote a some tests to handle various cases.\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-28T19:36:09Z",
        "closed_at": "2023-09-28T19:52:00Z",
        "merged_at": "2023-09-28T19:52:00Z",
        "body": "### What does this PR do?\r\n\r\nFix my other PR \ud83d\ude05\r\nThe link wasn't the right one, my bad, now is right \ud83e\udd72 So sorry, I owe you a coffee if you are in Amsterdam one day!\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 25,
        "changed_files": 5,
        "created_at": "2023-09-28T10:33:27Z",
        "closed_at": "2023-09-29T02:06:04Z",
        "merged_at": "2023-09-29T02:06:04Z",
        "body": "### What does this PR do?\r\n\r\nWe were not reporting the `RequestContext`'s memory allocation to the GC, which led small incoming HTTP requests to use more memory than necessary.\r\n\r\nElysia:\r\n|After|Before|\r\n|----|--------|\r\n|<img width=\"221\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/3de5f94b-8ca1-47ef-8d51-fe71843e6c48\">|<img width=\"239\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/8ee3d0af-a68b-4d56-9855-e1a69fd1b41d\">|\r\n\r\n\r\nFastify:\r\n\r\n|After|Before|\r\n|-----|-----|\r\n|<img width=\"282\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/b74ea14f-bbdb-46f0-8645-5b61e17a590d\"> |  <img width=\"337\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/4e21a212-029b-4e34-b04d-fb09c6179b82\"> |\r\n\r\n\r\nExpress:\r\n\r\n|After|Before|\r\n|-----|-------|\r\n|<img width=\"326\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/7aa30bad-c2fa-4521-9eef-2f225aa1ea19\">|<img width=\"335\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/b84581ae-86af-4866-81c6-c6a6e5f4aeae\">|\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 58,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-09-28T05:11:22Z",
        "closed_at": "2023-09-28T06:37:53Z",
        "merged_at": "2023-09-28T06:37:53Z",
        "body": "### What does this PR do?\r\nfixes #6088\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-28T05:04:19Z",
        "closed_at": "2023-09-28T16:40:15Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis adds support for OpenBSD, as of OpenBSD-current, both LLVM and zig got updated which meets bun requirements, not sure about zig tho. It's work in progress and list of tasks will be updated as progress goes on\r\n\r\nTodo:\r\n- [ ] Compile bun dependencies\r\n\r\nOfftopic todo:\r\n- [ ] Revert branding to the original\r\n---\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nOnce bun compiles, I'll run `bun test` and check if results and behaviour is identical for both OpenBSD and Linux\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-28T02:14:18Z",
        "closed_at": "2023-10-16T22:24:56Z",
        "merged_at": "2023-10-16T22:24:56Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis adds type parameter to expect, so Expect structure could infer input type parameter and warn user if he tries for example compare string and number.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-28T00:58:38Z",
        "closed_at": "2023-09-28T06:26:00Z",
        "merged_at": null,
        "body": "\r\n\r\n### What does this PR do?\r\nUpdates the NextJS app creation example to use \"bunx create-next-app\" as the existing \"bun create next-app\" does not work.\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-27T23:58:03Z",
        "closed_at": "2023-09-28T02:23:29Z",
        "merged_at": "2023-09-28T02:23:29Z",
        "body": "### What does this PR do?\r\nthis reverts part of #4630. #5679 is the correct fix\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 80,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-27T23:49:38Z",
        "closed_at": "2023-09-28T02:22:50Z",
        "merged_at": "2023-09-28T02:22:50Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n- fix(bun install): Handle vercel and github tarball path dependencies\r\n\r\nFollows a similar approach (in this context) of [checking if a dependency is a tarball before checking github](https://github.com/pnpm/pnpm/blob/main/resolving/default-resolver/src/index.ts#L30-L35), and [filtering out repositories based on number of parts](https://github.com/pnpm/pnpm/blob/main/resolving/tarball-resolver/src/index.ts#L10)\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-27T23:35:36Z",
        "closed_at": "2023-09-28T00:41:06Z",
        "merged_at": "2023-09-28T00:41:06Z",
        "body": "`llvm` and `clang` are both at v16\r\n\r\n`llvm16` and `clang16` are AUR packages https://aur.archlinux.org/packages/llvm16 https://aur.archlinux.org/packages/clang16 and need extra steps to setup\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-27T22:03:25Z",
        "closed_at": "2023-09-29T02:07:52Z",
        "merged_at": "2023-09-29T02:07:52Z",
        "body": "\u2026all it, test for local tarball\r\n\r\n### What does this PR do?\r\n- Check if dependency is a tarball before check if it is an npm package\r\n- Alloc `url` to avoid losing tiny string when task is read.\r\n\r\nRelated to: https://github.com/oven-sh/bun/issues/5812\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-27T20:53:10Z",
        "closed_at": "2023-09-27T23:43:41Z",
        "merged_at": null,
        "body": "package.json dependency entries like:\r\n\r\n```\r\n\"when\": \"https://github.com/cujojs/when/tarball/1.0.2\"\r\n```\r\n\r\nand\r\n\r\n```\r\n\"@vercel/turbopack-ecmascript-runtime\": \"https://gitpkg-fork.vercel.sh/vercel/turbo/crates/turbopack-ecmascript-runtime/js?turbopack-230922.2\"\r\n```\r\n\r\nare both links to tarballs. In the github case, this is a URL pattern, and in the vercel case, this seems to be everything served from their server.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-27T10:10:03Z",
        "closed_at": "2023-09-27T16:49:34Z",
        "merged_at": "2023-09-27T16:49:34Z",
        "body": "### What does this PR do?\r\n\r\nIn the [previous attempt to resolve this](https://github.com/oven-sh/bun/pull/6090), I mistakenly missed a `/` for the destination and did not properly test `bunx` actually ran.\r\n\r\nThis was resolved, but [doubled the size again](https://github.com/oven-sh/bun/issues/5269#issuecomment-1736887598) as Docker is resolving the symlink when copying \ud83d\ude1e \r\n\r\nI [remembered a technique I proposed for `testssl.sh`](https://github.com/drwetter/testssl.sh/pull/2344/commits/1392987f01b748021cda4e98cbaf8e151c2f9a32#diff-dd2c0eb6ea5cfc6c4bd4eac30934e2d5746747af48fef6da689e85b752f39557R69-R84) when revising their `Dockerfile`. Even though it was only required for building the images, the [maintainer decision was the features used were too new](https://github.com/drwetter/testssl.sh/issues/2299#issuecomment-1479094496):\r\n- `RUN --mount` requires a [Docker Engine release from 2022H2 (with BuildKit)](https://github.com/drwetter/testssl.sh/issues/2299#issuecomment-1479136828).\r\n- HereDoc (_[introduced support in 2021H2](https://github.com/drwetter/testssl.sh/issues/2299#issuecomment-1478863039)_).\r\n\r\n---\r\n\r\nUsing [`RUN --mount`](https://docs.docker.com/engine/reference/builder/#run---mounttypebind), we can run the command with the build stage files overlayed for the `ln` and `which` commands.\r\n\r\n**NOTE:** The mounted `/bin` is a symlink to `/usr/bin`, both seem required to work correctly.\r\n\r\n### How did you verify your code works?\r\n\r\nRuns with the [same output now as the `bun x` command](https://github.com/oven-sh/bun/issues/5269#issuecomment-1736916694):\r\n\r\n```console\r\n$ docker buildx build -t bun-small .\r\n\r\n$ docker run --rm -it --entrypoint /usr/local/bin/bunx bun-small eslint --version\r\nerror: Failed to run \"eslint\" due to error FileNotFound\r\n```\r\n\r\nBut is still smaller:\r\n```console\r\n$ docker images\r\nREPOSITORY   TAG          IMAGE ID       CREATED         SIZE\r\nbun-small    latest       387d3d1f0c9f   3 minutes ago   110MB\r\noven/bun     distroless   f649763a2ca5   5 hours ago     205MB\r\n\r\n$ docker save bun-small | gzip -c | wc -c | numfmt --to iec\r\n40M\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-27T09:52:48Z",
        "closed_at": "2023-09-28T00:44:39Z",
        "merged_at": "2023-09-28T00:44:39Z",
        "body": "Changed the verb form from ignores to ignored.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 61,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-09-27T08:05:03Z",
        "closed_at": "2023-09-27T10:40:46Z",
        "merged_at": "2023-09-27T10:40:46Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nRemove the first `err` parameter in `fs.exists` callback. Close: #6073\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1284,
        "deletions": 394,
        "changed_files": 61,
        "created_at": "2023-09-27T04:59:53Z",
        "closed_at": "2023-09-28T10:53:25Z",
        "merged_at": "2023-09-28T10:53:25Z",
        "body": "### What does this PR do?\r\n\r\nalso does asyncLocalStorage.bind also does tty fixes for inquirer also adds an assert that will fail when using next.js but its only a dev one\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nbecause i said so",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 411,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-27T02:08:10Z",
        "closed_at": "2023-09-27T04:53:14Z",
        "merged_at": "2023-09-27T04:53:14Z",
        "body": "### What does this PR do?\r\nfixes #5926 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded a test and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-09-27T01:21:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nStops Bun from [changing direct `eval` calls to indirect `(0, eval)` calls](https://github.com/oven-sh/bun/issues/2875), eliminating the differing behavior between what is written and what gets run.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests.\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-27T00:01:35Z",
        "closed_at": "2023-09-27T00:06:45Z",
        "merged_at": "2023-09-27T00:06:44Z",
        "body": "### What does this PR do?\r\n\r\nSeems [my suggestion](https://github.com/oven-sh/bun/issues/5269#issuecomment-1724856820) was missed. Keeps consistent with other images by including `bunx` symlink.\r\n\r\nI saw the merged PR and [commented about making this change](https://github.com/oven-sh/bun/pull/5771/files#r1337887524). I figured I might as well raise a PR for it while I'm at it \ud83d\ude05 \r\n\r\n### How did you verify your code works?\r\n\r\nComparision:\r\n\r\n```console\r\n# Resolved with single COPY, symlink works:\r\n$ docker save local-bun-build | gzip -c | wc -c | numfmt --to iec\r\n40M\r\n\r\n# The duplicate issue that previously existed:\r\n$ docker save oven/bun | gzip -c | wc -c | numfmt --to iec\r\n97M\r\n\r\n# Resolved vs original image size:\r\n$ docker images\r\nREPOSITORY                  TAG                IMAGE ID       CREATED          SIZE\r\nlocal-bun-build             latest             020acf83835e   7 minutes ago    110MB\r\noven/bun                    latest             647ebb4444b7   3 days ago       271MB\r\n```\r\n\r\nFull information: https://github.com/oven-sh/bun/issues/5269#issuecomment-1724856820",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 131,
        "deletions": 32,
        "changed_files": 6,
        "created_at": "2023-09-26T20:59:34Z",
        "closed_at": "2023-09-27T02:31:20Z",
        "merged_at": "2023-09-27T02:31:20Z",
        "body": "\u2026gth or chunked encoding, fix case when stream do not return a promise on pull\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests + Existing Tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-26T15:53:17Z",
        "closed_at": "2023-09-26T23:13:27Z",
        "merged_at": "2023-09-26T23:13:27Z",
        "body": "I just fixed a small typo error",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 71,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-09-26T14:54:33Z",
        "closed_at": "2023-10-03T17:28:59Z",
        "merged_at": "2023-10-03T17:28:59Z",
        "body": "### What does this PR do?\r\n\r\nSorry for the delay, after support ignoreBOM in TextDecoder, decoder default behavior is remove BOM, so in the test, we should set to true, to pass the test with BOM.\r\n\r\nI have rerun all test releated to TextDecoder, but for the stability, I think we should wait the CI to finish all test before merge.\r\n\r\nSupport BOM detection and `TextDecoder.ignoreBOM`.\r\n\r\nReleated PR/Commit:\r\n- https://github.com/oven-sh/bun/pull/5550\r\n- [Revert \"feat(encoding): support BOM detection (https://github.com/oven-sh/bun/pull/5550)\"](https://github.com/oven-sh/bun/commit/abfc10afeb73f9447e47929359d37f2b488c3c81)\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] Add test",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-09-26T12:20:17Z",
        "closed_at": "2023-09-26T23:14:00Z",
        "merged_at": "2023-09-26T23:14:00Z",
        "body": "### What does this PR do?\r\n\r\nUpdate Astro documentation to showcase the new version results.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\nPS: I love trying Bun so far \ud83d\udc83\ud83c\udffb",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 169,
        "deletions": 4,
        "changed_files": 9,
        "created_at": "2023-09-26T05:44:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis adds a new `url` property on `server` which returns a URL object.  That way, the URL object can be passed around instead of the individual fields `server.hostname` and `server.port`.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\nIf JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n If Zig files changed: **(TODO)**\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n\r\n If \\*.classes.ts files were added or changed:\r\n\r\n- [x] I ran `make codegen` to regenerate the C++ and Zig code\r\n\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-26T05:29:45Z",
        "closed_at": "2023-09-26T06:27:55Z",
        "merged_at": "2023-09-26T06:27:55Z",
        "body": "### What does this PR do?\r\nfixes #6062 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-09-26T00:20:25Z",
        "closed_at": "2023-09-27T02:47:37Z",
        "merged_at": "2023-09-27T02:47:37Z",
        "body": "`console.dir` can be passed a second argument which is a object of options. This implements that logic with the currently supported properties: `depth` and `colors`.\r\nI used node as a reference for implementation details.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6039\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-25T17:46:55Z",
        "closed_at": "2023-09-26T08:23:12Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis PR sets up the basic structure for the `Elysia` application and configures logging using the `winston` library. Specifically:\r\n\r\n- Initializes the `Elysia` application and sets up a basic route.\r\n- Listens on a port specified by an environment variable or defaults to `3000`.\r\n- Configures two loggers: a general `logger` and an `errorLogger` for handling errors.\r\n- Logs the application start message and any potential errors during the server startup.\r\n\r\n- [ ] Documentation or TypeScript types\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThe application was started locally to ensure that the `Elysia` server initializes correctly and responds to the root route. Additionally, the log messages were verified in the console to ensure that the `winston` loggers are functioning as expected.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed: -->\r\n\r\n- [x] I ran `make js` and committed the transpiled changes (assuming this step is relevant to the project setup).\r\n- [x] I, or my editor, ran Prettier on the changed files to ensure code consistency.\r\n- [ ] I included tests for the new code, or an existing test covers it (assuming tests are part of the project setup).\r\n\r\n<!-- The other sections can be left as they are if they're not relevant to the changes made in this PR. -->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 18,
        "changed_files": 3,
        "created_at": "2023-09-25T15:11:47Z",
        "closed_at": "2023-10-03T18:49:25Z",
        "merged_at": "2023-10-03T18:49:25Z",
        "body": "### What does this PR do?\r\nFix the `bunx` command when a github repo is passed as an argument. There is a bug where the package name is parsed as an `UpdateRequest` that leaves the name of the package empty and fails when trying to concatenate `name + @ + version`\r\nIn bunx_command name and version are checked and if they are equal set the name as the package name, and format it without `@`. Also this fmt package is used to build the path where is installed.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/5974\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-25T11:53:19Z",
        "closed_at": "2023-09-25T23:09:37Z",
        "merged_at": "2023-09-25T23:09:37Z",
        "body": "### What does this PR do?\r\n\r\nWe were not always draining microtasks when an HTTP request was aborted\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-25T10:38:41Z",
        "closed_at": "2023-09-25T23:07:34Z",
        "merged_at": "2023-09-25T23:07:34Z",
        "body": "Thanks to @karlcow https://github.com/WebKit/WebKit/pull/13802\r\n\r\n### What does this PR do?\r\n\r\nImprove error message for `new URL(invalid)`\r\n\r\n### How did you verify your code works?\r\n\r\nTest",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-25T09:10:51Z",
        "closed_at": "2023-09-25T17:55:55Z",
        "merged_at": "2023-09-25T17:55:55Z",
        "body": "### What does this PR do?\r\nIn title\r\n\r\nTested via script\r\n```js\r\nimport * as fs from 'fs'\r\n\r\n// Object.keys(fs) in node\r\nconst targetProperties = [\r\n  \"appendFile\",\r\n  \"appendFileSync\",\r\n  \"access\",\r\n  \"accessSync\",\r\n  \"chown\",\r\n  \"chownSync\",\r\n  \"chmod\",\r\n  \"chmodSync\",\r\n  \"close\",\r\n  \"closeSync\",\r\n  \"copyFile\",\r\n  \"copyFileSync\",\r\n  \"cp\",\r\n  \"cpSync\",\r\n  \"createReadStream\",\r\n  \"createWriteStream\",\r\n  \"exists\",\r\n  \"existsSync\",\r\n  \"fchown\",\r\n  \"fchownSync\",\r\n  \"fchmod\",\r\n  \"fchmodSync\",\r\n  \"fdatasync\",\r\n  \"fdatasyncSync\",\r\n  \"fstat\",\r\n  \"fstatSync\",\r\n  \"fsync\",\r\n  \"fsyncSync\",\r\n  \"ftruncate\",\r\n  \"ftruncateSync\",\r\n  \"futimes\",\r\n  \"futimesSync\",\r\n  \"lchown\",\r\n  \"lchownSync\",\r\n  \"lchmod\",\r\n  \"lchmodSync\",\r\n  \"link\",\r\n  \"linkSync\",\r\n  \"lstat\",\r\n  \"lstatSync\",\r\n  \"lutimes\",\r\n  \"lutimesSync\",\r\n  \"mkdir\",\r\n  \"mkdirSync\",\r\n  \"mkdtemp\",\r\n  \"mkdtempSync\",\r\n  \"open\",\r\n  \"openSync\",\r\n  \"openAsBlob\",\r\n  \"readdir\",\r\n  \"readdirSync\",\r\n  \"read\",\r\n  \"readSync\",\r\n  \"readv\",\r\n  \"readvSync\",\r\n  \"readFile\",\r\n  \"readFileSync\",\r\n  \"readlink\",\r\n  \"readlinkSync\",\r\n  \"realpath\",\r\n  \"realpathSync\",\r\n  \"rename\",\r\n  \"renameSync\",\r\n  \"rm\",\r\n  \"rmSync\",\r\n  \"rmdir\",\r\n  \"rmdirSync\",\r\n  \"stat\",\r\n  \"statfs\",\r\n  \"statSync\",\r\n  \"statfsSync\",\r\n  \"symlink\",\r\n  \"symlinkSync\",\r\n  \"truncate\",\r\n  \"truncateSync\",\r\n  \"unwatchFile\",\r\n  \"unlink\",\r\n  \"unlinkSync\",\r\n  \"utimes\",\r\n  \"utimesSync\",\r\n  \"watch\",\r\n  \"watchFile\",\r\n  \"writeFile\",\r\n  \"writeFileSync\",\r\n  \"write\",\r\n  \"writeSync\",\r\n  \"writev\",\r\n  \"writevSync\",\r\n  \"Dirent\",\r\n  \"Stats\",\r\n  \"ReadStream\",\r\n  \"WriteStream\",\r\n  \"FileReadStream\",\r\n  \"FileWriteStream\",\r\n  \"_toUnixTimestamp\",\r\n  \"Dir\",\r\n  \"opendir\",\r\n  \"opendirSync\",\r\n  \"F_OK\",\r\n  \"R_OK\",\r\n  \"W_OK\",\r\n  \"X_OK\",\r\n  \"constants\",\r\n  \"promises\",\r\n  \"default\"\r\n]\r\n\r\n\r\nfor (const property of targetProperties) {\r\n  if (!Object.hasOwn(fs, property)) {\r\n    console.log(`Property not found in bun:fs`, property)\r\n  }\r\n}\r\n```\r\n```\r\nProperty not found in bun:fs fdatasync\r\nProperty not found in bun:fs fdatasyncSync\r\nProperty not found in bun:fs openAsBlob\r\nProperty not found in bun:fs statfs\r\nProperty not found in bun:fs statfsSync\r\nProperty not found in bun:fs FileReadStream\r\nProperty not found in bun:fs FileWriteStream\r\nProperty not found in bun:fs Dir\r\nProperty not found in bun:fs opendir\r\nProperty not found in bun:fs opendirSync\r\nProperty not found in bun:fs F_OK\r\nProperty not found in bun:fs R_OK\r\nProperty not found in bun:fs W_OK\r\nProperty not found in bun:fs X_OK\r\n```\r\n\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1451,
        "deletions": 883,
        "changed_files": 30,
        "created_at": "2023-09-25T09:09:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nIt separates `File` and `Blob`. Not sure if this is a good way to do it, and it is still WIP (Crashes on Startup if a script uses file, but REPL works, but that may be using a stable binary, not sure about how it works yet).\r\n\r\nFixes #4460 and will also later fix #5980.\r\n\r\nI'm still learning Zig, so if this PR is useless and I took a completely wrong approach, please let me now.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nIt's broken right now, but I will add tests once this works.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-25T08:44:57Z",
        "closed_at": "2023-10-01T06:26:22Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nAdds extra command line argument for Lambda bun executable. Allows your to flexibly tune bun when needed. In particular we use it with \"`--smol`\" argument.\r\n\r\n### How did you verify your code works?\r\n\r\nDeployed and tested on AWS Lambda. When Env variable is empty it has no effect on the bootstrap.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-25T07:33:29Z",
        "closed_at": "2023-09-25T12:19:34Z",
        "merged_at": "2023-09-25T12:19:34Z",
        "body": "### What does this PR do?\r\n\r\n\r\n#### repro\r\n\r\nuse the latest dev build to run following code.\r\n\r\n```JavaScript\r\nconst http = require(\"node:http\");\r\n\r\nconst server = http.createServer((req, res) => {});\r\n\r\nserver.listen(3000);\r\n\r\n```\r\n\r\ncoredump stack\r\n\r\n![2023-09-25_16-21](https://github.com/oven-sh/bun/assets/9482395/a7e473fa-be1d-4873-bb2c-7e4ddff66b7c)\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nexisting tests",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-25T06:58:46Z",
        "closed_at": "2023-10-10T23:47:36Z",
        "merged_at": "2023-10-10T23:47:36Z",
        "body": "### What does this PR do?\r\n\r\n\r\nAdds file to the TOC at https://bun.sh/docs/api/binary-data.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-25T06:46:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\nAlso use replaceUnpairedSurrogatesWithReplacementCharacter for DomFormData::set\r\n\r\nPreviously, it was only used in the append function, which would lead to different (unexpected) behaviour between set and append.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNot yet, will test soon.\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-24T21:48:20Z",
        "closed_at": "2023-10-12T14:29:07Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis adds the functionality to print Object's class name if it exists matching Node's functionality. \r\n\r\nAs well as adding adding tests for printing Maps, Sets and ArrayBuffers.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [X] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [X] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-24T18:20:38Z",
        "closed_at": "2023-09-25T12:22:48Z",
        "merged_at": "2023-09-25T12:22:48Z",
        "body": "### What does this PR do?\r\n\r\nfix error when command `bun create <@some-template/template>` is executed, the command is appending a `create-` prefix wrongly.\r\nFor example:\r\n`bun create @quick-start/electron`\r\ntries to create with this template: `@quick-startcreate-/electron`\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/6007\r\n<!-- This adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\nTypescript test of `create` command that check the error case with the correct template.\r\nI couldn't add a test in `bunx_command.zig` because it fails when tries to find \"root\".bun file ([zig issue here](https://github.com/ziglang/zig/issues/17109)). \r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n![image](https://github.com/oven-sh/bun/assets/87334103/abec8aeb-d192-47bb-9763-1c787a2bda9a)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 114,
        "changed_files": 2,
        "created_at": "2023-09-24T10:23:30Z",
        "closed_at": "2023-09-25T01:27:56Z",
        "merged_at": "2023-09-25T01:27:56Z",
        "body": "### What does this PR do?\r\n\r\n`removefileat` errors on write-protected files. We do not want that.\r\n\r\nFixes #5954 \r\n\r\nAlso fixes some test failures in bun-install caused\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 430,
        "deletions": 140,
        "changed_files": 12,
        "created_at": "2023-09-24T09:55:52Z",
        "closed_at": "2023-09-25T00:43:59Z",
        "merged_at": "2023-09-25T00:43:59Z",
        "body": "### What does this PR do?\r\n\r\nThis adds a helper for ensuring that the bytes of an `extern union` are completely zeroed. The previous code panicked in debug builds and the test did not verify that `bun update` made requests to the registry, causing the test to be ineffective.\r\n\r\nThere were two fields that needed to correctly be zero-initialized:\r\n- `Bin.Value`\r\n- `Resolution.Value`\r\n\r\nThis also:\r\n- Makes `bun update` ignore the npm registry manifest cache\r\n- Updates our copy-pasta of `MultiArrayList` to the latest version\r\n- Ensures we zero-initialize `Bin` for the npm registry manifest cache\r\n- Ensures we zero-initialize `Bin.Value` and `Resolution.Value` in other cases\r\n\r\n### How did you verify your code works?\r\n\r\n`bun install --force`",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-24T07:20:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "\u2026there are empty stacks, the absence of a link to the editor, and continuous fetch requests in the browser console. This occurs, for instance, when an error is thrown in the form of 'throw \"test\"'.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nThere were no tests in the location where I made changes.\r\nI tested it under 'packages/bun-error' by running the 'bun build' command.\r\nAdditionally, I tested it by running the `make release-bindings` and `make release` commands.\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-24T06:45:50Z",
        "closed_at": "2023-09-25T23:09:09Z",
        "merged_at": "2023-09-25T23:09:09Z",
        "body": "### What does this PR do?\r\n\r\nFixes https://github.com/ljharb/define-data-property/actions/runs/6165229997/job/17073357298, probably\r\n\r\n### How did you verify your code works?\r\n\r\nThere is a test",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-24T04:24:46Z",
        "closed_at": "2023-09-24T15:49:22Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThe original URL for Vite was pointing at the incorrect website. This PR fixes the link.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI opened the new link from the corrected markdown document, and it opens the correct website.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-24T01:42:02Z",
        "closed_at": "2023-09-24T15:49:57Z",
        "merged_at": "2023-09-24T15:49:57Z",
        "body": "### What does this PR do?\r\n\r\n\r\nAdded linking to `bun init` page in README.md\r\n\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nN/A\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 0,
        "changed_files": 0,
        "created_at": "2023-09-24T00:36:14Z",
        "closed_at": "2023-09-29T16:56:45Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n## This fixes a grammar error (changes ignores to ignored)\r\n\r\n### How did you verify your code works?\r\n\r\n## Not applicable\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 7,
        "changed_files": 5,
        "created_at": "2023-09-24T00:26:04Z",
        "closed_at": "2023-09-24T10:16:51Z",
        "merged_at": "2023-09-24T10:16:51Z",
        "body": "### What does this PR do?\r\n\r\n- `JSValue.true` was not actually true. Fortunately, we weren't using it anywhere.\r\n- We forgot to return .true in `confirm`\r\n\r\nFixes #5985\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 36,
        "deletions": 30,
        "changed_files": 5,
        "created_at": "2023-09-23T17:00:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-23T13:40:07Z",
        "closed_at": "2023-09-23T16:56:03Z",
        "merged_at": "2023-09-23T16:56:03Z",
        "body": "Adding notes for users that currently use canary version and want to  switch back to stable version.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-23T13:17:09Z",
        "closed_at": "2023-09-24T15:50:18Z",
        "merged_at": "2023-09-24T15:50:18Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-23T12:36:42Z",
        "closed_at": "2023-09-23T16:56:37Z",
        "merged_at": "2023-09-23T16:56:37Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-23T11:21:18Z",
        "closed_at": "2023-09-24T15:49:15Z",
        "merged_at": "2023-09-24T15:49:15Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-09-23T10:54:25Z",
        "closed_at": "2023-09-24T03:09:45Z",
        "merged_at": "2023-09-24T03:09:45Z",
        "body": "### What does this PR do?\r\n\r\n\r\nClose: #5888\r\n\r\nWhen serializing to `bun.lockb`, we directly use `std.mem.sliceAsBytes` to write the memory of the struct.\r\n\r\nhttps://github.com/oven-sh/bun/blob/ec0e931e9f7934f4f1f7617eac2a880d13794d0c/src/install/lockfile.zig#L3757-L3762\r\n\r\nIn the `Bin` struct, the `value` field is `union` type, and its size depends on the largest member. If we initialize it with `.{.none = {}}`, there will be some uninitialized memory. This can lead to the `bun.lockb` file being different with each `bun update`(no packages updated).\r\n\r\nhttps://github.com/oven-sh/bun/blob/ec0e931e9f7934f4f1f7617eac2a880d13794d0c/src/install/bin.zig#L19-L23\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/ec0e931e9f7934f4f1f7617eac2a880d13794d0c/src/install/bin.zig#L102-L135\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 19,
        "changed_files": 2,
        "created_at": "2023-09-23T04:23:12Z",
        "closed_at": "2023-09-24T10:17:20Z",
        "merged_at": "2023-09-24T10:17:20Z",
        "body": "### What does this PR do?\r\n\r\nc-ares is more well-tested in production so we should opt for using it for these sorts of things\r\n\r\n### How did you verify your code works?\r\n\r\nexisting tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-09-23T02:26:52Z",
        "closed_at": "2023-10-16T23:08:58Z",
        "merged_at": "2023-10-16T23:08:58Z",
        "body": "### What does this PR do?\r\n\r\nI Fixed the bugs in the issue #5872\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 27,
        "changed_files": 4,
        "created_at": "2023-09-23T02:20:40Z",
        "closed_at": "2023-09-29T22:42:06Z",
        "merged_at": "2023-09-29T22:42:06Z",
        "body": "i did not run tests locally because of the jsc debug branch. should be fine if ci tests pass",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-09-23T02:14:12Z",
        "closed_at": "2023-09-23T02:48:36Z",
        "merged_at": "2023-09-23T02:48:36Z",
        "body": "### What does this PR do?\r\nfixes #5741 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test and tested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-09-23T00:24:44Z",
        "closed_at": "2023-09-23T01:41:56Z",
        "merged_at": "2023-09-23T01:41:56Z",
        "body": "### What does this PR do?\r\nfixes #4686 \r\nfixes #5915 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 9342,
        "deletions": 67,
        "changed_files": 106,
        "created_at": "2023-09-23T00:04:58Z",
        "closed_at": "2023-10-07T22:22:46Z",
        "merged_at": "2023-10-07T22:22:46Z",
        "body": "### What does this PR do?\r\nAdd KeyObject and related methods\r\n\r\nFix https://github.com/oven-sh/bun/issues/2036 \r\nFix https://github.com/oven-sh/bun/issues/1454 \r\nFix https://github.com/oven-sh/bun/issues/5036 \r\nFix https://github.com/oven-sh/bun/issues/4983 \r\nFix https://github.com/oven-sh/bun/issues/4692 \r\nFix https://github.com/oven-sh/bun/issues/2730\r\n\r\nMaybe Related with #3950 #4596 #5122\r\n\r\n- [x] [KeyObject.from(key)](https://nodejs.org/api/crypto.html#static-method-keyobjectfromkey)\r\n- [x] [keyObject.asymmetricKeyDetails](https://nodejs.org/api/crypto.html#keyobjectasymmetrickeydetails)\r\n- [x] [keyObject.asymmetricKeyType](https://nodejs.org/api/crypto.html#keyobjectasymmetrickeytype)\r\n- [x] [keyObject.equals(otherKeyObject)](https://nodejs.org/api/crypto.html#keyobjectequalsotherkeyobject)\r\n- [x] [keyObject.symmetricKeySize](https://nodejs.org/api/crypto.html#keyobjectsymmetrickeysize)\r\n- [x] [keyObject.type](https://nodejs.org/api/crypto.html#keyobjecttype)\r\n- [x] [keyObject.export([options])](https://nodejs.org/api/crypto.html#keyobjectexportoptions)\r\n- [x] [crypto.createSecretKey()](https://nodejs.org/api/crypto.html#cryptocreatesecretkeykey-encoding)\r\n- [x] [crypto.createPublicKey()](https://nodejs.org/api/crypto.html#cryptocreatepublickeykey)\r\n- [x] [crypto.createPrivateKey()](https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey)\r\n- [x] [crypto.generateKeyPairSync(type, options)](https://nodejs.org/api/crypto.html#cryptogeneratekeypairsynctype-options)\r\n- [x] [crypto.generateKeySync(type, options)](https://nodejs.org/api/crypto.html#cryptogeneratekeysynctype-options)\r\n- [x] [crypto.generateKeyPair(type, options, callback)](https://nodejs.org/api/crypto.html#cryptogeneratekeypairtype-options)\r\n- [x] [crypto.generateKey(type, options, callback)](https://nodejs.org/api/crypto.html#cryptogeneratekeytype-options)\r\n- [x] [crypto.sign(algorithm, data, key[, callback])](https://nodejs.org/api/crypto.html#cryptosignalgorithm-data-key-callback)\r\n- [x] [crypto.verify(algorithm, data, key, signature[, callback])](https://nodejs.org/api/crypto.html#cryptoverifyalgorithm-data-key-signature-callback)\r\n- [x] Tests\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 330,
        "deletions": 329,
        "changed_files": 1,
        "created_at": "2023-09-23T00:02:33Z",
        "closed_at": "2023-09-23T01:41:05Z",
        "merged_at": "2023-09-23T01:41:05Z",
        "body": "Built & tested locally\r\n\r\n```\r\nbun-debug create xixixao/convex-nextjs-template\r\n```\r\n\r\nI left things commented in case there are elements of this we need for other reasons",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-23T00:01:59Z",
        "closed_at": "2023-09-23T01:42:57Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nRemoves versions from arch dependencies as they are not needed. Below are the two packages in Arch x86_64 repository which are named without the versions:\r\n\r\nClang: https://archlinux.org/packages/?name=clang\r\nLLVM: https://archlinux.org/packages/?name=llvm\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nVerified the install command on my arch machine.\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 179,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2023-09-22T22:36:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nAdds new package `bun-crash-dump` for helping getting proper crashdumps from users by `bunx`-ing this package.\r\n\r\nNotes:\r\n* Does not work on canary builds of Bun because those don't have `-profile` builds produced.\r\n* It can be a problem if Bun segfaults trying to run this script itself, so I tried to make it Node-compatible but somehow node corrupted bun's downloaded zip file\r\n* Needs be set up to publish to npm like the other npm-published packages",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 107,
        "deletions": 46,
        "changed_files": 7,
        "created_at": "2023-09-22T22:03:11Z",
        "closed_at": "2023-09-28T02:26:04Z",
        "merged_at": "2023-09-28T02:26:04Z",
        "body": "### What does this PR do?\r\n\r\nAdds a new option for `Bun.Transpiler`, called `deadCodeElimination`, which allows disabling of dead code elimination, which in turn enables proper use of Bun.Transpiler for transpilation of code meant to be top-level evaluated which would otherwise be voided by false-positive DCE due to lack of context to the transpiler. (examples: code passed to `eval()` or in a REPL)\r\n\r\nThe option is a boolean and is enabled by default for backwards compatibility given the transpiler has been doing DCE by default so far.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 54,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-22T20:35:58Z",
        "closed_at": "2023-10-11T21:22:43Z",
        "merged_at": "2023-10-11T21:22:43Z",
        "body": "\u2026issue #4734\r\n\r\nAdded instructions to set bun as pm2 interpreter to extend same functionality as node.js apps.\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-22T16:50:49Z",
        "closed_at": "2023-09-29T05:13:52Z",
        "merged_at": "2023-09-29T05:13:52Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nChanging the order of bare import. It should be `hello.tsx` > `hello.jsx` > `hello.ts` > `hello.mjs` > `hello.js` > `hello.cjs` > `hello.json` > `hello/index.tsx` > `hello/index.jsx` > `hello/index.ts` > `hello/index.mjs` > `hello/index.js` > `hello/index.cjs` > `hello/index.json`\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI have tested this on Replit. People can feeling the order by moving files into temp folder. Here's the link\ud83d\udc47\r\nhttps://replit.com/join/udtmgcymlc-devinjohw\r\n\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-22T09:46:20Z",
        "closed_at": "2023-09-23T01:40:06Z",
        "merged_at": "2023-09-23T01:40:06Z",
        "body": "### What does this PR do?\r\n\r\nClose: #5898\r\n\r\n#5233 does not filter them in `has`, which causes that `\"bufferutil\" in require.cache` returns `true`.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests \r\n\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-22T08:53:37Z",
        "closed_at": "2023-09-23T01:40:38Z",
        "merged_at": "2023-09-23T01:40:38Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nChecked the link and the channel name\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 11,
        "changed_files": 5,
        "created_at": "2023-09-22T03:53:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis adds an assert for impure NaN when passed to `DOUBLE_TO_JSVALUE`\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI did not check",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-22T03:49:38Z",
        "closed_at": "2023-09-22T04:02:35Z",
        "merged_at": "2023-09-22T04:02:35Z",
        "body": "### What does this PR do?\r\nfix #5865 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7020,
        "deletions": 6952,
        "changed_files": 16,
        "created_at": "2023-09-22T03:30:47Z",
        "closed_at": "2023-09-22T05:09:56Z",
        "merged_at": "2023-09-22T05:09:55Z",
        "body": "### What does this PR do?\r\n\r\nImplements `module.parent`.\r\n\r\nCloses #5808\r\nCloses #4955\r\nCloses #4818\r\nCloses #3852\r\nCloses #3154\r\n\r\nyippee",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-22T02:19:43Z",
        "closed_at": "2023-09-22T14:37:00Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThe changes fix a bug where `dlopen` is not working in `bun:ffi`. Without these changes, attempts to use the function will result in an undefined error, and no real errors can propagate.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x]  I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-22T02:07:15Z",
        "closed_at": "2023-09-22T02:08:57Z",
        "merged_at": "2023-09-22T02:08:57Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-22T01:34:15Z",
        "closed_at": "2023-09-22T03:02:51Z",
        "merged_at": "2023-09-22T03:02:51Z",
        "body": "### What does this PR do?\r\nfixes #5811 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-09-22T01:32:11Z",
        "closed_at": "2023-09-22T03:07:26Z",
        "merged_at": "2023-09-22T03:07:25Z",
        "body": "Disables `[0.05ms] \".env\"` messages when logLevel is info",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1830,
        "deletions": 1446,
        "changed_files": 116,
        "created_at": "2023-09-22T01:13:01Z",
        "closed_at": "2023-10-17T04:22:43Z",
        "merged_at": "2023-10-17T04:22:43Z",
        "body": "This PR has been working to getting bun-debug working with JSC debug assertions. instead of fully shipping that, this simply is just some of the important fixes i've found in this project. The final version of this project will involve a handful of changes to CI, Build, and CI+Publishing for oven-sh/webkit in order to make it so JSC debug is the default for the dev environment.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6626,
        "deletions": 6524,
        "changed_files": 8,
        "created_at": "2023-09-21T22:58:49Z",
        "closed_at": "2023-09-22T01:44:06Z",
        "merged_at": "2023-09-22T01:44:06Z",
        "body": "### What does this PR do?\r\n\r\nExpress relies on this for setting the requests protocol.\r\nSince this is on a dummy object, a property is simply set with the actual value.\r\nWhich seams okay as a workaround.\r\n\r\nFixes: https://github.com/oven-sh/bun/issues/5867\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-21T21:00:36Z",
        "closed_at": "2023-09-22T01:42:49Z",
        "merged_at": "2023-09-22T01:42:49Z",
        "body": "### What does this PR do?\r\n\r\nfixes passing the options to copyFile\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-21T20:58:48Z",
        "closed_at": "2023-09-22T01:44:59Z",
        "merged_at": "2023-09-22T01:44:59Z",
        "body": "### What does this PR do?\r\n\r\nUsing `.envrc` files allows [automatically loading](https://direnv.net/) custom env vars during development.\r\nThis file might contain tokens, keys or any other developer-workflow-specific config that we don't want to push to the repo.\r\n\r\nThis PR adds .envrc to .gitignore",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 49,
        "deletions": 8,
        "changed_files": 5,
        "created_at": "2023-09-21T14:47:57Z",
        "closed_at": "2023-09-22T01:59:01Z",
        "merged_at": "2023-09-22T01:59:01Z",
        "body": "### What does this PR do?\r\n\r\nFix crash in rmdir in certain cases\r\n\r\n### How did you verify your code works?\r\n\r\nAdded a stress test",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 19,
        "changed_files": 5,
        "created_at": "2023-09-21T14:23:17Z",
        "closed_at": "2023-09-21T14:56:45Z",
        "merged_at": "2023-09-21T14:56:45Z",
        "body": "### What does this PR do?\r\n\r\nFix test failures\r\n\r\nalso fixes #5851 \r\n\r\n### How did you verify your code works?\r\n\r\nRan the tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 59,
        "changed_files": 8,
        "created_at": "2023-09-21T07:47:41Z",
        "closed_at": "2023-09-21T14:25:19Z",
        "merged_at": "2023-09-21T14:25:19Z",
        "body": "### What does this PR do?\r\n\r\nThis implements `process.constrainedMemory` and sets `Options::forceRAMSize` on Linux to read from the cgroups-imposed memory limit instead of the system memory limit. I'm expecting this to improve runtime memory usage in containers. \r\n\r\n### How did you verify your code works?\r\n\r\nThe code for getting the constrained memory is copied from libuv (including the license in the top of the file) \r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 17,
        "changed_files": 4,
        "created_at": "2023-09-21T01:48:18Z",
        "closed_at": "2023-09-22T03:37:32Z",
        "merged_at": "2023-09-22T03:37:32Z",
        "body": "### What does this PR do?\r\n\r\nthese are bad workarounds that should be temporary\r\n\r\nexecArgv is disabled because we dont support any flags. casuses nuxt to run the command\r\n\r\n`$ bun --enable-source-map their_script.mjs ...`\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-21T00:19:51Z",
        "closed_at": "2023-09-21T01:28:08Z",
        "merged_at": "2023-09-21T01:28:08Z",
        "body": "### What does this PR do?\r\n\r\nnonenumerable secret api that older verisons of consola depends on; which breaks some libraries. does not close but related to #3771 and nuxt 2.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-09-20T23:56:56Z",
        "closed_at": "2023-09-21T01:31:57Z",
        "merged_at": "2023-09-21T01:31:57Z",
        "body": "### What does this PR do?\r\n\r\nImplements `new (require('module').Module)(string)._compile(string, string)`. This allows running synthetic CommonJS modules.\r\n\r\nCloses #4590\r\n\r\n### How did you verify your code works?\r\n\r\nadded a test case and run jsonpath successfully now\r\n\r\n<img width=\"1030\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/24465214/a2c9ed0c-c2db-489f-94e0-1c815c1726b3\">\r\n\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-20T23:38:44Z",
        "closed_at": "2023-09-21T06:42:45Z",
        "merged_at": "2023-09-21T06:42:45Z",
        "body": "\r\n### What does this PR do?\r\n\r\nChanges the default depth to match Node. [Source in Node](https://github.com/nodejs/node/blob/480ab8c3a40451d5ea459dd35b4039679b26e195/doc/api/console.md?plain=1#L285)\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-09-20T23:33:38Z",
        "closed_at": "2023-09-21T00:43:08Z",
        "merged_at": "2023-09-21T00:43:08Z",
        "body": "Per https://discord.com/channels/876711213126520882/1153238257853800468/1153238257853800468",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 22,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-20T21:28:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nReduce memory usage running sync GC after dynamic threshold\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nManually tested\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 284,
        "deletions": 83,
        "changed_files": 9,
        "created_at": "2023-09-20T21:00:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nCloses #2472 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-20T20:19:35Z",
        "closed_at": "2023-09-27T23:15:46Z",
        "merged_at": "2023-09-27T23:15:46Z",
        "body": "### What does this PR do?\r\nUrls using the blob scheme can have special behaviour if their origin itself is a url when parsing.\r\nThis fixes that by parsing the path as a own domain and if valid and the schemes(protocols) are valid returns its origin.\r\nIve used node.js here a lot to make sure its behaviour is copied 1:1 and enabled the automated tests for it.\r\n\r\nFixes https://github.com/oven-sh/bun/issues/5805\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 277,
        "deletions": 155,
        "changed_files": 6,
        "created_at": "2023-09-20T11:34:17Z",
        "closed_at": "2023-09-20T12:52:59Z",
        "merged_at": "2023-09-20T12:52:59Z",
        "body": "### What does this PR do?\r\n\r\nPreviously, Bun was only calling `Error.prepareStackTrace` when `Error.captureStackTrace` was called. This broke a lot of packages. \r\n\r\nThis makes Bun call `Error.prepareStackTrace` whenever it's defined, and also makes it very slightly faster to check for the existence of `Error.prepareStackTrace.\r\n\r\n### How did you verify your code works?\r\n\r\nThere are tests.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-20T11:01:39Z",
        "closed_at": "2023-09-20T15:08:11Z",
        "merged_at": "2023-09-20T15:08:11Z",
        "body": "### What does this PR do?\r\n\r\n`server.update` to `server.reload`\r\n\r\n```\r\nTypeError: server.update is not a function. (In 'server.update({\r\n  async fetch(request) {\r\n    return new Response(\"Hello World v2\");\r\n  }\r\n})', 'server.update' is undefined)\r\n\r\n```\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-20T08:23:16Z",
        "closed_at": "2023-09-20T17:11:42Z",
        "merged_at": "2023-09-20T17:11:42Z",
        "body": "Fix: https://github.com/napi-rs/napi-rs/blob/main/examples/napi/__tests__/test.framework.js#L16-L19\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-20T07:17:06Z",
        "closed_at": "2023-09-20T07:18:48Z",
        "merged_at": "2023-09-20T07:18:48Z",
        "body": "The URL to download the manifest for Artifact Registry in Google is larger than 4092 bytes.\r\n\r\ncf. #4748\r\n\r\n### What does this PR do?\r\n\r\nIncrease the URLBufferPool size to 8192 bytes to support larger manifest URLs\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI built and ran `bun-debug install` on a repo having dependencies from Artifact Registry. It failed with the `RedirectURLTooLong` error :x: \r\n\r\nI then made the fix, built and ran `bun-debug install` again on the same repo. This time it succeeded :white_check_mark: \r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 26,
        "changed_files": 2,
        "created_at": "2023-09-20T07:00:26Z",
        "closed_at": "2023-09-20T08:00:29Z",
        "merged_at": "2023-09-20T08:00:29Z",
        "body": "### What does this PR do?\r\n\r\nbunx shouldn't load an executable from path when a tag is specified\r\n\r\nBefore:\r\n```js\r\n\u276f bunx bun@1.0.0 --version\r\n  bunx bun@1.0.1 --version\r\n  bunx bun@1.0.2 --version # Before\r\n1.0.0 # Or whichever version happened to be in $PATH\r\n1.0.0\r\n1.0.0\r\n```\r\n\r\nAfter:\r\n\r\n```js\r\n\u276f bunx bun@1.0.0 --version\r\n  bunx bun@1.0.1 --version\r\n  bunx bun@1.0.2 --version # After\r\n1.0.0\r\n1.0.1\r\n1.0.2\r\n```\r\n\r\nThis also silences the \"exited with signal 1\" message. That message is kind of annoying.\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nTests!",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 106,
        "deletions": 14,
        "changed_files": 2,
        "created_at": "2023-09-20T05:06:55Z",
        "closed_at": "2023-09-21T06:34:00Z",
        "merged_at": "2023-09-21T06:34:00Z",
        "body": "### What does this PR do?\r\n\r\nClose: #5635 \r\n\r\nrelative path location does not work in bun.\r\n\r\n```JavaScript\r\nimport * as http from \"node:http\";\r\nimport * as assert from \"node:assert\";\r\n\r\nconst testCases = [\r\n  [\"/a/b\", \"/c\", \"/c\"],\r\n  [\"/a/b\", \"c\", \"/a/c\"],\r\n  [\"/a/b\", \"/c/d\", \"/c/d\"],\r\n  [\"/a/b\", \"c/d\", \"/a/c/d\"],\r\n  [\"/a/b\", \"../c\", \"/c\"],\r\n  [\"/a/b\", \"../c/d\", \"/c/d\"],\r\n  [\"/a/b\", \"../../../c\", \"/c\"],\r\n  // slash\r\n  [\"/a/b/\", \"/c\", \"/c\"],\r\n  [\"/a/b/\", \"c\", \"/a/b/c\"],\r\n  [\"/a/b/\", \"/c/d\", \"/c/d\"],\r\n  [\"/a/b/\", \"c/d\", \"/a/b/c/d\"],\r\n  [\"/a/b/\", \"../c\", \"/a/c\"],\r\n  [\"/a/b/\", \"../c/d\", \"/a/c/d\"],\r\n  [\"/a/b/\", \"../../../c\", \"/c\"],\r\n];\r\n\r\nfor (const [pathname, location, expected] of testCases) {\r\n  const server = http.createServer((req, res) => {\r\n    if (req.url === pathname) {\r\n      res.writeHead(302, { Location: location });\r\n      return res.end();\r\n    } else if (req.url === expected) {\r\n      res.writeHead(200, { \"Content-Type\": \"text/plain\" });\r\n      return res.end(\"OK\");\r\n    }\r\n    res.writeHead(404);\r\n    res.end(\"Not Found\");\r\n  });\r\n\r\n  server.listen(0, () => {\r\n    const port = server.address().port;\r\n    fetch(`http://127.0.0.1:${port}${pathname}`)\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        console.log(\"request\", pathname, \"=>\", expected, data);\r\n        assert.strictEqual(data, \"OK\");\r\n        server.close();\r\n      })\r\n      .catch((error) => {\r\n        assert.strictEqual(error, null);\r\n        server.close();\r\n      });\r\n  });\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-09-20T03:29:57Z",
        "closed_at": "2023-09-20T06:03:11Z",
        "merged_at": "2023-09-20T06:03:11Z",
        "body": "### What does this PR do?\r\n\r\nAdds `(v${version} available)` text to the install summary:\r\n\r\n<img width=\"445\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/709451/d4551404-091b-4588-a3eb-24708fe09d16\">\r\n\r\nThis does mean reading and opening the manifest cache for each newly-installed package. To minimize perf impact, this feature is disabled in CI environments. It will only show when newer versions are available when that package was newly installed (not every time). \r\n\r\n### How did you verify your code works?\r\n\r\nManual",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1884,
        "deletions": 110,
        "changed_files": 19,
        "created_at": "2023-09-20T00:55:43Z",
        "closed_at": "2023-09-20T15:10:03Z",
        "merged_at": "2023-09-20T15:10:03Z",
        "body": "### What does this PR do?\r\nImplements the `emitDecoratorMetadata` option in tsconfig for experimental decorators.\r\nhttps://www.typescriptlang.org/tsconfig#Language_and_Environment_6254\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 46,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-09-20T00:20:12Z",
        "closed_at": "2023-09-20T01:16:51Z",
        "merged_at": "2023-09-20T01:16:51Z",
        "body": "### What does this PR do?\r\n\r\nFixes #5769\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-19T23:49:02Z",
        "closed_at": "2023-09-21T06:43:21Z",
        "merged_at": "2023-09-21T06:43:21Z",
        "body": "### What does this PR do?\r\nThe sqlite3 logic to dynamically load extensions can be disabled to save space, which macos does by default.\r\nsqlite3 provides a api to check for these compile time settings at runtime, we can use that to throw a js error rather then crashing. It is worth noting though that the api to check for these settings at runtime itself can be disabled through SQLITE_OMIT_COMPILEOPTION_DIAGS but this seams to be a edge case.\r\n\r\nFixes https://github.com/oven-sh/bun/issues/5756\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nIts not completely straight forward to add automated testing for this as it requires a custom build of sqlite3, assuming macOS version of sqlite3 will always disable extension loading is a bad approach.\r\n\r\nFurthermore i work on arch even though i have a mac(i might test this later this week), i used this to test for the presence of flags outside of `SQLITE_OMIT_LOAD_EXTENSION` which worked as expected. So testing was done.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 85,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-09-19T22:51:53Z",
        "closed_at": "2023-09-20T17:09:52Z",
        "merged_at": "2023-09-20T17:09:52Z",
        "body": "### What does this PR do?\r\n\r\nIt fixes bugs that were introduced with 0.0.9 of the VSCode extension\r\n\r\n- [x] The task detection would not properly match in edge-cases\r\n- [x] The css for the bunlock highlighter was not included in the extension\r\n- [x] Use \"bun run\" instead of \"bun\" for running tasks\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 175,
        "deletions": 196,
        "changed_files": 9,
        "created_at": "2023-09-19T22:32:07Z",
        "closed_at": "2023-09-26T23:35:13Z",
        "merged_at": "2023-09-26T23:35:13Z",
        "body": "Closes #5269 \r\nCloses #4611 \r\nCloses #5454 \r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 32,
        "deletions": 17,
        "changed_files": 2,
        "created_at": "2023-09-19T22:22:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nWhen generating import paths, the bundler now defaults `import_path` to `./` if no override is provided and if `bun.path.relative(from_chunk_dir, file_path)` does not result in a path with a relative path signifier (`../`). This fixes #5700.\r\n\r\n### How did you verify your code works?\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be (*i am not sure how to do this properly*)\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 230,
        "deletions": 73,
        "changed_files": 10,
        "created_at": "2023-09-19T21:09:32Z",
        "closed_at": "2023-09-29T21:58:39Z",
        "merged_at": "2023-09-29T21:58:39Z",
        "body": "### What does this PR do?\r\n\r\nfixes vite config loading if your directory had a special character\r\n\r\nFixes #5100\r\n\r\n### How did you verify your code works?\r\n\r\nnew tests hell yeah",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-19T20:34:52Z",
        "closed_at": "2023-09-20T00:20:51Z",
        "merged_at": "2023-09-20T00:20:50Z",
        "body": "### What does this PR do?\r\nAvoid TinyCC errors on macOS\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n- [x] Makefile update\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nManual tested\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 32,
        "deletions": 9,
        "changed_files": 5,
        "created_at": "2023-09-19T19:10:53Z",
        "closed_at": "2023-09-19T23:31:39Z",
        "merged_at": "2023-09-19T23:31:39Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-19T15:55:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "With a simple bat file, you can configure the command bun use directly wsl to run your env\r\n\r\n### What does this PR do?\r\n\r\nIn docummentation, I put  an example of how you can set your bun to run on Windows with wsl, creating a bat file, adding the current folder to path and installing bun inside wsl.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nInstalled on my personal computer\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 163,
        "deletions": 69,
        "changed_files": 6,
        "created_at": "2023-09-19T13:48:07Z",
        "closed_at": "2023-09-19T15:01:48Z",
        "merged_at": "2023-09-19T15:01:48Z",
        "body": "### What does this PR do?\r\n\r\nFixes URL normalization for joining registries to happen later on, after we know the authToken and other metdata is stripped\r\nAdds a guide on using artifactory\r\n\r\n### How did you verify your code works?\r\n\r\nUpdated tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-19T13:21:41Z",
        "closed_at": "2023-10-16T23:11:44Z",
        "merged_at": "2023-10-16T23:11:44Z",
        "body": "### What does this PR do?\r\nIt seams the 'content-encoding' header was being removed(if present), to run code conditionally, that had the unwanted side effect of the header not being present in the list returned to the caller. This instead uses a bool to keep track of the state regarding the state whether the header was prcoessed or not.\r\nMaybe this has some other side effects but tests(fetch.test.ts) seams to not have any failures.\r\n\r\nFixes https://github.com/oven-sh/bun/issues/5668\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 163,
        "deletions": 69,
        "changed_files": 6,
        "created_at": "2023-09-19T12:48:04Z",
        "closed_at": "2023-09-19T13:46:59Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nArtifactory doesn't include a `:` delimiter in their URLs before the parameters. Instead of `my-url.com/a/b/c/:authToken=TOKEN`, they do `my-url.com/a/b/c/authToken=TOKEN`. \r\n\r\nThis led to two issues:\r\n- `bun install` assumed  that `:` would always exist, so it never found the `authToken`\r\n- #5716 caused us to always add an extra slash when it didn't exist, causing us to include the auth token in the request URL instead of as an auth token\r\n\r\n### How did you verify your code works?\r\n\r\nManually :(",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-09-19T11:17:44Z",
        "closed_at": "2023-09-19T12:50:23Z",
        "merged_at": "2023-09-19T12:50:23Z",
        "body": "### What does this PR do?\r\n\r\nDatabase.deserialize was returning the SQLite DB handle instead of the `Database` class\r\n\r\nFixes #3712 \r\n\r\n### How did you verify your code works?\r\n\r\nThere is a test",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 162,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-09-19T11:03:34Z",
        "closed_at": "2023-09-19T12:51:05Z",
        "merged_at": "2023-09-19T12:51:05Z",
        "body": "### What does this PR do?\r\n\r\nThis aligns the redirect behavior of `fetch()` to be closer to the WHATWG fetch spec. \r\n\r\n### How did you verify your code works?\r\n\r\nThere are tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-19T07:49:34Z",
        "closed_at": "2023-09-19T10:58:56Z",
        "merged_at": "2023-09-19T10:58:56Z",
        "body": "### What does this PR do?\r\n\r\nThis dumps the HTTP request/response metadata when `bun install --verbose` is passed\r\n\r\nAlso prevents double-printing the request metadata\r\n\r\n### How did you verify your code works?\r\n\r\nmanual",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 523,
        "deletions": 43,
        "changed_files": 10,
        "created_at": "2023-09-19T05:01:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis implements util.MIMEType and util.MIMEParams\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 100,
        "deletions": 15,
        "changed_files": 8,
        "created_at": "2023-09-19T04:27:08Z",
        "closed_at": "2023-09-19T06:27:02Z",
        "merged_at": "2023-09-19T06:27:02Z",
        "body": "### What does this PR do?\r\n\r\nFixes #5076 \r\n\r\nSupersedes https://github.com/oven-sh/bun/pull/5484\r\n\r\n### How did you verify your code works?\r\n\r\nUpdated a test. We also need to add integration tests for Artifactory, Azure Artifacts, and more of those, but this PR doesn't do that.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 76,
        "deletions": 19,
        "changed_files": 13,
        "created_at": "2023-09-19T01:48:24Z",
        "closed_at": "2023-09-21T02:48:47Z",
        "merged_at": "2023-09-21T02:48:47Z",
        "body": "### What does this PR do?\r\n\r\nalso fixes `require('yargs/yargs')`. im surprised we did not have an open issue about this.\r\n\r\nFixes #5173\r\nFurthers #4207 \r\n\r\ni wrote automated tests",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 55,
        "deletions": 40,
        "changed_files": 8,
        "created_at": "2023-09-18T23:23:04Z",
        "closed_at": "2023-09-19T03:49:27Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n1. It takes into account that existing files can be empty.\r\n2. Closes #5704 \r\n3. Extra: Fixes format.\r\n\r\nBefore this PR, with an empty file:\r\n`bun run --watch empty-file.ts` throws a \"missing file\" error. But the file exists.\r\n\r\nAfter this PR, with an empty file:\r\n`bun run --watch empty-file.ts` works and watches if something is being written in the file.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-18T22:04:55Z",
        "closed_at": "2023-09-19T19:39:24Z",
        "merged_at": "2023-09-19T19:39:24Z",
        "body": "### What does this PR do?\r\n\r\nI was looking at the Remix guide/giving it a quick run. I wanted to try to offer a couple of little updates to make it a little more clear what specifically is run in Node vs Bun\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\nLet me know if you have any further suggestions\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 453,
        "deletions": 197,
        "changed_files": 17,
        "created_at": "2023-09-18T21:43:12Z",
        "closed_at": "2023-09-19T00:33:58Z",
        "merged_at": "2023-09-19T00:33:58Z",
        "body": "### What does this PR do?\r\n\r\nFixes #5601\r\nFixes #3638\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNew Tests.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-18T21:07:26Z",
        "closed_at": "2023-09-18T21:10:05Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-18T21:01:18Z",
        "closed_at": "2023-09-19T00:34:57Z",
        "merged_at": "2023-09-19T00:34:57Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis PR fixes local development setup issue when running `make setup` command in ubuntu systems.\r\n\r\nfixes [#5695 ](https://github.com/oven-sh/bun/issues/5695)\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\nRan `make setup` and it executed properly without llvm version issue.\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-18T19:14:16Z",
        "closed_at": "2023-09-20T17:13:32Z",
        "merged_at": "2023-09-20T17:13:32Z",
        "body": "### What does this PR do?\r\nCloses: https://github.com/oven-sh/bun/issues/5683\r\n<!-- **Please explain what your changes do**, example: -->\r\nThis PR switch ```disableTelemetry```to bunfig instead of .env.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nManual tests\r\n\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 20,
        "changed_files": 4,
        "created_at": "2023-09-18T19:09:56Z",
        "closed_at": "2023-09-18T21:57:48Z",
        "merged_at": "2023-09-18T21:57:48Z",
        "body": "Work from SuperAuguste on #4658, I messed up rebasing that branch and couldn't push a fix.\r\n\r\n### What does this PR do?\r\n\r\nCloses #4651\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-18T15:47:54Z",
        "closed_at": "2023-09-18T17:26:25Z",
        "merged_at": "2023-09-18T17:26:25Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-18T15:44:14Z",
        "closed_at": "2023-09-19T00:34:39Z",
        "merged_at": "2023-09-19T00:34:39Z",
        "body": "### What does this PR do?\r\nThis branch resulted in the same statement independent of the conditions value so having the branch is not needed\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 9,
        "changed_files": 2,
        "created_at": "2023-09-18T13:33:46Z",
        "closed_at": "2023-09-19T01:14:30Z",
        "merged_at": "2023-09-19T01:14:30Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFor process loaded env vars, its a bug to give them the literal value '\"\"' if the provided length is 0.\r\nI am not entirely sure if this is expected behaviour for DotEnv Files, which is why i left the constant unmodified and opted to only modify the process based value, to which is should apply.\r\n\r\nIf the current behaviour is also faulty for dotenv, changing the `empty_string_value` might be a better approach\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nCompiled/ran a test example to verify the behaviour, can add tests if needed.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 91,
        "deletions": 4,
        "changed_files": 5,
        "created_at": "2023-09-18T11:26:13Z",
        "closed_at": "2023-09-19T00:31:26Z",
        "merged_at": "2023-09-19T00:31:26Z",
        "body": "### What does this PR do?\r\n\r\nImplements:\r\n- [`node_api_create_external_string_latin1`](https://nodejs.org/api/n-api.html#node_api_create_external_string_latin1)\r\n- [`node_api_create_external_string_utf16`](https://nodejs.org/api/n-api.html#node_api_create_external_string_utf16)\r\n\r\n### How did you verify your code works?\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-18T04:31:54Z",
        "closed_at": "2023-09-18T11:32:02Z",
        "merged_at": "2023-09-18T11:32:02Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\n\r\nClose: #4589, #5368\r\n\r\n\r\nhttps://github.com/oven-sh/bun/blob/57e38e831222add628b25e72cbcaff84c71c4a4c/src/install/install.zig#L254-L259\r\n\r\nIf the registry url does not end with a `/`, it will result in the wrong url when joining. For example, joining `http://example.com/aaa` and `package` results in `http://example.com/package` instead of `http://example.com/aaa/package`\r\n\r\nThis PR fixes this by adding a trailing slash during the config parsing to ensure consistency.\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-18T03:41:40Z",
        "closed_at": "2023-09-18T07:32:20Z",
        "merged_at": "2023-09-18T07:32:20Z",
        "body": "### What does this PR do?\r\nInstead of zig being hardcoded in some places in the Makefile, i made them use the ZIG variable. \r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\nI observed `make run-all-unit-tests` works with ZIG= set but zig not in path.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-18T02:45:47Z",
        "closed_at": "2023-09-18T07:11:19Z",
        "merged_at": "2023-09-18T07:11:19Z",
        "body": "### What does this PR do?\r\n\r\nThis adds an environment variable `BUN_GC_TIMER_DISABLE` which disables scheduling the GC between async tasks\r\n\r\n### How did you verify your code works?\r\n\r\nDid not test it",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-09-18T02:40:49Z",
        "closed_at": "2023-09-18T10:01:20Z",
        "merged_at": "2023-09-18T10:01:20Z",
        "body": "### What does this PR do?\r\n\r\nI have not observed this PR to produce any different output. Just out of an abundance of caution, we should use jsDoubleNumber instead of jsNumber when the number potentially exceeds the maximum/minimum signed 32-bit integer\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests + an added DOMJIT test",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T21:37:09Z",
        "closed_at": "2023-09-18T11:11:25Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nAdds example tsconfig.json/jsconfig.json to ```packages/bun-types``` readme\r\n\r\n### What is the purpose?\r\n\r\nIt allowed me to use code such as ```import fs from 'fs'``` without getting TS errors in VSCode\r\n\r\n[\u2714] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n[----] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-17T20:48:22Z",
        "closed_at": "2023-09-18T17:28:58Z",
        "merged_at": "2023-09-18T17:28:58Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T20:13:50Z",
        "closed_at": "2023-09-17T21:35:49Z",
        "merged_at": null,
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T16:53:53Z",
        "closed_at": "2023-09-18T00:34:35Z",
        "merged_at": "2023-09-18T00:34:35Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds .DS_Store files, which are automatically generated by macOS's Finder application, to the default .gitignore generated by the bun init command to prevent them from being inadvertently committed.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThis is a simple update to the gitignore-for-init file to comply with OSS best-practices.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-17T15:58:57Z",
        "closed_at": "2023-09-18T01:18:19Z",
        "merged_at": "2023-09-18T01:18:19Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nFixes a `'app.server' is possibly 'null'.` error in the elysia example.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-09-17T13:09:15Z",
        "closed_at": "2023-09-19T20:25:14Z",
        "merged_at": "2023-09-19T20:25:14Z",
        "body": "Added installation line to react guide\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nI just paste the commands from the manual after a clean install of bun\r\n\r\nwithout installing react i got an error\r\n```\r\nerror: Cannot find module \"react/jsx-dev-runtime\" from \"/Users/jt3k/tmp/bun/react.tsx\"\r\n```\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 13,
        "changed_files": 2,
        "created_at": "2023-09-17T11:02:52Z",
        "closed_at": "2023-10-16T23:33:03Z",
        "merged_at": "2023-10-16T23:33:03Z",
        "body": "### What does this PR do?\r\n\r\nToday adding the `.only` specifier to a nested `describe` block will not run it, even if launched with the `--only` switch.\r\nThis PR fixes this behavior (the following code now works):\r\n\r\n```ts\r\nimport { test, describe } from \"bun:test\";\r\ndescribe(\"outer\", () => {\r\n  describe.only(\"inner (nested)\", () => {\r\n    test(\"test\", () => {\r\n      console.error(\"reachable\");\r\n    })\r\n  })\r\n})\r\n```\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\nIf Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-09-17T10:56:56Z",
        "closed_at": "2023-09-18T00:38:04Z",
        "merged_at": "2023-09-18T00:38:04Z",
        "body": "### What does this PR do?\r\n\r\nThis works around #5604.\r\n\r\nDisable DOMJIT for performance.now(). Makes performance.now() a little slower\r\n\r\n### How did you verify your code works?\r\n\r\nThere is a test",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T10:34:30Z",
        "closed_at": null,
        "merged_at": null,
        "body": "For #5615 ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 492,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-09-17T10:27:55Z",
        "closed_at": "2023-09-21T01:43:08Z",
        "merged_at": "2023-09-21T01:43:08Z",
        "body": "### What does this PR do?\r\n\r\nClose: #4347 \r\n\r\nImplement `dns.lookupService`\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T09:11:53Z",
        "closed_at": "2023-09-17T16:09:57Z",
        "merged_at": "2023-09-17T16:09:57Z",
        "body": "### What does this PR do?\r\n\r\nWhen crossing the file system, the errno of `clonefile()` function is `.XDEV`.\r\n\r\nThis PR fixes it by returning `.XDEV` as `.NotSupported`.\r\n\r\nFixed #362\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI test it manually. Looking for a way to test it automatically:\r\n\r\n```\r\n  ~/dev/Tmp/tt 5m 48s\r\nbase \u276f /Users/pan93412/dev-local/bun/packages/debug-bun-darwin-aarch64/bun-debug install\r\n[SYS] read(3, 4096) = 4096 (0.354ms)\r\n[SYS] close(3)\r\nbun install v1.0.3_debug (0404d09c)\r\n + bun-types@1.0.2\r\n\r\n 1 packages installed [27.00ms]\r\n````\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n- [x] ~~I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be~~\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [x] ~~JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed~~\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 8,
        "changed_files": 3,
        "created_at": "2023-09-17T02:16:18Z",
        "closed_at": "2023-09-17T04:32:52Z",
        "merged_at": "2023-09-17T04:32:52Z",
        "body": "### What does this PR do?\r\n\r\nPeople are confused why importing a Node.js builtin module fails in `bun build`. They need to add `--target=bun` or `--target=node`. The error message isn't clear enough\r\n\r\n### How did you verify your code works?\r\n\r\nI didn't, lets see what tests expect the previous error message and tweak accordingly.",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-17T00:30:21Z",
        "closed_at": "2023-09-17T04:42:58Z",
        "merged_at": null,
        "body": "here is just hint for older cpu to fix dump Illegal instruction (core dumped) issue\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-16T22:36:08Z",
        "closed_at": "2023-09-19T20:26:23Z",
        "merged_at": "2023-09-19T20:26:23Z",
        "body": "### What does this PR do?\r\n\r\nImprove the Bug report template. Reduce Bug reports for fixed issues.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nCreated an Issue on my repo.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-16T21:14:07Z",
        "closed_at": "2023-09-18T07:33:07Z",
        "merged_at": "2023-09-18T07:33:07Z",
        "body": "\r\n### What does this PR do?\r\n\r\nThis matches the functionality in Node. when printing a class that doesn't have a name.\r\n\r\nPreviously this code:\r\n```js\r\n\r\nconsole.log(class { });\r\n\r\n``` \r\n\r\nWould print:\r\n```\r\n[class]\r\n```\r\n\r\nUpdated to print matching with Node:\r\n```\r\n[class (anonymous)]\r\n```\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [X] I included a test for the new code, or an existing test covers it",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 50,
        "changed_files": 1,
        "created_at": "2023-09-16T21:06:35Z",
        "closed_at": "2023-09-18T17:31:53Z",
        "merged_at": "2023-09-18T17:31:53Z",
        "body": "### What does this PR do?\r\n\r\nIt's just a tiny replacement of red and green circles with a checkmark and times icon to be more recognizable for colorblinds like me.\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-16T20:58:27Z",
        "closed_at": "2023-09-17T04:44:03Z",
        "merged_at": "2023-09-17T04:44:03Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nChange string:string mapping in the bun docs to match the expected string:array[string] mapping.\r\n\r\nSee: https://www.typescriptlang.org/tsconfig#paths\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-16T18:29:15Z",
        "closed_at": "2023-09-16T19:07:01Z",
        "merged_at": "2023-09-16T19:07:01Z",
        "body": "### What does this PR do?\r\n\r\nFixes failing test introduced in #5579\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T18:14:44Z",
        "closed_at": "2023-09-16T18:19:36Z",
        "merged_at": "2023-09-16T18:19:36Z",
        "body": "### What does this PR do?\r\n\r\nFixes the `ArrayBufferConstructor` type signature to accept two arguments.\r\n\r\n```ts\r\ninterface ArrayBufferConstructor {\r\n  new (byteLength: number, options: { maxByteLength?: number }): ArrayBuffer;\r\n}\r\n```\r\n\r\nReference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer#parameters\r\n\r\nCloses #5551 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T17:46:50Z",
        "closed_at": "2023-09-17T04:43:43Z",
        "merged_at": "2023-09-17T04:43:43Z",
        "body": "Looks like someone shifted their hand a bit to the right.\r\n\r\nChanges `ytrr` to `tree`\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 432,
        "deletions": 3,
        "changed_files": 12,
        "created_at": "2023-09-16T16:39:46Z",
        "closed_at": "2023-09-18T09:59:10Z",
        "merged_at": "2023-09-18T09:59:10Z",
        "body": "### What does this PR do?\r\n\r\nImplement `arrayContaining`, releated to https://github.com/oven-sh/bun/issues/1825\r\nFurthermore, the algorithm to caclute array containing is `O(m * n)`,  there should have optimisation for it.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] I added TypeScript types for the new methods, getters, or setters\r\n- [x] I ran `make codegen` to regenerate the C++ and Zig code\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-16T15:01:26Z",
        "closed_at": "2023-09-19T20:26:50Z",
        "merged_at": "2023-09-19T20:26:50Z",
        "body": "### What does this PR do?\r\n\r\nUpdate the Node APIs documentation which incorrectly indicates that `node:net` is fully implemented by while parts are missing.\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNone, it's a documentation change",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-16T13:11:14Z",
        "closed_at": "2023-09-16T17:21:42Z",
        "merged_at": "2023-09-16T17:21:42Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds to the doc fixes in #5379 and #5229 by updating another workspace example to use `\"workspace:*\"` instead of `\"*\"`.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 72,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-09-16T12:10:25Z",
        "closed_at": "2023-09-21T01:44:06Z",
        "merged_at": "2023-09-21T01:44:06Z",
        "body": "### What does this PR do?\r\n\r\nSupport BOM detection and `TextEncoder.ignoreBOM`.\r\n\r\nCloses https://github.com/oven-sh/bun/issues/5471\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] Add test",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 90,
        "deletions": 70,
        "changed_files": 19,
        "created_at": "2023-09-16T03:53:25Z",
        "closed_at": "2023-09-16T07:44:07Z",
        "merged_at": "2023-09-16T07:44:07Z",
        "body": null,
        "comments": 0
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-09-16T03:25:38Z",
        "closed_at": "2023-09-16T03:28:52Z",
        "merged_at": "2023-09-16T03:28:52Z",
        "body": "Fix to version 16 on docs\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 372,
        "deletions": 81,
        "changed_files": 9,
        "created_at": "2023-09-16T01:51:37Z",
        "closed_at": "2023-09-17T15:59:01Z",
        "merged_at": "2023-09-17T15:59:01Z",
        "body": "### What does this PR do?\r\n\r\nImplement VSCode tasks for Bun. \r\n\r\n- [x] VSCode tasks as described in #5205\r\n- [x] Package.json scripts as described in #5204\r\n\r\n### How did you verify your code works?\r\n\r\nStill manual testing. We should set up automated testing soon for the VSCode extension.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 269,
        "deletions": 22,
        "changed_files": 12,
        "created_at": "2023-09-16T01:44:12Z",
        "closed_at": "2023-09-16T01:47:10Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis adds VSCode tasks.\r\n\r\n- [ ] Code changes\r\n- [ ] In-line documentation\r\n\r\n### How did you verify your code works?\r\n\r\nStill manual testing, we should add automated tests for the VSCode extension soon.\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 452,
        "deletions": 422,
        "changed_files": 4,
        "created_at": "2023-09-16T01:02:16Z",
        "closed_at": "2023-09-16T04:18:57Z",
        "merged_at": "2023-09-16T04:18:57Z",
        "body": "### What does this PR do?\r\nFix: [4851](https://github.com/oven-sh/bun/issues/4851)\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-16T00:32:06Z",
        "closed_at": "2023-09-16T04:19:49Z",
        "merged_at": "2023-09-16T04:19:49Z",
        "body": "Fixes #5501\r\n\r\nEnsures `require` and `resolve` statements are treated as an identifier with a space before them, so you don't end up with `returnrequire` in the minified output.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 6808,
        "deletions": 6518,
        "changed_files": 8,
        "created_at": "2023-09-15T23:40:24Z",
        "closed_at": "2023-09-21T01:50:11Z",
        "merged_at": "2023-09-21T01:50:11Z",
        "body": "### What does this PR do?\r\n\r\nFix: https://github.com/oven-sh/bun/issues/5258\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T22:00:41Z",
        "closed_at": "2023-09-19T20:35:37Z",
        "merged_at": "2023-09-19T20:35:37Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nInstalled the correct version by changing the number.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 20,
        "changed_files": 1,
        "created_at": "2023-09-15T21:45:43Z",
        "closed_at": "2023-09-17T16:13:30Z",
        "merged_at": "2023-09-17T16:13:30Z",
        "body": "### What does this PR do?\r\n\r\nUpdate the commit hash of `zls` in the document. This fixes https://github.com/oven-sh/bun/issues/5508.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 15,
        "changed_files": 2,
        "created_at": "2023-09-15T21:18:09Z",
        "closed_at": "2023-09-16T04:21:15Z",
        "merged_at": "2023-09-16T04:21:15Z",
        "body": "### What does this PR do?\r\n\r\nFixes #5442 \r\n\r\nAdds a conditional to only trim the first character if it's a leading slash, because there might already be a trailing slash on the watch path, that we already strip from the start of the string.\r\n\r\nAlso removed some unreachable code while I was here.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-15T20:59:16Z",
        "closed_at": "2023-09-16T04:19:27Z",
        "merged_at": "2023-09-16T04:19:26Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nMy fix or improve on: https://github.com/oven-sh/bun/issues/5363 and fix https://github.com/oven-sh/bun/issues/5494\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-15T19:37:47Z",
        "closed_at": "2023-09-17T04:55:41Z",
        "merged_at": "2023-09-17T04:55:41Z",
        "body": "### What does this PR do?\r\n\r\nFix: https://github.com/oven-sh/bun/issues/3766\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 11,
        "changed_files": 1,
        "created_at": "2023-09-15T19:05:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "At some point it was decided that bun would only format using KB, MB, etc. vs also using KiB, MiB, etc. The code that enabled it was never removed.\r\n\r\n### What does this PR do?\r\nRemoves dead code.\r\n\r\n### How did you verify your code works?\r\nThere were no changes to execution.\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 132,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2023-09-15T17:46:44Z",
        "closed_at": "2023-10-16T23:18:40Z",
        "merged_at": "2023-10-16T23:18:40Z",
        "body": "### What does this PR do?\r\n\r\nOptimizes how `EventEmitterPrototype.emit(...)` triggers the callback functions, especially noticable with the 'line' event of readline.Interface.\r\n\r\n- Brings performance for emits with only one argument for `...args` to Node.js level\r\n- Emits with multiple args should have improved performance as well\r\n\r\nFixes #5136 \r\n_(Please also see my comments there, I think there is a different underlying issue regarding array cloning/spreading which is just worked around with this pull request)_\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\nI did manual tests and also ran the tests in test/js/node/events\r\n\r\n- [X] I ran `make js` and committed the transpiled changes\r\n- [X] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [X] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T17:12:57Z",
        "closed_at": "2023-09-19T04:27:53Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\nResolves #5076. \r\n\r\nThe NPM registry at https://registry.npmjs.org supports url encoded and non encoded scoped package names. This means that packages such as `@storybook/addons` can be requested from either:\r\n- https://registry.npmjs.org/@storybook%2Faddons\r\n- https://registry.npmjs.org/@storybook/addons\r\n\r\nOther registries such as AWS CodeArtifact don't support this however. This is not a problem for clients such as `npm` as it requests from https://registry.npmjs.org/@storybook%2Faddons.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nRan it on projects making use of AWS CodeArtifact for scoped packages and the packages were installed.\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n\r\n\r\nThis is my first time writing zig so I am not sure if this solution is particular idiomatic. Let me know if it can be improved at all.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 63,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-09-15T16:49:40Z",
        "closed_at": "2023-09-17T05:44:13Z",
        "merged_at": "2023-09-17T05:44:13Z",
        "body": "### What does this PR do?\r\nFix: https://github.com/oven-sh/bun/issues/3083\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 85,
        "deletions": 10,
        "changed_files": 5,
        "created_at": "2023-09-15T15:16:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis PR addresses my issue outlined in #5314.\r\n\r\nThe problem with #5314 is that the Bun runtime does not allow plugins to handle asynchronous imports.\r\nI personally need this feature, so I decided to create this PR to implement it for all the Bun users.\r\nI also planed after this PR to create a Bun plugin capable of importing image and do some image operation before building and live.\r\n\r\nAlthough I'm not really familiar with Zig, I have knowledge in C/C++ and Rust and I know how computer memory can been slow some time. So I try the best to not create any useless variable.\r\nPlease Verify I didn't anything is not idiomatic to Zig and will hurt de performance of Bun.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] I have written some tests for the bundler for verify if it's still works.\r\n- [x] I have written some tests for the runtime plugin to verify if I didn't broke the none async `builder.onResolve` and if the async `build.onResolve` work as expected\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be ***(But since I'm not a zig expert so please verify)***\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [x] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 17,
        "deletions": 26,
        "changed_files": 3,
        "created_at": "2023-09-15T14:38:16Z",
        "closed_at": "2023-09-15T21:06:20Z",
        "merged_at": null,
        "body": "- minor build diffs\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T14:27:04Z",
        "closed_at": "2023-09-15T15:32:32Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T13:00:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nSince I had to install the baseline version on my system and didn't find any way to do that from the install script, I added the `baseline` argument to the install script so that people can install the baseline version with\r\n\r\n```curl -fsSL https://bun.sh/install | bash -s bun-v1.0.0 baseline```\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nRun install with a second argument `baseline`, like you would do with debug-info\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-09-15T12:21:12Z",
        "closed_at": "2023-09-15T13:53:40Z",
        "merged_at": "2023-09-15T13:53:40Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nFixes #5465\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-15T12:10:09Z",
        "closed_at": "2023-09-15T13:04:34Z",
        "merged_at": "2023-09-15T13:04:34Z",
        "body": "### What does this PR do?\r\n\r\nThis fixes escaping non-ascii latin1 RegExp literals correctly\r\n\r\n### How did you verify your code works?\r\n\r\nA couple tests\r\n\r\nFixes #5461 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-15T11:37:53Z",
        "closed_at": "2023-09-15T12:24:03Z",
        "merged_at": "2023-09-15T12:24:03Z",
        "body": "\r\n\r\n### What does this PR do?\r\n\r\nSupport:\r\n- `export https_proxy='' http_proxy=''`\r\n- `export https_proxy=\"\" http_proxy=\"\"`\r\n- `export https_proxy= http_proxy=`\r\n\r\nClose: #5380\r\n\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 96,
        "deletions": 3,
        "changed_files": 5,
        "created_at": "2023-09-15T11:01:27Z",
        "closed_at": "2023-09-15T12:36:08Z",
        "merged_at": "2023-09-15T12:36:08Z",
        "body": "### What does this PR do?\r\n\r\nThis implements [`URL.canParse`](https://developer.mozilla.org/en-US/docs/Web/API/URL/canParse_static)\r\n\r\nBased on https://github.com/WebKit/WebKit/pull/11919\r\n\r\n### How did you verify your code works?\r\n\r\nI copied the tests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 93,
        "deletions": 40,
        "changed_files": 4,
        "created_at": "2023-09-15T10:33:18Z",
        "closed_at": "2023-09-15T11:21:44Z",
        "merged_at": "2023-09-15T11:21:44Z",
        "body": "### What does this PR do?\r\n\r\nThis makes `--silent` work as expected for package.json scripts.\r\n\r\nWhen running:\r\n```bash\r\nbun run --silent bash -c 'exit 1'\r\n```\r\n\r\nBefore:\r\n```zig\r\nerror: \"bash\" exited with code 1\r\n```\r\n\r\nAfter:\r\n```bash\r\n# nothing!\r\n```\r\n\r\nThis also makes it so the \"extends\" warning is a debug log instead of a warning since usually you don't need to take any action and it's noisy.\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nTests",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-15T09:35:58Z",
        "closed_at": "2023-09-20T04:39:22Z",
        "merged_at": "2023-09-20T04:39:22Z",
        "body": "Updated docs to address `The ES modules aren't always asynchronous. #5420` Issue. \r\n- Included an elaborate explanation citing the difference between CommonJS and ES Modules, \r\n- Added a summary\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-15T09:05:33Z",
        "closed_at": "2023-09-26T23:35:15Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nbased on the original alpine image, which cannot run bun successfully , \r\n\r\nif we add `gcompat` into it , bun can run smoothly in most cases, we can happily use bun to boost vite dev performance, such as : `bun --bun x vite --host`\r\n\r\nbut in some edge cases, especially lightningcss related scenarioes, we still need further add `glic-bin` into this container. \r\nFYI, lightningcss will be used heavily in next version of tailwindcss -- tailwindcss 3.4. And since vite 4.4, there's a experimental feature using lightningcss as its css moudule.  \r\n\r\n\r\n### How did you verify your code works?\r\n```\r\nRUN /usr/glibc-compat/bin/ldd /usr/local/bin/bun\r\n```\r\nBTW, this line can be omitted , just to make sure there are no errors in loading bun related libraries\r\n\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 25,
        "deletions": 16,
        "changed_files": 1,
        "created_at": "2023-09-15T08:44:49Z",
        "closed_at": "2023-09-15T11:23:38Z",
        "merged_at": "2023-09-15T11:23:38Z",
        "body": "### What does this PR do?\r\n\r\nDoes not fix #4622, but gets closer \r\n\r\nserialport no longer crashes\r\n\r\nDon't know if `serialport` actually works though\r\n\r\nEdit: serialport relies on libuv symbols which bun does not currently implement. This PR is still some good bugfixes for napi. But it does not fix the issue serialport is running into.\r\n\r\nThese are missing:\r\n\r\n- uv_mutex_*\r\n- uv_poll_init\r\n- uv_poll_stop\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-09-15T08:36:34Z",
        "closed_at": "2023-09-15T21:10:06Z",
        "merged_at": "2023-09-15T21:10:05Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nfix some typo.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 907,
        "deletions": 9,
        "changed_files": 9,
        "created_at": "2023-09-15T08:16:24Z",
        "closed_at": "2023-09-18T23:29:57Z",
        "merged_at": "2023-09-18T23:29:56Z",
        "body": "### What does this PR do?\r\n\r\nCopies node's implementation for `console.Console`, which gives the console interface but piped to any node stream. This enables:\r\n\r\n- Closes #3625\r\n- MightFix #4145\r\n- Closes #4610\r\n- Closes #4898\r\n- Closes #4737\r\n- Helps #2034\r\n\r\n```ts\r\nimport { Console } from \"console\";\r\nimport { createWriteStream } from \"fs\";\r\n\r\nconst writer = new Console({ stdout: createWriteStream(\"log.txt\") });\r\n\r\nwriter.log(\"hello\");\r\nwriter.log(\"world\", { x: 2 });\r\n```\r\n\r\nand this will write to the file\r\n\r\n```\r\nhello\r\nworld { x: 2 }\r\n```\r\n\r\nTODO:\r\n- [ ] Tests.\r\n- [ ] Bug with printing will reveal the options object somehow.\r\n- [ ] Self-Review.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-15T06:53:26Z",
        "closed_at": "2023-09-20T04:34:26Z",
        "merged_at": "2023-09-20T04:34:26Z",
        "body": "### What does this PR do?\r\n\r\n \r\nupdate docs with a warning to Ensure correct placement of the '--watch' flag in the running command.\r\n \r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-15T06:35:55Z",
        "closed_at": "2023-09-19T03:23:19Z",
        "merged_at": "2023-09-19T03:23:19Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\nThis adds TypeScript type for `navigator`.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-09-15T05:03:27Z",
        "closed_at": "2023-09-15T05:23:10Z",
        "merged_at": "2023-09-15T05:23:10Z",
        "body": "### What does this PR do?\r\n\r\nbuild is failing due to dns issue with llvm",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T04:16:35Z",
        "closed_at": "2023-09-15T04:57:13Z",
        "merged_at": null,
        "body": "### What does this PR do? \r\n\r\nFix main branch build failed.\r\n\r\n![2023-09-15_13-14](https://github.com/oven-sh/bun/assets/9482395/4ea994b1-50f5-4502-8788-c4872c5eb462)\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 139,
        "deletions": 27,
        "changed_files": 6,
        "created_at": "2023-09-15T01:45:28Z",
        "closed_at": "2023-09-15T06:03:20Z",
        "merged_at": "2023-09-15T06:03:20Z",
        "body": "### What does this PR do?\r\nfixes #5183 \r\nfixes #4285 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually and added tests\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T01:10:23Z",
        "closed_at": "2023-09-15T07:01:05Z",
        "merged_at": "2023-09-15T07:01:05Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-15T00:49:49Z",
        "closed_at": "2023-09-16T13:52:01Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nChange the confusing sentence on ES modules.\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5696,
        "deletions": 33,
        "changed_files": 6,
        "created_at": "2023-09-15T00:39:50Z",
        "closed_at": "2023-09-15T06:25:01Z",
        "merged_at": "2023-09-15T06:25:01Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nFix: https://github.com/oven-sh/bun/issues/5321 and https://github.com/oven-sh/bun/issues/5107\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-14T22:31:22Z",
        "closed_at": "2023-09-14T22:47:44Z",
        "merged_at": "2023-09-14T22:47:44Z",
        "body": "When running `bun run publish-layer` the following warnings displayed:\r\n\r\n```sh\r\n$ bun scripts/publish-layer.ts\r\n101 |     async load() {\r\n102 |         this.type = this.options.type || 'core';\r\n103 |         this.tag = this.options.tag;\r\n104 |         const root = await findRoot(this.options.name, this.options.root);\r\n105 |         if (!root)\r\n106 |             throw new Error(`could not find package.json with ${(0, util_1.inspect)(this.options)}`);\r\n                      ^\r\nwarn: could not find package.json with { type: 'dev',\r\n```\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\nAdded missing package @oclif/plugin-plugins to resolved warning\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n-->\r\n\r\n- [x] I ran `bun run publish-layer` and verified layer was published\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-14T16:20:05Z",
        "closed_at": "2023-09-14T18:43:58Z",
        "merged_at": null,
        "body": "\r\nResolves #5211\r\n\r\n### What does this PR do?\r\n\r\nThis matches behavior in Node where undefined as first argument is considered utf-8\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\nI wrote automated tests\r\n\r\nIf Zig files changed:\r\n\r\n- [X] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [X] I or my editor ran `zig fmt` on the changed files\r\n- [X] I included a test for the new code, or an existing test covers it\r\n- [X] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-14T15:56:55Z",
        "closed_at": "2023-09-17T05:41:52Z",
        "merged_at": "2023-09-17T05:41:52Z",
        "body": "### What does this PR do?\r\n\r\nCloses #5211\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] Add test",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-14T14:33:20Z",
        "closed_at": "2023-09-14T22:04:26Z",
        "merged_at": "2023-09-14T22:04:26Z",
        "body": "### What does this PR do?\r\n\r\nExplain that the version of packages within a workspace need to be `\"workspace:*\"`.\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-14T13:35:24Z",
        "closed_at": "2023-09-14T16:09:22Z",
        "merged_at": "2023-09-14T16:09:22Z",
        "body": "### What does this PR do?\r\n\r\nThis PR fixes a typo in an export.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nRelied on existing tests\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 43,
        "changed_files": 1,
        "created_at": "2023-09-14T12:52:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nI just noticed this when I was researching what all is in the official docker image.\r\n\r\nBy the way, have you tried [alpine linux](https://github.com/alpinelinux)? Was there too much missing?\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1404,
        "deletions": 1555,
        "changed_files": 21,
        "created_at": "2023-09-14T10:00:15Z",
        "closed_at": "2023-09-15T04:26:37Z",
        "merged_at": "2023-09-15T04:26:37Z",
        "body": "### What does this PR do?\r\n\r\nThis makes all node:fs functions which have an async or promise version and makes them actually async in the threadpool\r\n\r\nthis is not super optimized on linux. it really should use io_uring when supported. It does not. It does the slow thing.\r\n\r\nI suspect this will fix #4743 but needs testing\r\n\r\n### How did you verify your code works?\r\n\r\nNeeds tests for everything",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1687,
        "deletions": 1193,
        "changed_files": 35,
        "created_at": "2023-09-14T09:02:37Z",
        "closed_at": "2023-09-15T15:22:07Z",
        "merged_at": "2023-09-15T15:22:07Z",
        "body": "### What does this PR do?\r\n\r\nchangelog notes:\r\n- feat(runtime): add `process.binding` `uv`/`natives`/`config`\r\n- perf(runtime): make Bun's GlobalObject a static hash table\r\n\r\nThis refactors how `process.binding` works, mainly bringing it into native code. This implements the UV binding (which is simply an error map) which lays out the groundwork to implement the rest of the bindings easily.\r\n\r\n\r\n- Closes #2891, Closes #2685 by implementing `process.binding(\"uv\")`\r\n- Closes #4960, Closes #2254 by implementing `process.binding(\"natives\")`\r\n- Might fix #4207, needs testing\r\n- Closer but does not fix #3794\r\n\r\nPerhaps before this is merged i will implement some more of these bindings because some are very easy for us to do.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-14T08:00:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Issue: #4922 \r\n\r\n### What does this PR do?\r\n\r\nThis adds a test case to demonstrate that the transpiler currently fails to hoist dynamic class member initialiation logic into the constructor.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 65,
        "deletions": 57,
        "changed_files": 1,
        "created_at": "2023-09-14T06:57:17Z",
        "closed_at": "2023-09-14T07:48:18Z",
        "merged_at": "2023-09-14T07:48:18Z",
        "body": "### What does this PR do?\r\n\r\nPreviously, `bunx create-t3-app@latest` would use the `/tmp/create-t3-app@latest...`  folder and rely on the OS tmpdir cache removal mechanism to know when to re-download. That's not soon enough. \r\n\r\nThis makes it so the following:\r\n```bash\r\nbunx create-t3-app@latest\r\n```\r\n\r\nwill always check versions from the registry, and possibly re-install it. \r\n\r\nIt does not change the scenario when you do `bunx create-t3-app` by itself. That will still be cached for 1-3 days.\r\n\r\n### How did you verify your code works?\r\n\r\nManual. Would be nice to have a test for this.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 95,
        "deletions": 35,
        "changed_files": 6,
        "created_at": "2023-09-14T05:18:19Z",
        "closed_at": "2023-09-15T08:39:42Z",
        "merged_at": "2023-09-15T08:39:42Z",
        "body": "### What does this PR do?\r\n\r\nfixes #5435\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-14T05:05:30Z",
        "closed_at": "2023-09-14T16:11:44Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 122,
        "deletions": 63,
        "changed_files": 5,
        "created_at": "2023-09-14T03:10:34Z",
        "closed_at": "2023-09-15T00:30:31Z",
        "merged_at": "2023-09-15T00:30:31Z",
        "body": "### What does this PR do?\r\n\r\ndoes not fully fix pm2 but it doesnt error on startup anymore\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 83,
        "changed_files": 8,
        "created_at": "2023-09-14T02:51:00Z",
        "closed_at": "2023-09-14T05:32:03Z",
        "merged_at": "2023-09-14T05:32:03Z",
        "body": "1. Enabling configuration of lockfile location at the global config level means that the lockfile isn't guaranteed consistent across a team. Currently, the only \"safe\" (read: assured consistent) way to use `bun` with multiple contributor teams requires setting that value in the local `bunfig.toml`.\r\n\r\n2. Splitting the two values from each other enables a configuration where you can\u2019t read after writing.\r\n\r\n3. `env` priority is \"correct\" for `BUN_CONFIG_LOCKFILE_SAVE_PATH` but I don't feel like it should exist. It isn't used in the test suite, makes shared configuration impossible, and appears [semi-arbitrarily added](https://github.com/oven-sh/bun/commit/a765b13f526f5d379c7d2535f496fecd9a202add) two years ago in December 2021.\r\n\r\n4. `--lockfile` introduces the same problem, and since it is per-execution, is _extremely_ difficult to ensure consistency. It also gets removed.\r\n\r\n***\r\n\r\nApproach notes:\r\n- This does not change the peechy schema because I'm ~certain that isn't possible.\r\n- I don't know what I don't know in Zig.\r\n- I _think_ there are some other places that can be cleaned up because `lockfile_path` is now a static string.\r\n\r\n***\r\n\r\nCloses #5259",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-14T02:37:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nCurrently `--save` is listed as a flag for `bun install|add|remove` even though it's a no-op.\r\n\r\nThis changes it to only appear in `link` and `unlink` where it does something\r\n\r\nThe existence of `--save` in the helptext also implied that Bun wouldn't update package.json by default which causes confusion\r\n\r\nPer https://github.com/oven-sh/bun/pull/3277 there is a bug where Bun will stop parsing when it encounters an unrecognized long flag, so `bun install --save zod` will behave like `bun install`. This is true for all manner of unimplemented `npm` flags, and adding `--save` to support this use case isn't worth the confusion. Flags like `--save-dev` or more common anyway. \r\n\r\nLater we should refactor the args parsing to its easier to ignore unrecognized long flags and have more control over helptext, etc.\r\n",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 463,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-14T02:15:01Z",
        "closed_at": "2023-09-15T02:43:12Z",
        "merged_at": "2023-09-15T02:43:12Z",
        "body": "merge when https://github.com/oven-sh/WebKit/pull/19 is in our webkit build",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-14T01:10:41Z",
        "closed_at": "2023-09-14T02:27:50Z",
        "merged_at": "2023-09-14T02:27:50Z",
        "body": "### What does this PR do?\r\n\r\nThis updates the documentation for how to add bun-types.\r\nReading the documentation on bun-types it was not clear to me that the tsconfig.ts needs to look like this:\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"types\": [\"bun-types\"]\r\n  }\r\n}\r\n```\r\n\r\nSo i added the \"compilerOptions\" information.\r\n\r\n- [ x ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n\r\n### How did you verify your code works?\r\n\r\n- [  x ] Checked the readme on my pr \r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-14T00:48:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "* resolve an issue where the calculated encodedStdoutLen would always be resolved to undefined due to never being initialized\r\n\r\n* resolve an improper usage of 'apply' on StringPrototypeSlice where the arguments passed to apply are required to be passed as an array rather than varargs.\r\n\r\nFixes: #5319\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nWhen stdout is too large, bun will crash due to both an uninitialized value \"encodedStdoutLen\" which always results in NaN and also an improper usage of `apply` on StringPrototypeSlice which would always result in an exception being thrown.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nThe failing test case I provided in the attached issue now works as expected.\r\n\r\n\r\n- [x] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 7090,
        "deletions": 6995,
        "changed_files": 15,
        "created_at": "2023-09-14T00:35:40Z",
        "closed_at": "2023-09-14T00:57:19Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-13T22:45:29Z",
        "closed_at": "2023-09-14T04:05:02Z",
        "merged_at": "2023-09-14T04:05:02Z",
        "body": "### What does this PR do?\r\n\r\ncorrectly handles escaped CRLF line endings in multiline strings\r\n\r\nfixes https://github.com/oven-sh/bun/issues/4893\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI manually tested against three files\r\n- terminated with CRLF\r\n- terminated with CR\r\n- terminated with LF\r\n\r\nPre change it errored on CRLF and passed on the other 2\r\nPost change it passes on all 3\r\n\r\nI also added an automated test for the failing CRLF scenario.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-13T21:06:15Z",
        "closed_at": "2023-09-13T21:07:43Z",
        "merged_at": "2023-09-13T21:07:43Z",
        "body": "It's always good to have uninstall instructions as well as install, and I couldn't find them anywhere else on the site.\r\n\r\nIMO, this gives users a little more confidence to try new tools out, as they know it's easily reversible.\r\n\r\nI'm not familiar with how to uninstall with Docker, so would appreciate some help there.\r\n\r\nWe could also possibly add a note for \"bash\" on how to remove Bun from the `$PATH`.\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNA\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 64,
        "deletions": 42,
        "changed_files": 1,
        "created_at": "2023-09-13T18:49:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\nBash completions weren't working on WSL2, so I made it like zsh. For bash, this PR makes `bun completions` look for another folder ~/.bun to install bun.completions.bash into. Then, it checks whether to add bun.completions.bash to ~/.bashrc. This is what works for [zsh currently](https://github.com/oven-sh/bun/issues/5153#issuecomment-1716632068). This is needed because for bash, [it only checks for folders that only exist](https://github.com/oven-sh/bun/blob/main/src/cli/install_completions_command.zig#L282) if user has installed `bash-completions`.\r\n\r\n\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nManual test on WSL Ubuntu and Mac.\r\n\r\nFor Macs, [bun.bash](https://github.com/oven-sh/bun/blob/687e31dc3a16e76926f0eb06155c5357741b05ab/completions/bun.bash) uses features added in bash 4.0 or above, so I had to\r\n```bash\r\nbrew install bash\r\nchsh -s /usr/local/bin/bash # to change $SHELL from zsh\r\n```\r\n\r\n to test. Preinstalled bash is only 3.x.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n-->\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T18:03:25Z",
        "closed_at": "2023-09-13T21:08:10Z",
        "merged_at": "2023-09-13T21:08:10Z",
        "body": "### What does this PR do?\r\n\r\nFixes example with `spyOn` and assertions. The example failed because the spied function would be called once but the expectation asserted 0 calls.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n1. Create test file with example.\r\n2. Run `bun test`.\r\n\r\nExample test should now pass.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 109,
        "deletions": 297,
        "changed_files": 1,
        "created_at": "2023-09-13T17:43:36Z",
        "closed_at": "2023-09-18T12:24:37Z",
        "merged_at": null,
        "body": "I've optimized  development.md for clarity and ease of understanding for beginner developers\r\n\r\n### What does this PR do?\r\n\r\nSimplified Language: The language used in the README was simplified to make it more accessible for beginner developers. Complex technical terms were explained or replaced with simpler terms where appropriate.\r\n\r\nImproved Structure: The README was restructured to follow a logical order, making it easier for readers to follow the steps required to set up their development environment for Bun.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-13T16:01:54Z",
        "closed_at": "2023-09-14T03:45:37Z",
        "merged_at": "2023-09-14T03:45:37Z",
        "body": "### What does this PR do?\r\n\r\nUse `bun create svelte` instead of `bunx create-svelte`. \r\n\r\nThis is to bring the documentation at par with the SvelteKit official doc to [create a project](https://kit.svelte.dev/docs/creating-a-project).\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-09-13T15:41:04Z",
        "closed_at": "2023-09-13T21:08:28Z",
        "merged_at": "2023-09-13T21:08:28Z",
        "body": "### What does this PR do?\r\n\r\nThis PR adds some missing links to make it easy to jump to another section.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-13T14:15:11Z",
        "closed_at": "2023-09-13T17:27:33Z",
        "merged_at": "2023-09-13T17:27:33Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\nThe docs were missing instructions on the additions needed to `.gitattributes` in order to make the suggested git config settings work.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T13:44:56Z",
        "closed_at": "2023-09-21T03:11:14Z",
        "merged_at": "2023-09-21T03:11:14Z",
        "body": "sudo is required to run pacman if not root user\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-09-13T11:37:03Z",
        "closed_at": "2023-09-13T23:36:12Z",
        "merged_at": "2023-09-13T23:36:12Z",
        "body": "### What does this PR do?\r\n\r\nFixed typo on the API & CLI Docs.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-13T09:17:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nAdd missed `bun:test` package to builtin modules.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T08:58:08Z",
        "closed_at": "2023-09-13T09:00:12Z",
        "merged_at": "2023-09-13T09:00:12Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nfix plugins loader extensions typo.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-13T08:46:39Z",
        "closed_at": "2023-09-13T08:48:43Z",
        "merged_at": "2023-09-13T08:48:43Z",
        "body": "### What does this PR do?\r\n\r\nPrint informative message on `bun create react`. This command is in a lot of tutorials with good SEO so we need a fix here.\r\n\r\n```bash\r\n$ bun-debug create react\r\nThe \"react\" template has been deprecated.\r\nIt is recommended to use \"react-app\" or \"vite\" instead.\r\n\r\nTo create a project using Create React App, run\r\n\r\n  bun create react-app\r\n\r\nTo create a React project using Vite, run\r\n\r\n  bun create vite\r\n\r\nThen select \"React\" from the list of frameworks.\r\n```\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-09-13T08:36:38Z",
        "closed_at": "2023-09-14T03:54:47Z",
        "merged_at": "2023-09-14T03:54:47Z",
        "body": "### What does this PR do?\r\n\r\nIt is put in a separate file and Bun.spawn()ed because using this setter is a de-optimization to the module resolver and cannot be undone.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T08:36:32Z",
        "closed_at": "2023-09-13T08:47:54Z",
        "merged_at": "2023-09-13T08:47:54Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nfix jsx FragmentFactory output example.\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 190,
        "deletions": 56,
        "changed_files": 7,
        "created_at": "2023-09-13T08:07:14Z",
        "closed_at": "2023-09-14T00:31:59Z",
        "merged_at": "2023-09-14T00:31:59Z",
        "body": "### What does this PR do?\r\n\r\nThis makes `--watch` not wait on the event loop. So if you have slow code that is running, the script restarts immediately instead of waits. While we do use CLOEXEC, we also go ahead and manually track open listening sockets for the HTTP server and close them all before reloading the process. I think that was the original reason why we didn't do this - because you could end up in situations where the OS would route it to a stale HTTP server listening.\r\n\r\n![Screen Recording 2023-09-13 at 12 59 23 AM](https://github.com/oven-sh/bun/assets/709451/badc01dd-f08b-4752-9b5a-b69a76c25d72)\r\n\r\n\r\n### How did you verify your code works?\r\n\r\nManual + existing tests",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-13T08:00:29Z",
        "closed_at": "2023-09-13T08:19:16Z",
        "merged_at": "2023-09-13T08:19:16Z",
        "body": "Bun stores configuration in these three places:\r\n\r\n- `$XDG_CONFIG_HOME/.bunfig.toml`\r\n- `$HOME/.bunfig.toml`\r\n- `${pwd}/bunfig.toml`\r\n\r\nThe use of `bun.toml` is a documentation error.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 8,
        "changed_files": 6,
        "created_at": "2023-09-13T07:58:31Z",
        "closed_at": "2023-09-13T23:57:59Z",
        "merged_at": "2023-09-13T23:57:59Z",
        "body": "### What does this PR do?\r\n\r\nFixes #4593\r\nFixes #4880\r\n\r\nFastify does this thing where they iterate over `require.cache` during plugin registration\r\n\r\n```ts\r\n  // let's see if this is a file, and in that case use that\r\n  // this is common for plugins\r\n  const cache = require.cache\r\n  // cache is undefined inside SEA\r\n  if (cache) {\r\n    const keys = Object.keys(cache)\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key = keys[i]\r\n      if (cache[key].exports === func) { // ERROR HERE: undefined is not an object\r\n        return key\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nNot sure how it gets inserted into the ESM registry, but `msgpack-extract` somehow does this; it's an unevaluated module.\r\n\r\nI don't think unevaluated modules should appear in the require cache at all, period. This PR filters those out.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 133,
        "deletions": 18,
        "changed_files": 10,
        "created_at": "2023-09-13T07:40:26Z",
        "closed_at": "2023-09-14T03:43:40Z",
        "merged_at": "2023-09-14T03:43:40Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T07:06:48Z",
        "closed_at": "2023-09-13T08:38:17Z",
        "merged_at": "2023-09-13T08:38:17Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nUpdates discord.js documentation to correct a named link that previously could mislead people into thinking it's a link to a Discord website when it's a link to discord.js' documentation in reality.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [X] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-13T06:54:19Z",
        "closed_at": "2023-09-14T03:50:22Z",
        "merged_at": "2023-09-14T03:50:22Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\nI noticed that the [modules documentation](https://bun.sh/docs/runtime/modules) doesn't include import example code in the imports section. \r\n\r\n![image](https://github.com/oven-sh/bun/assets/30512204/0913a02f-bc3e-4182-8816-8dec09b11776)\r\n\r\nThis PR replaces the screenshotted code block with:\r\n```ts\r\nimport { foo } from \"./foo\"; // extensions are optional\r\nimport bar from \"./bar.ts\";\r\nimport { stuff } from \"./my-commonjs.cjs\";\r\n```",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-13T06:15:13Z",
        "closed_at": "2023-09-13T17:24:58Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nSimple edit to my First contribution\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1227,
        "deletions": 1244,
        "changed_files": 20,
        "created_at": "2023-09-13T06:15:10Z",
        "closed_at": "2023-09-14T04:39:37Z",
        "merged_at": "2023-09-14T04:39:36Z",
        "body": "### What does this PR do?\r\n\r\nfixes #4806\r\nfixes #2269\r\nfixes #399\r\n\r\nthings tagged on here as well\r\n- chore: remove zig-generated unused fs `constants` string \r\n- fix(runtime): allow calling the console `asyncIterator` Closes #5175\r\n\r\n.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [X] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-13T04:01:50Z",
        "closed_at": "2023-09-13T07:59:47Z",
        "merged_at": null,
        "body": "Fix #5189\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 147,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-09-13T03:55:47Z",
        "closed_at": "2023-09-13T04:51:49Z",
        "merged_at": "2023-09-13T04:51:49Z",
        "body": null,
        "comments": 1
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 15,
        "changed_files": 3,
        "created_at": "2023-09-13T03:45:55Z",
        "closed_at": "2023-09-14T00:43:10Z",
        "merged_at": "2023-09-14T00:43:10Z",
        "body": "### What does this PR do?\r\n\r\n#### 1. long string could lead to a segfault.\r\n\r\nSegmentfault code: \r\n\r\n```JavaScript\r\nconst dns = require(\"node:dns\");\r\n\r\ndns.resolveCname(\"a\".repeat(3000), (err, results) => {});\r\n```\r\n\r\n`null` should not be used here as it can lead to a crash. (Line 530)\r\n\r\nhttps://github.com/oven-sh/bun/blob/3b2c0941e4b418dcf2bfbc5117da76338f45a90e/src/deps/c_ares.zig#L526-L541\r\n\r\n\r\n#### 2. Fix a compatibility issue (`resolveNs` and `resolveSoa`)\r\n\r\n```JavaScript\r\nconst dns = require(\"node:dns\");\r\nfor (const f of [dns.resolveNs, dns.resolveSoa]) {\r\n  f(\"\", (err, results) => {\r\n    console.log(f, results);\r\n  });\r\n}\r\n\r\n// nodejs output\r\n// [Function: bound queryNs] [\r\n//   'h.root-servers.net',\r\n//   'j.root-servers.net',\r\n//   'k.root-servers.net',\r\n//   'd.root-servers.net',\r\n//   'b.root-servers.net',\r\n//   'f.root-servers.net',\r\n//   'l.root-servers.net',\r\n//   'e.root-servers.net',\r\n//   'i.root-servers.net',\r\n//   'a.root-servers.net',\r\n//   'm.root-servers.net',\r\n//   'g.root-servers.net',\r\n//   'c.root-servers.net'\r\n// ]\r\n// [Function: bound querySoa] {\r\n//   nsname: 'a.root-servers.net',\r\n//   hostmaster: 'nstld.verisign-grs.com',\r\n//   serial: 2023091202,\r\n//   refresh: 1800,\r\n//   retry: 900,\r\n//   expire: 604800,\r\n//   minttl: 86400\r\n// }\r\n```\r\n\r\nbun doesn't allow empty strings to be passed into these two functions.\r\n\r\n---\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-09-13T01:33:44Z",
        "closed_at": "2023-09-14T02:49:43Z",
        "merged_at": "2023-09-14T02:49:43Z",
        "body": "### What does this PR do?\r\nFix: https://github.com/oven-sh/bun/issues/5080\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 167,
        "deletions": 126,
        "changed_files": 5,
        "created_at": "2023-09-12T23:10:02Z",
        "closed_at": "2023-09-13T08:26:18Z",
        "merged_at": "2023-09-13T08:26:18Z",
        "body": "### What does this PR do?\r\nfixes #5132 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\nadded test and tested manually.\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-09-12T22:22:35Z",
        "closed_at": "2023-09-14T00:41:47Z",
        "merged_at": "2023-09-14T00:41:47Z",
        "body": "### What does this PR do?\r\n\r\nThis fix printing `.find()` result from `mongodb` package.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nManually testing\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 50,
        "changed_files": 3,
        "created_at": "2023-09-12T21:33:35Z",
        "closed_at": "2023-09-12T21:59:19Z",
        "merged_at": "2023-09-12T21:59:19Z",
        "body": "### What does this PR do?\r\n\r\nAs described in this issue I opened (https://github.com/oven-sh/bun/issues/4843), the Bun Lambda Layer does not currently work properly with API Gateway V1 (REST API) events. There were a few small bugs that contributed to this:\r\n> 1. `isHttpEventV1` assumes the event has a field called `version` and a value of `1.0`. In fact, only V2 events have a `version` with value `2.0` while V1 events simply omit the version field altogether.\r\n> 2. `formatHttpEventV1` inserts headers to a Headers instance both from the `event.headers` field and the `event.multiValueHeaders` and then uses the Headers instance to get the Host and X-Forwarded-Proto header. The problem is that API gateway actually duplicates these values across headers and multiValueHeaders, probably as a convenience thing, so when you retrieve Host from Headers, you end up with something like `example.org, example.org` when you just want `example.org`.\r\n> 3. If Host header is not defined, then `response.text()` is returned. I'm not sure why exactly this is, but it breaks the testing experience in API Gateway unless you explicitly include a Host header.\r\n\r\nRegarding `isHttpEventV1` and `isHttpEventV2`, I followed the same logic used by the popular `serverless-express` library that they use for determining the incoming event type, hopefully hardening these two event identification helpers in case someone wants to use Bun with a different AWS service than API Gateway: https://github.dev/vendia/serverless-express/tree/mainline/src.\r\n\r\nRegarding the Host header and `response.text()`, it was unclear exactly what they were trying to do, but from what I could tell, it seemed like the code was meant to return regular text when the event was not an API Gateway event. That fixed the issue where testing in the API Gateway console did not work or using the API from a non-browser environment was not guaranteed to work.\r\n\r\nIn addition to these bug fixes, the Lambda Layer README.md instructions were lacking with no specific configuration instructions, so I've reorganized some of the documentation and added more instruction to help users more quickly get acquainted with using Bun on Lambda.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nNo existing test setup was included for the Lambda Layer, so I didn't add that myself as it seemed out of scope for a bug fix. I validated that it works through manual testing. Specifically, I deployed the Lambda Layer, created a Lambda function that uses the published Layer, attached it to a V1 REST API, and validated it did not work. Then, I updated the Lambda layer with the changes in this PR and validated that it does work, including printing the incoming request and body to ensure the values were as expected.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-09-12T21:21:47Z",
        "closed_at": "2023-09-13T01:49:19Z",
        "merged_at": "2023-09-13T01:49:19Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nfix code example in documentation about lifecycle hooks\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\ndidn't tested it but seems logic",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T21:03:01Z",
        "closed_at": "2023-09-13T00:09:49Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis PR closes #5153 and suggests appending to a config file like .bashrc or .zshrc when `bun completions` fails (fails on WSL Ubuntu bash since none of these folders in [install_completions_command.zig](https://github.com/oven-sh/bun/blob/main/src/cli/install_completions_command.zig#L282) exist).\r\n\r\nNow, when it fails, it will output\r\n\r\n```bash\r\nPlease either append it to your respective config file (.bashrc, .zshrc, etc):\r\n   bun completions >> ~/.bashrc\r\n   bun completions >> ~/.zshrc \r\n\r\n Pipe it:\r\n   bun completions > /to/a/file\r\n\r\n Or pass a directory:\r\n\r\n   bun completions /my/completions/dir\r\n```\r\n(the first line is a little long but it's just under the recommended 80 char limit)\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nPrinted the updated string and ran `bun completions >> ~/.bashrc` on WSL\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 3,
        "changed_files": 4,
        "created_at": "2023-09-12T20:55:00Z",
        "closed_at": "2023-09-14T04:48:31Z",
        "merged_at": "2023-09-14T04:48:31Z",
        "body": "### What does this PR do?\r\n\r\nFix: https://github.com/oven-sh/bun/issues/4966\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 18,
        "changed_files": 17,
        "created_at": "2023-09-12T20:50:25Z",
        "closed_at": "2023-09-13T01:50:06Z",
        "merged_at": "2023-09-13T01:50:06Z",
        "body": "I tried to fix multiple typos among various files in the documentation \ud83d\ude80 ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T20:18:38Z",
        "closed_at": "2023-09-13T02:14:27Z",
        "merged_at": "2023-09-13T02:14:27Z",
        "body": "### What does this PR do?\r\n\r\nThis fixes a small punctuation typo in the docs for `import.meta.resolve`. It adds a missing quotation.\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] The missing quotation is now present.",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 17,
        "changed_files": 1,
        "created_at": "2023-09-12T19:41:56Z",
        "closed_at": "2023-09-13T04:51:07Z",
        "merged_at": "2023-09-13T04:51:07Z",
        "body": "### What does this PR do?\r\n\r\nThis PR changes the method for enabling Bun lockfile diffs in git. Instead of manually modifying config files, the new method uses the git CLI's `--global` flag to change the global `.gitattributes` file. This should be easier, safer, and more cross-platform than manually modifying the config files. I also clarified that the \"local\" git-attributes file refers to a per-repository setting, while the global `.gitattributes` file refers to a system-wide setting.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T19:09:53Z",
        "closed_at": "2023-09-13T08:56:20Z",
        "merged_at": "2023-09-13T08:56:19Z",
        "body": "I have no idea how to zig but noticed this while exploring the source code and figured I'd do a PR \ud83d\ude05 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T16:42:30Z",
        "closed_at": "2023-09-13T01:50:50Z",
        "merged_at": "2023-09-13T01:50:50Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 7,
        "changed_files": 2,
        "created_at": "2023-09-12T16:35:48Z",
        "closed_at": "2023-09-13T12:35:39Z",
        "merged_at": "2023-09-13T12:35:39Z",
        "body": "### What does this PR do?\r\nFixes #5073 \r\n\r\nImplements a non-strict mode of the percent encoding decoder that instead of immediately throwing an error and using the original data when there is non-URL safe character in a data URL, it passes the non-URL safe characters through and only replaces the percent encoded elements.\r\n\r\n`test.mjs`:\r\n```\r\nconsole.log(await fetch(\"data:application/json,{%7B%7D}\").then((r) => r.text()));\r\nconsole.log(await fetch(\"data:application/json,{%%7B%7D%%}%%\").then((r) => r.text()));\r\nconsole.log(await fetch(\"data:,%20%\ud83d\ude00\").then((r) => r.text()));\r\n```\r\n\r\nNode output:\r\n```\r\n{{}}\r\n{%{}%%}%%\r\n %\ud83d\ude00\r\n```\r\n\r\nBun before this commit:\r\n```\r\n{%7B%7D}\r\n{%%7B%7D%%}%%\r\n%20%\ud83d\ude00\r\n```\r\n\r\nAfter this commit, the output from Bun matches Node.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T15:56:57Z",
        "closed_at": "2023-09-13T05:04:40Z",
        "merged_at": "2023-09-13T05:04:40Z",
        "body": "### Made bun-types install as dev dependency in example\r\n\r\nAs bun-types only adds types and it is suggested in other places to be only installed as dev dependency the readme installation example should also do so\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T15:24:22Z",
        "closed_at": "2023-09-14T03:50:59Z",
        "merged_at": "2023-09-14T03:50:59Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis fixes a link in the Templates doc.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-12T14:44:08Z",
        "closed_at": "2023-09-14T00:41:10Z",
        "merged_at": "2023-09-14T00:41:10Z",
        "body": "### What does this PR do?\r\n\r\nResolves #4986\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- [x] Add test in [os.test.js](https://github.com/WingLim/bun/commit/2b92bcb7e743bb2b501ce85c7802254552ba2d3a#diff-d6b42a80df08c1f8ca95728d1b2166de3388a2c8a0d3085a53177a1c9e7f6154)\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-12T13:40:26Z",
        "closed_at": "2023-09-20T18:14:55Z",
        "merged_at": "2023-09-20T18:14:55Z",
        "body": "### What does this PR do?\r\n\r\n`bun install` and `bun add` both support the `--exact` flag for pinning a dependency's version.\r\nThis adds a shorter `-E` flag as an alias, something that [npm](https://docs.npmjs.com/cli/v10/commands/npm-install#save-exact:~:text=additional%2C%20optional%20flags%3A-,%2DE%2C%20%2D%2Dsave%2Dexact,-%3A%20Saved%20dependencies%20will), [Yarn](https://yarnpkg.com/cli/add#options-E%2C-exact), and [pnpm](https://pnpm.io/cli/add#--save-exact--e) also support.\r\n\r\n- [ ] Documentation or TypeScript types\r\n  - There are a few examples of how to use `--exact` where it may be helpful to have examples for `-E` as well\r\n  - I think it's fine to leave them as-is though\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\nI've tested locally and confirmed that the flag works as expected:\r\n\r\n![screenshot of `bun install zod -E` working locally](https://github.com/oven-sh/bun/assets/7608555/4c9e5ad0-752d-4737-9b8b-4bf5f3ade6ce)\r\n\r\nThere are existing tests for `--exact`. If it'd be useful, those could be duplicated to do the same assertions but with `-E` instead of `--exact. The only thing that'd test would be the CLI arg parsing though, not sure if that's useful.\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-09-12T13:33:19Z",
        "closed_at": "2023-09-12T14:07:08Z",
        "merged_at": "2023-09-12T14:07:08Z",
        "body": "### What does this PR do?\r\n\r\nTo fix webpack loading in bun, in 1.0 we renamed `node:process` and `node:*` aliases to their un-aliased counterparts (where relevant). When we did that, we missed continuing to support the aliased versions in bun build --compile.  \r\n\r\n### How did you verify your code works?\r\n\r\nUpdated the bundler_compile test",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T12:48:10Z",
        "closed_at": "2023-09-12T12:53:55Z",
        "merged_at": "2023-09-12T12:53:55Z",
        "body": "caused by 07a6443a80d57c2aaa958bafba091bf4f9e88ca8",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T12:04:17Z",
        "closed_at": "2023-09-12T15:30:06Z",
        "merged_at": "2023-09-12T15:30:06Z",
        "body": "### What does this PR do?\r\n\r\nRemove the extra \"+\" at the end of a line in the example which causes a syntax error in the example. \r\n\r\n\r\n- [x] Documentation or TypeScript types",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T11:55:51Z",
        "closed_at": "2023-09-12T15:30:24Z",
        "merged_at": "2023-09-12T15:30:24Z",
        "body": "### What does this PR do?\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\nFixed the example for WebSocket Compression to avoid lint error:   \r\n`'message' is declared but its value is never read.`\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 32,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-12T11:54:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n1. add http request async iterator test\r\n2. remove unnecessary destroy() in http incoming message\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 101,
        "deletions": 12099,
        "changed_files": 21,
        "created_at": "2023-09-12T11:43:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\n\n- [x] removed old reat example that was missing files, and there was not much to save there. It was misleading to leave something like this into v1 \n- [x] fixed React file system router example\n\n### How did you verify your code works?\n\nrun on local in v1 and canary\n\n\n\n\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 15,
        "changed_files": 2,
        "created_at": "2023-09-12T11:40:01Z",
        "closed_at": "2023-09-12T12:05:01Z",
        "merged_at": "2023-09-12T12:05:01Z",
        "body": "### What does this PR do?\r\n\r\nFixes #4954 \r\n\r\nCorrects what seems to be a use-after-free memory issue in `node:path` `parse()`.\r\n\r\nThe added test case fails for the original poster of #4954 and for me on macOS x86_64.\r\n\r\nFix the issue by returning the strings via `toValueGC` so they can be freed at the right time in the JS side.\r\n\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 66,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-09-12T10:43:57Z",
        "closed_at": "2023-09-12T13:34:20Z",
        "merged_at": "2023-09-12T13:34:20Z",
        "body": "### What does this PR do?\r\n\r\n- When the linux kernel doesn't support `pidfd_open`, report a more informative error message \r\n- Handle EINTR when pidfd_open is called\r\n\r\n- Check the pid returned by waitpid, per:\r\n> waitpid(): on success, returns the process ID of the child whose\r\n> state has changed; if WNOHANG was specified and one or more\r\n> child(ren) specified by pid exist, but have not yet changed\r\n> state, then 0 is returned.  On failure, -1 is returned.\r\n\r\n### How did you verify your code works?\r\n\r\nExisting tests are hopefully less flaky",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 1856,
        "deletions": 73,
        "changed_files": 21,
        "created_at": "2023-09-12T10:15:47Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nthis runs postinstall scripts\r\n\r\nCloses #606\r\nCloses #4959\r\nCloses #4549",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-09-12T09:39:20Z",
        "closed_at": "2023-09-13T01:51:16Z",
        "merged_at": "2023-09-13T01:51:16Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 9,
        "changed_files": 6,
        "created_at": "2023-09-12T09:34:14Z",
        "closed_at": "2023-09-12T10:35:30Z",
        "merged_at": "2023-09-12T10:35:30Z",
        "body": "### What does this PR do?\r\n\r\n- This skips loading tsconfig.json for `bun run <package.json script>` which was completely unnecessary work\r\n- This fixes a confusing crash when the tsconfig.json `\"extends\"` points to an invalid file path (we do not yet support node_modules resolution in `\"extends\"`)\r\n- This makes an error when loading the current working directory clearer\r\n- This fixes a bug that could cause build errors to be logged twice\r\n\r\n### How did you verify your code works?\r\n\r\nThere are a couple tests\r\n\r\nBut mostly manually tested via the repo in `create-turbo@latest workspace-run npm --skip-install` ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T09:29:42Z",
        "closed_at": "2023-09-20T04:42:56Z",
        "merged_at": null,
        "body": "Because the `file` has already been imported, there is no need to use `Bun.file`\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T09:23:50Z",
        "closed_at": "2023-09-13T01:52:30Z",
        "merged_at": "2023-09-13T01:52:30Z",
        "body": "### What does this PR do?\n\nclang and llvm on arch install v16, update to use v15 and update env.\n\n- [x] Documentation for building bun\n- [ ] Code changes\n\n### How did you verify your code works?\n\nmake setup was failing, now it produces working packages/debug-bun-linux-x64/bun-debug\n\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T09:12:23Z",
        "closed_at": "2023-09-12T10:08:42Z",
        "merged_at": "2023-09-12T10:08:42Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T07:55:28Z",
        "closed_at": "2023-09-13T08:41:18Z",
        "merged_at": "2023-09-13T08:41:18Z",
        "body": "### Updated code for file exists() function\r\n\r\n<!-- file.exists() is an async function and needs to be awaited to get the value -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-09-12T07:43:20Z",
        "closed_at": "2023-09-13T09:02:25Z",
        "merged_at": "2023-09-13T09:02:25Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n1. add test to confirm no \"accept-encoding\" header has been added\r\n2. add check to avoid writing the header\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-12T06:27:28Z",
        "closed_at": "2023-09-13T01:53:23Z",
        "merged_at": "2023-09-13T01:53:23Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThe explanation in the root bunfig.toml contained a typo and some grammar issues. This fixes them.\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation\r\n\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-12T04:46:39Z",
        "closed_at": "2023-09-12T04:47:35Z",
        "merged_at": "2023-09-12T04:47:35Z",
        "body": "### What does this PR do?\r\n\r\nFixes a typo\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 90,
        "deletions": 19,
        "changed_files": 7,
        "created_at": "2023-09-12T03:38:35Z",
        "closed_at": "2023-09-15T03:24:49Z",
        "merged_at": null,
        "body": "### What does this PR do?\r\nfixes #4878 \r\nfixes #4800 \r\nfixes #4664 \r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\ntested manually different create scripts and templates on linux and macos\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-09-12T00:55:30Z",
        "closed_at": "2023-09-19T03:14:32Z",
        "merged_at": "2023-09-19T03:14:32Z",
        "body": "### What does this PR do?\r\nCloses https://github.com/oven-sh/bun/issues/4238\r\nBased off @JeremyFunk's [PR](https://github.com/oven-sh/bun/pull/4907).\r\n\r\nRemoves a check that would prevent an empty `js/ts` file from being run by the JS runtime, causing a confusing error.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-09-12T00:27:40Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\nCloses https://github.com/oven-sh/bun/issues/4118\r\n\r\nAutomatically sets `NODE_ENV=test` when starting up the test runner. Currently doesn't overwrite a preexisting value.\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nI wrote automated tests\r\n\r\n- [x] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [x] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [x] I or my editor ran `zig fmt` on the changed files\r\n- [x] I included a test for the new code, or an existing test covers it\r\n\r\n",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T20:42:53Z",
        "closed_at": null,
        "merged_at": null,
        "body": "### What does this PR do?\r\n\r\nThis PR adds proper quote escaping to the \"bash\" section of the install script when recommending manual change to the bash profile file.\r\n\r\nCurrent output:\r\n```\r\nbun was installed successfully to ~/.bun/bin/bun \r\n\r\nManually add the directory to ~/.bash_profile (or similar):\r\n  export BUN_INSTALL=\"$HOME/.bun\" \r\n  export PATH=$BUN_INSTALL/bin:$PATH \r\n\r\nTo get started, run: \r\n\r\n  bun --help \r\n``` \r\n\r\n(You can see the second statement is not quoted as the previous one)\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n- Manually ran the install script and verified that the output was correct",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T20:14:13Z",
        "closed_at": "2023-09-26T12:08:16Z",
        "merged_at": null,
        "body": "### What does this PR do?\n\n`-DUSE_BUN_JSC_ADDITIONS=ON` was added one time more than necessary... sadly\n\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\n- [X] Code changes\n\n### How did you verify your code works?\n\ntest `make jsc`",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T20:06:16Z",
        "closed_at": "2023-09-13T01:53:55Z",
        "merged_at": "2023-09-13T01:53:55Z",
        "body": "Remove errant slash preventing the correct console log\r\n\r\nOld:\r\n<img width=\"390\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/4225378/6edebe89-3b0d-466d-b6e5-3df8b8a1234f\">\r\n\r\nFixed:\r\n<img width=\"440\" alt=\"image\" src=\"https://github.com/oven-sh/bun/assets/4225378/0a2fc645-7854-4153-af06-a5aeb3a9a7c2\">\r\n\r\n### What does this PR do?\r\n\r\nFixes the websocket quick start guide output from `Listening on localhost:${server.port}` to `Listening on localhost:3000`\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-11T19:39:04Z",
        "closed_at": "2023-09-11T19:39:57Z",
        "merged_at": "2023-09-11T19:39:57Z",
        "body": "Closes #4826\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-09-11T19:19:19Z",
        "closed_at": "2023-09-12T00:19:44Z",
        "merged_at": "2023-09-12T00:19:44Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\nI wrote automated tests \r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T18:57:16Z",
        "closed_at": "2023-09-13T01:54:24Z",
        "merged_at": "2023-09-13T01:54:23Z",
        "body": "### What does this PR do?\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T18:53:26Z",
        "closed_at": "2023-09-14T04:58:54Z",
        "merged_at": null,
        "body": "Remove req to avoid warning interpreter for: `req is declared but its value never read.` message\r\n\r\n### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n### How did you verify your code works?\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-09-11T17:03:45Z",
        "closed_at": "2023-10-17T00:16:11Z",
        "merged_at": "2023-10-17T00:16:11Z",
        "body": "### What does this PR do?\r\nI removed needless array wrapper. `new Set` already has array as argument. No need to create additional wrapper.\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\n<!--\r\n\r\nThis adds a new flag --bail to bun test. When set, it will stop running tests after the first failure. This is useful for CI environments where you want to fail fast.\r\n\r\n-->\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [x] Code changes\r\n\r\n### How did you verify your code works?\r\nYes\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T15:33:06Z",
        "closed_at": "2023-09-11T15:48:54Z",
        "merged_at": "2023-09-11T15:48:54Z",
        "body": "This PR fixes the command name for running tests flagged with `.only`\r\n\r\n### What does this PR do?\r\n\r\nThis PR fixes the command name for running tests flagged with `.only`\r\n\r\n- [x] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- ### How did you verify your code works? -->\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-11T14:34:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "What does this PR do?\r\nThis PR fixes a typo in the documentation for the import_path_remapping feature. The original text was:\r\n\r\nThis is a major divergence from Node.js, which doesn't support any form of import path re-mapping.\r\n\r\nThe correct text is:\r\n\r\nThis is a major divergence from Node.js, which supports import remapping through subpath imports / subpath patterns.\r\n\r\nHow did you verify your code works?\r\nI wrote automated tests that check the documentation for the import_path_remapping feature. The tests ensure that the documentation is correct and that it matches the actual behavior of the feature.\r\n\r\nI also ran make js and committed the transpiled changes. This ensures that the documentation is updated in the JavaScript and TypeScript files.\r\n\r\nFinally, I ran prettier on the changed files to ensure that they are formatted consistently.\r\n\r\nChecklist\r\n[x] Documentation or TypeScript types\r\n[ ] Code changes\r\n[x] I wrote automated tests\r\n[x] I ran make js and committed the transpiled changes\r\n[x] I or my editor ran Prettier on the changed files\r\nReviewers\r\nPlease assign at least one reviewer to this PR.\r\n\r\nI hope this is helpful!",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-11T14:04:30Z",
        "closed_at": "2023-09-11T15:48:26Z",
        "merged_at": "2023-09-11T15:48:26Z",
        "body": "### What does this PR do?\r\n\r\n<!-- **Please explain what your changes do**, example: -->\r\n\r\nThis PR adds .idea directory to bun init's .gitignore\r\n\r\n- [ ] Documentation or TypeScript types (it's okay to leave the rest blank in this case)\r\n- [ ] Code changes\r\n\r\n<!-- ### How did you verify your code works? -->\r\n\r\n<!-- **For code changes, please include automated tests**. Feel free to uncomment the line below -->\r\n\r\n<!-- I wrote automated tests -->\r\n\r\n<!-- If JavaScript/TypeScript modules or builtins changed:\r\n\r\n- [ ] I ran `make js` and committed the transpiled changes\r\n- [ ] I or my editor ran Prettier on the changed files (or I ran `bun fmt`)\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n\r\n-->\r\n\r\n<!-- If Zig files changed:\r\n\r\n- [ ] I checked the lifetime of memory allocated to verify it's (1) freed and (2) only freed when it should be\r\n- [ ] I or my editor ran `zig fmt` on the changed files\r\n- [ ] I included a test for the new code, or an existing test covers it\r\n- [ ] JSValue used outside outside of the stack is either wrapped in a JSC.Strong or is JSValueProtect'ed\r\n-->\r\n\r\n<!-- If new methods, getters, or setters were added to a publicly exposed class:\r\n\r\n- [ ] I added TypeScript types for the new methods, getters, or setters\r\n-->\r\n\r\n<!-- If dependencies in tests changed:\r\n\r\n- [ ] I made sure that specific versions of dependencies are used instead of ranged or tagged versions\r\n-->\r\n\r\n<!-- If functions were added to exports.zig or bindings.zig\r\n\r\n- [ ] I ran `make headers` to regenerate the C header file\r\n\r\n-->\r\n\r\n<!-- If \\*.classes.ts files were added or changed:\r\n\r\n- [ ] I ran `make codegen` to regenerate the C++ and Zig code\r\n-->\r\n\r\n<!-- If a new builtin ESM/CJS module was added:\r\n\r\n- [ ] I updated Aliases in `module_loader.zig` to include the new module\r\n- [ ] I added a test that imports the module\r\n- [ ] I added a test that require() the module\r\n-->\r\n",
        "comments": 1
    }
]