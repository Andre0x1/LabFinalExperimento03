[
    {
        "merged": false,
        "additions": 100,
        "deletions": 84,
        "changed_files": 9,
        "created_at": "2023-10-18T06:30:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Reverts #114586.\r\n\r\ncc #116877 (not closing until this gets a beta backport)\r\nfixes #116684\r\nfixes https://github.com/rust-lang/rust/pull/114586#issuecomment-1751967321\r\n\r\nr? @oli-obk or @lcnr\r\n\r\n",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 54,
        "changed_files": 5,
        "created_at": "2023-10-18T03:55:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Just some small improvements I found while looking over this code.\r\n\r\nr? @wesleywiser ",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 42,
        "changed_files": 5,
        "created_at": "2023-10-18T03:07:03Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Didn't want to fold these into a totally unrelated pr.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 99,
        "deletions": 140,
        "changed_files": 6,
        "created_at": "2023-10-18T03:00:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Feels slightly less ad-hoc, and is an attempt at this comment: https://github.com/rust-lang/rust/pull/116756#issuecomment-1763943843\r\n\r\nThe only thing that I don't like is the filtering in `one_bound_for_assoc_type` -- I wonder if I should filter somewhere else?\r\n\r\nr? @fee1-dead or @oli-obk",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2023-10-18T02:27:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Seems sketchy to be searching for `sym::host` by name, especially when we can get the actual index with not very much work.\r\n\r\nr? fee1-dead",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 45,
        "deletions": 30,
        "changed_files": 8,
        "created_at": "2023-10-18T00:24:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "CC #89566.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 16,
        "changed_files": 5,
        "created_at": "2023-10-17T23:40:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR stabilizes `result_option_inspect`:\r\n\r\n```rust\r\n// core::option\r\n\r\nimpl Option<T> {\r\n    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self;\r\n}\r\n\r\n// core::result\r\n\r\nimpl Result<T, E> {\r\n    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self;\r\n    pub fn inspect_err<F: FnOnce(&E)>(self, f: F) -> Self;\r\n}\r\n```\r\n\r\n<br>\r\n\r\nTracking issue: https://github.com/rust-lang/rust/issues/91345.\r\nImplementation PR: https://github.com/rust-lang/rust/pull/91346.\r\n\r\nCloses https://github.com/rust-lang/rust/issues/91345.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 102,
        "deletions": 44,
        "changed_files": 4,
        "created_at": "2023-10-17T23:08:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fix #46969.\r\n\r\n```\r\nerror[E0308]: mismatched types\r\n  --> $DIR/suggest-contraining-assoc-type-because-of-assoc-const.rs:12:21\r\n   |\r\nLL |     const N: C::M = 4u8;\r\n   |                     ^^^ expected associated type, found `u8`\r\n   |\r\n   = note: expected associated type `<C as O>::M`\r\n                         found type `u8`\r\nhelp: consider constraining the associated type `<C as O>::M` to `u8`\r\n   |\r\nLL | impl<C: O<M = u8>> U<C> for u16 {\r\n   |          ++++++++\r\n\r\n```",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 42,
        "deletions": 14,
        "changed_files": 4,
        "created_at": "2023-10-17T22:46:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Bindgen allows generating `#[non_exhaustive] #[repr(u32)]` enums. This results in nonintuitive nonlocal `improper_ctypes` warnings, even when the types are otherwise perfectly valid in C.\r\n\r\nAdjust for actual tooling expectations by avoiding warning on simple enums with only unit variants.\r\n\r\nCloses https://github.com/rust-lang/rust/issues/116831",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 62,
        "deletions": 28,
        "changed_files": 2,
        "created_at": "2023-10-17T22:07:11Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fix #57457.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 653,
        "deletions": 726,
        "changed_files": 17,
        "created_at": "2023-10-17T19:48:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "based on #116815\r\n\r\nThis simplifies the code by removing all the `self` assignments and\r\nmakes the flow of data clearer - always into the printer.\r\nEspecially in v0 mangling, which already used  `&mut self` in some\r\nplaces, it gets a lot more uniform.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 72,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-10-17T19:30:21Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fix #22488.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-17T17:56:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @fee1-dead \r\n\r\nThis was accidentally allowed by https://github.com/rust-lang/rust/pull/114776 without feature gates",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1905,
        "deletions": 284,
        "changed_files": 110,
        "created_at": "2023-10-17T17:07:25Z",
        "closed_at": "2023-10-17T20:45:50Z",
        "merged_at": "2023-10-17T20:45:50Z",
        "body": "Successful merges:\n\n - #111072 (Add new simpler and more explicit syntax for check-cfg)\n - #116717 (Special case iterator chain checks for suggestion)\n - #116719 (Add MonoItems and Instance to stable_mir)\n - #116787 (Implement an internal lint encouraging use of `Span::eq_ctxt`)\n - #116827 (Make `handle_options` public again.)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=111072,116717,116719,116787,116827)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 281,
        "deletions": 378,
        "changed_files": 19,
        "created_at": "2023-10-17T16:02:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Part of #110897.\r\n\r\nCurrently, nearly every platform implements its own TLS destructor list. This adds unnecessary code and means that issues like #116390 are harder to find and fix. Therefore, this PR unifies all of these implementations into a shared one inside `sys::common::fast_local`, leaving behind only the platform calls needed to ensure the list is emptied.\r\n\r\nThis changes behaviour on some Linux-like platforms, because we now keep our own list. This should however not impact performance too much, as the platform calls would also have needed to allocate.\r\n\r\nBecause it is only used on UNIX and is now much easier, I've removed the fallback implementation in `sys_common`. Because `StaticKey` may now be unused, this resulted in errors for Windows, which is why I have refactored that code to move the at-exit hack to the new `thread_local_guard` module. If it causes too much review pain, I can split this part out.\r\n\r\nTested on aarch64 macOS, checked on all other platforms. Best reviewed per-commit.\r\n\r\n@rustbot label +T-libs +A-thread-locals ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 294,
        "deletions": 254,
        "changed_files": 32,
        "created_at": "2023-10-17T15:46:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I believe `track_errors` is mostly papering over issues that a sufficiently convoluted query graph can hit. I made this change, while the actual change I want to do is to stop bailing out early on errors, and instead use this new `ErrorGuaranteed` to invoke `check_well_formed` for individual items before doing all the `typeck` logic on them.\r\n\r\nThis works towards resolving https://github.com/rust-lang/rust/issues/97477 and various other ICEs, as well as allowing us to use parallel rustc more (which is currently rather limited/bottlenecked due to the very sequential nature in which we do `rustc_hir_analysis::check_crate`)\r\n\r\ncc @SparrowLii @Zoxc for the new `try_par_for_each_in` function",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 900,
        "deletions": 108,
        "changed_files": 42,
        "created_at": "2023-10-17T15:21:49Z",
        "closed_at": "2023-10-17T17:06:46Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #116717 (Special case iterator chain checks for suggestion)\n - #116719 (Add MonoItems and Instance to stable_mir)\n - #116787 (Implement an internal lint encouraging use of `Span::eq_ctxt`)\n - #116827 (Make `handle_options` public again.)\n - #116838 (Fix duplicate labels emitted in `render_multispan_macro_backtrace()`)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116717,116719,116787,116827,116838)\n<!-- homu-ignore:end -->",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 8424,
        "deletions": 2199,
        "changed_files": 158,
        "created_at": "2023-10-17T15:20:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @ghost",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 18,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T14:49:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "(This is a follow up PR on #113654)\r\n\r\nThis PR changes the implementation for `[T]` slice comparison when `T: !BytewiseEq`. The previous implementation using zip was not optimized properly by the compiler, which didn't leverage the fact that both length were equal. Performance improvements are for example 20% when testing that `[Some(0_u64); 4096].as_slice() == [Some(0_u64); 4096].as_slice()`.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T14:29:08Z",
        "closed_at": "2023-10-17T18:50:43Z",
        "merged_at": "2023-10-17T18:50:43Z",
        "body": "17 commits in 6fa6fdc7606cfa664f9bee2fb33ee2ed904f4e88..ff768b45b302efd488178b31b35489e4fabb8799\r\n2023-10-10 23:06:08 +0000 to 2023-10-17 12:51:31 +0000\r\n- Clarify flag behavior in `cargo remove --help` (rust-lang/cargo#12823)\r\n- doc(cargo-login): mention args after `--` in manpage (rust-lang/cargo#12832)\r\n- changelog: add compat notice for `cargo login -- &lt;arg&gt;` (rust-lang/cargo#12830)\r\n- update SPDX License info (rust-lang/cargo#12827)\r\n- Add test for `-V` short argument (rust-lang/cargo#12822)\r\n- add detailed message when target folder path is invalid (rust-lang/cargo#12820)\r\n- chore(deps): update rust crate toml_edit to 0.20.2 (rust-lang/cargo#12761)\r\n- Support `public` dependency configuration with workspace deps (rust-lang/cargo#12817)\r\n- Update rustix to 0.38.18 (rust-lang/cargo#12815)\r\n- contrib docs: add some conveniences (rust-lang/cargo#12812)\r\n- Better suggestion for unsupported `--path` flag (rust-lang/cargo#12811)\r\n- contrib docs: update rfc and roadmap links (rust-lang/cargo#12814)\r\n- contrib doc: remove extraneous word (rust-lang/cargo#12813)\r\n- Update curl-sys to pull in curl 8.4.0 (rust-lang/cargo#12808)\r\n- feat: add package name and version to warning messages (rust-lang/cargo#12799)\r\n- Do not call it \"Downgrading\" when difference is only build metadata (rust-lang/cargo#12796)\r\n- Add unsupported short flag suggestion for `--target` and `--exclude` flags (rust-lang/cargo#12805)\r\n\r\nr? ghost",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 326,
        "deletions": 1,
        "changed_files": 9,
        "created_at": "2023-10-17T09:39:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Found it when investigating https://github.com/rust-lang/rust/issues/116738\r\nI'm not sure whether it's a good style to suggest `unwrap`, seems it's may helpful for newcomers.\r\n\r\n#116738 needs another fix to improve it.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T08:54:24Z",
        "closed_at": "2023-10-18T01:59:42Z",
        "merged_at": "2023-10-18T01:59:42Z",
        "body": "Fixes https://github.com/rust-lang/rust/issues/116582.\r\nFixes miscompile reported at https://github.com/rust-lang/rust/pull/104862.\r\n\r\nr? @cuviper ",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 89,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-17T08:46:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This follows the pattern set by [the Windows parker](https://github.com/rust-lang/rust/blob/ddef56d5dfa18f169af9db912dc8e8343797eebb/library/std/src/sys/windows/thread_parking.rs) when it uses keyed events. An atomic variable is used to track the state and optimize the fast path, while notifications are send via the ticktime server to block and unblock the thread.\r\n\r\nping @xobs\r\n@rustbot label +T-libs +A-atomic\r\nr? libs",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 40,
        "changed_files": 4,
        "created_at": "2023-10-17T08:19:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR replaces the `Vec` used to store labels with an `FxIndexSet` in order to eliminate duplicates\r\n\r\nFixes #116836",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 85,
        "deletions": 72,
        "changed_files": 5,
        "created_at": "2023-10-17T08:08:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is done by moving all the logic into a macro that performs the entire \"run\" operation in one go.\r\n\r\nThis makes https://github.com/rust-lang/rust/pull/116806 obsolete\r\n\r\nr? @spastorino ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 81,
        "deletions": 63,
        "changed_files": 3,
        "created_at": "2023-10-17T07:13:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This pulls out the pure refactorings from https://github.com/rust-lang/rust/pull/116564\r\n\r\nr? @RalfJung ",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 24,
        "changed_files": 6,
        "created_at": "2023-10-17T06:15:11Z",
        "closed_at": null,
        "merged_at": null,
        "body": "It contains a single message that (a) doesn't contain any natural language, and (b) is only used in tests.\r\n\r\nr? @davidtwco ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 128,
        "changed_files": 4,
        "created_at": "2023-10-17T03:32:36Z",
        "closed_at": "2023-10-18T05:50:38Z",
        "merged_at": "2023-10-18T05:50:38Z",
        "body": "It's defined in `rustc_data_structures` but is only used in\r\n`rustc_type_ir`. The code is shorter and easier to read if we remove\r\nthis layer of abstraction and just do the things directly where they are\r\nneeded.\r\n\r\nr? @BoxyUwU ",
        "comments": 17
    },
    {
        "merged": false,
        "additions": 48,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-10-17T01:18:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes [after backport] #116825.\r\n\r\nNot sure if this needs T-lang input / an FCP again (CC #114201).",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 337,
        "deletions": 152,
        "changed_files": 9,
        "created_at": "2023-10-17T00:41:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Not totally happy with this yet, but if the new trait solver is ever to be used by external users, we need to make rustc-type-ir build without internal deps. This adds the \"nightly\" feature which is used by the compiler, and falls back to more simple implementations when that is not active.\r\n\r\nr? @lcnr or @jackh726 -- happy to block this pr on a discussion about design and long-term direction for rustc-type-ir tho",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-17T00:39:54Z",
        "closed_at": "2023-10-17T20:45:50Z",
        "merged_at": "2023-10-17T20:45:50Z",
        "body": "r? @compiler-errors",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-17T00:10:49Z",
        "closed_at": "2023-10-17T02:46:58Z",
        "merged_at": "2023-10-17T02:46:58Z",
        "body": "Commit 8378487 from #114611 changed the location of an obligation deduplication step in `opt_normalize_projection_type`. This meant that deduplication stopped happening on one path where it was still necessary, causing a couple of drastic performance regressions.\r\n\r\nThis commit moves the deduplication back to the old location. The good news is that #114611 had four commits and 8378487 was of minimal importance, so the perf benefits from that PR remain.\r\n\r\nFixes #116780, #116797.\r\n\r\nr? @compiler-errors ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 53,
        "deletions": 0,
        "changed_files": 21,
        "created_at": "2023-10-16T23:18:59Z",
        "closed_at": "2023-10-17T08:26:16Z",
        "merged_at": "2023-10-17T08:26:16Z",
        "body": "Follow up\r\n\r\n* https://github.com/rust-lang/rust/pull/116214\r\n* https://github.com/rust-lang/rust/pull/116432",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 220,
        "deletions": 193,
        "changed_files": 33,
        "created_at": "2023-10-16T22:54:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Investigating perf implications of canonicalizing defining anchor properly...\r\n\r\nr? @ghost cc @oli-obk ",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 51,
        "deletions": 1,
        "changed_files": 18,
        "created_at": "2023-10-16T22:24:02Z",
        "closed_at": "2023-10-17T06:33:01Z",
        "merged_at": "2023-10-17T06:33:01Z",
        "body": "c6e6ecb1afea9695a42d0f148ce153536b279eb5 added it to some of the compiler's crates, but avoided adding it to all of them to reduce bit-rot. This commit adds to more.\r\n\r\nr? @GuillaumeGomez ",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 38,
        "deletions": 19,
        "changed_files": 3,
        "created_at": "2023-10-16T22:22:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "In situations like the following, at the time of exhaustiveness checking there can be inconsistencies between opaque and concrete types for a same pattern. There's a workaround for this already but I got some ICEs when experimenting despite it. This PR makes the workaround more solid.\r\n```rust\r\ntype U = impl Copy;\r\nfn foo(foo: Option<U>) {\r\n    match foo {\r\n        Some((mut x, mut y)) => {\r\n            x = 42;\r\n            y = \"foo\";\r\n        }\r\n        None => {}\r\n    }\r\n}\r\n```\r\n\r\nr? @oli-obk ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 275,
        "deletions": 230,
        "changed_files": 16,
        "created_at": "2023-10-16T21:58:07Z",
        "closed_at": "2023-10-17T00:52:50Z",
        "merged_at": "2023-10-17T00:52:50Z",
        "body": "Successful merges:\n\n - #116754 (coverage: Several small cleanups in `spans`)\n - #116798 (Improve display of parallel jobs in rustdoc-gui tester script)\n - #116800 (Fix implied outlives check for GAT in RPITIT)\n - #116805 (Make `rustc_onunimplemented` export path agnostic)\n - #116808 (Add myself to smir triage)\n - #116811 (Preserve unicode escapes in format string literals when pretty-printing AST)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116754,116798,116800,116805,116808,116811)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 206,
        "deletions": 203,
        "changed_files": 14,
        "created_at": "2023-10-16T20:48:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Normalize before visiting when collecting opaques allowed to be defined by body.\r\n\r\nr? oli-obk\r\n\r\nJust putting this up for initial review, not super cleaned up yet.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 109,
        "deletions": 23,
        "changed_files": 14,
        "created_at": "2023-10-16T20:16:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This keeps track of usage of internal features, and changes the message to instead tell them that using internal features is not supported.\r\n\r\nI thought about several ways to do this but now used the explicit threading of an `Arc<AtomicBool>` through `Session`. This is not exactly incremental-safe, but this is fine, as this is set during macro expansion, which is pre-incremental, and also only affects the output of ICEs, at which point incremental correctness doesn't matter much anyways.\r\n\r\nSee [MCP 620.](https://github.com/rust-lang/compiler-team/issues/596)\r\n\r\n![image](https://github.com/rust-lang/rust/assets/48135649/be661f05-b78a-40a9-b01d-81ad2dbdb690)\r\n",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 212,
        "deletions": 53,
        "changed_files": 8,
        "created_at": "2023-10-16T18:58:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "FFI is inherently unsafe. For memory safety we need to assert that some contract is being upheld on both sides of the FFI, though of course we can only ever check our side. In Rust, `unsafe` blocks are used to assert safety and `// SAFETY` comments describing why it is safe. Currently in sys/windows we have a lot of this unsafety spread all over the place, with variations on the same unsafe patterns repeated. And because of the repitition and frequency, we're a bit lax with the safety comments.\r\n\r\nThis PR aims to fix this and to make FFI safety more auditable by creating an `api` module with the goal of centralising and consolidating this unsafety. It contains thin wrappers around the Windows API that make most functions safe to call or, if that's not possible, then at least safer. Note that its goal is *only* to address safety. It does not stray far from the Windows API and intentionally does not attempt to make higher lever wrappers around, for example, file handles. This is better left to the existing modules. The windows/api.rs file has a top level comment to help future contributors understand the intent of the module and the design decisions made.\r\n\r\nI chose two functions as a first tentative step towards the above goal:\r\n\r\n- [`GetLastError`](https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) is trivially safe. There's no reason to wrap it in an `unsafe` block every time. So I simply created a safe `get_last_error` wrapper.\r\n- [`SetFileInformationByHandle`](https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-setfileinformationbyhandle) is more complex. It essentially takes a generic type but over a C API which necessitates some amount of ceremony. Rather than implementing similar unsafe patterns in multiple places, I provide a safe `set_file_information_by_handle` that takes a Rusty generic type and handles converting that to the form required by the C FFI.\r\n\r\nr? libs",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 214,
        "deletions": 310,
        "changed_files": 9,
        "created_at": "2023-10-16T18:54:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "All of these generics mostly resolve to the same thing, which means we can remove them, greatly simplifying the types involved in pretty printing and unlocking another simplification (that is not performed in this PR): Using `&mut self` instead of passing `self` through the return type.\r\n\r\ncc @eddyb you probably know why it's like this, just checking in and making sure I didn't do anything bad\r\n\r\nr? oli-obk",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-16T18:47:07Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Windows paths do not support `:`, so use a datetime format in ICE dump paths that Windows will accept.\r\n\r\nCC #116809, fix #115180.",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 92,
        "changed_files": 1,
        "created_at": "2023-10-16T18:25:24Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The logic was added in #42826.\r\n\r\nThe test for it (`run-make/type-mismatch-same-crate-name`) passes when just using the macros to control pretty printing. Note that the test does fail unless both of the macros are used, indicating that we're doing something right.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-16T18:10:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #116766",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-16T18:10:31Z",
        "closed_at": "2023-10-17T00:52:50Z",
        "merged_at": "2023-10-17T00:52:50Z",
        "body": "Fixes #116799\r\n\r\nThanks to @Nilstrieb for the pointer to the correct location, that was really helpful for someone unfamiliar with the codebase.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1349,
        "deletions": 509,
        "changed_files": 350,
        "created_at": "2023-10-16T18:01:02Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR makes compiletest run LLVM `FileCheck` tool on mir-opt tests.\r\n\r\nThe check is *run by default*, except if disabled using `// skip-filecheck` comment. This ensures that we do not have a silently broken test. For now, the check is only run on the output of `--emit=mir`, ie. on PreCodegen MIR.\r\n\r\nI give an example on `reference_prop.rs`.\r\n\r\nr? @oli-obk \r\ncc @RalfJung \r\n\r\nFixes https://github.com/rust-lang/rust/issues/85180",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T17:51:14Z",
        "closed_at": "2023-10-17T00:52:50Z",
        "merged_at": "2023-10-17T00:52:50Z",
        "body": "I would like get pinged when someone makes changes to smir",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T17:46:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The persistent use of an internal cursor for readers is expected for buffer data types that aren't read all at once, but for files it leads to the confusing situation where calling `read_to_end` on the same file handle multiple times only returns the contents of the file for the first call. This PR adds a note to the documentation clarifying that in that case, `rewind()` must first be called.\r\n\r\nI'm unsure if this is the right location for the docs update. Maybe it should also be duplicated on `File`?",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 65,
        "changed_files": 12,
        "created_at": "2023-10-16T17:45:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "With this change this will allow us to call `rustc_smir` function from `rustc_driver` and few other places. So things like being able to implement `--emit=smir` will be possible.\r\n\r\nr? @oli-obk ",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 64,
        "changed_files": 7,
        "created_at": "2023-10-16T17:39:05Z",
        "closed_at": "2023-10-17T00:52:50Z",
        "merged_at": "2023-10-17T00:52:50Z",
        "body": "This makes it so that all the matchers that match against paths use the definition path instead of the export path. This removes all duplication around `std`/`alloc`/`core`.\r\n\r\nThis is not necessarily optimal because we now depend on internal implementation details like `core::ops::control_flow::ControlFlow`, which is not very nice and probably not acceptable for a stable `on_unimplemented`.\r\n\r\nAn alternative would be to just string-replace normalize away `alloc`/`core` to `std` as a special case, keeping the export paths but making it so that we're still fully standard library flavor agnostic.\r\n\r\nLooking at the diff, I'm starting to think that some simple string replacement would go a long way towards fixing the problem of duplication while keeping export paths...\r\n\r\nWhat do you prefer?\r\n\r\nAlso @weiznich for your thoughts about the stable version.\r\n\r\nr? compiler-errors",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 209,
        "deletions": 120,
        "changed_files": 26,
        "created_at": "2023-10-16T17:10:52Z",
        "closed_at": "2023-10-16T21:05:14Z",
        "merged_at": "2023-10-16T21:05:14Z",
        "body": "Successful merges:\n\n - #114157 (Enable triagebot no-merges check)\n - #116257 (Suggest trait bounds for used associated type on type param)\n - #116430 (vendoring in tarball sources)\n - #116709 (Update minifier version to 0.2.3)\n - #116786 (Update my mailmap entry)\n - #116790 (opt-dist: disable unused features for tabled crate)\n - #116802 (Remove `DefiningAnchor::Bubble` from opaque wf check)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=114157,116257,116430,116709,116786,116790,116802)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 100,
        "deletions": 27,
        "changed_files": 7,
        "created_at": "2023-10-16T16:20:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "If we're in the MIR validator, our body is local, and our reveal mode is `Reveal::UserFacing`, then use `DefiningAnchor::Bind` -- otherwise, we should never be constraining opaques, so use `DefiningAnchor::Error` like codegen does.\r\n\r\nr? oli-obk",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 37,
        "deletions": 48,
        "changed_files": 7,
        "created_at": "2023-10-16T15:58:24Z",
        "closed_at": "2023-10-16T21:05:13Z",
        "merged_at": "2023-10-16T21:05:13Z",
        "body": "Set the defining anchor to `DefiningAnchor::Bind(parent_def_id)` where `parent_def_id` is the first parent def-id that isn't an opaque.\r\n\r\nThis \"fixes\" some of the nested-return-type wf tests. If we *do* want these to be hard-errors for TAITs, we should probably make those error separately from this check (i.e. via some check like the code in the `OPAQUE_HIDDEN_INFERRED_BOUND` lint). The fact that some of these tests fail but not all of them seems kinda coincidental.\r\n\r\nr? oli-obk",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 31,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-16T15:48:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Closes #113326\r\nBisecting points to #113636 as the fix",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 33,
        "changed_files": 3,
        "created_at": "2023-10-16T15:44:52Z",
        "closed_at": "2023-10-17T00:52:50Z",
        "merged_at": "2023-10-17T00:52:50Z",
        "body": "We enforce certain `Self: 'lt` bounds for GATs to save space for more sophisticated implied bounds, but those currently operate on the HIR. Code was easily reworked to operate on def-ids so that we can properly let these suggestions propagate through synthetic associated types like RPITITs and AFITs.\r\n\r\nr? @jackh726 or @aliemjay\r\n\r\nFixes #116789",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-16T14:53:48Z",
        "closed_at": "2023-10-17T00:52:50Z",
        "merged_at": "2023-10-17T00:52:50Z",
        "body": "If no `-j` option is not passed to `x.py`, it would display `-1`, which isn't great.\r\n\r\nr? @notriddle ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T13:18:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Same as #116317 but for `Option`.\r\n\r\nCloses #115302",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 103,
        "deletions": 32,
        "changed_files": 6,
        "created_at": "2023-10-16T12:48:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Implements https://github.com/rust-lang/compiler-team/issues/670.",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T12:36:34Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Currently, after renumbering there are always unused `RegionVid`s if the return type contains any regions, this is due to `visit_ty` being called twice on the same `Ty`: once with `TyContext::ReturnTy` and once with `TyContext::LocalDecl { local: _0 }`. This PR skips renumbering the first time around.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-16T11:54:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This makes it a bit easier to write cursed codegen backends.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 39,
        "changed_files": 2,
        "created_at": "2023-10-16T10:04:06Z",
        "closed_at": "2023-10-16T21:05:15Z",
        "merged_at": "2023-10-16T21:05:15Z",
        "body": "Features looks unused, so left only used ones.\r\n\r\nr? @Kobzol ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 89,
        "deletions": 21,
        "changed_files": 25,
        "created_at": "2023-10-16T08:28:33Z",
        "closed_at": "2023-10-17T20:45:51Z",
        "merged_at": "2023-10-17T20:45:50Z",
        "body": "Adds a new Rustc internal lint that forbids use of `.ctxt() == .ctxt()` for spans, encouraging use of `.eq_ctxt()` instead (see https://github.com/rust-lang/rust/issues/49509).\r\n\r\nAlso fixed a few violations of the lint in the Rustc codebase (a fun additional way I could test my code). Edit: MIR opt folks I believe that's why you're CC'ed, just a heads up.\r\n\r\nTwo things I'm not sure about:\r\n1. The way I chose to detect calls to `Span::ctxt`. I know adding diagnostic items to methods is generally discouraged, but after some searching and experimenting I couldn't find anything else that worked, so I went with it. That said, I'm happy to implement something different if there's a better way out there. (For what it's worth, if there is a better way, it might be worth documenting in the rustc-dev-guide, which I'm happy to take care of)\r\n2. The error message for the lint. Ideally it would probably be good to give some context as to why the suggestion is made (e.g. `rustc::default_hash_types` tells the user that it's because of performance), but I don't have that context so I couldn't put it in the error message. Happy to iterate on the error message based on feedback during review.\r\n\r\nr? @oli-obk ",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-16T08:09:12Z",
        "closed_at": "2023-10-16T21:05:13Z",
        "merged_at": "2023-10-16T21:05:13Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 58,
        "deletions": 8,
        "changed_files": 2,
        "created_at": "2023-10-16T07:32:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This reduces the runtime for a simple program using `Bytes::next` to iterate through a file from 220ms to 70ms on my Linux box.\r\n\r\nr? @the8472 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 249,
        "deletions": 22,
        "changed_files": 9,
        "created_at": "2023-10-16T04:26:22Z",
        "closed_at": "2023-10-16T07:57:50Z",
        "merged_at": "2023-10-16T07:57:50Z",
        "body": "Successful merges:\n\n - #115196 (Suggest adding `return` if the for semi which can coerce to the fn return type)\n - #115955 (Stabilize `{IpAddr, Ipv6Addr}::to_canonical`)\n - #116776 (Enable `review-requested` feature for rustbot)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115196,115955,116776)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 84,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-16T02:20:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @cuviper @rust-lang/release ",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 34,
        "deletions": 25,
        "changed_files": 2,
        "created_at": "2023-10-16T02:00:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I believe these forms aren't unbearable to work with, and Fluent's ability to use selectors allows us to avoid enumerating every case laboriously.\r\n\r\nCloses #116764 if accepted.\r\n\r\nr? @fee1-dead",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-15T22:39:13Z",
        "closed_at": "2023-10-16T07:57:51Z",
        "merged_at": "2023-10-16T07:57:50Z",
        "body": "See https://github.com/rust-lang/triagebot/pull/1733.\r\n\r\nr? @Mark-Simulacrum ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-15T22:28:07Z",
        "closed_at": "2023-10-16T06:01:23Z",
        "merged_at": "2023-10-16T06:01:23Z",
        "body": "This greatly increases its speed. On one small test program using `Bytes::next` to iterate over a large file, execution time dropped from ~330ms to ~220ms.\r\n\r\nr? @the8472 ",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 148,
        "deletions": 124,
        "changed_files": 23,
        "created_at": "2023-10-15T19:36:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Previously the string passed to `#[unstable(feature = \"...\")]` would be validated as an identifier, but not `#[stable(feature = \"...\")]`. In the standard library there were `stable` attributes containing the empty string, and kebab-case string, neither of which should be allowed.\r\n\r\nPre-existing validation of `unstable`:\r\n\r\n```rust\r\n// src/lib.rs\r\n\r\n#![allow(internal_features)]\r\n#![feature(staged_api)]\r\n#![unstable(feature = \"kebab-case\", issue = \"none\")]\r\n\r\n#[unstable(feature = \"kebab-case\", issue = \"none\")]\r\npub struct Struct;\r\n```\r\n\r\n```console\r\nerror[E0546]: 'feature' is not an identifier\r\n --> src/lib.rs:5:1\r\n  |\r\n5 | #![unstable(feature = \"kebab-case\", issue = \"none\")]\r\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nFor an `unstable` attribute, the need for an identifier is obvious because the downstream code needs to write a `#![feature(...)]` attribute containing that identifier. `#![feature(kebab-case)]` is not valid syntax and `#![feature(kebab_case)]` would not work if that is not the name of the feature.\r\n\r\nHaving a valid identifier even in `stable` is less essential but still useful because it allows for informative diagnostic about the stabilization of a feature. Compare:\r\n\r\n```rust\r\n// src/lib.rs\r\n\r\n#![allow(internal_features)]\r\n#![feature(staged_api)]\r\n#![stable(feature = \"kebab-case\", since = \"1.0.0\")]\r\n\r\n#[stable(feature = \"kebab-case\", since = \"1.0.0\")]\r\npub struct Struct;\r\n```\r\n\r\n```rust\r\n// src/main.rs\r\n\r\n#![feature(kebab_case)]\r\n\r\nuse repro::Struct;\r\n\r\nfn main() {}\r\n```\r\n\r\n```console\r\nerror[E0635]: unknown feature `kebab_case`\r\n --> src/main.rs:3:12\r\n  |\r\n3 | #![feature(kebab_case)]\r\n  |            ^^^^^^^^^^\r\n```\r\n\r\nvs the situation if we correctly use `feature = \"snake_case\"` and `#![feature(snake_case)]`, as enforced by this PR:\r\n\r\n```console\r\nwarning: the feature `snake_case` has been stable since 1.0.0 and no longer requires an attribute to enable\r\n --> src/main.rs:3:12\r\n  |\r\n3 | #![feature(snake_case)]\r\n  |            ^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(stable_features)]` on by default\r\n```",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 206,
        "deletions": 9,
        "changed_files": 12,
        "created_at": "2023-10-15T19:29:10Z",
        "closed_at": "2023-10-15T23:04:00Z",
        "merged_at": "2023-10-15T23:03:59Z",
        "body": "Successful merges:\n\n - #116172 (Broaden the consequences of recursive TLS initialization)\n - #116341 (Implement sys::args for UEFI)\n - #116522 (use `PatKind::Error` when an ADT const value has violation)\n - #116732 (Make x capable of resolving symlinks)\n - #116755 (Remove me from libcore review rotation)\n - #116760 (Remove trivial cast in `guaranteed_eq`)\n - #116771 (Ignore let-chains formatting)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116172,116341,116522,116732,116755,116760,116771)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-15T18:31:13Z",
        "closed_at": "2023-10-15T23:04:00Z",
        "merged_at": "2023-10-15T23:04:00Z",
        "body": "Follow-up to #116688",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 11,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-15T18:25:12Z",
        "closed_at": "2023-10-16T07:50:56Z",
        "merged_at": null,
        "body": "Previously I couldn't find a way for me to get type of a function body, without creating extra hacks, this fixes that.\r\n\r\nr? @oli-obk ",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 347,
        "deletions": 74,
        "changed_files": 47,
        "created_at": "2023-10-15T18:21:24Z",
        "closed_at": "2023-10-15T19:28:43Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #115955 (Stabilize `{IpAddr, Ipv6Addr}::to_canonical`)\n - #116033 (report `unused_import` for empty reexports even it is pub)\n - #116172 (Broaden the consequences of recursive TLS initialization)\n - #116341 (Implement sys::args for UEFI)\n - #116522 (use `PatKind::Error` when an ADT const value has violation)\n - #116732 (Make x capable of resolving symlinks)\n - #116755 (Remove me from libcore review rotation)\n - #116760 (Remove trivial cast in `guaranteed_eq`)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115955,116033,116172,116341,116522,116732,116755,116760)\n<!-- homu-ignore:end -->",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 361,
        "deletions": 326,
        "changed_files": 106,
        "created_at": "2023-10-15T17:38:11Z",
        "closed_at": "2023-10-17T22:40:28Z",
        "merged_at": "2023-10-17T22:40:28Z",
        "body": "AllocIds are globally numbered in a rustc invocation. This makes them very sensitive to changes unrelated to what is being tested. This commit normalizes them by renumbering, in order of appearance in the output.\r\n\r\nThe renumbering allows to keep the identity, that a simple `allocN` wouldn't. This is useful when we have memory dumps.\r\n\r\ncc @saethlin \r\nr? @oli-obk ",
        "comments": 19
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-15T12:50:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "See https://github.com/rust-lang/rust/pull/115719#issuecomment-1762725010\r\ncc @RalfJung ",
        "comments": 9
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T10:54:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When docker-podman compat was set up in a way that causes \"docker\" to be the argv[0] of podman, the previous detection did not work. This was for example the case in the compat package from nixpkgs.\r\n\r\nThis checks the output and should work everywhere.\r\n\r\nI tested it locally by executing\r\n```sh\r\nif [[ \"$id\" != 0 && \"$(docker version)\" =~ Podman ]]; then\r\n    echo yes\r\nelse\r\n    echo no\r\nfi\r\n```\r\nwhich printed `no` before, and `yes` now.\r\n\r\nfixes #113129\r\n\r\nr? cuviper",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T10:34:34Z",
        "closed_at": "2023-10-15T23:04:00Z",
        "merged_at": "2023-10-15T23:04:00Z",
        "body": "I found this while accidentally breaking trivial casts in another branch.\r\n\r\nr? oli-obk",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 53,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-10-15T09:37:25Z",
        "closed_at": "2023-10-15T13:22:52Z",
        "merged_at": "2023-10-15T13:22:52Z",
        "body": "Successful merges:\n\n - #116594 (Fix `std::convert::TryFrom` doc)\n - #116741 (Document `string_deref_patterns` feature)\n - #116748 (Fix a spot I wrote the wrong word)\n - #116753 (add 'Onur \u00d6zkan' to .mailmap)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116594,116741,116748,116753)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 661,
        "deletions": 40,
        "changed_files": 10,
        "created_at": "2023-10-15T08:54:02Z",
        "closed_at": "2023-10-17T14:10:30Z",
        "merged_at": "2023-10-17T14:10:30Z",
        "body": "This should unblock #116058.\r\n\r\nr? @oli-obk ",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-15T07:51:17Z",
        "closed_at": "2023-10-15T23:04:00Z",
        "merged_at": "2023-10-15T23:04:00Z",
        "body": "I'm looking at my commitments right now, and unfortunately this needs to go for at least a while.\r\n\r\nIf there's something in particular I can probably still take them, but I should drop out of the rotation for now.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 129,
        "deletions": 128,
        "changed_files": 1,
        "created_at": "2023-10-15T06:58:22Z",
        "closed_at": "2023-10-17T00:52:51Z",
        "merged_at": "2023-10-17T00:52:51Z",
        "body": "While investigating the details of coverage span processing, I noticed several opportunities to make the code simpler and clearer.\r\n\r\n---\r\n\r\n@rustbot label +A-code-coverage",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-15T06:25:05Z",
        "closed_at": "2023-10-15T13:22:52Z",
        "merged_at": "2023-10-15T13:22:52Z",
        "body": "self-explanatory",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 179,
        "deletions": 105,
        "changed_files": 5,
        "created_at": "2023-10-15T03:18:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This reworks the [`overlapping_range_endpoints`](https://doc.rust-lang.org/beta/nightly-rustc/rustc_lint_defs/builtin/static.OVERLAPPING_RANGE_ENDPOINTS.html) lint. My motivations are:\r\n\r\n- It was annoying to have this lint entangled with the exhaustiveness algorithm, especially wrt librarification;\r\n- This makes the lint behave consistently.\r\n\r\nHere's the consistency story. Take the following matches:\r\n```rust\r\nmatch (0u8, true) {\r\n    (0..=10, true) => {}\r\n    (10..20, true) => {}\r\n    (10..20, false) => {}\r\n    _ => {}\r\n}\r\nmatch (true, 0u8) {\r\n    (true, 0..=10) => {}\r\n    (true, 10..20) => {}\r\n    (false, 10..20) => {}\r\n    _ => {}\r\n}\r\n```\r\nThere are two semantically consistent options: option 1 we lint all overlaps between the ranges, option 2 we only lint the overlaps that could actually occur (i.e. the ones with `true`). Option 1 is what this PR does. Option 2 is possible but would require the exhaustiveness algorithm to track more things for the sake of the lint. The status quo is that we're inconsistent between the two.\r\n\r\nOption 1 generates more false postives, but I prefer it from a maintainer's perspective. I do think the difference is minimal; cases where the difference is observable seem rare.\r\n\r\nThis PR adds a separate pass, so this will have a perf impact. Let's see how bad, it looked ok locally.",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 36,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-14T23:38:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The `BufReader` struct has a `seek_relative` method because its `Seek::seek` implementation involved dumping the internal buffer (https://github.com/rust-lang/rust/issues/31100).\r\n\r\nUnfortunately, there isn't really a good way to take advantage of that method in generic code. This PR adds the same method to the main `Seek` trait with the straightforward default method, and an override for `BufReader` that calls its implementation.\r\n\r\n_Also discussed in [this](https://internals.rust-lang.org/t/add-seek-seek-relative/19546) internals.rust-lang.org thread._",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-14T22:24:07Z",
        "closed_at": "2023-10-15T13:22:52Z",
        "merged_at": "2023-10-15T13:22:52Z",
        "body": "I was reading this comment while I was looking at #116505, and it garden-path-sentence'd me, so fix that for people in the future.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 711,
        "deletions": 273,
        "changed_files": 22,
        "created_at": "2023-10-14T21:17:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @oli-obk this is what I meant on Zulip. For now I left the type visitor in the code; removing it and switching to a simple interning loop will mean we accept code that we currently reject, such as this\r\n```rust\r\nconst CONST_RAW: *const Vec<i32> = &Vec::new() as *const _;\r\n```\r\nI see no reason for us to reject such code, but accepting it should go through t-lang FCP, so I want to do that in a follow-up PR.\r\n\r\nThis PR does change behavior in the following situations:\r\n1. Shared references inside `static mut` are no longer put in read-only memory. This affects for instance `static mut FOO: &i32 = &0;`. We never *promised* that this would be read-only, and `static mut` is [an anti-pattern anyway](https://github.com/rust-lang/rust/issues/53639), so I think this is fine. If you want read-only memory, write this as `static INNER: i32 = 0; static mut FOO: &i32 = &INNER;`.\r\n2. Potentially, mutable things in a `static` are now marked read-only. That would be a problem. But I am not sure if that can happen? The code mentions `static FOO: *const AtomicUsize = &AtomicUsize::new(42)`, but that is rejected for being non-`Sync`. [This variant](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=112e930ae1b3ef285812ab404ca296fa) also gets rejected, and same for [this one](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=0dac8d173a2b3099b9c2854fdad7a87c). I think we should reject all cases where a `static` introduces mutable state, except for the outermost allocation itself which can have interior mutability (and which is the one allocation where we have fully reliable type information).\r\n\r\nWhat I still want to do in this PR before it is ready for review it is ensure we detect situations where `&mut` or `&UnsafeCell` points to immutable allocations. That should detect if we have any instance of case (2). That check should be part of the regular type validity check though, not part of interning.",
        "comments": 31
    },
    {
        "merged": false,
        "additions": 24,
        "deletions": 32,
        "changed_files": 6,
        "created_at": "2023-10-14T20:57:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR reverts #107680 and some pre-existing occurrences of the same pattern.\r\n\r\nThe issue that prompted the workaround, #90435, has since been fixed by #115439.\r\n\r\nTested by running `x.py doc --stage 1 library/std` and confirming that std/path/struct.PathBuf.html contains no visible `#[repr(transparent)]`. Note that `x.py doc library/std` runs using stage0 rustdoc (maybe depending on config.toml?) and will continue to render a `#[repr(transparent)]`, but that's okay and shouldn't make it into official documentation of the 1.75.0 release.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 116,
        "deletions": 18,
        "changed_files": 7,
        "created_at": "2023-10-14T20:35:07Z",
        "closed_at": "2023-10-15T00:48:18Z",
        "merged_at": "2023-10-15T00:48:18Z",
        "body": "Successful merges:\n\n - #116540 (Implement `OnceCell/Lock::try_insert()`)\n - #116576 (const-eval: allow calling functions with targat features disabled at compile time in WASM)\n - #116661 (Make \"request changes\" reviews apply `S-waiting-on-author`)\n\nFailed merges:\n\n - #116643 (x.py zsh completion support)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116540,116576,116661)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 45,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-14T20:26:33Z",
        "closed_at": "2023-10-15T13:22:52Z",
        "merged_at": "2023-10-15T13:22:52Z",
        "body": "Rendered: \r\n![image](https://github.com/rust-lang/rust/assets/59372212/aa3ef9e7-080d-4979-a363-3c24fe299c00)\r\n\r\n",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 91,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-14T19:59:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The problem is that we are not handling ConstKind::Expr when checking for is_const_evaluatable and having a non region param.\r\n\r\nFixes [#114151]",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-14T19:01:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #116616",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 434,
        "deletions": 161,
        "changed_files": 35,
        "created_at": "2023-10-14T17:22:19Z",
        "closed_at": "2023-10-14T20:33:36Z",
        "merged_at": "2023-10-14T20:33:36Z",
        "body": "Successful merges:\n\n - #115439 (rustdoc: hide `#[repr(transparent)]` if it isn't part of the public ABI)\n - #116591 (Don't accidentally detect the commit hash as an `fadd` instruction)\n - #116603 (Reorganize `bootstrap/Cargo.toml`)\n - #116715 (Prevent more spurious unreachable pattern lints)\n - #116723 (Fix broken build on ESP-IDF caused by #115108)\n - #116730 (Add some unsoundness tests for opaques capturing hidden regions not in substs)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115439,116591,116603,116715,116723,116730)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 101,
        "deletions": 39,
        "changed_files": 4,
        "created_at": "2023-10-14T16:16:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Opening a PR for a patch I had lying around for roughly 3 months to motivate myself to finish it.\r\nFixes bevyengine/bevy#8898 (#113015, subitem (1)).\r\nPart of #113015.\r\n\r\nBefore/after (cross-crate re-export scenario):\r\n\r\n```diff\r\n- pub fn rpit_fn() -> impl Fn()\r\n+ pub fn rpit_fn() -> impl Fn() -> bool\r\n- pub fn rpit_fn_mut() -> impl for<'a> FnMut(&'a str)\r\n+ pub fn rpit_fn_mut() -> impl for<'a> FnMut(&'a str) -> &'a str\r\n```\r\n\nDraft: See FIXMEs.\n\r\nr? @ghost",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 579,
        "deletions": 366,
        "changed_files": 11,
        "created_at": "2023-10-14T15:51:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is a rework of the `non_exhaustive_omitted_patterns` lint to make it more consistent. The intent of the lint is to help consumers of `non_exhaustive` enums ensure they stay up-to-date with all upstream variants. This rewrite fixes two cases we didn't handle well before:\r\n\r\nFirst, because of details of exhaustiveness checking, the following wouldn't lint `Enum::C` as missing:\r\n```rust\r\nmatch Some(x) {\r\n    Some(Enum::A) => {}\r\n    Some(Enum::B) => {}\r\n    _ => {}\r\n}\r\n```\r\n\r\nSecond, because of the fundamental workings of exhaustiveness checking, the following would treat the `true` and `false` cases separately and thus lint about missing variants:\r\n```rust\r\nmatch (true, x) {\r\n    (true, Enum::A) => {}\r\n    (true, Enum::B) => {}\r\n    (false, Enum::C) => {}\r\n    _ => {}\r\n}\r\n```\r\nMoreover, it would correctly not lint in the case where the pair is flipped, because of asymmetry in how exhaustiveness checking proceeds.\r\n\r\nA drawback is that it no longer makes sense to set the lint level per-arm. This will silently break the lint for current users of it (but it's behind a feature gate so that's ok). \r\n\r\nThe new approach is now independent of the exhaustiveness algorithm; it's a separate pass that looks at patterns column by column. This is another of the motivations for this: I'm glad to move it out of the algorithm, it was akward there.\r\n\r\nThis PR is almost identical to https://github.com/rust-lang/rust/pull/111651. cc @eholk who reviewed it at the time. Compared to then, I'm more confident this is the right approach.",
        "comments": 16
    },
    {
        "merged": false,
        "additions": 357,
        "deletions": 20,
        "changed_files": 16,
        "created_at": "2023-10-14T15:06:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is a revival of #116040, except removing the changes to opaque lifetime captures check to make sure that we're not triggering any unsoundness due to the lack of general existential regions and the currently-existing `ReErased` hack we use instead.\r\n\r\nr? @aliemjay -- I appreciate you pointing out the unsoundenss in the previous iteration of this PR, and I'd like to hear that you're happy with this iteration of this PR before this goes back into FCP :>\r\n\r\nFixes #116794 as well\r\n\r\n---\r\n\r\n(mostly copied from #116040 and reworked slightly)\r\n\r\n# Background\r\n\r\nRight now, liveness analysis in NLL is a bit simplistic. It simply walks through all of the regions of a type and marks them as being live at points. This is problematic in the case of aliases, since it requires that we mark **all** of the regions in their args[^1] as live, leading to bugs like #42940.\r\n\r\nIn reality, we may be able to deduce that fewer regions are allowed to be present in the projected type (or \"hidden type\" for opaques) via item bounds or where clauses, and therefore ideally, we should be able to soundly require fewer regions to be live in the alias.\r\n\r\nFor example:\r\n```rust\r\ntrait Captures<'a> {}\r\nimpl<T> Captures<'_> for T {}\r\n\r\nfn capture<'o>(_: &'o mut ()) -> impl Sized + Captures<'o> + 'static {}\r\n\r\nfn test_two_mut(mut x: ()) {\r\n    let _f1 = capture(&mut x);\r\n    let _f2 = capture(&mut x);\r\n    //~^ ERROR cannot borrow `x` as mutable more than once at a time\r\n}\r\n```\r\n\r\nIn the example above, we should be able to deduce from the `'static` bound on `capture`'s opaque that even though `'o` is a captured region, it *can never* show up in the opaque's hidden type, and can soundly be ignored for liveness purposes.\r\n\r\n# The Fix\r\n\r\nWe apply a simple version of RFC 1214's `OutlivesProjectionEnv` and `OutlivesProjectionTraitDef` rules to NLL's `make_all_regions_live` computation.\r\n\r\nSpecifically, when we encounter an alias type, we:\r\n1. Look for a unique outlives bound in the param-env or item bounds for that alias. If there is more than one unique region, bail, unless any of the outlives bound's regions is `'static`, and in that case, prefer `'static`. If we find such a unique region, we can mark that outlives region as live and skip walking through the args of the opaque.\r\n2. Otherwise, walk through the alias's args recursively, as we do today.\r\n\r\n## Limitation: Multiple choices\r\n\r\nThis approach has some limitations. Firstly, since liveness doesn't use the same type-test logic as outlives bounds do, we can't really try several options when we're faced with a choice.\r\n\r\nIf we encounter two unique outlives regions in the param-env or bounds, we simply fall back to walking the opaque via its args. I expect this to be mostly mitigated by the special treatment of `'static`, and can be fixed in a forwards-compatible by a more sophisticated analysis in the future.\r\n\r\n## Limitation: Opaque hidden types\r\n\r\nSecondly, we do not employ any of these rules when considering whether the regions captured by a hidden type are valid. That causes this code (cc #42940) to fail:\r\n\r\n```rust\r\ntrait Captures<'a> {}\r\nimpl<T> Captures<'_> for T {}\r\n\r\nfn a() -> impl Sized + 'static {\r\n    b(&vec![])\r\n}\r\n\r\nfn b<'o>(_: &'o Vec<i32>) -> impl Sized + Captures<'o> + 'static {}\r\n```\r\n\r\nWe need to have existential regions to avoid [unsoundness](https://github.com/rust-lang/rust/pull/116040#issuecomment-1751628189) when an opaque captures a region which is not represented in its own substs but which outlives a region that does.\r\n\r\n## Read more\r\n\r\nContext: https://github.com/rust-lang/rust/pull/115822#issuecomment-1731153952 (for the liveness case)\r\nMore context: https://github.com/rust-lang/rust/issues/42940#issuecomment-455198309 (for the opaque capture case, which this does not fix)\r\n\r\n[^1]: except for bivariant region args in opaques, which will become less relevant when we move onto edition 2024 capture semantics for opaques.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-14T14:58:16Z",
        "closed_at": "2023-10-15T23:04:00Z",
        "merged_at": "2023-10-15T23:04:00Z",
        "body": "When bootstrapping from outside of the rust source, instead of calling 'x' from the absolute path\r\n(like /home/user/rust/x), we should be able to link 'x' from the rust source to binary paths so it can be used easily. Before this change, 'x' was not capable of finding 'x.py' when called from the linked file.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 7,
        "changed_files": 7,
        "created_at": "2023-10-14T14:32:32Z",
        "closed_at": "2023-10-16T18:57:20Z",
        "merged_at": "2023-10-16T18:57:20Z",
        "body": "For context, I'm looking to use [late module passes](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LintStore.html#structfield.late_module_passes) in Clippy which unlike regular late passes run incrementally per module\r\n\r\nHowever we have a config file which can change between runs, we need changes to that to invalidate the `lint_mod` query. This PR adds a side channel for us to hash some extra state into `Options` in order to do that\r\n\r\nThis does not make any changes to Clippy, I plan to do that in a PR to the Clippy repo along with some other required changes\r\n\r\nAn alternative implementation would be to add a new query to track this state and override the `lint_mod` query in Clippy to first call that\r\n\r\ncc @rust-lang/clippy",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 134,
        "deletions": 0,
        "changed_files": 6,
        "created_at": "2023-10-14T13:28:49Z",
        "closed_at": "2023-10-14T20:33:36Z",
        "merged_at": "2023-10-14T20:33:36Z",
        "body": "Commit tests from https://github.com/rust-lang/rust/pull/116040#issuecomment-1751610237 and https://github.com/rust-lang/rust/pull/59402#issuecomment-476003242 so that we make sure not to regress them the next time that we relax the opaque capture rules :^)",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 77,
        "deletions": 27,
        "changed_files": 12,
        "created_at": "2023-10-14T11:48:20Z",
        "closed_at": "2023-10-14T15:06:23Z",
        "merged_at": "2023-10-14T15:06:23Z",
        "body": "Successful merges:\n\n - #115653 (Guarantee that Layout::align returns a non-zero power of two)\n - #116577 (add `SAFETY` block on the usage of unsafe `getuid`)\n - #116618 (Add the V (vector) extension to the riscv64-linux-android target spec)\n - #116679 (Remove some unnecessary `unwrap`s)\n - #116689 (explicitly handle auto trait leakage in coherence)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115653,116577,116618,116679,116689)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 97,
        "deletions": 24,
        "changed_files": 9,
        "created_at": "2023-10-14T11:36:29Z",
        "closed_at": "2023-10-14T16:55:58Z",
        "merged_at": "2023-10-14T16:55:58Z",
        "body": "Successful merges:\n\n - #116630 (Add ability to get lines/filename for Span in smir)\n - #116644 (remove outdated bootstrap FIXME)\n - #116695 (Fix a comment)\n - #116696 (Misc improvements)\n - #116704 (Fix AFIT lint message to mention pitfall)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116630,116644,116695,116696,116704)\n<!-- homu-ignore:end -->",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 144,
        "deletions": 92,
        "changed_files": 22,
        "created_at": "2023-10-14T11:36:25Z",
        "closed_at": "2023-10-14T11:48:01Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #115653 (Guarantee that Layout::align returns a non-zero power of two)\n - #116312 (Initiate the inner usage of `cfg_match` (Compiler))\n - #116577 (add `SAFETY` block on the usage of unsafe `getuid`)\n - #116618 (Add the V (vector) extension to the riscv64-linux-android target spec)\n - #116679 (Remove some unnecessary `unwrap`s)\n - #116689 (explicitly handle auto trait leakage in coherence)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115653,116312,116577,116618,116679,116689)\n<!-- homu-ignore:end -->",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 24,
        "changed_files": 2,
        "created_at": "2023-10-14T10:30:01Z",
        "closed_at": "2023-10-16T12:39:13Z",
        "merged_at": "2023-10-16T12:39:13Z",
        "body": "Fixes https://github.com/rust-lang/miri/issues/2836\r\nNothing has moved here in half a year, so let's just remove these unused stubs -- they need a proper re-design anyway.\r\n\r\nr? @oli-obk ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-14T09:39:12Z",
        "closed_at": "2023-10-14T20:33:36Z",
        "merged_at": "2023-10-14T20:33:36Z",
        "body": "@ijackson #115108 broke the build for ESP-IDF. I'm still checking whether this PR fixes everything - once I'm ready will remove the \"Draft\" status.\r\n\r\n@dtolnay FYI",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 401,
        "deletions": 45,
        "changed_files": 7,
        "created_at": "2023-10-14T05:55:37Z",
        "closed_at": "2023-10-17T20:45:51Z",
        "merged_at": "2023-10-17T20:45:51Z",
        "body": "Also add a few methods to instantiate instances and get an instance definition. We're still missing support to actually monomorphize the instance body.\r\n\r\nThis is related to https://github.com/rust-lang/project-stable-mir/issues/36\r\n\r\nr? @oli-obk\r\n\r\n@oli-obk is that what you were thinking? I incorporated @bjorn3 idea of just adding a Shim instance definition in https://github.com/rust-lang/rust/pull/116465.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 393,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-10-14T04:12:04Z",
        "closed_at": "2023-10-17T20:45:51Z",
        "merged_at": "2023-10-17T20:45:51Z",
        "body": "When encountering method call chains of `Iterator`, check for trailing `;` in the body of closures passed into `Iterator::map`, as well as calls to `<T as Clone>::clone` when `T` is a type param and `T: !Clone`.\r\n\r\nFix #9082.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 108,
        "deletions": 103,
        "changed_files": 14,
        "created_at": "2023-10-14T01:11:48Z",
        "closed_at": "2023-10-14T20:33:36Z",
        "merged_at": "2023-10-14T20:33:36Z",
        "body": "Continues the work of https://github.com/rust-lang/rust/pull/115937 by introducing `PatKind::Error`, to be used instead of `PatKind::Wild` when an error was raised during pattern lowering. Most of match checking lints are skipped when a `PatKind::Error` is encountered. This avoids confusing extra warnings when a pattern is malformed. Now `PatKind::Wild` should indicate an actual wildcard pattern.\r\n\r\nr? @oli-obk ",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 13,
        "deletions": 49,
        "changed_files": 2,
        "created_at": "2023-10-14T00:56:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #116711\r\n\r\nThe main pain of this PR is to fix the buggy impl of `Ord` for `SocketAddrV6`, which ignored half of the fields (while `PartialEq` is derived):\r\nhttps://github.com/rust-lang/rust/blob/4603f0b8afb495ae56cd4c8f70d5d478d906ac54/library/core/src/net/socket_addr.rs#L99-L106\r\n\r\nhttps://github.com/rust-lang/rust/blob/4603f0b8afb495ae56cd4c8f70d5d478d906ac54/library/core/src/net/socket_addr.rs#L676\r\n\r\nFor me it looks like a simple copy-paste error made in https://github.com/rust-lang/rust/pull/72239 (copy from v4 impl) (cc @hch12907), as I don't see this behavior being mentioned anywhere on the PR and it also does not respect `cmp` trait \"rules\". I also do not see any reasons for those impls to _not_ be derived.\r\n\r\nIt's a shame we did not notice this for 28 versions/3 years. I guess this is a bug fix, but I'm not sure what the process here should be.\r\n\r\nr? libs",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 588,
        "deletions": 98,
        "changed_files": 31,
        "created_at": "2023-10-13T23:31:56Z",
        "closed_at": "2023-10-18T07:44:59Z",
        "merged_at": "2023-10-18T07:44:59Z",
        "body": "Fix #116703.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 95,
        "deletions": 35,
        "changed_files": 5,
        "created_at": "2023-10-13T22:44:04Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fix #116252.",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-13T22:18:39Z",
        "closed_at": "2023-10-16T21:05:14Z",
        "merged_at": "2023-10-16T21:05:14Z",
        "body": "Thanks for the fix @notriddle !\r\n\r\nr? @notriddle ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 2776,
        "deletions": 387,
        "changed_files": 18,
        "created_at": "2023-10-13T21:10:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @ghost ",
        "comments": 14
    },
    {
        "merged": false,
        "additions": 580,
        "deletions": 350,
        "changed_files": 92,
        "created_at": "2023-10-13T20:39:21Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @ghost",
        "comments": 14
    },
    {
        "merged": false,
        "additions": 35,
        "deletions": 5,
        "changed_files": 6,
        "created_at": "2023-10-13T19:54:15Z",
        "closed_at": null,
        "merged_at": null,
        "body": "WIP fix for #85099, will write up a description w/ @lcnr when I'm back from traveling\r\n\r\nr? lcnr",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 13,
        "changed_files": 3,
        "created_at": "2023-10-13T19:48:08Z",
        "closed_at": "2023-10-13T23:25:57Z",
        "merged_at": "2023-10-13T23:25:57Z",
        "body": "This reverts commit 93677276bc495e78f74536385a16201d465fd523 because it caused issues for projects building the standard library with non-cargo build systems.\r\n\r\nSee https://github.com/rust-lang/rust/pull/116318#issuecomment-1761977900\r\n\r\nr? workingjubilee",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-13T19:13:32Z",
        "closed_at": "2023-10-14T16:55:58Z",
        "merged_at": "2023-10-14T16:55:58Z",
        "body": "Addresses https://github.com/rust-lang/rust/pull/116184#issuecomment-1745194387 by adding a short note. Not sure exactly of the wording -- I don't think this should be a blocker for the stabilization PR since we can iterate on this lint's messaging in the next few weeks in the worst case.\r\n\r\nr? @tmandry cc @traviscross @jonhoo ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T17:50:42Z",
        "closed_at": "2023-10-14T12:52:01Z",
        "merged_at": "2023-10-14T12:52:00Z",
        "body": "We support compressing debuginfo during codegen, but until this patch we didn't pass the flag to the linker. Doing so means we'll respect the requested compression even when building binaries or dylibs. This produces much smaller binaries: in my testing a debug build of ripgrep goes from 85M to 32M, and the target/ directory (after a clean build in both cases) goes from 508M to 329M just by enabling zlib compression of debuginfo.",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T17:13:19Z",
        "closed_at": "2023-10-13T18:34:08Z",
        "merged_at": null,
        "body": "I found `RUSTFLAGS_NOT_BOOTSTRAP` myself, but what I really needed was `MAGIC_EXTRA_RUSTFLAGS`. Add a hint about `MAGIC_EXTRA_RUSTFLAGS` next to `RUSTFLAGS_NOT_BOOTSTRAP` to make it easier for others to find in the future.\r\n\r\nAlso see https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/-Zunpretty.3Dexpanded.20rustc_middle.3F",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-13T16:21:53Z",
        "closed_at": "2023-10-13T17:51:48Z",
        "merged_at": null,
        "body": "Fixes #116699 \r\nCreating a PR Template to make the PR more informative.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 9,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-13T15:17:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This allows the bootstrap cache path to be set by the `RUSTC_BOOTSTRAP_CACHE` environment variable.\r\n\r\nSetting the bootstrap cache path to an external location can help to speed up builds in cases where the build directory is not kept between builds, e.g. in CI or other automated build systems.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 35,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-13T13:23:48Z",
        "closed_at": "2023-10-14T16:55:58Z",
        "merged_at": "2023-10-14T16:55:58Z",
        "body": "cc https://github.com/rust-lang/rust/pull/116323#discussion_r1355282195\r\n\r\nr? @petrochenkov ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-13T12:58:16Z",
        "closed_at": "2023-10-14T16:55:58Z",
        "merged_at": "2023-10-14T16:55:58Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 128,
        "deletions": 76,
        "changed_files": 14,
        "created_at": "2023-10-13T12:43:12Z",
        "closed_at": "2023-10-13T12:53:20Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #115653 (Guarantee that Layout::align returns a non-zero power of two)\n - #116312 (Initiate the inner usage of `cfg_match` (Compiler))\n - #116630 (Add ability to get lines/filename for Span in smir)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115653,116312,116630)\n<!-- homu-ignore:end -->",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 852,
        "deletions": 574,
        "changed_files": 25,
        "created_at": "2023-10-13T12:19:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The long-awaited finale to the saga of [exhaustiveness checking for integers](https://github.com/rust-lang/rust/pull/50912)!\r\n\r\n```rust\r\nmatch 0usize {\r\n    0.. => {} // exhaustive!\r\n}\r\nmatch 0usize {\r\n    0..usize::MAX => {} // helpful error message!\r\n}\r\n```\r\n\r\nFeatures:\r\n- Half-open ranges behave as expected for `usize`/`isize`;\r\n- Trying to use `0..usize::MAX` will tell you that `usize::MAX..` is missing and explain why. No more unhelpful \"`_` is missing\";\r\n- Everything else stays the same.\r\n\r\nThis should unblock https://github.com/rust-lang/rust/issues/37854.\r\n\r\nReview-wise:\r\n- I recommend looking commit-by-commit;\r\n- This regresses perf because of the added complexity in `IntRange`; hopefully not too much;\r\n- I measured each `#[inline]`, they all help a bit with the perf regression (tho I don't get why);\r\n- I did not touch MIR building; I expect there's an easy PR there that would skip unnecessary comparisons when the range is half-open.",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-13T10:25:30Z",
        "closed_at": "2023-10-15T11:29:36Z",
        "merged_at": "2023-10-15T11:29:36Z",
        "body": "addresses [rustix/#856](https://github.com/bytecodealliance/rustix/pull/856).\r\n\r\nCommands that do the update:\r\n\r\n`cargo +nightly update rustix`\r\n\r\nr? @Mark-Simulacrum ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 17,
        "changed_files": 5,
        "created_at": "2023-10-13T09:44:32Z",
        "closed_at": "2023-10-14T15:06:23Z",
        "merged_at": "2023-10-14T15:06:23Z",
        "body": "does not impact behavior but may avoid weird bugs in the future, cc https://github.com/rust-lang/trait-system-refactor-initiative/issues/65\r\n\r\nr? @compiler-errors ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3124,
        "deletions": 2232,
        "changed_files": 207,
        "created_at": "2023-10-13T08:47:11Z",
        "closed_at": "2023-10-15T15:16:14Z",
        "merged_at": "2023-10-15T15:16:14Z",
        "body": "Since rust-lang/rustfmt#5910 has landed, soon we will have support for formatting let-chains (as soon as rustfmt syncs and beta gets bumped).\r\n\r\nThis PR applies the changes [from master rustfmt to rust-lang/rust eagerly](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/out.20formatting.20of.20prs/near/374997516), so that the next beta bump does not have to deal with a 200+ file diff and can remain concerned with other things like `cfg(bootstrap)` -- #113637 was a pain to land, for example, because of let-else.\r\n\r\nI will also add this commit to the ignore list after it has landed.\r\n\r\nThe commands that were run -- I'm not great at bash-foo, but this applies rustfmt to every compiler crate, and then reverts the two crates that should probably be formatted out-of-tree.\r\n```\r\n~/rustfmt $ ls -1d ~/rust/compiler/* | xargs -I@ cargo run --bin rustfmt -- @/src/lib.rs --config-path ~/rust --edition=2021 # format all of the compiler crates\r\n~/rust $ git checkout HEAD -- compiler/rustc_codegen_{gcc,cranelift} # revert changes to cg-gcc and cg-clif\r\n```\r\n\r\ncc @rust-lang/rustfmt\r\nr? @WaffleLapkin or @Nilstrieb who said they may be able to review this purely mechanical PR :>\r\n\r\ncc @Mark-Simulacrum and @petrochenkov, who had some thoughts on the order of operations with big formatting changes in https://github.com/rust-lang/rust/pull/95262#issue-1178993801. I think the situation has changed since then, given that let-chains support exists on master rustfmt now, and I'm fairly confident that this formatting PR should land even if *bootstrap* rustfmt doesn't yet format let-chains in order to lessen the burden of the next beta bump.",
        "comments": 17
    },
    {
        "merged": false,
        "additions": 2100,
        "deletions": 577,
        "changed_files": 30,
        "created_at": "2023-10-13T07:03:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I mostly wanted to show my idea for how to move `std::io::Error` to `core`. I use `AtomicPtr` to fill in the parts that are needed from `alloc`/`std`, but that should probably be replaced with something like `#[panic_handler]` or `#[global_allocator]` except where it resolves to a null pointer instead of erroring if not provided.\r\n\r\nI am not very likely to finish this off due to lack of time, so, anyone who wants to, feel free to base your code on mine.",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 56,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-13T05:07:37Z",
        "closed_at": "2023-10-15T07:41:45Z",
        "merged_at": "2023-10-15T07:41:45Z",
        "body": "This is a follow up to #109106 but for[ `fs::try_exists`](https://doc.rust-lang.org/std/fs/fn.try_exists.html), which doesn't need to get the metadata of a file (which can fail even if a file exists).\r\n\r\n`fs::try_exists` currently fails on Windows if encountering a Unix Domain Socket (UDS). This PR fixes it by checking for an error code that's returned when there's a failure to use a reparse point.\r\n\r\n## Reparse points\r\n\r\nA reparse point is a way to invoke a filesystem filter on a file instead of the file being opened normally. This is used to implement symbolic links (by redirecting to a different path) but also to implement other types of special files such as Unix domain sockets. If the reparse point is not a link type then opening it with `CreateFileW` may fail with `ERROR_CANT_ACCESS_FILE` because the filesystem filter does not implement that operation. This differs from resolving links which may fail with errors such as `ERROR_FILE_NOT_FOUND` or `ERROR_CANT_RESOLVE_FILENAME`.\r\n\r\nSo `ERROR_CANT_ACCESS_FILE` means that the file exists but that we can't open it normally. Still, the file does exist on the filesystem so `try_exists` should report that as `Ok(true)`.\r\n\r\nr? libs",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 16,
        "deletions": 9,
        "changed_files": 3,
        "created_at": "2023-10-13T00:29:21Z",
        "closed_at": "2023-10-14T15:06:23Z",
        "merged_at": "2023-10-14T15:06:23Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T22:35:42Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Partially addresses https://github.com/rust-lang/unsafe-code-guidelines/issues/465",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-12T22:20:38Z",
        "closed_at": "2023-10-13T12:37:15Z",
        "merged_at": "2023-10-13T12:37:15Z",
        "body": "When we encounter a type error involving a closure, we try to typeck prior closure invocations to see if they influenced the current expected type. When trying to do so, ensure that the closure was defined in our current scope.\r\n\r\nFix #116658.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T22:17:25Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Partially addresses https://github.com/rust-lang/unsafe-code-guidelines/issues/465",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 108,
        "deletions": 84,
        "changed_files": 47,
        "created_at": "2023-10-12T17:44:01Z",
        "closed_at": null,
        "merged_at": null,
        "body": "With https://reviews.llvm.org/D86310 LLVM now has i128 aligned to 16-bytes on x86 based platforms. This will be in LLVM-18. This patch updates all our spec targets to be 16-byte aligned, and removes the alignment when speaking to older LLVM.\r\n\r\nThis results in Rust overaligning things relative to LLVM on older LLVMs.\r\n\r\nSee #54341",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 335,
        "deletions": 309,
        "changed_files": 12,
        "created_at": "2023-10-12T16:36:46Z",
        "closed_at": "2023-10-12T18:43:53Z",
        "merged_at": "2023-10-12T18:43:53Z",
        "body": "Successful merges:\n\n - #116593 (Add unstable book page for the no-jump-tables codegen option)\n - #116625 (`rustc_hir_pretty` cleanups)\n - #116642 (Handle several `#[diagnostic::on_unimplemented]` attributes correctly)\n - #116654 (coverage: Clarify loop-edge detection and graph traversal)\n - #116669 (Fix mips platform support entries.)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116593,116625,116642,116654,116669)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 84,
        "deletions": 21,
        "changed_files": 10,
        "created_at": "2023-10-12T16:16:05Z",
        "closed_at": "2023-10-13T14:46:47Z",
        "merged_at": "2023-10-13T14:46:47Z",
        "body": "addresses (only on nightly, needs backport) https://github.com/rust-lang/rust/issues/116629\r\n\r\nr? @compiler-errors \r\n\r\ncc @GuillaumeGomez @fee1-dead ",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-12T15:48:05Z",
        "closed_at": "2023-10-12T18:43:54Z",
        "merged_at": "2023-10-12T18:43:53Z",
        "body": "The table entries for these MIPS entries were broken because they had the wrong number of columns (from #116503). Additionally, there was a conflict with #115238, which made the same change (but on different lines, so git didn't complain).\r\n",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 205,
        "deletions": 141,
        "changed_files": 8,
        "created_at": "2023-10-12T15:29:01Z",
        "closed_at": "2023-10-12T16:35:47Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #116593 (Add unstable book page for the no-jump-tables codegen option)\n - #116625 (`rustc_hir_pretty` cleanups)\n - #116642 (Handle several `#[diagnostic::on_unimplemented]` attributes correctly)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116593,116625,116642)\n<!-- homu-ignore:end -->",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 87,
        "deletions": 62,
        "changed_files": 21,
        "created_at": "2023-10-12T15:07:58Z",
        "closed_at": "2023-10-13T10:28:53Z",
        "merged_at": "2023-10-13T10:28:53Z",
        "body": "This PR tries to improve some of the diagnostics of check-cfg.\r\n\r\nThe main changes is the unexpected name or value being added to the main diagnostic:\r\n```diff\r\n- warning: unexpected `cfg` condition name\r\n+ warning: unexpected `cfg` condition name: `widnows`\r\n```\r\n\r\nIt also cherry-pick the better sensible logic for when we print the list of expected values when we have a matching value for a very similar name.\r\n\r\nAddress https://github.com/rust-lang/rust/pull/111072#discussion_r1356818100\r\n\r\nr? @petrochenkov ",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 0,
        "deletions": 23,
        "changed_files": 1,
        "created_at": "2023-10-12T14:35:51Z",
        "closed_at": null,
        "merged_at": null,
        "body": "First off, I have it on good authority this code is Just Wrong: on NetBSD, by default a given thread does not have affinity to any specific set of CPUs.\r\n\r\nThis particular change came with this pull request:\r\n\r\n  [Rust pull request 112226](https://github.com/rust-lang/rust/pull/112226)\r\n\r\nHowever, even worse, this code causes a segmentation fault for certain NetBSD target architectures in the \"bootstrap\" program when building rust natively on those platforms.  So far armv7/9.0, powerpc/10.0_BETA, and i386/9.3 all crash with a segmentation fault.  However, for some strange reason, this isn't consistent across the board: riscv64/current, amd64/10.0_BETA, aarch64/9.0 and sparc64/10.0_BETA all pass this hurdle.  A trivial C reimplementation also doesn't crash on any of these systems, ref. the thread which starts at\r\n\r\n  [NetBSD current-users postings about this issue](https://mail-index.netbsd.org/current-users/2023/10/10/msg044510.html)\r\n\r\nbut also always prints 0.  However, if we get a SEGV running this code, the entire build fails, of course.\r\n\r\nSo ... while I do not have a full explanation for the SEGVs, this undoes the addition from pull request 112226, and restores the ability to build rust natively on the above flagged-as-problematical platforms.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 50,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-10-12T13:59:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "We can encounter unresolved regions due to unconstrained impl lifetime arguments because `collect_return_position_impl_trait_in_trait_tys` runs before WF actually checks that the impl is well-formed.\r\n\r\nFixes #116525",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-12T13:43:39Z",
        "closed_at": "2023-10-15T00:48:19Z",
        "merged_at": "2023-10-15T00:48:19Z",
        "body": "This makes it so **assignee** requesting changes on a PR via GitHub UI adds https://github.com/rust-lang/rust/labels/S-waiting-on-author and removes https://github.com/rust-lang/rust/labels/S-waiting-on-review.\r\n\r\ncc @compiler-errors :3",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 73,
        "deletions": 73,
        "changed_files": 36,
        "created_at": "2023-10-12T13:15:21Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is a clone of https://github.com/rust-lang/rust/pull/116641 with a few static asserts disabled, specifically to try and bootstrap rustc with LLVM at HEAD.\r\n\r\nThis is just for preliminary testing, will drop this in favor of https://github.com/rust-lang/rust/pull/116641 once ready.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 30,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-12T12:34:40Z",
        "closed_at": "2023-10-12T12:34:45Z",
        "merged_at": null,
        "body": "Apologies. Plz disregard",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 130,
        "deletions": 164,
        "changed_files": 3,
        "created_at": "2023-10-12T10:55:08Z",
        "closed_at": "2023-10-12T18:43:54Z",
        "merged_at": "2023-10-12T18:43:54Z",
        "body": "This is a collection of improvements to two semi-related pieces of code:\r\n\r\n- The code in `counters` that detects which graph edges don't exit a loop, and would therefore be good candidates to have their coverage computed as an expression rather than having a physical counter.\r\n- The code in `graph` that traverses the coverage BCB graph in a particular order, and tracks loops and loop edges along the way (which is relevant to the above).\r\n\r\nI was originally only planning to make the `graph` changes, but there was going to be a lot of indentation churn in `counters` anyway, and once I started looking I noticed a lot of opportunities for simplification.\r\n\r\n---\r\n\r\n@rustbot label +A-code-coverage",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 9,
        "changed_files": 1,
        "created_at": "2023-10-12T06:59:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "https://github.com/nnethercote/perf-book/issues/69 explains that `Read::bytes` in combination with a `BufReader` is very slow. This PR speeds it up quite a bit -- on a simple test program the runtime dropped from 320ms to 215ms -- but it's still a lot slower than alternatives. This is basically because `BufReader` has a certain amount of overhead for each `read` call, and so a configuration where every single byte requires a `read` is just a bad one for it.",
        "comments": 20
    },
    {
        "merged": false,
        "additions": 58,
        "deletions": 25,
        "changed_files": 3,
        "created_at": "2023-10-12T06:32:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "@saethlin maybe this helps a bit?",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 433,
        "deletions": 405,
        "changed_files": 8,
        "created_at": "2023-10-12T06:18:06Z",
        "closed_at": "2023-10-12T14:54:48Z",
        "merged_at": "2023-10-12T14:54:48Z",
        "body": "Some precursors to #114571 that are worth merging even if the main part of #114571 doesn't get merged.\r\n\r\nr? @petrochenkov ",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-12T02:43:06Z",
        "closed_at": "2023-10-13T03:47:49Z",
        "merged_at": "2023-10-13T03:47:49Z",
        "body": "1 commits in 59596f0f31a94fde48b5aa7e945cd0b7ceca9620..22a976c6fb1bef45abcf182b4c7def87ad8b4a4d\r\n2023-09-29 19:29:17 +0000 to 2023-10-12 00:06:40 +0000\r\n- [beta 1.74] Update curl-sys to pull in curl 8.4.0 (rust-lang/cargo#12809)\r\n\r\nr? @ehuss",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 232,
        "deletions": 6,
        "changed_files": 13,
        "created_at": "2023-10-11T23:22:04Z",
        "closed_at": "2023-10-13T21:37:49Z",
        "merged_at": "2023-10-13T21:37:49Z",
        "body": "When parsing a closure without a body that is surrounded by a block, suggest moving the opening brace after the closure head.\r\n\r\nFix #116608.",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-11T21:35:08Z",
        "closed_at": "2023-10-14T16:55:59Z",
        "merged_at": "2023-10-14T16:55:59Z",
        "body": "https://github.com/emscripten-core/emscripten/issues/9013 is fixed and this should be no longer needed.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 824,
        "deletions": 68,
        "changed_files": 8,
        "created_at": "2023-10-11T21:32:07Z",
        "closed_at": "2023-10-15T09:35:47Z",
        "merged_at": "2023-10-15T09:35:47Z",
        "body": "self-explanatory\r\n\r\n![image](https://github.com/rust-lang/rust/assets/39852038/81278f8b-3679-426b-b1c0-331b60593a1e)",
        "comments": 15
    },
    {
        "merged": true,
        "additions": 108,
        "deletions": 12,
        "changed_files": 3,
        "created_at": "2023-10-11T20:02:53Z",
        "closed_at": "2023-10-12T18:43:54Z",
        "merged_at": "2023-10-12T18:43:54Z",
        "body": "This PR fixes an issues where rustc would ignore subsequent `#[diagnostic::on_unimplemented]` attributes. The [corresponding RFC](https://rust-lang.github.io/rfcs/3368-diagnostic-attribute-namespace.html) specifies that the first matching instance of each option is used. Invalid attributes are linted and otherwise ignored.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 72,
        "deletions": 71,
        "changed_files": 36,
        "created_at": "2023-10-11T18:21:46Z",
        "closed_at": "2023-10-13T04:52:19Z",
        "merged_at": null,
        "body": "This applies https://reviews.llvm.org/D86310 and https://reviews.llvm.org/D158169, which fix the alignment and ABI issues for 128-bit integers. I ran an ABI check on this and we are no compatible with GCC and the current `main` clang.\r\n\r\nZulip discussion: https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/.2354341.20-.20alignment.20of.20i128.20for.20FFI\r\n\r\nThis will be a draft since I don't think we are going to backport\r\n\r\nr? compiler\r\n@rustbot label +T-compiler\r\n\r\nTodo still: pull in the rest of the changes from https://github.com/rust-lang/rust/pull/113880",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 132,
        "deletions": 108,
        "changed_files": 14,
        "created_at": "2023-10-11T18:08:23Z",
        "closed_at": "2023-10-11T20:50:08Z",
        "merged_at": "2023-10-11T20:50:08Z",
        "body": "Successful merges:\n\n - #116219 (Relate alias ty with variance)\n - #116315 (Do not check for impossible predicates in const-prop lint.)\n - #116436 (Structurally normalize for closure)\n - #116597 (Prevent showing methods from blanket impls of not available foreign traits to show up in the search results)\n - #116627 (small cleanup)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116219,116315,116436,116597,116627)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 157,
        "deletions": 58,
        "changed_files": 15,
        "created_at": "2023-10-11T14:50:50Z",
        "closed_at": "2023-10-11T18:07:10Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #116219 (Relate alias ty with variance)\n - #116436 (Structurally normalize for closure)\n - #116522 (use `PatKind::wild` when an ADT const value has violation)\n - #116597 (Prevent showing methods from blanket impls of not available foreign traits to show up in the search results)\n - #116627 (small cleanup)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116219,116436,116522,116597,116627)\n<!-- homu-ignore:end -->",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 50,
        "deletions": 11,
        "changed_files": 2,
        "created_at": "2023-10-11T14:05:49Z",
        "closed_at": "2023-10-15T05:03:20Z",
        "merged_at": "2023-10-15T05:03:20Z",
        "body": "`Config::verify` refactored to improve the efficiency and memory usage of file hashing.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 40,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-11T13:16:18Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Inlining integers (even those out of range) was introduced in #106824.\r\n\r\nCloses #116631.\r\n\r\nCloses #115423.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 71,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-11T12:17:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The methods will be useful in cases when we need to ensure that numbers can be divided without remainder.\r\n\r\nIf the changes are good for inclusion, I will create a tracking issue for the feature.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 59,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2023-10-11T09:49:46Z",
        "closed_at": "2023-10-14T16:55:59Z",
        "merged_at": "2023-10-14T16:55:59Z",
        "body": "Wasn't sure about how to structure lines, so went with safest option, also I'm not sure why `span_to_lines` returns `vec`.\r\n\r\nAddresses https://github.com/rust-lang/project-stable-mir/issues/44 \r\n\r\nr? @oli-obk ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 10,
        "changed_files": 2,
        "created_at": "2023-10-11T08:52:56Z",
        "closed_at": "2023-10-12T09:59:09Z",
        "merged_at": "2023-10-12T09:59:09Z",
        "body": "Fixes #116293\r\n\r\nNote sure if I should add tests because the issue occurs only for feature gates having associated issues and that set of feature gates will change unpredictably leading to an unnecessary churn in tests.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-11T08:26:20Z",
        "closed_at": "2023-10-11T20:50:08Z",
        "merged_at": "2023-10-11T20:50:08Z",
        "body": "this is exactly the same as the `lower_param_bounds` function, so use that instead",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 78,
        "deletions": 129,
        "changed_files": 4,
        "created_at": "2023-10-11T05:04:09Z",
        "closed_at": "2023-10-12T18:43:54Z",
        "merged_at": "2023-10-12T18:43:54Z",
        "body": "Just some improvements I found while looking through this code.\r\n\r\nr? @fee1-dead ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 318,
        "deletions": 168,
        "changed_files": 11,
        "created_at": "2023-10-11T01:08:52Z",
        "closed_at": "2023-10-11T12:10:37Z",
        "merged_at": "2023-10-11T12:10:37Z",
        "body": "When a range pattern contains an overflowing literal, if we're not careful we might not notice the overflow and use the wrapped value. This makes for confusing error messages because linting against overflowing literals is only done in a later pass. So when a range is invalid we check for overflows to provide a better error.\r\n\r\nThis check didn't use to handle negative types; this PR fixes that. First commit adds tests, second cleans up without changing behavior, third does the fix.\r\n\r\nEDIT: while I was at it, I fixed a small annoyance about the span of the overflow lint on negated literals.\r\n\r\nFixes https://github.com/rust-lang/rust/issues/94239",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-11T00:55:35Z",
        "closed_at": "2023-10-11T05:30:03Z",
        "merged_at": "2023-10-11T05:30:03Z",
        "body": "5 commits in 794d0a82547f3081044c0aca7b6083733ce51344..6fa6fdc7606cfa664f9bee2fb33ee2ed904f4e88\r\n2023-10-03 23:19:33 +0000 to 2023-10-10 23:06:08 +0000\r\n- test(build): generalize test assertion for non-rustup env (rust-lang/cargo#12804)\r\n- chore: Sort dependency tables (rust-lang/cargo#12803)\r\n- fix(install): Suggest an alternative version on MSRV failure (rust-lang/cargo#12798)\r\n- rustdoc: remove the word \"Version\" from test cases (rust-lang/cargo#12800)\r\n- Add unsupported lowercase `-z` flag suggestion for `-Z` flag (rust-lang/cargo#12788)\r\n\r\nr? ghost",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 275,
        "deletions": 31,
        "changed_files": 6,
        "created_at": "2023-10-11T00:53:18Z",
        "closed_at": "2023-10-11T03:37:58Z",
        "merged_at": "2023-10-11T03:37:58Z",
        "body": "Successful merges:\n\n - #95967 (Add explicit-endian String::from_utf16 variants)\n - #116530 (delay a bug when encountering an ambiguity in MIR typeck)\n - #116611 (Document `diagnostic_namespace` feature)\n - #116612 (Remove unused dominator iterator)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=95967,116530,116611,116612)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 150,
        "deletions": 305,
        "changed_files": 3,
        "created_at": "2023-10-10T23:41:56Z",
        "closed_at": "2023-10-13T07:27:46Z",
        "merged_at": "2023-10-13T07:27:46Z",
        "body": "This PR simplifies a lot of unnecessary structure in\r\n`rustc_driver_impl/src/pretty.rs`. It removes some traits and functions,\r\nsimplifies some structs, renames some things for increased consistency, and\r\neliminates some boilerplate code. Overall it cuts more than 150 lines of code.\r\n\r\nr? @compiler-errors",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 17,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-10T23:31:19Z",
        "closed_at": "2023-10-14T15:06:23Z",
        "merged_at": "2023-10-14T15:06:23Z",
        "body": "This feature has been enabled and tested internally in the Android project.",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 78,
        "deletions": 21,
        "changed_files": 11,
        "created_at": "2023-10-10T22:55:36Z",
        "closed_at": "2023-10-10T22:56:52Z",
        "merged_at": null,
        "body": "WIP",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 26,
        "changed_files": 1,
        "created_at": "2023-10-10T19:41:08Z",
        "closed_at": "2023-10-11T03:37:58Z",
        "merged_at": "2023-10-11T03:37:58Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 84,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T19:06:49Z",
        "closed_at": "2023-10-11T03:37:58Z",
        "merged_at": "2023-10-11T03:37:58Z",
        "body": "This adds it to the rust unstable book.\r\n\r\nFWIW: I couldn't find a way to serve the book locally (please send help), so I can't check that this renders correctly.\r\n\r\n\r\ncc @weiznich ",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 15,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-10T18:33:23Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Also trims whitespace from response file lines which previously caused failures.\r\n\r\nFixes #116068\r\n\r\nI'm not sure where the test should go, `x.py` yelled at me for trying to add it to `tests/ui` and none of the sub-directories seem super related. is there somewhere specifically for testing arg parsing and/or `rustc_driver`?",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 262,
        "changed_files": 6,
        "created_at": "2023-10-10T17:22:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Bumps stdarch to pull https://github.com/rust-lang/stdarch/pull/1477, which reimplemented some functions with portable SIMD intrinsics instead of arch specific LLVM intrinsics.\r\n\r\nHandling of those LLVM intrinsics is removed from cranelift codegen and miri.\r\n\r\ncc @RalfJung @bjorn3 ",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 42,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-10T17:09:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "ACP: rust-lang/libs-team#263\r\n\r\nRecommendation per ACP: this should receive a crater run to gauge impact. If there's no impact, it can be merged as-is, but otherwise it will need a similar edition-based workaround to the array implementation.\r\n\r\nIn addition to what was proposed by the ACP, this also adds `IntoIterator for &Box<[T]>` and `IntoIterator for &mut Box<[T]>` to ensure that those work as expected. I also already had to change at least one line in the compiler to account for this change, which isn't a good sign toward whether edition-specific mitigations may be needed, but we'll see.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 8,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T16:51:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This makes Windows consistent with other platforms. Note that this should not be taken to imply any decision on #114149 has been taken. However it was felt that while there is a lack of libs-api consensus, we should be consistent across platforms in the meantime.\r\n\r\nThis is a change in behaviour for Windows so will also need an fcp before merging.\r\n\r\nr? libs-api",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 700,
        "deletions": 109,
        "changed_files": 38,
        "created_at": "2023-10-10T16:44:47Z",
        "closed_at": "2023-10-10T19:23:01Z",
        "merged_at": "2023-10-10T19:23:01Z",
        "body": "Successful merges:\n\n - #109422 (rustdoc-search: add impl disambiguator to duplicate assoc items)\n - #116250 (On type error of closure call argument, point at earlier calls that affected inference)\n - #116444 (add test for const-eval error in dead code during monomorphization)\n - #116503 (Update docs for mips target tier demotion.)\n - #116559 (Mark `new_in` as `const` for BTree collections)\n - #116560 (In smir use `FxIndexMap` to store indexed ids)\n - #116574 (Update books)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=109422,116250,116444,116503,116559,116560,116574)\n<!-- homu-ignore:end -->",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 12,
        "changed_files": 1,
        "created_at": "2023-10-10T16:02:23Z",
        "closed_at": "2023-10-14T20:33:36Z",
        "merged_at": "2023-10-14T20:33:36Z",
        "body": "The information here\r\nhttps://github.com/rust-lang/rust/blob/5b88d659f8c2428536589d4bd36b9099d53a6815/src/bootstrap/Cargo.toml#L55-L59\r\nwas wrong. This PR fixes that and sorts the dependencies in ascending order.\r\n\r\nAdditionally, I moved the 'features' section above up to make it appear easier.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 912,
        "deletions": 203,
        "changed_files": 96,
        "created_at": "2023-10-10T15:17:26Z",
        "closed_at": "2023-10-10T18:19:04Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #109422 (rustdoc-search: add impl disambiguator to duplicate assoc items)\n - #115948 (rustdoc: show crate name beside smaller logo)\n - #116444 (add test for const-eval error in dead code during monomorphization)\n - #116503 (Update docs for mips target tier demotion.)\n - #116559 (Mark `new_in` as `const` for BTree collections)\n - #116560 (In smir use `FxIndexMap` to store indexed ids)\n - #116574 (Update books)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=109422,115948,116444,116503,116559,116560,116574)\n<!-- homu-ignore:end -->",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 122,
        "deletions": 10,
        "changed_files": 3,
        "created_at": "2023-10-10T14:59:54Z",
        "closed_at": "2023-10-12T12:31:32Z",
        "merged_at": "2023-10-12T12:31:32Z",
        "body": "Follow-up of #116142.\r\n\r\nIt was mentioned in the [team meeting](https://rust-lang.zulipchat.com/#narrow/stream/393423-t-rustdoc.2Fmeetings/topic/meeting.2002-10-2023/near/394504024) that an enum with a `repr` should also get its discriminants displayed. Forgot to implement it in #116142...\r\n\r\nIt also allowed to uncover a bug: i was not providing the correct `DefId` in case it was a type alias to `render_enum_fields`. It's also fixed in this PR.\r\n\r\nr? @fmease ",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 60,
        "deletions": 91,
        "changed_files": 14,
        "created_at": "2023-10-10T12:07:49Z",
        "closed_at": "2023-10-10T15:47:53Z",
        "merged_at": "2023-10-10T15:47:53Z",
        "body": "Successful merges:\n\n - #116586 (use env variable to control thread ids in rustc_log)\n - #116589 (coverage: Unbox and simplify `bcb_filtered_successors`)\n - #116595 (-Zmir-enable-passes: document that this may enable unsound passes)\n - #116596 (reorder files in solve)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116586,116589,116595,116596)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 41,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-10T11:47:39Z",
        "closed_at": "2023-10-11T20:50:09Z",
        "merged_at": "2023-10-11T20:50:09Z",
        "body": "Fixes https://github.com/rust-lang/rust/issues/115480.\r\n\r\nIn the case that the blanket impl trait is not available in the current crate, we prevent adding its methods in the search index.\r\n\r\nNow how I found how to fix the issue: the `equivalent` method is not generated in the documentation pages but was still added to the search index. To render impls, we iterate over `cache.impls` so I took a look at how this was generated. Inside `formats/cache.rs`, we have `CacheBuilder::populate` where we push impls into `impls` but with this condition:\r\n\r\n```rust\r\nif cx.cache.traits.contains_key(&trait_did) {\r\n```\r\n\r\nI re-used this condition in `CacheBuilder::fold_item` to prevent this method from being added in `cache.search_index` or `cache.orphan_impl_items`.\r\n\r\nPS: If you want to double-check if the added test works, just comment the code I added in `cache.rs` and it should fail.\r\n\r\nr? @notriddle ",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 7,
        "created_at": "2023-10-10T09:57:51Z",
        "closed_at": "2023-10-10T15:47:53Z",
        "merged_at": "2023-10-10T15:47:53Z",
        "body": "r? @compiler-errors ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-10-10T09:18:18Z",
        "closed_at": "2023-10-10T15:47:53Z",
        "merged_at": "2023-10-10T15:47:53Z",
        "body": "also add some comments explaining why MIR opts are marked as unsound",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-10T07:09:35Z",
        "closed_at": "2023-10-15T13:22:52Z",
        "merged_at": "2023-10-15T13:22:52Z",
        "body": "Original text:\r\n\r\n> truncating the [i64](https://doc.rust-lang.org/std/primitive.i64.html) to an [i32](https://doc.rust-lang.org/std/primitive.i32.html) (essentially giving the [i64](https://doc.rust-lang.org/std/primitive.i64.html)\u2019s value modulo [i32::MAX](https://doc.rust-lang.org/std/primitive.i32.html#associatedconstant.MAX))\r\n\r\nThis can't be true, because `i32::MAX` is an odd number. The correct value seems `(i32::MAX + 1) * 2`, but this is complicated and distracting, and I suggest removing the parentheses entirely.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 19,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T06:41:41Z",
        "closed_at": "2023-10-12T18:43:54Z",
        "merged_at": "2023-10-12T18:43:54Z",
        "body": "See tracking issue: https://github.com/rust-lang/rust/issues/116592",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-10T06:09:41Z",
        "closed_at": "2023-10-14T20:33:36Z",
        "merged_at": "2023-10-14T20:33:36Z",
        "body": "I've seen some reports of `tests/codegen/target-feature-inline-closure.rs` spuriously failing because it thinks the hash in the rustc version number contains an `fadd` instruction.\r\n\r\nhttps://github.com/rust-lang/rust/pull/116085#issuecomment-1751174916\r\nhttps://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Is.20.60tests.2Fcodegen.2Ftarget-feature-inline-closure.2Ers.60.20flakey\r\nhttps://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Strange.20.5Cn.20in.20output.20of.20assert.20.23108341/near/395811335\r\n\r\nThis PR tries to make that not happen by adding a `CHECK-LABEL` directive that will match the line with the rustc version string, preventing the previous `CHECK-NOT` from seeing it.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 36,
        "deletions": 35,
        "changed_files": 1,
        "created_at": "2023-10-10T05:35:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "-Used a more descriptive variable name for $xpy_args ($xpyArgs or $pythonScriptArgs is more descriptive.) \r\n-Added a comment to the Invoke-Application() function to explain why the $handle variable is cached. \r\n-Used a more descriptive error message in the <span class=\"math-inline\">msg\\ variable. \r\n-Added a link to the Python documentation in the help: section of the error message.",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 38,
        "deletions": 80,
        "changed_files": 2,
        "created_at": "2023-10-10T04:47:34Z",
        "closed_at": "2023-10-10T15:47:53Z",
        "merged_at": "2023-10-10T15:47:53Z",
        "body": "This is a small cleanup in the coverage instrumentor's graph-building code.\r\n\r\n---\r\nThis function already has access to the MIR body, so instead of taking a reference to a terminator, it's simpler and easier to pass in a basic block index.\r\n\r\nThere is no need to box the returned iterator if we instead add appropriate lifetime captures, and make `short_circuit_preorder` generic over the type of iterator it expects.\r\n\r\nWe can also greatly simplify the function's implementation by observing that the only difference between its two cases is whether we take all of a BB's successors, or just the first one.\r\n\r\n---\r\n\r\n@rustbot label +A-code-coverage",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-10T01:44:13Z",
        "closed_at": "2023-10-10T15:47:53Z",
        "merged_at": "2023-10-10T15:47:53Z",
        "body": "Currently, when parallel rustc is enabled, even if the number of threads is 1, the thread ID will be included before all the logs.\r\nE.g.\r\n`WARN rustc_mir_build::thir::pattern::const_to_pat ...`\r\n=>\r\n`2:rustcWARN rustc_mir_build::thir::pattern::const_to_pat ...`\r\nThis makes the logs confusing and results in inconsistent UI test results for serial and parallel rustc. Therefore I think we should let users decide whether thread id information is needed through explicit control.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 19,
        "changed_files": 22,
        "created_at": "2023-10-09T22:46:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The documentation of TargetOptions.features claims that these features will always be passed to LLVM, but the logic implemented in https://github.com/rust-lang/rust/pull/83084 allows them to be disabled with -C target-feature. Change the implementation to match the documentation.\r\n\r\nDisabling x87 on x86 changes the way functions return floats. The second commit makes x87 mandatory on the existing i686 targets. Disabling floating point usage now requires a new target. https://github.com/rust-lang/rust/issues/116344 does not fully get fixed by this (softfloat targets still have a problem with `+x87`), but it helps a lot.\r\n\r\nIn preparation for https://github.com/rust-lang/rust/pull/115919 sse and sse2 are also made mandatory.\r\n\r\nSee https://rust-lang.zulipchat.com/#narrow/stream/136281-t-opsem/topic/Float.20ABI.20hell/near/394473707 and https://github.com/rust-lang/rust/issues/116344.\r\n\r\n@rustbot label: +A-abi +O-x86 +T-opsem +T-compiler",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 246,
        "deletions": 124,
        "changed_files": 40,
        "created_at": "2023-10-09T22:26:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I modified https://github.com/rust-lang/rust/pull/116505 to emit a machine-applicable lint for functions which are not generic and whose optimized MIR have no Call or Assert terminators. I applied the lint 3 times, because some of the places that I've applied `#[inline]` here are for functions which contain calls which are only inlined by the MIR inliner once I've applied `#[inline]` to the callee.",
        "comments": 22
    },
    {
        "merged": false,
        "additions": 153,
        "deletions": 89,
        "changed_files": 8,
        "created_at": "2023-10-09T21:48:29Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR tries to consolidate the various `run, try_run, run_quiet, run_quiet_delaying_failure, run_delaying_failure` etc. methods on `Builder`. This PR only touches command execution which doesn't produce output that would be later read by bootstrap, and it also only refactors spawning of commands that happens after a builder is created (commands executed during download & git submodule checkout are left as-is, for now).\r\n\r\nThe `run_cmd` method is quite meaty, but I expect that it will be changing rapidly soon, so I considered it easy to kept everything in a single method, and only after things settle down a bit, then maybe again split it up a bit.\r\n\r\nI still kept the original shortcut methods like `run_quiet_delaying_failure`, but they now only delegate to `run_cmd`. I tried to keep the original behavior (or as close to it as possible) for all the various commands, but it is a giant mess, so there may be some deviations. Notably, `cmd.output()` is now always called, instead of just `status()`, which was called previously in some situations.\r\n\r\nApart from the refactored methods, there is also `Config::try_run`, `check_run`, methods that run commands that produce output, oh my\u2026 that's left for follow-up PRs :)\r\n\r\nThe driving goal of this (and following) refactors is to centralize command execution in bootstrap on a single place, to make command mocking feasible. \r\n\r\nr? @onur-ozkan",
        "comments": 19
    },
    {
        "merged": false,
        "additions": 3,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-09T20:20:35Z",
        "closed_at": "2023-10-10T08:42:31Z",
        "merged_at": null,
        "body": "While working on https://github.com/rust-lang/rust/issues/115480, I was finally able to track down the origin of the bug, still working on the fix (how to determine if a foreign trait is publically exported from the current crate in short), which led me to this small PR. It should only list foreign items and yet we don't check if they're locals before adding them to the map.\r\n\r\nI expect a very minimal perf improvement.\r\n\r\nr? @notriddle ",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 2844,
        "deletions": 657,
        "changed_files": 82,
        "created_at": "2023-10-09T19:54:31Z",
        "closed_at": "2023-10-11T01:48:24Z",
        "merged_at": "2023-10-11T01:48:24Z",
        "body": null,
        "comments": 9
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-09T18:50:31Z",
        "closed_at": "2023-10-14T15:06:24Z",
        "merged_at": "2023-10-14T15:06:24Z",
        "body": "We pointed out this unsafe usage in #109859, and as a result, we received a fix PR #116476. However, it's important to note that the `libc::getuid()` never actually fails. This PR aims to clarify its safety.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 6,
        "changed_files": 4,
        "created_at": "2023-10-09T17:33:49Z",
        "closed_at": "2023-10-15T00:48:19Z",
        "merged_at": "2023-10-15T00:48:19Z",
        "body": "This is not unsafe on WASM, see https://github.com/rust-lang/rust/pull/84988\r\n\r\nr? @RalfJung \r\n\r\nFixes https://github.com/rust-lang/rust/issues/116516",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 254,
        "deletions": 68,
        "changed_files": 11,
        "created_at": "2023-10-09T17:20:22Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Follow-up to #116429:\r\n\r\n* Previously I didn't *adjust* the usage-site span of struct fields to the expansion of the def-site before comparing syntax contexts which lead to us not suggesting names from \u201cparent\u201d syntax contexts (see the test case involving the top-level struct `Case` and the macro `environment`)\r\n* I used to use the span of the entire field expression `e.f` / struct pattern `S { f }` when comparing  syntax contexts which wasn't correct since their constituent parts may come from different expansions, consider `$e.f` vs `e.$f` or `S { $f, $g }` with expn(`$f`) \u2260 expn(`$g`). Now I use the most precise span where possible\r\n* 2nd commit: On unresolved imports, don't suggest similarly named hygienic names from different syntax contexts\r\n\r\nr? @compiler-errors (feel free to reassign if you're short on time)",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-09T17:00:37Z",
        "closed_at": "2023-10-10T19:23:01Z",
        "merged_at": "2023-10-10T19:23:01Z",
        "body": "## rust-lang/reference\n\n2 commits in 5262e1c3b43a2c489df8f6717683a44c7a2260fd..142b2ed77d33f37a9973772bd95e6144ed9dce43\n2023-10-07 19:41:21 UTC to 2023-09-26 12:26:35 UTC\n\n- replace 'UB on raw ptr deref' with UB on place projection/access (rust-lang/reference#1387)\n- docs: Fix links to ECMA standards in `attributes.md` (rust-lang/reference#1408)\n\n## rust-lang/rust-by-example\n\n11 commits in c954202c1e1720cba5628f99543cc01188c7d6fc..8eb3a01ab74c567b7174784892fb807f2c632d6b\n2023-09-26 12:38:17 UTC to 2023-09-26 12:29:10 UTC\n\n- fixed a typo in the lifetime.md (rust-lang/rust-by-example#1737)\n- Misleading textual statement in HOF (rust-lang/rust-by-example#1731)\n- Equalize title from respective file with title in SUMMARY.md (rust-lang/rust-by-example#1738)\n- Added explanation for compiling and executing match_args.rs. (rust-lang/rust-by-example#1739)\n- Wrapped long lines and put #[doc] in backquotes. (rust-lang/rust-by-example#1740)\n- Update read_lines example to flatten iterator (rust-lang/rust-by-example#1742)\n- Update while_let.md: address inconsistent use of fn main between 2 co\u2026 (rust-lang/rust-by-example#1744)\n- [TRIVIAL] Remove confusing `also` (rust-lang/rust-by-example#1746)\n- Fix and extend the explanation of outer vs inner attributes. (rust-lang/rust-by-example#1748)\n- Fix uncorresponded back quote (rust-lang/rust-by-example#1749)\n- Fix format in constants.md (rust-lang/rust-by-example#1741)\n\n## rust-lang/rustc-dev-guide\n\n3 commits in a13b7c28ed705891c681ce5417b3d1cdb12cecd1..b98af7d661e4744baab81fb8dc7a049e44a4a998\n2023-10-05 19:48:35 UTC to 2023-09-27 22:57:27 UTC\n\n- update new trait solver docs (rust-lang/rustc-dev-guide#1802)\n- update rustc_driver examples (rust-lang/rustc-dev-guide#1803)\n- test headers: fix `compile-flags` example (rust-lang/rustc-dev-guide#1800)\n\n",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 33,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-09T15:32:37Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @RalfJung \r\n\r\nas per https://github.com/rust-lang/rust/pull/116564#issuecomment-1753234017",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 10,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-10-09T14:44:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I'd like to propose handling of out-of-memory errors in the default implementation of `io::Read::read_to_end()` and `fs::read()`. These methods create/grow a `Vec` with a size that is external to the program, and could be arbitrarily large.\r\n\r\nDue to being I/O methods, they can already fail in a variety of ways, in theory even including `ENOMEM` from the OS too, so another failure case should not surprise anyone. \r\n\r\nWhile this may not help much Linux with overcommit, it's useful for other platforms like WASM. [Internals thread](https://internals.rust-lang.org/t/io-read-read-to-end-should-handle-oom/19662).\r\n\r\nI haven't changed implementation of `impl Read for &[u8]` and `VecDeque` out of caution, because in these cases users could assume `read` can't fail.\r\n\r\nThis code uses `try_reserve()` + `extend_from_slice()` which could generate slightly better code with #116568.\r\n",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 2820,
        "deletions": 1547,
        "changed_files": 141,
        "created_at": "2023-10-09T14:26:04Z",
        "closed_at": "2023-10-09T17:13:16Z",
        "merged_at": "2023-10-09T17:13:16Z",
        "body": "Successful merges:\n\n - #115882 (improve the suggestion of `generic_bound_failure`)\n - #116537 (Fix suggestion span involving wrongly placed generic arg on variant)\n - #116543 (In smir `find_crates` returns `Vec<Crate>` instead of `Option<Crate>`)\n - #116549 (Simplify some mir passes by using let chains)\n - #116556 (Sync rustc_codegen_cranelift)\n - #116561 (Add a test for fixed ICE)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115882,116537,116543,116549,116556,116561)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 19,
        "deletions": 5,
        "changed_files": 2,
        "created_at": "2023-10-09T14:12:20Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The fact that `Vec` had capacity increased is not known to the optimizer, because functions like `do_reserve_and_handle` are not inlined. (#82801) Because of that, code such as:\r\n\r\n```rust\r\nvec.try_reserve(123)?;\r\nvec.extend_from_slice(&s[..123]);\r\n```\r\n\r\nTries to reserve the capacity **twice**. This is unnecessary code bloat.\r\n\r\nhttps://rust.godbolt.org/z/YWY16Ezej\r\n\r\nAdding a hint after reserve optimizes out the next check of `self.needs_to_grow(len, additional)`.\r\n",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 2815,
        "deletions": 1537,
        "changed_files": 141,
        "created_at": "2023-10-09T13:41:22Z",
        "closed_at": "2023-10-09T14:25:38Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #115882 (improve the suggestion of `generic_bound_failure`)\n - #116537 (Fix suggestion span involving wrongly placed generic arg on variant)\n - #116548 (Improve handling of assertion failures with very long conditions)\n - #116549 (Simplify some mir passes by using let chains)\n - #116556 (Sync rustc_codegen_cranelift)\n - #116561 (Add a test for fixed ICE)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115882,116537,116548,116549,116556,116561)\n<!-- homu-ignore:end -->",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1265,
        "deletions": 2,
        "changed_files": 19,
        "created_at": "2023-10-09T13:27:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "add teeos std library implement.\r\n\r\nthis MR is draft untill the libc update to 0.2.150\r\n\r\nthis MR is the final step for suppot rust in teeos.\r\nfirst step(add target): https://github.com/rust-lang/rust/pull/113480\r\nsecond step(add teeos libc): https://github.com/rust-lang/libc/pull/3333",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 430,
        "deletions": 292,
        "changed_files": 44,
        "created_at": "2023-10-09T12:47:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This means that adding generic statics would be even more difficult, as we can't evaluate statics from other crates anymore, but the subtle issue I have encountered make me think that having this be an explicit problem is better.\r\n\r\nThe issue is that\r\n\r\n```rust\r\nstatic mut FOO: &mut u32 = &mut 42;\r\nstatic mut BAR = unsafe { FOO };\r\n```\r\n\r\ngets different allocations, instead of referring to the same one. This is also true for non-static mut, but promotion makes `static FOO: &u32 = &42;` annoying to demo.\r\n\r\n## Why is this being done?\r\n\r\nIn order to ensure all crates see the same nested allocations (which is the last issue that needs fixing before we can stabilize [`const_mut_refs`](https://github.com/rust-lang/rust/issues/57349)), I am working on creating anonymous (from the Rust side, to LLVM it's like a regular static item) static items for the nested allocations in a static. If we evaluate the static item in a downstream crate again, we will end up duplicating its nested allocations (and in some cases, like the `match` case, even duplicate the main allocation).",
        "comments": 47
    },
    {
        "merged": false,
        "additions": 2764,
        "deletions": 1462,
        "changed_files": 139,
        "created_at": "2023-10-09T11:20:41Z",
        "closed_at": "2023-10-09T13:40:52Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #115882 (improve the suggestion of `generic_bound_failure`)\n - #116537 (Fix suggestion span involving wrongly placed generic arg on variant)\n - #116543 (In smir `find_crates` returns `Vec<Crate>` instead of `Option<Crate>`)\n - #116548 (Improve handling of assertion failures with very long conditions)\n - #116556 (Sync rustc_codegen_cranelift)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115882,116537,116543,116548,116556)\n<!-- homu-ignore:end -->",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-09T10:31:56Z",
        "closed_at": "2023-10-09T17:13:16Z",
        "merged_at": "2023-10-09T17:13:16Z",
        "body": "Addresses https://github.com/rust-lang/rust/issues/115517#issuecomment-1730164116\r\n\r\nCloses #115517\r\n\r\nr? @compiler-errors ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 88,
        "deletions": 36,
        "changed_files": 6,
        "created_at": "2023-10-09T10:09:37Z",
        "closed_at": "2023-10-10T19:23:01Z",
        "merged_at": "2023-10-10T19:23:01Z",
        "body": "Previously we used `vec` for storing indexed types, which is fine for small cases but will lead to huge performance issues when we use `smir` for real world cases.\r\n\r\nAddresses https://github.com/rust-lang/project-stable-mir/issues/35\r\n\r\nr? @oli-obk ",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-09T09:32:47Z",
        "closed_at": "2023-10-10T19:23:01Z",
        "merged_at": "2023-10-10T19:23:01Z",
        "body": "Discussed in and closes rust-lang/wg-allocators#118",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 1205,
        "deletions": 710,
        "changed_files": 48,
        "created_at": "2023-10-09T08:57:45Z",
        "closed_at": "2023-10-09T17:13:16Z",
        "merged_at": "2023-10-09T17:13:16Z",
        "body": "The highlights this time are improved simd and inline asm support, `is_x86_feature_detected!()` returning the actual cpu features when inline asm support is enabled and a couple of bug fixes.\r\n\r\nr? @ghost\r\n\r\n@rustbot label +A-codegen +A-cranelift +T-compiler +subtree-sync",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 69,
        "deletions": 0,
        "changed_files": 5,
        "created_at": "2023-10-09T08:14:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Allow adding values to the `!llvm.module.flags` metadata for a generated module.  The syntax is\r\n\r\n`-Z llvm_module_flag=<name>:<type>:<value>:<behavior>`\r\n\r\nCurrently only u32 values are supported but the type is required to be specified for forward compatibility.  The `behavior` element must match one of the named LLVM metadata behaviors.viors.\r\n\r\nThis flag is expected to be perma-unstable.",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 212,
        "deletions": 14,
        "changed_files": 3,
        "created_at": "2023-10-09T06:41:08Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #116464 \r\n\r\nWe now skip the suggestion if we're in an impl of the trait.\r\n\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 531,
        "deletions": 29,
        "changed_files": 7,
        "created_at": "2023-10-09T05:49:10Z",
        "closed_at": "2023-10-10T13:28:08Z",
        "merged_at": "2023-10-10T13:28:07Z",
        "body": "This implements the [LLVM semantics for NaN generation](https://llvm.org/docs/LangRef.html#behavior-of-floating-point-nan-values). I will soon submit an RFC to make this also officially the Rust semantics, but it has been our de-facto semantics for a long time so there's no reason Miri has to wait for that RFC. This PR just better aligns Miri with codegen.\r\n\r\nThis PR does that just for the operations that have MIR primitives; a future PR will adjust the intrinsics.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 254,
        "deletions": 292,
        "changed_files": 14,
        "created_at": "2023-10-09T03:30:28Z",
        "closed_at": "2023-10-16T16:32:39Z",
        "merged_at": "2023-10-16T16:32:39Z",
        "body": "The sequel to #116437.\r\n\r\nr? @Nilstrieb ",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 43,
        "deletions": 86,
        "changed_files": 3,
        "created_at": "2023-10-09T03:23:01Z",
        "closed_at": "2023-10-09T17:13:16Z",
        "merged_at": "2023-10-09T17:13:16Z",
        "body": null,
        "comments": 4
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-09T03:18:07Z",
        "closed_at": "2023-10-10T09:54:13Z",
        "merged_at": "2023-10-10T09:54:13Z",
        "body": "It's not perfectly clear what the best behaviour is here, but I think this is an improvement.\r\n\r\nr? @matthewjasper\r\ncc @m-ou-se ",
        "comments": 20
    },
    {
        "merged": false,
        "additions": 1182,
        "deletions": 740,
        "changed_files": 85,
        "created_at": "2023-10-08T21:10:27Z",
        "closed_at": "2023-10-09T04:02:25Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #115882 (improve the suggestion of `generic_bound_failure`)\n - #116527 (Bump libc dependency)\n - #116532 (Add RUSTFLAGS_BOOTSTRAP to RUSTFLAGS for bootstrap compilation)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115882,116527,116532)\n<!-- homu-ignore:end -->",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1199,
        "deletions": 740,
        "changed_files": 87,
        "created_at": "2023-10-08T21:09:58Z",
        "closed_at": "2023-10-08T21:10:13Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #115882 (improve the suggestion of `generic_bound_failure`)\n - #116264 (add test for wasm linker override=clang)\n - #116527 (Bump libc dependency)\n - #116532 (Add RUSTFLAGS_BOOTSTRAP to RUSTFLAGS for bootstrap compilation)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115882,116264,116527,116532)\n<!-- homu-ignore:end -->",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 11,
        "changed_files": 3,
        "created_at": "2023-10-08T19:56:54Z",
        "closed_at": "2023-10-09T17:13:16Z",
        "merged_at": "2023-10-09T17:13:16Z",
        "body": "Addresses https://github.com/rust-lang/project-stable-mir/issues/40\r\n\r\n\r\nr? @oli-obk ",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 103,
        "deletions": 22,
        "changed_files": 7,
        "created_at": "2023-10-08T19:38:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This adds range information to the slice-len in fat pointers if we can conservatively determine that the pointee is not a ZST without having to normalize the pointee type.\r\n\r\nI only intended to pass the `!range` to llvm but apparently this also lets the length in fat pointers be used for its niches \ud83d\ude05.\r\n\r\nIdeally this would use the naive-layout computation from #113166 to calculate a better approximation of the pointee size, but that PR got reverted.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 77,
        "deletions": 12,
        "changed_files": 2,
        "created_at": "2023-10-08T19:21:44Z",
        "closed_at": "2023-10-15T00:48:19Z",
        "merged_at": "2023-10-15T00:48:19Z",
        "body": "I took inspiration from [`once_cell`](https://crates.io/crates/once_cell):\r\n- [`once_cell::unsync::OnceCell::try_insert()`](https://github.com/matklad/once_cell/blob/874f9373abd7feaf923a3b3c34bfb3383529c671/src/lib.rs#L551-L563)\r\n- [`once_cell::sync::OnceCell::try_insert()`](https://github.com/matklad/once_cell/blob/874f9373abd7feaf923a3b3c34bfb3383529c671/src/lib.rs#L1080-L1087)\r\n\r\nI tried to change as little code as possible in the first commit and applied some obvious optimizations in the second one.\r\n\r\nACP: https://github.com/rust-lang/libs-team/issues/276\r\nTracking issue: #116693",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 356,
        "deletions": 3,
        "changed_files": 3,
        "created_at": "2023-10-08T14:45:01Z",
        "closed_at": "2023-10-09T17:13:16Z",
        "merged_at": "2023-10-09T17:13:16Z",
        "body": "Fixes #116473\r\n\r\nThe span computation was wrong. It went from the end of the variant to the end of the (wrongly placed) args. However, the variant lived in a different expansion and this resulted in a nonsensical span that overlaps with another and thereby leads to the ICE.\r\n\r\nIn the fix I've changed span computation to not be based on the location of the variant, but purely on the location of the args. I simply extend the start of the args span 2 positions to the left and that includes the `::` and that's all we need apparently. \r\n\r\nThis approach produces a correct span regardless of which macro/expansion the args reside in and where the variant is.",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 4,
        "deletions": 28,
        "changed_files": 4,
        "created_at": "2023-10-08T12:25:10Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This option is not useful any more, we can use `tracing` and `RUSTC_LOG` to debug the dep-graph.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 10,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-08T12:15:09Z",
        "closed_at": "2023-10-09T07:45:23Z",
        "merged_at": "2023-10-09T07:45:23Z",
        "body": "Fixes https://github.com/rust-lang/rust/issues/116513\r\n\r\nThe bug was introduced in https://github.com/rust-lang/rust/pull/110728, which put the check too early in the query chain.\r\n\r\ncc @oli-obk @ouz-a ",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-08T10:49:01Z",
        "closed_at": "2023-10-09T19:04:27Z",
        "merged_at": "2023-10-09T19:04:27Z",
        "body": "Adds `RUSTFLAGS_BOOTSTRAP` to `RUSTFLAGS` for bootstrap compilation when `RUSTFLAGS_BOOTSTRAP` exists in the environment. With this PR, `RUSTFLAGS_BOOTSTRAP` will affect every build(as we already do for rustc and std) compiled with stage0 compiler.\r\n\r\nResolves #94234",
        "comments": 18
    },
    {
        "merged": false,
        "additions": 414,
        "deletions": 71,
        "changed_files": 14,
        "created_at": "2023-10-08T09:33:14Z",
        "closed_at": "2023-10-10T18:22:21Z",
        "merged_at": null,
        "body": "Fixes https://github.com/rust-lang/rust/issues/111005\r\nFixes https://github.com/rust-lang/rust/issues/110902\r\n\r\nThis PR re-enables NRVO opt that had been disabled in https://github.com/rust-lang/rust/pull/111007\r\n\r\nTo look for RVO opportunities, we walk the MIR backwards from `return` terminators. In addition to the former implementation, we look at all the traversed statements and terminators for writes. If a local is written-to or moved-from, we discard it from the RVO candidates (`assigned_locals` bitset). If we see an indirect write or move, we discard all borrowed locals from candidates.\r\n\r\ncc @JakobDegen ",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 5,
        "changed_files": 3,
        "created_at": "2023-10-08T09:23:12Z",
        "closed_at": "2023-10-11T03:37:58Z",
        "merged_at": "2023-10-11T03:37:58Z",
        "body": "We shouldn't have any trait selection ambiguities in MIR typeck.\r\n\r\nSee https://github.com/rust-lang/rust/pull/114586#issuecomment-1751967321\r\n\r\nr? @oli-obk @compiler-errors @lcnr",
        "comments": 8
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-08T09:02:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-08T08:59:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This PR stabilizes `Ready::into_inner()`.\r\n\r\nTracking issue: #101196.\r\nImplementation PR: #101189.\r\n\r\nCloses #101196.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 2,
        "created_at": "2023-10-08T08:37:12Z",
        "closed_at": "2023-10-15T17:09:23Z",
        "merged_at": "2023-10-15T17:09:23Z",
        "body": "To get GNU/Hurd support, so that CI of external repositories (e.g. getrandom) can build std.",
        "comments": 18
    },
    {
        "merged": true,
        "additions": 26,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-07T18:14:55Z",
        "closed_at": "2023-10-15T23:04:00Z",
        "merged_at": "2023-10-15T23:04:00Z",
        "body": "Fixes #115599\r\n\r\nSince the [to_pat](https://github.com/rust-lang/rust/pull/111913/files#diff-6d8d99538aca600d633270051580c7a9e40b35824ea2863d9dda2c85a733b5d9R126-R155) behavior has been changed in the #111913 update, the kind of `inlined_const_ast_pat` has transformed from `PatKind::Leaf { pattern: Pat { kind: Wild, ..} } ` to `PatKind::Constant`. This caused a scenario where there are no matched candidates, leading to a testing of the candidates. This process ultimately attempts to test the string const, triggering the `bug!` invocation finally.\r\n\r\n\r\nr? @oli-obk",
        "comments": 29
    },
    {
        "merged": false,
        "additions": 361,
        "deletions": 176,
        "changed_files": 51,
        "created_at": "2023-10-07T16:54:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Requires lowering function call arg spans down to MIR, which is done in the second commit.\r\n\r\nPart of #83518\r\n\r\nAlso see https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/arg.20Spans.20for.20TerminatorKind.3A.3ACall.3F\r\n\r\nr? @oli-obk (E-mentor)",
        "comments": 25
    },
    {
        "merged": true,
        "additions": 40,
        "deletions": 109,
        "changed_files": 4,
        "created_at": "2023-10-07T14:33:04Z",
        "closed_at": "2023-10-17T12:15:52Z",
        "merged_at": "2023-10-17T12:15:52Z",
        "body": "Doc changes:\r\n\r\n- Updated Vita target readme. The recommended approach to build artifacts for the platform now is [cargo-vita](https://crates.io/crates/cargo-vita) which wraps all the convoluted steps previously described in a yaml for `cargo-make`\r\n- Updated maintainer list for Vita target. (@ZetaNumbers @pheki please agree to be added to the list, @amg98 please let us know if you're still planning on actively maintaining target support)\r\n\r\nCode changes:\r\n- ~Updated libc for rust-lang/libc#3284 and rust-lang/libc#3366~ (Already merged in #116527)\r\n- In dupfd changed the flag same as for esp target, there is no CLOEXEC on Vita\r\n- Enabled `new_pair` since we've implemented `socketpair` in Vita newlib",
        "comments": 22
    },
    {
        "merged": false,
        "additions": 117,
        "deletions": 5,
        "changed_files": 4,
        "created_at": "2023-10-07T13:51:19Z",
        "closed_at": null,
        "merged_at": null,
        "body": "fixes rust-lang/infra-team#74\r\nreplaces rust-lang/simpleinfra#348\r\n",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 12,
        "deletions": 23,
        "changed_files": 5,
        "created_at": "2023-10-07T11:39:01Z",
        "closed_at": "2023-10-08T17:02:37Z",
        "merged_at": "2023-10-08T17:02:37Z",
        "body": null,
        "comments": 9
    },
    {
        "merged": true,
        "additions": 27,
        "deletions": 68,
        "changed_files": 11,
        "created_at": "2023-10-07T11:21:11Z",
        "closed_at": "2023-10-08T10:49:30Z",
        "merged_at": "2023-10-08T10:49:30Z",
        "body": "It is subsumed by `-Clinker-flavor=*-lld-cc -Clink-self-contained=+linker` options now.\r\n\r\nr? @lqd ",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 173,
        "deletions": 1,
        "changed_files": 3,
        "created_at": "2023-10-07T07:57:49Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #116502 ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 81,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-10-07T07:11:40Z",
        "closed_at": "2023-10-12T21:32:28Z",
        "merged_at": "2023-10-12T21:32:28Z",
        "body": "For `[T; 1]` it's silly to copy as `<1 x T>` when we can just copy as `T`.\r\n\r\nInspired by https://github.com/rust-lang/rust/issues/101210#issuecomment-1732470941, which pointed out that `Option<[u8; 1]>` was codegenning worse than `Option<u8>`.\r\n\r\n(I'm not sure *why* LLVM doesn't optimize out `<1 x u8>`, but might as well just not emit it in the first place in this codepath.)\r\n\r\n---\r\n\r\nI think I bit off too much in #116479; let me try just the scalar case first.\r\n\r\nr? @ghost \r\n",
        "comments": 19
    },
    {
        "merged": true,
        "additions": 33,
        "deletions": 69,
        "changed_files": 11,
        "created_at": "2023-10-07T06:41:53Z",
        "closed_at": "2023-10-08T09:03:53Z",
        "merged_at": "2023-10-08T09:03:53Z",
        "body": null,
        "comments": 6
    },
    {
        "merged": true,
        "additions": 2384,
        "deletions": 1813,
        "changed_files": 90,
        "created_at": "2023-10-07T05:58:19Z",
        "closed_at": "2023-10-07T08:57:21Z",
        "merged_at": "2023-10-07T08:57:21Z",
        "body": "r? @ghost",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-07T05:26:23Z",
        "closed_at": "2023-10-12T02:33:05Z",
        "merged_at": "2023-10-12T02:33:04Z",
        "body": "This `tmp` variable has existed since the original implementation (added in ff81920f03866674080ac63b565cc9d30f80c450), but it's not necessary (maybe non-lexical lifetimes helped?).\r\n\r\nIt's common to read std source code to understand how things actually work, and this tripped me up on my first read.",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 457,
        "deletions": 350,
        "changed_files": 68,
        "created_at": "2023-10-07T04:37:50Z",
        "closed_at": "2023-10-18T03:54:38Z",
        "merged_at": "2023-10-18T03:54:38Z",
        "body": "This is basically reviving https://github.com/rust-lang/rust/pull/70550\r\n\r\nThe `#[inline]` attribute can have a significant impact on code generation or runtime performance (because it enables inlining between CGUs where it would normally not happen) and also on compile-time performance (because it enables MIR inlining). But it has to be added manually, which is awkward.\r\n\r\nThis PR factors whether a DefId is cross-crate inlinable into a query, and replaces all uses of `CodegenFnAttrs::requests_inline` with this new query. The new query incorporates all the other logic that is used to determine whether a Def should be treated as cross-crate-inlinable, and as a last step inspects the function's optimized_mir to determine if it should be treated as cross-crate-inlinable.\r\n\r\nThe heuristic implemented here is deliberately conservative; we only infer inlinability for functions whose optimized_mir does not contain any calls or asserts. I plan to study adjusting the cost model later, but for now the compile time implications of this change are so significant that I think this very crude heuristic is well worth landing.",
        "comments": 87
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-10-07T01:28:08Z",
        "closed_at": "2023-10-10T19:23:02Z",
        "merged_at": "2023-10-10T19:23:01Z",
        "body": "These mips targets were demoted in #113274, but the documentation was not updated. I have also elected to document this in the release notes for 1.72 because I think that should have been included.\r\n",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 266,
        "deletions": 124,
        "changed_files": 41,
        "created_at": "2023-10-06T23:37:49Z",
        "closed_at": "2023-10-07T02:19:46Z",
        "merged_at": "2023-10-07T02:19:46Z",
        "body": "Successful merges:\n\n - #116277 (dont call mir.post_mono_checks in codegen)\n - #116400 (Detect missing `=>` after match guard during parsing)\n - #116458 (Properly export function defined in test which uses global_asm!())\n - #116500 (Add tvOS to target_os for register_dtor)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116277,116400,116458,116500)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-06T22:12:54Z",
        "closed_at": "2023-10-07T02:19:46Z",
        "merged_at": "2023-10-07T02:19:46Z",
        "body": "Closes #116491.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 122,
        "deletions": 69,
        "changed_files": 30,
        "created_at": "2023-10-06T20:56:20Z",
        "closed_at": "2023-10-09T22:51:25Z",
        "merged_at": "2023-10-09T22:51:25Z",
        "body": "Typically, we highlight the def-span of an impl in a diagnostic due to either:\r\n1. coherence error\r\n2. trait evaluation cycle\r\n3. invalid implementation of built-in trait\r\n\r\nI find that an impl's where clauses are very often required to understanding why these errors come about, which is unfortunate since where clauses may be located on different lines and don't show up in the error. This PR expands the def-span of impls to include these where clauses.\r\n\r\nr? cjgillot since you've touched this code a while back to make some spans shorter, but you can also reassign to wg-diagnostics or compiler if you're busy or have no strong opinions.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 372,
        "deletions": 14,
        "changed_files": 8,
        "created_at": "2023-10-06T20:52:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When a method chain ending in `?` causes an E0277 because the expression's `Result::Err` variant doesn't have a type that can be converted to the `Result<_, E>` type parameter in the return type, provide additional context of which parts of the chain can and can't support the `?` operator.\r\n\r\n```\r\nerror[E0277]: `?` couldn't convert the error to `String`\r\n  --> $DIR/question-mark-result-err-mismatch.rs:27:25\r\n   |\r\nLL | fn bar() -> Result<(), String> {\r\n   |             ------------------ expected `String` because of this\r\nLL |     let x = foo();\r\n   |             ----- this has type `Result<_, String>`\r\n...\r\nLL |         .map_err(|_| ())?;\r\n   |          ---------------^ the trait `From<()>` is not implemented for `String`\r\n   |          |\r\n   |          this can't be annotated with `?` because it has type `Result<_, ()>`\r\n   |\r\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\r\n   = help: the following other types implement trait `From<T>`:\r\n             <String as From<char>>\r\n             <String as From<Box<str>>>\r\n             <String as From<Cow<'a, str>>>\r\n             <String as From<&str>>\r\n             <String as From<&mut str>>\r\n             <String as From<&String>>\r\n   = note: required for `Result<(), String>` to implement `FromResidual<Result<Infallible, ()>>`\r\n```\r\n\r\nFix #72124.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 67,
        "deletions": 135,
        "changed_files": 7,
        "created_at": "2023-10-06T20:28:06Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @ghost",
        "comments": 17
    },
    {
        "merged": false,
        "additions": 22,
        "deletions": 2,
        "changed_files": 2,
        "created_at": "2023-10-06T19:47:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "1.73 is the first place this shows up in stable (recall that there was only 1 regression), so let's bump this to deny on nightly.\r\n\r\nr? lcnr",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 116,
        "deletions": 166,
        "changed_files": 15,
        "created_at": "2023-10-06T19:17:51Z",
        "closed_at": "2023-10-06T22:38:39Z",
        "merged_at": "2023-10-06T22:38:39Z",
        "body": "Successful merges:\n\n - #114564 (Attempt to describe the intent behind the `From` trait further)\n - #116297 (add some docs to hooks/mod.rs)\n - #116423 (Fix typo in attrs.rs)\n - #116466 (`rustc_transmute` cleanups)\n - #116474 (Assorted small cleanups)\n - #116481 (Reuse existing `Some`s in `Option::(x)or`)\n - #116484 (Minor doc clarification in Once::call_once)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=114564,116297,116423,116466,116474,116481,116484)\n<!-- homu-ignore:end -->",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 2369,
        "deletions": 1786,
        "changed_files": 87,
        "created_at": "2023-10-06T16:06:31Z",
        "closed_at": "2023-10-06T16:18:56Z",
        "merged_at": null,
        "body": "r? @ghost",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 2665,
        "deletions": 772,
        "changed_files": 109,
        "created_at": "2023-10-06T15:49:31Z",
        "closed_at": "2023-10-06T18:44:17Z",
        "merged_at": "2023-10-06T18:44:17Z",
        "body": "r? @Manishearth ",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 235,
        "deletions": 56,
        "changed_files": 8,
        "created_at": "2023-10-06T14:30:40Z",
        "closed_at": "2023-10-07T06:32:59Z",
        "merged_at": null,
        "body": "Use a separate type instead, so that we need to convert from one `TokenStream` to another and back on proc macro boundaries.\r\nI want to check how much it affects performance.\r\n\r\nThis PR also implements the suggestion to censor token jointness at proc macro boundary from https://github.com/rust-lang/rust/pull/114571 (since we now have such a boundary).\r\nThis PR is also somewhat related to https://github.com/rust-lang/rust/pull/101419.\r\n\r\nI don't like the result and will likely close this after the perf test.",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 28,
        "changed_files": 5,
        "created_at": "2023-10-06T12:39:57Z",
        "closed_at": "2023-10-08T07:12:16Z",
        "merged_at": "2023-10-08T07:12:16Z",
        "body": "Please see individual commits. r? @bjorn3 cf. #116426 ",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 14,
        "changed_files": 1,
        "created_at": "2023-10-06T12:36:33Z",
        "closed_at": "2023-10-08T05:23:13Z",
        "merged_at": "2023-10-08T05:23:13Z",
        "body": "This PR fixes an unexpected behavior of the `-Zllvm-plugins` flag. It allows to run an out-of-tree pass as part of LTO. \r\nHowever, analysis passes are registered before the plugin is loaded. As a result an analysis pass, which is passed as a plugin, is not registered. This causes the LLVM PassManager to fail when the analysis pass is queried from a transformation pass  [(here)](https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/IR/PassManager.h#L776).\r\n\r\nThis fix mimics the bahavior in [LLVM LTOBackend.cpp](https://github.com/llvm/llvm-project/blob/main/llvm/lib/LTO/LTOBackend.cpp#L273) by loading the plugin before the analysis passes are registered.\r\n\r\nTested with rustc 1.60 and 1.65 and LLVM-13.0.1. ",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 20,
        "deletions": 20,
        "changed_files": 1,
        "created_at": "2023-10-06T12:31:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Stabilization PR for the ratified RISC-V target features. This stabilizes some of the target features tracked by #44839. This is also a part of #114544 and eventually needed for the RISC-V part of rust-lang/rfcs#3268.\r\n\r\nThere is a similar PR for the the stdarch crate which can be found at rust-lang/stdarch#1476.\r\n\r\nThis was briefly discussed on Zulip\r\n(https://rust-lang.zulipchat.com/#narrow/stream/250483-t-compiler.2Frisc-v/topic/Stabilization.20of.20RISC-V.20Target.20Features/near/394793704).\r\n\r\nSpecifically, this PR stabilizes the:\r\n* Atomic Instructions (A) on v2.0\r\n* Compressed Instructions (C) on v2.0\r\n* ~Double-Precision Floating-Point (D) on v2.2~\r\n* ~Embedded Base (E) (Given as `RV32E` / `RV64E`) on v2.0~\r\n* ~Single-Precision Floating-Point (F) on v2.2~\r\n* Integer Multiplication and Division (M) on v2.0\r\n* ~Vector Operations (V) on v1.0~\r\n* Bit Manipulations (B) on v1.0 listed as `zba`, `zbc`, `zbs`\r\n* Scalar Cryptography (Zk) v1.0.1 listed as `zk`, `zkn`, `zknd`, `zkne`, `zknh`, `zkr`, `zks`, `zksed`, `zksh`, `zkt`, `zbkb`, `zbkc` `zkbx`\r\n* ~Double-Precision Floating-Point in Integer Register (Zdinx) on v1.0~\r\n* ~Half-Precision Floating-Point (Zfh) on v1.0~\r\n* ~Minimal Half-Precision Floating-Point (Zfhmin) on v1.0~\r\n* ~Single-Precision Floating-Point in Integer Register (Zfinx) on v1.0~\r\n* ~Half-Precision Floating-Point in Integer Register (Zhinx) on v1.0~\r\n* ~Minimal Half-Precision Floating-Point in Integer Register (Zhinxmin) on v1.0~\r\n\r\nr? @Amanieu",
        "comments": 36
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-06T11:21:20Z",
        "closed_at": "2023-10-06T22:38:39Z",
        "merged_at": "2023-10-06T22:38:39Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": true,
        "additions": 328,
        "deletions": 294,
        "changed_files": 84,
        "created_at": "2023-10-06T11:18:36Z",
        "closed_at": "2023-10-06T14:56:07Z",
        "merged_at": "2023-10-06T14:56:07Z",
        "body": "Successful merges:\n\n - #115454 (Clarify example in docs of str::char_slice)\n - #115522 (Clarify ManuallyDrop bit validity)\n - #115588 (Fix a comment in std::iter::successors)\n - #116198 (Add more diagnostic items for clippy)\n - #116329 (update some comments around swap())\n - #116475 (rustdoc-search: fix bug with multi-item impl trait)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115454,115522,115588,116198,116329,116475)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 245,
        "deletions": 62,
        "changed_files": 24,
        "created_at": "2023-10-06T11:10:32Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fix THIR unsafety checking of inline constants.\r\n- Steal THIR in THIR unsafety checking (if enabled) instead of MIR lowering.\r\n- Represent inline constants in THIR patterns.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-06T08:44:10Z",
        "closed_at": "2023-10-06T22:38:39Z",
        "merged_at": "2023-10-06T22:38:39Z",
        "body": "LLVM still has trouble re-using discriminants sometimes when rebuilding a two-variant enum, so when we have the correct variant already built, just use it.\r\n\r\nThat's shorter in the Rust code, as well as simpler in MIR and the optimized LLVM, so might as well: <https://rust.godbolt.org/z/KhdE8eToW>\r\n\r\nThanks to @veber-alex for pointing out this opportunity in https://github.com/rust-lang/rust/issues/101210#issuecomment-1732470941",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 57,
        "deletions": 30,
        "changed_files": 11,
        "created_at": "2023-10-06T08:35:49Z",
        "closed_at": "2023-10-06T11:18:05Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #111595 (`waitqueue` clarifications for SGX platform)\n - #115454 (Clarify example in docs of str::char_slice)\n - #115522 (Clarify ManuallyDrop bit validity)\n - #115588 (Fix a comment in std::iter::successors)\n - #116329 (update some comments around swap())\n - #116475 (rustdoc-search: fix bug with multi-item impl trait)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=111595,115454,115522,115588,116329,116475)\n<!-- homu-ignore:end -->",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 89,
        "deletions": 5,
        "changed_files": 5,
        "created_at": "2023-10-06T08:21:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": "For `[T; 1]` it's silly to copy as `<1 x T>` when we can just copy as `T`.\r\nAnd treat `[T; 2]` as a scalar pair (like `(T, T)`) when copying it.\r\n\r\nInspired by https://github.com/rust-lang/rust/issues/101210#issuecomment-1732470941, which pointed out that `Option<[u8; 1]>` was codegenning worse than `Option<u8>`.\r\n\r\n(I'm not sure *why* LLVM doesn't optimize out `<1 x u8>`, but might as well just not emit it in the first place in this codepath.)",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-06T07:15:30Z",
        "closed_at": "2023-10-06T07:20:21Z",
        "merged_at": null,
        "body": "Names of intrinsics in error messages from exec_intrinsic",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 28,
        "changed_files": 2,
        "created_at": "2023-10-06T07:04:31Z",
        "closed_at": "2023-10-17T04:40:21Z",
        "merged_at": "2023-10-17T04:40:21Z",
        "body": "I get annoyed when dependencies in `Cargo.toml` files are not in alphabetical order. The [style guide](https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/cargo.md) agrees with me.\r\n\r\nThere are ongoing efforts to provide linting/formatting of `Cargo.toml` files, e.g. https://github.com/rust-lang/rustfmt/pull/5240, https://crates.io/crates/cargo-toml-lint, and https://github.com/TimonPost/cargo-toml-format. But it's far from clear what's the right approach.\r\n\r\nSo this PR does something very simple: it uses the order checking already present in tidy. This allows incremental application of ordering, starting right now, and avoiding the need for any kind of all-at-once conversion.\r\n\r\nIf we do end up using some more comprehensive `Cargo.toml` linting/formatting solution in the future, the `tidy-alphabetical` lines will be easy to remove.\r\n\r\nr? @wesleywiser ",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 28,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-10-06T06:08:33Z",
        "closed_at": "2023-10-10T04:44:39Z",
        "merged_at": null,
        "body": "Continues #109859 ",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 21,
        "deletions": 6,
        "changed_files": 3,
        "created_at": "2023-10-06T05:40:54Z",
        "closed_at": "2023-10-06T14:56:07Z",
        "merged_at": "2023-10-06T14:56:07Z",
        "body": "Preview searches:\r\n\r\n- https://notriddle.com/rustdoc-html-demo-5/compiler-doc-impl-trait-bugfix/index.html?search=-%3E%20globalctxt\r\n\r\n- https://notriddle.com/rustdoc-html-demo-5/compiler-doc-impl-trait-bugfix/index.html?search=globalctxt",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 28,
        "deletions": 81,
        "changed_files": 8,
        "created_at": "2023-10-06T04:53:24Z",
        "closed_at": "2023-10-06T22:38:39Z",
        "merged_at": "2023-10-06T22:38:39Z",
        "body": "r? @spastorino ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 69,
        "deletions": 33,
        "changed_files": 6,
        "created_at": "2023-10-06T04:23:49Z",
        "closed_at": "2023-10-06T07:23:23Z",
        "merged_at": "2023-10-06T07:23:23Z",
        "body": "Successful merges:\n\n - #116421 (Clarify `invalid_reference_casting` lint around interior mutable types)\n - #116469 (Fix typo in README.md)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116421,116469)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 920,
        "deletions": 150,
        "changed_files": 36,
        "created_at": "2023-10-06T04:10:57Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Preview docs:\r\n\r\n- https://notriddle.com/rustdoc-html-demo-5/js-trait-alias/std/io/type.Result.html\r\n\r\n- https://notriddle.com/rustdoc-html-demo-5/js-trait-alias-compiler/rustc_middle/ty/type.PolyTraitRef.html\r\n\r\n\r\n*Review note: This is mostly just reverting https://github.com/rust-lang/rust/pull/115201. The last commit has the new work in it.*\r\n\r\nFixes #115718\r\n\r\nThis is an attempt to balance three problems, each of which would\r\nbe violated by a simpler implementation:\r\n\r\n- A type alias should show all the `impl` blocks for the target\r\n  type, and vice versa, if they're applicable. If nothing was\r\n  done, and rustdoc continues to match them up in HIR, this\r\n  would not work.\r\n\r\n- Copying the target type's docs into its aliases' HTML pages\r\n  directly causes far too much redundant HTML text to be generated\r\n  when a crate has large numbers of methods and large numbers\r\n  of type aliases.\r\n\r\n- Using JavaScript exclusively for type alias impl docs would\r\n  be a functional regression, and could make some docs very hard\r\n  to find for non-JS readers.\r\n\r\n- Making sure that only applicable docs are show in the\r\n  resulting page requires a type checkers. Do not reimplement\r\n  the type checker in JavaScript.\r\n\r\nSo, to make it work, rustdoc stashes these type-alias-inlined docs\r\nin a JSONP \"database-lite\". The file is generated in `write_shared.rs`,\r\nincluded in a `<script>` tag added in `print_item.rs`, and `main.js`\r\ntakes care of patching the additional docs into the DOM.\r\n\r\nThe format of `trait.impl` and `type.impl` JS files are superficially\r\nsimilar. Each line, except the JSONP wrapper itself, belongs to a crate,\r\nand they are otherwise separate (rustdoc should be idempotent). The\r\n\"meat\" of the file is HTML strings, so the frontend code is very simple.\r\nLinks are relative to the doc root, though, so the frontend needs to fix\r\nthat up, and inlined docs can reuse these files.\r\n\r\nHowever, there are a few differences, caused by the sophisticated\r\nfeatures that type aliases have. Consider this crate graph:\r\n\r\n```text\r\n ---------------------------------\r\n | crate A: struct Foo<T>        |\r\n |          type Bar = Foo<i32>  |\r\n |          impl X for Foo<i8>   |\r\n |          impl Y for Foo<i32>  |\r\n ---------------------------------\r\n     |\r\n ----------------------------------\r\n | crate B: type Baz = A::Foo<i8> |\r\n |          type Xyy = A::Foo<i8> |\r\n |          impl Z for Xyy        |\r\n ----------------------------------\r\n```\r\n\r\nThe type.impl/A/struct.Foo.js JS file has a structure kinda like this:\r\n\r\n```js\r\nJSONP({\r\n\"A\": [[\"impl Y for Foo<i32>\", \"Y\", \"A::Bar\"]],\r\n\"B\": [[\"impl X for Foo<i8>\", \"X\", \"B::Baz\", \"B::Xyy\"], [\"impl Z for Xyy\", \"Z\", \"B::Baz\"]],\r\n});\r\n```\r\n\r\nWhen the type.impl file is loaded, only the current crate's docs are\r\nactually used. The main reason to bundle them together is that there's\r\nenough duplication in them for DEFLATE to remove the redundancy.\r\n\r\nThe contents of a crate are a list of impl blocks, themselves\r\nrepresented as lists. The first item in the sublist is the HTML block,\r\nthe second item is the name of the trait (which goes in the sidebar),\r\nand all others are the names of type aliases that successfully match.\r\n\r\nThis way:\r\n\r\n- There's no need to generate these files for types that have no aliases\r\n  in the current crate. If a dependent crate makes a type alias, it'll\r\n  take care of generating its own docs.\r\n- There's no need to reimplement parts of the type checker in\r\n  JavaScript. The Rust backend does the checking, and includes its\r\n  results in the file.\r\n- Docs defined directly on the type alias are dropped directly in the\r\n  HTML by `render_assoc_items`, and are accessible without JavaScript.\r\n  The JSONP file will not list impl items that are known to be part\r\n  of the main HTML file already.\r\n\r\n[JSONP]: https://en.wikipedia.org/wiki/JSONP",
        "comments": 21
    },
    {
        "merged": false,
        "additions": 14,
        "deletions": 203,
        "changed_files": 4,
        "created_at": "2023-10-06T03:46:46Z",
        "closed_at": null,
        "merged_at": null,
        "body": "see #115178 for more information",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-06T03:38:47Z",
        "closed_at": "2023-10-06T07:23:23Z",
        "merged_at": "2023-10-06T07:23:23Z",
        "body": " the word \"programatically\" should be corrected to \"programmatically.\"",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 240,
        "deletions": 318,
        "changed_files": 3,
        "created_at": "2023-10-06T02:20:21Z",
        "closed_at": "2023-10-09T01:46:46Z",
        "merged_at": "2023-10-09T01:46:46Z",
        "body": "r? @Mark-Simulacrum ",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 20,
        "changed_files": 6,
        "created_at": "2023-10-06T02:18:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I always thought this was kinda sketchy, but it was only needed due to the hack removed in #116417\r\n\r\nr? types",
        "comments": 12
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 78,
        "changed_files": 2,
        "created_at": "2023-10-06T00:55:24Z",
        "closed_at": "2023-10-06T22:38:39Z",
        "merged_at": "2023-10-06T22:38:39Z",
        "body": "Just some things I found while poking around this code.\r\n\r\nr? @oli-obk ",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 90,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-10-06T00:49:03Z",
        "closed_at": "2023-10-10T21:43:11Z",
        "merged_at": null,
        "body": null,
        "comments": 6
    },
    {
        "merged": true,
        "additions": 18,
        "deletions": 13,
        "changed_files": 7,
        "created_at": "2023-10-05T23:36:36Z",
        "closed_at": "2023-10-06T05:33:34Z",
        "merged_at": "2023-10-06T05:33:34Z",
        "body": "We don't use much libc on Windows and it seemed silly to keep if for the sake of [two well documented constants](https://learn.microsoft.com/en-us/cpp/c-runtime-library/exit-success-exit-failure?view=msvc-170).",
        "comments": 11
    },
    {
        "merged": false,
        "additions": 100,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-10-05T23:20:12Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Use `CreateWaitableTimerExW` with `CREATE_WAITABLE_TIMER_HIGH_RESOLUTION`. Does not work before Windows 10, version 1803 so in that case we fallback to using `Sleep`.\r\n\r\nI've created a `WaitableTimer` type so it can one day be adapted to also support waiting to an absolute time (which has been talked about). Note though that it currently returns `Err(())` because we can't do anything with the errors other than fallback to the old `Sleep`. Feel free to tell me to do errors properly. It just didn't seem worth constructing an `io::Error` if we're never going to surface it to the user. And it *should* all be infallible anyway unless the OS is too old to support it.\r\n\r\nCloses #43376",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 66,
        "deletions": 42,
        "changed_files": 9,
        "created_at": "2023-10-05T21:36:29Z",
        "closed_at": "2023-10-05T21:37:03Z",
        "merged_at": null,
        "body": "r? @ghost \r\nImplementing https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/HashStable.20for.20AllocId.3F/near/395088058",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-05T19:44:05Z",
        "closed_at": "2023-10-07T02:19:47Z",
        "merged_at": "2023-10-07T02:19:47Z",
        "body": "Currently the test passes with the LLVM backend as the codegen unit partitioning logic happens to place both the global_asm!() and the function which calls the function defined by the global_asm!() in the same CGU. With the Cranelift backend it breaks however as it will place all assembly in separate codegen units to be passed to an external linker.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 15,
        "deletions": 15,
        "changed_files": 1,
        "created_at": "2023-10-05T19:18:01Z",
        "closed_at": "2023-10-07T10:42:06Z",
        "merged_at": "2023-10-07T10:42:06Z",
        "body": "Cc https://github.com/rust-lang/rust/pull/116281 @Nadrieril ",
        "comments": 17
    },
    {
        "merged": true,
        "additions": 762,
        "deletions": 356,
        "changed_files": 182,
        "created_at": "2023-10-05T17:24:36Z",
        "closed_at": "2023-10-05T19:41:02Z",
        "merged_at": "2023-10-05T19:41:02Z",
        "body": "Successful merges:\n\n - #116220 (stabilize `Option::as_`(`mut_`)`slice`)\n - #116288 (Add Span to various smir types)\n - #116415 (Move subtyper below reveal_all and change reveal_all)\n - #116428 (Add a note to duplicate diagnostics)\n - #116452 (Do not assert that hidden types don't have erased regions.)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116220,116288,116415,116428,116452)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 134,
        "deletions": 115,
        "changed_files": 5,
        "created_at": "2023-10-05T17:24:09Z",
        "closed_at": "2023-10-08T14:26:54Z",
        "merged_at": "2023-10-08T14:26:54Z",
        "body": "* Use small dominators optimization from 640ede7b0a1840415cb6ec881c2210302bfeba18 more generally.\r\n* Merge `DefLocation` and `LocationExtended` since they serve the same purpose.",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 4755,
        "deletions": 4181,
        "changed_files": 267,
        "created_at": "2023-10-05T17:23:56Z",
        "closed_at": "2023-10-05T17:24:22Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #114811 (Show more information when multiple `impl`s apply)\n - #116220 (stabilize `Option::as_`(`mut_`)`slice`)\n - #116288 (Add Span to various smir types)\n - #116415 (Move subtyper below reveal_all and change reveal_all)\n - #116428 (Add a note to duplicate diagnostics)\n - #116452 (Do not assert that hidden types don't have erased regions.)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=114811,116220,116288,116415,116428,116452)\n<!-- homu-ignore:end -->",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-05T15:55:22Z",
        "closed_at": "2023-10-05T19:41:02Z",
        "merged_at": "2023-10-05T19:41:02Z",
        "body": "cc https://github.com/rust-lang/rust/issues/116306\r\n\r\n`args` can have erased regions.\r\nIn the linked issue, this is reached by computing whether a large type is `Freeze` to compute its ABI.\r\n\r\nI do not have a minimized test to include.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 4,
        "changed_files": 4,
        "created_at": "2023-10-05T14:02:41Z",
        "closed_at": "2023-10-08T03:35:35Z",
        "merged_at": "2023-10-08T03:35:35Z",
        "body": "Needed to fix [this error](https://github.com/rust-lang/rust/actions/runs/6420044833/job/17431256956). Inspired by https://github.com/rust-lang/rust/pull/99988\r\n\r\nAlso, removes `try-merge` from the workflow. It shouldn't have been added in https://github.com/rust-lang/rust/pull/116353.\r\n\r\nr? @Mark-Simulacrum",
        "comments": 12
    },
    {
        "merged": false,
        "additions": 78,
        "deletions": 34,
        "changed_files": 4,
        "created_at": "2023-10-05T13:49:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Discussed here: https://github.com/rust-lang/rust/pull/116448#issuecomment-1748785961. Since it was not really documented why these flags were passed through the shim, I guess that the only way to find out if it's really needed... is to remove it :)\r\n\r\nr? @petrochenkov",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 57,
        "deletions": 37,
        "changed_files": 3,
        "created_at": "2023-10-05T11:58:45Z",
        "closed_at": "2023-10-12T00:44:19Z",
        "merged_at": "2023-10-12T00:44:19Z",
        "body": "This PR implements a generalized way of passing of host flags to the `rustc` shim in bootstrap, as proposed [here](https://github.com/rust-lang/rust/pull/116278#discussion_r1346979960).\r\n\r\nI tried to implement the bootstrap side using `OsString`, but then I realized that the shim code was using `env::var` before anyway, instead of `env::var_os`, so I just settled on a `String`. The shim side is still general and uses `env::vars_os` now.\r\n\r\nI'm not sure if we actually need to do something with the `rustdoc` shim. It *seems* to me that the env. vars passed to it (`RUSTDOC_LINKER`) and (`RUSTDOC_LLD_NO_THREADS`) could just be passed to cargo directly (or rather, the commands that they invoke in the shim could be passed directly). I'm not sure why are they set by the shim.\r\n\r\nr? @onur-ozkan\r\nCC @petrochenkov",
        "comments": 29
    },
    {
        "merged": false,
        "additions": 138,
        "deletions": 4,
        "changed_files": 14,
        "created_at": "2023-10-05T11:35:39Z",
        "closed_at": null,
        "merged_at": null,
        "body": "`gen fn foo() {}` already did not parse on any edition, so I just added a custom (slightly incorrect) error message for it, when the 2024 edition is enabled.\r\n\r\n`gen {}` blocks are technically able to exist, as someone could name a struct `gen` and then try to initialize its fields. With this PR this will be forbidden in 2024. I could start linting it on older editions.\r\n\r\nHistorically (async blocks, `dyn` traits) we've first linted on one edition, then errored in the follow up edition. That would be to lint in 2024 and hard error in 2027. I guess we could go with `k#gen` for 2024 edition.\r\n\r\nGenerators tracking issue https://github.com/rust-lang/rust/issues/43122\r\n\r\nThe semantics of gen blocks and `gen fn` are deliberately omitted from this PR. While I have opinions on those, development on them should follow the usual T-lang path for new features\r\n\r\nr? lang",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 52,
        "deletions": 103,
        "changed_files": 5,
        "created_at": "2023-10-05T09:45:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Only had one callsite which was easily simplified.\r\n\r\nUplifted a comment that I think is much more useful living in `ty::Const` world.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 12,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-05T09:37:01Z",
        "closed_at": "2023-10-05T18:21:32Z",
        "merged_at": null,
        "body": "Before this change we were trying to normalize aliased generic type, which caused normalization err now, we reveal all and, get type behind the alias.\r\n\r\nFixes https://github.com/rust-lang/project-stable-mir/issues/38\r\n\r\nr? @oli-obk ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 31,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-05T08:03:02Z",
        "closed_at": "2023-10-10T19:23:02Z",
        "merged_at": "2023-10-10T19:23:02Z",
        "body": null,
        "comments": 7
    },
    {
        "merged": true,
        "additions": 553,
        "deletions": 396,
        "changed_files": 132,
        "created_at": "2023-10-05T07:56:31Z",
        "closed_at": "2023-10-05T09:58:13Z",
        "merged_at": "2023-10-05T09:58:13Z",
        "body": "Successful merges:\n\n - #116223 (Fix misuses of a vs an)\n - #116296 (More accurately point to where default return type should go)\n - #116429 (Diagnostics: Be more careful when suggesting struct fields)\n - #116431 (Tweak wording of E0562)\n - #116432 (rustdoc: rename `issue-\\d+.rs` tests to have meaningful names (part 2))\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116223,116296,116429,116431,116432)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 580,
        "deletions": 397,
        "changed_files": 136,
        "created_at": "2023-10-05T07:10:46Z",
        "closed_at": "2023-10-05T07:57:51Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #115304 (Allow file names to end with '>')\n - #116223 (Fix misuses of a vs an)\n - #116296 (More accurately point to where default return type should go)\n - #116429 (Diagnostics: Be more careful when suggesting struct fields)\n - #116431 (Tweak wording of E0562)\n - #116432 (rustdoc: rename `issue-\\d+.rs` tests to have meaningful names (part 2))\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115304,116223,116296,116429,116431,116432)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 598,
        "deletions": 425,
        "changed_files": 137,
        "created_at": "2023-10-05T04:30:51Z",
        "closed_at": "2023-10-05T07:10:19Z",
        "merged_at": null,
        "body": "Successful merges:\n\n - #116223 (Fix misuses of a vs an)\n - #116296 (More accurately point to where default return type should go)\n - #116402 (Panic when the global allocator tries to register a TLS destructor)\n - #116429 (Diagnostics: Be more careful when suggesting struct fields)\n - #116431 (Tweak wording of E0562)\n - #116432 (rustdoc: rename `issue-\\d+.rs` tests to have meaningful names (part 2))\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116223,116296,116402,116429,116431,116432)\n<!-- homu-ignore:end -->",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 151,
        "deletions": 136,
        "changed_files": 55,
        "created_at": "2023-10-05T02:29:43Z",
        "closed_at": null,
        "merged_at": null,
        "body": "I don't think that users really ever should need to think about `Fn*` traits' tupled args for a simple trait error.\r\n\r\nr? diagnostics",
        "comments": 0
    },
    {
        "merged": false,
        "additions": 64,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-10-05T02:22:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This makes `OpenOptions::new().write(true).create(true).truncate(true).open(&path)` work if the path exists and is a hidden file. Previously it would fail with access denied.\r\n\r\nThis makes it consistent with `OpenOptions::new().write(true).truncate(true).open(&path)` (note the lack of `create`) which does not have this restriction. It's also more consistent with other platforms.\r\n\r\nFixes #115745 (see that issue for more details).",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 149,
        "deletions": 166,
        "changed_files": 8,
        "created_at": "2023-10-05T01:13:13Z",
        "closed_at": "2023-10-07T20:58:31Z",
        "merged_at": "2023-10-07T20:58:31Z",
        "body": "Plenty more to be done, but this is a decent start.\r\n\r\nr? @Nilstrieb ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 36,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-10-05T00:06:52Z",
        "closed_at": "2023-10-11T20:50:09Z",
        "merged_at": "2023-10-11T20:50:09Z",
        "body": "Fixes some signature deduction problems in the new trait solver (and in the case of async, an ICE).\r\n\r\nr? lcnr",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 100,
        "deletions": 9,
        "changed_files": 12,
        "created_at": "2023-10-04T23:18:54Z",
        "closed_at": null,
        "merged_at": null,
        "body": "There are legitimate cases in the compiler where we return `ReErased` for lifetimes that are uncaptured in the hidden type of an opaque. For example, in the test committed below, we ignore ignore the bivariant lifetimes of an opaque when it's inferred as the hidden type of another opaque. This may result in a `type_of(Opaque)` call returning a type that references `ReErased`. Let's handle this gracefully in the new solver.\r\n\r\nAlso added a `rustc_hidden_type_of_opaques` attr to print hidden types. This seems useful for opaques.\r\n\r\nr? lcnr",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 8,
        "changed_files": 25,
        "created_at": "2023-10-04T20:05:32Z",
        "closed_at": "2023-10-05T09:58:13Z",
        "merged_at": "2023-10-05T09:58:13Z",
        "body": "Follow up https://github.com/rust-lang/rust/pull/116214",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 136,
        "deletions": 136,
        "changed_files": 40,
        "created_at": "2023-10-04T19:51:52Z",
        "closed_at": "2023-10-05T09:58:13Z",
        "merged_at": "2023-10-05T09:58:13Z",
        "body": "Fix #80476.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-04T19:43:50Z",
        "closed_at": "2023-10-16T21:05:15Z",
        "merged_at": "2023-10-16T21:05:15Z",
        "body": "fixes #94782",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 226,
        "deletions": 145,
        "changed_files": 10,
        "created_at": "2023-10-04T19:08:11Z",
        "closed_at": "2023-10-05T09:58:13Z",
        "merged_at": "2023-10-05T09:58:13Z",
        "body": "Consolidate the various places which filter out struct fields that shouldn't be suggested into a single function.\r\n\r\nPreviously, each of those code paths had slightly different and incomplete metrics for no good reason. Now, there's only a single 'complete' metric (namely `is_field_suggestable`) which also filters out hygienic fields that come from different syntax contexts.\r\n\r\nFixes #116334.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 460,
        "deletions": 203,
        "changed_files": 166,
        "created_at": "2023-10-04T18:42:57Z",
        "closed_at": "2023-10-05T19:41:02Z",
        "merged_at": "2023-10-05T19:41:02Z",
        "body": "Helps explain why there may be a difference between manual testing and the test suite output and highlights them as something to potentially look into\r\n\r\nFor existing duplicate diagnostics I just blessed them other than a few files that had other `NOTE` annotations in",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 106,
        "deletions": 57,
        "changed_files": 38,
        "created_at": "2023-10-04T17:56:12Z",
        "closed_at": "2023-10-05T11:45:45Z",
        "merged_at": "2023-10-05T11:45:45Z",
        "body": "It does not serve any purpose, as we don't have typeck-based generator witnesses any more.",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-04T15:03:13Z",
        "closed_at": "2023-10-06T22:38:39Z",
        "merged_at": "2023-10-06T22:38:39Z",
        "body": "documenation -> documentation",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 59,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-04T14:24:37Z",
        "closed_at": "2023-10-07T23:01:16Z",
        "merged_at": null,
        "body": "looks nice in a microbenchmark, let's see if perf agrees\r\n\r\n```\r\nOLD:\r\n    slice::slice_cmp_generic 54.00ns/iter +/- 1.00ns\r\nNEW:\r\n    slice::slice_cmp_generic 20.00ns/iter +/- 2.00ns\r\n```",
        "comments": 34
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 32,
        "changed_files": 5,
        "created_at": "2023-10-04T14:12:10Z",
        "closed_at": "2023-10-06T07:23:23Z",
        "merged_at": "2023-10-06T07:23:23Z",
        "body": "This is PR intends to clarify the `invalid_reference_casting` lint around interior mutable types by adding a note for them saying that they should go through `UnsafeCell::get`.\r\n\r\nSo for this code:\r\n```rust\r\nlet cell = &std::cell::UnsafeCell::new(0);\r\nlet _num = &mut *(cell as *const _ as *mut i32);\r\n```\r\n\r\nthe following note will be added to the lint output:\r\n\r\n```diff\r\n error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused,  consider instead using an `UnsafeCell`\r\n   --> $DIR/reference_casting.rs:68:16\r\n    |\r\n LL |     let _num = &mut *(cell as *const _ as *mut i32);\r\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: for more information, visit <https://doc.rust-lang.org/book/ch15-05-interior-mutability.html>\r\n+   = note: even for types with interior mutability, the only legal way to obtain a mutable pointer from a shared reference is through `UnsafeCell::get`\r\n```\r\n\r\nSuggestion are welcome around the note contents.\r\n\r\nFixes https://github.com/rust-lang/rust/issues/116410\r\ncc @RalfJung ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 41,
        "deletions": 2,
        "changed_files": 4,
        "created_at": "2023-10-04T14:10:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #116203\r\n\r\nThis PR has discarded the invalid `\ufeffconst_span`, thereby making the format more neat.\r\n\r\nr? @Nilstrieb",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 23,
        "deletions": 23,
        "changed_files": 2,
        "created_at": "2023-10-04T11:16:41Z",
        "closed_at": "2023-10-05T21:28:58Z",
        "merged_at": "2023-10-05T21:28:58Z",
        "body": "In attempt to fix https://github.com/rust-lang/rust/issues/114057 we found several issues with how compiler computes layouts, this change removes `is_global` from `and` to stop impl from being shadowed.\r\n\r\nIn depth conversation can be read here https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Getting.20different.20types.20from.20almost.20same.20inputs\r\n\r\nThis is a fix candidate opened for performance run.\r\n\r\nr? @lcnr ",
        "comments": 19
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-04T10:58:38Z",
        "closed_at": "2023-10-07T23:52:05Z",
        "merged_at": "2023-10-07T23:52:05Z",
        "body": "17.0.0-rc3 had a bunch of miscompilations, and it's probably better in general not to use a RC version of LLVM long term on CI.",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 143,
        "deletions": 55,
        "changed_files": 10,
        "created_at": "2023-10-04T10:04:34Z",
        "closed_at": "2023-10-05T19:41:02Z",
        "merged_at": "2023-10-05T19:41:02Z",
        "body": "In previous attempt https://github.com/rust-lang/rust/pull/116378 we tried to handle `Opaque` in few different places, but this isn't necessary, after moving subtyper below reveal_all and calling `super_place` on reveal_all, issues cease to exist.\r\n\r\nr? @oli-obk \r\n\r\nFixes https://github.com/rust-lang/rust/issues/116332\r\nFixes https://github.com/rust-lang/rust/issues/116265\r\nFixes https://github.com/rust-lang/rust/issues/116383\r\nFixes https://github.com/rust-lang/rust/issues/116333",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 745,
        "deletions": 20,
        "changed_files": 42,
        "created_at": "2023-10-04T08:39:45Z",
        "closed_at": "2023-10-10T03:59:26Z",
        "merged_at": null,
        "body": "This PR is used to test #104862.\r\nUpstream patch: https://github.com/llvm/llvm-project/pull/68190.\r\nDiscussion: https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Implementing.20niche.20checks.\r\n\r\nr? saethlin",
        "comments": 14
    },
    {
        "merged": true,
        "additions": 14,
        "deletions": 21,
        "changed_files": 5,
        "created_at": "2023-10-04T07:14:49Z",
        "closed_at": "2023-10-04T18:53:47Z",
        "merged_at": "2023-10-04T18:53:47Z",
        "body": "Because it's the same as E0539.\r\n    \r\nFixes #51489.\r\n\r\nr? @Nilstrieb ",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 57,
        "deletions": 1692,
        "changed_files": 101,
        "created_at": "2023-10-04T06:57:50Z",
        "closed_at": null,
        "merged_at": null,
        "body": "They've been deprecated for four years.\r\n\r\nThis commit includes the following changes.\r\n- It eliminates the `rustc_plugin_impl` crate.\r\n- It changes the language used for lints in `compiler/rustc_driver_impl/src/lib.rs` and `compiler/rustc_lint/src/context.rs`. External lints are now called \"loaded\" lints, rather than \"plugins\" to avoid confusion with the old plugins. This only has a tiny effect on the output of `-W help`.\r\n- E0457 and E0498 are no longer used.\r\n- E0463 is narrowed, now only relating to unfound crates, not plugins.\r\n- The `plugin` feature was moved from \"active\" to \"removed\".\r\n- It removes the entire plugins chapter from the unstable book.\r\n- It removes quite a few tests, mostly all of those in `tests/ui-fulldeps/plugin/`.\r\n\r\nCloses #29597.\r\n\r\nr? @ghost",
        "comments": 21
    },
    {
        "merged": true,
        "additions": 215,
        "deletions": 237,
        "changed_files": 2,
        "created_at": "2023-10-04T03:07:39Z",
        "closed_at": "2023-10-10T11:41:25Z",
        "merged_at": "2023-10-10T11:41:25Z",
        "body": "One of the main subtasks of coverage instrumentation is looking through MIR to determine a list of source code spans that require coverage counters.\r\n\r\nThat task is in turn subdivided into a few main steps:\r\n- Getting the initial spans from MIR statements/terminators\r\n- Processing the list of spans to merge or truncate nearby spans as necessary\r\n- Grouping the processed spans by their corresponding coverage graph node\r\n\r\n---\r\n\r\nThis PR enforces a firmer separation between the first two steps (span extraction and span processing), which ends up slightly simplifying both steps, since they don't need to deal with state that is only meaningful for the other step.\r\n\r\n---\r\n\r\n@rustbot label +A-code-coverage",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 172,
        "deletions": 127,
        "changed_files": 23,
        "created_at": "2023-10-04T03:02:08Z",
        "closed_at": "2023-10-04T05:29:04Z",
        "merged_at": "2023-10-04T05:29:04Z",
        "body": "Successful merges:\n\n - #115961 (Replace 'mutex' with 'lock' in RwLock documentation)\n - #116146 (Clarify `arg` and `args` documentation)\n - #116363 (Adapt `todo!` documentation to mention displaying custom values)\n - #116365 (bootstrap: make copying linker binaries conditional)\n - #116388 (rustdoc: fix & clean up handling of cross-crate higher-ranked parameters)\n - #116393 (Emit feature gate *warning* for `auto` traits pre-expansion)\n - #116395 (Mark myself as vacation or whatever)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115961,116146,116363,116365,116388,116393,116395)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 529,
        "deletions": 547,
        "changed_files": 31,
        "created_at": "2023-10-04T02:42:52Z",
        "closed_at": "2023-10-14T07:28:06Z",
        "merged_at": "2023-10-14T07:28:06Z",
        "body": "https://forge.rust-lang.org/release/process.html#master-bootstrap-update-t-2-day-tuesday",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-04T02:35:18Z",
        "closed_at": "2023-10-04T07:23:12Z",
        "merged_at": "2023-10-04T07:23:12Z",
        "body": "9 commits in 59596f0f31a94fde48b5aa7e945cd0b7ceca9620..794d0a82547f3081044c0aca7b6083733ce51344\r\n2023-09-29 19:29:17 +0000 to 2023-10-03 23:19:33 +0000\r\n- Prep for automating MSRV management (rust-lang/cargo#12767)\r\n- chore(deps): update rust crate itertools to 0.11.0 (rust-lang/cargo#12759)\r\n- fix bug: corruption when cargo killed while writing (rust-lang/cargo#12744)\r\n- Disable custom_target::custom_bin_target on windows-gnu (rust-lang/cargo#12763)\r\n- chore(deps): update compatible (rust-lang/cargo#12757)\r\n- Add more missing `strip` info to docs. (rust-lang/cargo#12754)\r\n- chore(deps): update actions/checkout action to v4 (rust-lang/cargo#12762)\r\n- chore(deps): update rust crate cargo_metadata to 0.18.0 (rust-lang/cargo#12758)\r\n- fix(test): Add back in newlines to diffs (rust-lang/cargo#12753)\r\n\r\nr? ghost",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 223,
        "deletions": 194,
        "changed_files": 36,
        "created_at": "2023-10-04T01:11:00Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When an associated type with GATs isn't specified in a `dyn Trait`, emit an object safety error instead of only complaining about the missing associated type, as it will lead the user down a path of three different errors before letting them know that what they were trying to do is impossible to begin with.\r\n\r\nFix #103155.",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 552,
        "deletions": 583,
        "changed_files": 8,
        "created_at": "2023-10-03T22:24:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes (3) of #115199 by transforming function items, closures, and Fn trait objects into function pointers.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 51,
        "deletions": 29,
        "changed_files": 5,
        "created_at": "2023-10-03T21:28:31Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Using a `RefCell` avoids the undefined behaviour encountered in #116390 and reduces the amount of `unsafe` code in the codebase.",
        "comments": 25
    },
    {
        "merged": false,
        "additions": 50,
        "deletions": 37,
        "changed_files": 2,
        "created_at": "2023-10-03T21:23:56Z",
        "closed_at": null,
        "merged_at": null,
        "body": "See individual commits for more information. Split off of #114260, since it turned out that the main intent of that PR was wrong.\r\n\r\nr? oli-obk\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 225,
        "deletions": 41,
        "changed_files": 28,
        "created_at": "2023-10-03T21:21:22Z",
        "closed_at": "2023-10-07T02:19:48Z",
        "merged_at": "2023-10-07T02:19:48Z",
        "body": "```\r\nerror: expected one of `,`, `:`, or `}`, found `.`\r\n  --> $DIR/missing-fat-arrow.rs:25:14\r\n   |\r\nLL |         Some(a) if a.value == b {\r\n   |                               - while parsing this struct\r\nLL |             a.value = 1;\r\n   |             -^ expected one of `,`, `:`, or `}`\r\n   |             |\r\n   |             while parsing this struct field\r\n   |\r\nhelp: try naming a field\r\n   |\r\nLL |             a: a.value = 1;\r\n   |             ++\r\nhelp: you might have meant to start a match arm after the match guard\r\n   |\r\nLL |         Some(a) if a.value == b => {\r\n   |                                 ++\r\n```\r\n\r\nFix #78585.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 7,
        "deletions": 6,
        "changed_files": 1,
        "created_at": "2023-10-03T21:18:41Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @cjgillot \r\ncc @Zoxc ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 341,
        "deletions": 163,
        "changed_files": 3,
        "created_at": "2023-10-03T20:09:45Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @compiler-errors ",
        "comments": 0
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-03T19:22:46Z",
        "closed_at": "2023-10-04T05:29:04Z",
        "merged_at": "2023-10-04T05:29:04Z",
        "body": "I think I have the capacity to review PRs currently assigned to me, before vacation, but I won't be able to take any more. So, until everything settles down, I don't want to be assigned to new PRs.\r\n",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 29,
        "deletions": 1,
        "changed_files": 5,
        "created_at": "2023-10-03T19:13:08Z",
        "closed_at": "2023-10-04T05:29:04Z",
        "merged_at": "2023-10-04T05:29:04Z",
        "body": "Auto traits were introduced before we were more careful about not stabilizing new syntax pre-expansion.\r\n\r\nThis is a more conservative step in the general direction we want to go in https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Removal.20of.20.60auto.20trait.60.20syntax.\r\n\r\nFixes #116121",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 6,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-03T18:47:59Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Previously only a single expression could be allowed within the `const` block. This change allows for statements to precede the final expression, similarly to [real inline `const` expressions](https://github.com/rust-lang/rust/issues/76001).\r\n\r\nThis works by taking `$init` as a `block` in `thread_local!` and passing it to `thread_local_inner!`, where it is accepted as an `expr`.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 726,
        "deletions": 581,
        "changed_files": 4,
        "created_at": "2023-10-03T17:59:45Z",
        "closed_at": "2023-10-12T23:22:54Z",
        "merged_at": "2023-10-12T23:22:53Z",
        "body": "`SplitWildcard` was pretty opaque. I replaced it with a more legible abstraction: `ConstructorSet` represents the set of constructors for patterns of a given type. This clarifies responsibilities: `ConstructorSet` handles one clear task, and diagnostic-related shenanigans can be done separately.\r\n\r\nI'm quite excited, I had has this in mind for years but could never quite introduce it. This opens up possibilities, including type-specific optimisations (like using a `FxHashSet` to collect enum variants, which had been [hackily attempted some years ago](https://github.com/rust-lang/rust/pull/76918)), my one-pass rewrite (https://github.com/rust-lang/rust/pull/116042), and future librarification.",
        "comments": 15
    },
    {
        "merged": false,
        "additions": 391,
        "deletions": 362,
        "changed_files": 53,
        "created_at": "2023-10-03T16:44:28Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #116336 ",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 107,
        "deletions": 106,
        "changed_files": 13,
        "created_at": "2023-10-03T16:31:56Z",
        "closed_at": "2023-10-04T05:29:04Z",
        "merged_at": "2023-10-04T05:29:04Z",
        "body": "Preparatory work for the refactoring planned in #113015 (for correctness & maintainability).\r\n\r\n---\r\n\r\n1. Render the higher-ranked parameters of cross-crate function pointer types **(*)**.\r\n2. Replace occurrences of `collect_referenced_late_bound_regions()` (CRLBR) with `bound_vars()`.\r\n  The former is quite problematic and the use of the latter allows us to yank a lot of hacky code **(\u2020)**\r\n  as you can tell from the diff! :)\r\n3. Add support for cross-crate higher-ranked type parameters (`#![feature(non_lifetime_binders)]`).\r\n  We were previously ICE'ing on them (see `inline_cross/non_lifetime_binders.rs`).\r\n\r\n---\r\n\r\n**(*)**: Extracted from test `inline_cross/fn-type.rs`:\r\n\r\n```diff\r\n- fn(_: &'z fn(_: &'b str), _: &'a ()) -> &'a ()\r\n+ for<'z, 'a, '_unused> fn(_: &'z for<'b> fn(_: &'b str), _: &'a ()) -> &'a ()\r\n```\r\n\r\n**(\u2020)**: It returns an `FxHashSet` which isn't *predictable* or *stable* wrt. source code (`.rmeta`) changes. To elaborate, the ordering of late-bound regions doesn't necessarily reflect the ordering found in the source code. It does seem to be stable across compilations but modifying the source code of the to-be-documented crates (like adding or renaming items) may result in a different order:\r\n\r\n<details><summary>Example</summary>\r\n\r\nLet's assume that we're documenting the cross-crate re-export of `produce` from the code below. On `master`, rustdoc would render the list of binders as `for<'x, 'y, 'z>`. However, once you add back the functions `a`\u2013`l`, it would be rendered as `for<'z, 'y, 'x>` (reverse order)! Results may vary. `bound_vars()` fixes this as it returns them in source order.\r\n\r\n```rs\r\n// pub fn a() {}\r\n// pub fn b() {}\r\n// pub fn c() {}\r\n// pub fn d() {}\r\n// pub fn e() {}\r\n// pub fn f() {}\r\n// pub fn g() {}\r\n// pub fn h() {}\r\n// pub fn i() {}\r\n// pub fn j() {}\r\n// pub fn k() {}\r\n// pub fn l() {}\r\n\r\npub fn produce() -> impl for<'x, 'y, 'z> Trait<'z, 'y, 'x> {}\r\n\r\npub trait Trait<'a, 'b, 'c> {}\r\n\r\nimpl Trait<'_, '_, '_> for () {}\r\n```\r\n\r\n</details>\r\n\r\nFurther, as the name suggests, CRLBR only collects *referenced* regions and thus we drop unused binders. `bound_vars()` contains unused binders on the other hand. Let's stay closer to the source where possible and keep unused binders.\r\n\r\nLastly, using `bound_vars()` allows us to get rid of\r\n\r\n* the deduplication and alphabetical sorting hack in `simplify.rs`\r\n* the weird field `bound_params` on `EqPredicate`\r\n\r\nboth of which were introduced by me in #102707 back when I didn't know better.\r\n\r\nTo illustrate, let's look at the cross-crate bound `T: for<'a, 'b> Trait<A<'a> = (), B<'b> = ()>`.\r\n\r\n* With CRLBR + `EqPredicate.bound_params`, *before* bound simplification we would have the bounds `T: Trait`, `for<'a> <T as Trait>::A<'a> == ()` and `for<'b> <T as Trait>::B<'b> == ()` which required us to merge `for<>`, `for<'a>` and `for<'b>` into `for<'a, 'b>` in a deterministic manner and without introducing duplicate binders.\r\n* With `bound_vars()`, we now have the bounds `for<'a, b> T: Trait`, `<T as Trait>::A<'a> == ()` and `<T as Trait>::B<'b> == ()` before bound simplification similar to rustc itself. This obviously no longer requires any funny merging of `for<>`s. On top of that `for<'a, 'b>` is guaranteed to be in source order.\r\n",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 26,
        "deletions": 6,
        "changed_files": 2,
        "created_at": "2023-10-03T16:04:09Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This is intended to clarify:\r\n\r\n* That `Wake` exists and can be used instead of `RawWaker`.\r\n* How to construct a `Waker` when you are looking at `Wake` (which was previously only documented in the example).",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-03T15:36:07Z",
        "closed_at": "2023-10-04T03:37:40Z",
        "merged_at": "2023-10-04T03:37:40Z",
        "body": "Currently `Duration::checked_add` is marked `#[inline]` but it's trait relative `Add::add` is not.\r\nLeading to a case where:\r\n```rust\r\npub fn foo() -> Duration {\r\n    Duration::from_secs(10) + Duration::from_millis(6)\r\n}\r\n\r\npub fn bar() -> Duration {\r\n    Duration::from_secs(10).checked_add(Duration::from_millis(6)).expect(\"overflow when adding durations\")\r\n}\r\n```\r\ncompiles to:\r\n```asm\r\n\r\nplayground::foo:\r\n\tmovl\t$10, %edi\r\n\txorl\t%esi, %esi\r\n\txorl\t%edx, %edx\r\n\tmovl\t$6000000, %ecx\r\n\tjmpq\t*<core::time::Duration as core::ops::arith::Add>::add@GOTPCREL(%rip)\r\n\r\nplayground::bar:\r\n\tmovl\t$10, %eax\r\n\tmovl\t$6000000, %edx\r\n\tretq\r\n```\r\n(The same happens for all arithmetic operation)",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 22,
        "deletions": 22,
        "changed_files": 5,
        "created_at": "2023-10-03T14:59:13Z",
        "closed_at": null,
        "merged_at": null,
        "body": "A step to push #79995 forward.\r\n\r\nhttps://github.com/rust-lang/libs-team/issues/122 also suggested to make them inherent methods, but they can't be \u2014 they'd conflict with slice's regular methods.\r\n\r\n",
        "comments": 1
    },
    {
        "merged": true,
        "additions": 242,
        "deletions": 174,
        "changed_files": 25,
        "created_at": "2023-10-03T14:24:18Z",
        "closed_at": "2023-10-03T18:34:06Z",
        "merged_at": "2023-10-03T18:34:06Z",
        "body": "Successful merges:\n\n - #114654 (Suggest `pin!()` instead of `Pin::new()` when appropriate)\n - #116261 (a small wf and clause cleanup)\n - #116282 (Fix broken links)\n - #116328 (Factor out common token generation in `fluent_messages`.)\n - #116379 (non_lifetime_binders: fix ICE in lint opaque-hidden-inferred-bound)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=114654,116261,116282,116328,116379)\n<!-- homu-ignore:end -->",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 69,
        "changed_files": 3,
        "created_at": "2023-10-03T13:31:56Z",
        "closed_at": "2023-10-04T16:08:12Z",
        "merged_at": "2023-10-04T16:08:12Z",
        "body": "This builder tested the wasm32-unknown-emscripten target, which is tier 2 (and so not eligible for testing). In the recent beta [promotion](https://github.com/rust-lang/rust/pull/116362#issuecomment-1744960904), we ran into a problem with this target: emscripten doesn't support passing environment variables into the std environment, so we can't enable RUSTC_BOOTSTRAP for libtest in order to pass -Zunstable-options.\r\n\r\nWe worked around this for the beta/stable branches, but given this problem, and its tier 2 status, just dropping the target's tests entirely seems warranted. Downgrading to tier 3 may also be a good idea, but that is a separate conversation not proposed here.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 7,
        "changed_files": 3,
        "created_at": "2023-10-03T11:55:22Z",
        "closed_at": "2023-10-03T18:34:06Z",
        "merged_at": "2023-10-03T18:34:06Z",
        "body": "Opaque types like `impl for<T> Trait<T>` would previously lead to an ICE.\r\n\r\nr? @compiler-errors",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 69,
        "deletions": 7,
        "changed_files": 4,
        "created_at": "2023-10-03T10:25:16Z",
        "closed_at": "2023-10-04T10:05:32Z",
        "merged_at": null,
        "body": "In cases like https://github.com/rust-lang/rust/issues/116332, we might end up with `Alias(Opaque)`, which causes match to ICE, this fixes that by normalizing opaque value we get.\r\n\r\nFixes #116332\r\nFixes https://github.com/rust-lang/rust/issues/116265\r\nFixes https://github.com/rust-lang/rust/issues/116383\r\n\r\nr? @oli-obk ",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 193,
        "deletions": 127,
        "changed_files": 20,
        "created_at": "2023-10-03T10:24:14Z",
        "closed_at": "2023-10-03T14:01:00Z",
        "merged_at": "2023-10-03T14:01:00Z",
        "body": "Successful merges:\n\n - #115863 (Add check_unused_messages in tidy)\n - #116210 (Ensure that `~const` trait bounds on associated functions are in const traits or impls)\n - #116358 (Rename both of the `Match` relations)\n - #116371 (Remove unused features from `rustc_llvm`.)\n - #116374 (Print normalized ty)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=115863,116210,116358,116371,116374)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 96,
        "deletions": 22,
        "changed_files": 4,
        "created_at": "2023-10-03T09:00:58Z",
        "closed_at": null,
        "merged_at": null,
        "body": "This changes `SerializedDepGraph.index` to be computed on-demand per dep kind. This means we can immediately start using queries without waiting for the entire index to be constructed. Additionally a background thread is started which computes the entire index, effectively off-loading most of the index construction to the background thread.\r\n\r\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th><td align=\"right\">Memory</td><td align=\"right\">Memory</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe3 <b>clap</b>:check:unchanged</td><td align=\"right\">0.4259s</td><td align=\"right\">0.4225s</td><td align=\"right\"> -0.79%</td><td align=\"right\">89.65 MiB</td><td align=\"right\">90.08 MiB</td><td align=\"right\"> 0.48%</td></tr><tr><td>\ud83d\udfe3 <b>hyper</b>:check:unchanged</td><td align=\"right\">0.1425s</td><td align=\"right\">0.1417s</td><td align=\"right\"> -0.53%</td><td align=\"right\">47.85 MiB</td><td align=\"right\">47.91 MiB</td><td align=\"right\"> 0.13%</td></tr><tr><td>\ud83d\udfe3 <b>regex</b>:check:unchanged</td><td align=\"right\">0.3188s</td><td align=\"right\">0.3157s</td><td align=\"right\"> -0.97%</td><td align=\"right\">71.09 MiB</td><td align=\"right\">71.58 MiB</td><td align=\"right\"> 0.69%</td></tr><tr><td>\ud83d\udfe3 <b>syn</b>:check:unchanged</td><td align=\"right\">0.5895s</td><td align=\"right\">0.5813s</td><td align=\"right\">\ud83d\udc9a  -1.38%</td><td align=\"right\">101.68 MiB</td><td align=\"right\">102.15 MiB</td><td align=\"right\"> 0.47%</td></tr><tr><td>\ud83d\udfe3 <b>syntex_syntax</b>:check:unchanged</td><td align=\"right\">1.4392s</td><td align=\"right\">1.4361s</td><td align=\"right\"> -0.22%</td><td align=\"right\">200.62 MiB</td><td align=\"right\">201.68 MiB</td><td align=\"right\"> 0.53%</td></tr><tr><td>Total</td><td align=\"right\">2.9158s</td><td align=\"right\">2.8974s</td><td align=\"right\"> -0.63%</td><td align=\"right\">510.89 MiB</td><td align=\"right\">513.40 MiB</td><td align=\"right\"> 0.49%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">0.9922s</td><td align=\"right\"> -0.78%</td><td align=\"right\">1 byte</td><td align=\"right\">1.00 bytes</td><td align=\"right\"> 0.46%</td></tr></table>\r\n\r\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th><td align=\"right\">Memory</td><td align=\"right\">Memory</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe0 <b>clap</b>:debug:unchanged</td><td align=\"right\">1.0753s</td><td align=\"right\">1.0684s</td><td align=\"right\"> -0.64%</td><td align=\"right\">142.80 MiB</td><td align=\"right\">142.72 MiB</td><td align=\"right\"> -0.05%</td></tr><tr><td>\ud83d\udfe0 <b>hyper</b>:debug:unchanged</td><td align=\"right\">0.2857s</td><td align=\"right\">0.2847s</td><td align=\"right\"> -0.35%</td><td align=\"right\">63.06 MiB</td><td align=\"right\">63.15 MiB</td><td align=\"right\"> 0.13%</td></tr><tr><td>\ud83d\udfe0 <b>regex</b>:debug:unchanged</td><td align=\"right\">0.7703s</td><td align=\"right\">0.7633s</td><td align=\"right\"> -0.90%</td><td align=\"right\">108.76 MiB</td><td align=\"right\">109.03 MiB</td><td align=\"right\"> 0.25%</td></tr><tr><td>\ud83d\udfe0 <b>syn</b>:debug:unchanged</td><td align=\"right\">1.0596s</td><td align=\"right\">1.0531s</td><td align=\"right\"> -0.62%</td><td align=\"right\">142.08 MiB</td><td align=\"right\">142.18 MiB</td><td align=\"right\"> 0.07%</td></tr><tr><td>\ud83d\udfe0 <b>syntex_syntax</b>:debug:unchanged</td><td align=\"right\">2.7530s</td><td align=\"right\">2.7274s</td><td align=\"right\"> -0.93%</td><td align=\"right\">308.92 MiB</td><td align=\"right\">308.63 MiB</td><td align=\"right\"> -0.09%</td></tr><tr><td>Total</td><td align=\"right\">5.9438s</td><td align=\"right\">5.8969s</td><td align=\"right\"> -0.79%</td><td align=\"right\">765.62 MiB</td><td align=\"right\">765.71 MiB</td><td align=\"right\"> 0.01%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">0.9931s</td><td align=\"right\"> -0.69%</td><td align=\"right\">1 byte</td><td align=\"right\">1.00 bytes</td><td align=\"right\"> 0.06%</td></tr></table>\r\n\r\nr? @cjgillot ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 30,
        "deletions": 20,
        "changed_files": 2,
        "created_at": "2023-10-03T08:20:20Z",
        "closed_at": "2023-10-03T14:00:59Z",
        "merged_at": "2023-10-03T14:00:59Z",
        "body": "Inside `mir_assign_valid_types` we are comparing normalized type of `mir_place` but in debug message we are not printing the normalized value, this changes that.",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 236,
        "deletions": 62,
        "changed_files": 30,
        "created_at": "2023-10-03T06:58:51Z",
        "closed_at": "2023-10-03T08:52:57Z",
        "merged_at": "2023-10-03T08:52:57Z",
        "body": "Successful merges:\n\n - #113053 (add notes about non-compliant FP behavior on 32bit x86 targets)\n - #115726 (For a single impl candidate, try to unify it with error trait ref)\n - #116158 (Don't suggest nonsense suggestions for unconstrained type vars in `note_source_of_type_mismatch_constraint`)\n - #116351 (Add `must_use` on pointer equality functions)\n - #116355 (Clarify float rounding direction for signed zero)\n - #116361 (Bump stdarch submodule)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=113053,115726,116158,116351,116355,116361)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-03T04:55:20Z",
        "closed_at": "2023-10-03T14:01:00Z",
        "merged_at": "2023-10-03T14:01:00Z",
        "body": "r? @bjorn3 ",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 74,
        "deletions": 128,
        "changed_files": 6,
        "created_at": "2023-10-03T02:38:25Z",
        "closed_at": "2023-10-05T00:21:41Z",
        "merged_at": "2023-10-05T00:21:41Z",
        "body": "It was added in #78569. It's complicated and doesn't actually help\r\nperformance.\r\n\r\nr? @cjgillot ",
        "comments": 14
    },
    {
        "merged": false,
        "additions": 137,
        "deletions": 18,
        "changed_files": 19,
        "created_at": "2023-10-03T02:14:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "We normalize the hidden type of an opaque before defining it to ensure that we don't:\r\n1. Infer a hidden type that is normalizes to the opaque directly\r\n2. Infer a hidden type that normalizes to an infer var, which can then be set to the opaque\r\n\r\nTests are a combination of things that went from ICE -> (expected) fail, and fail -> pass.\r\n\r\nr? lcnr",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 52,
        "deletions": 18,
        "changed_files": 3,
        "created_at": "2023-10-03T00:34:16Z",
        "closed_at": null,
        "merged_at": null,
        "body": "r? @ghost",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 4,
        "changed_files": 3,
        "created_at": "2023-10-03T00:32:45Z",
        "closed_at": "2023-10-04T01:48:18Z",
        "merged_at": "2023-10-04T01:48:18Z",
        "body": "Since it's made for stuff like this (see #106447)",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 220,
        "deletions": 8,
        "changed_files": 30,
        "created_at": "2023-10-03T00:23:55Z",
        "closed_at": "2023-10-10T08:01:19Z",
        "merged_at": "2023-10-10T08:01:19Z",
        "body": "Fix #103982.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 5,
        "changed_files": 1,
        "created_at": "2023-10-02T23:53:09Z",
        "closed_at": "2023-10-04T05:29:04Z",
        "merged_at": "2023-10-04T05:29:04Z",
        "body": "The change in #116276 breaks bootstrapping if you don't use `lld` for linking with your stage0 compiler. Making this copy conditional should be enough to fix it.",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 159,
        "deletions": 67,
        "changed_files": 10,
        "created_at": "2023-10-02T23:17:30Z",
        "closed_at": "2023-10-03T04:36:39Z",
        "merged_at": "2023-10-03T04:36:39Z",
        "body": "Still needs a clippy backport (https://github.com/rust-lang/rust-clippy/pull/11596).\r\n\r\nr? @Mark-Simulacrum ",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 10,
        "changed_files": 1,
        "created_at": "2023-10-02T23:16:51Z",
        "closed_at": "2023-10-04T05:29:04Z",
        "merged_at": "2023-10-04T05:29:04Z",
        "body": "Resolves #116130.\r\n\r\nI copied from the [existing documentation](https://doc.rust-lang.org/std/macro.unimplemented.html) for `unimplemented!` more or less directly, down to the example trait used. I also took the liberty of fixing some formatting and typographical errors that I noticed.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 128,
        "deletions": 116,
        "changed_files": 21,
        "created_at": "2023-10-02T23:14:52Z",
        "closed_at": "2023-10-03T16:14:34Z",
        "merged_at": "2023-10-03T16:14:34Z",
        "body": "r? @Mark-Simulacrum ",
        "comments": 16
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 1,
        "changed_files": 2,
        "created_at": "2023-10-02T21:44:07Z",
        "closed_at": "2023-10-03T08:52:57Z",
        "merged_at": "2023-10-03T08:52:57Z",
        "body": "r? @Amanieu ",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 68,
        "deletions": 64,
        "changed_files": 18,
        "created_at": "2023-10-02T21:41:26Z",
        "closed_at": "2023-10-04T11:53:16Z",
        "merged_at": "2023-10-04T11:53:16Z",
        "body": "Semi-follow-up to https://github.com/rust-lang/rust/pull/116296#discussion_r1342007575\r\n\r\ncc @asquared31415 ",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 24,
        "deletions": 15,
        "changed_files": 3,
        "created_at": "2023-10-02T21:07:07Z",
        "closed_at": "2023-10-03T14:01:00Z",
        "merged_at": "2023-10-03T14:01:00Z",
        "body": "Both of these names kinda were ambiguous.\r\n\r\nr? lcnr",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 39,
        "deletions": 57,
        "changed_files": 15,
        "created_at": "2023-10-02T20:21:44Z",
        "closed_at": null,
        "merged_at": null,
        "body": ":^)",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 106,
        "deletions": 107,
        "changed_files": 8,
        "created_at": "2023-10-02T20:09:44Z",
        "closed_at": "2023-10-02T22:01:11Z",
        "merged_at": "2023-10-02T22:01:11Z",
        "body": "Successful merges:\n\n - #114453 (Print GHA log groups to stdout instead of stderr)\n - #114454 (Replace `HashMap` with `IndexMap` in pattern binding resolve )\n - #116289 (Add missing #[inline] on AsFd impl for sys::unix::fs::File)\n - #116349 (ensure the parent path's existence on `x install`)\n - #116350 (Improve wording of `hint::black_box` docs)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=114453,114454,116289,116349,116350)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 6,
        "deletions": 4,
        "changed_files": 1,
        "created_at": "2023-10-02T20:06:34Z",
        "closed_at": "2023-10-03T08:52:58Z",
        "merged_at": "2023-10-03T08:52:58Z",
        "body": "Closes https://github.com/rust-lang/rust/issues/116339.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 0,
        "changed_files": 2,
        "created_at": "2023-10-02T19:41:10Z",
        "closed_at": "2023-10-04T09:54:13Z",
        "merged_at": "2023-10-04T09:54:13Z",
        "body": "Workflows for the new bors weren't launching, because its branches weren't whitelisted here.\r\n\r\nr? @Mark-Simulacrum",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 162,
        "deletions": 60,
        "changed_files": 12,
        "created_at": "2023-10-02T19:30:53Z",
        "closed_at": "2023-10-14T22:55:32Z",
        "merged_at": "2023-10-14T22:55:32Z",
        "body": "This PR optimizes `librustc_driver.so` on 64-bit Linux CI with BOLT.\r\n\r\n### Code\r\nOne thing that's not clear yet to me how to resolve is how to best pass a linker flag that we need for BOLT (the second commit). It is currently passed unconditionally, which is not a good idea. We somehow have to:\r\n1) Only pass it when we actually plan to use BOLT. How to best do that? `config.toml` entry? Environment variable? CLI flag for bootstrap? BOLT optimization is done by `opt-dist`, therefore bootstrap doesn't know about it by default.\r\n2) Only pass it to `librustc_driver.so` (see performance below).\r\n\r\nSome discussion of this flag already happened on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/326414-t-infra.2Fbootstrap/topic/Adding.20a.20one-off.20linker.20flag).\r\n\r\n### Performance\r\nLatest perf. results can be found [here](https://github.com/rust-lang/rust/pull/102487#issuecomment-1743469053). Note that instruction counts are not very interesting here, there are only regressions on hello world programs. Probably caused by a larger C++ libstd (?).\r\n\r\nSummary:\r\n- :heavy_check_mark: `-1.8%` mean improvement in cycle counts across many primary benchmarks.\r\n- :heavy_check_mark: `-1.8%` mean Max-RSS improvement.\r\n- :heavy_multiplication_x: 34 MiB (+48%) artifact size regression of `librustc_driver.so`.\r\n  - This is caused by building `librustc_driver.so` with relocations (which are required for BOLT). Hopefully, it will be [fixed](https://discourse.llvm.org/t/bolt-rfc-a-new-mode-to-rewrite-entire-binary/68674) in the future with BOLT improvements, but now trying to reduce this size increase is [tricky](https://github.com/rust-lang/rust/pull/114649).\r\n  - Note that the size of this file was recently reduced in https://github.com/rust-lang/rust/pull/115554 by pretty much the same amount (33 MiB). So the size after this PR is basically the same as it was for the last ~year.\r\n- :heavy_multiplication_x: 1.4 MiB (+53%) artifact size regression of `rustc`.\r\n  - This is annoying and pretty much unnecessary. It is caused by the way relocations are currently applied in this PR, because they are applied both to `librustc_driver.so` (where they are needed) and for `rustc` (where they aren't needed), since both are built with a single cargo invocation. We might need e.g. some tricks in the bootstrap `rustc` shim to only apply the relocation flag for the shared library and not for `rustc`.\r\n\r\n### CI time\r\nCI (try build) got slower by ~5 minutes, which is fine, IMO. It can be further reduced by running LLVM and `librustc_driver` BOLT profile gathering at the same time (now they are gathered separately for LLVM and `librustc_driver`).\r\n\r\nr? @Mark-Simulacrum\r\n\r\nAlso CC @onur-ozkan, primarily for the bootstrap linker flag issue.",
        "comments": 21
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-02T19:03:13Z",
        "closed_at": "2023-10-03T08:52:58Z",
        "merged_at": "2023-10-03T08:52:57Z",
        "body": "`ptr == ptr` (like all use of `==`) has a similar warning, and these functions are simple convenience wrappers over that.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-02T18:06:31Z",
        "closed_at": "2023-10-02T22:01:13Z",
        "merged_at": "2023-10-02T22:01:13Z",
        "body": "The wording is a bit confusing.\r\n\r\nsquash of #109634",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 3,
        "deletions": 3,
        "changed_files": 1,
        "created_at": "2023-10-02T17:55:47Z",
        "closed_at": "2023-10-02T22:01:12Z",
        "merged_at": "2023-10-02T22:01:12Z",
        "body": "fixes https://github.com/rust-lang/rust/pull/116127#issuecomment-1743454109\r\n\r\ncc @tmandry ",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 85,
        "deletions": 75,
        "changed_files": 4,
        "created_at": "2023-10-02T14:23:55Z",
        "closed_at": "2023-10-02T17:47:06Z",
        "merged_at": "2023-10-02T17:47:06Z",
        "body": "Successful merges:\n\n - #116313 (Some small cleanups in `rustc_abi`)\n - #116326 (Correct misleading std::fmt::Binary example (#116165))\n - #116340 (`skip_binder` to `instantiate_identity`)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116313,116326,116340)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 79,
        "deletions": 15,
        "changed_files": 16,
        "created_at": "2023-10-02T12:36:17Z",
        "closed_at": null,
        "merged_at": null,
        "body": "When writing a no_std binary, you'll be greeted with nonsensical errors mentioning lang items like eh_personality and start. That's pretty bad because it makes you think that you need to define them somewhere! But oh no, now you're getting the `internal_features` lint telling you that you shouldn't use them! But you need a no_std binary! What now?\r\n\r\nNo problem! Writing a no_std binary is super easy. Just use panic=abort and supply your own platform specific entrypoint symbol (like `main`) and you're good to go. Would be nice if the compiler told you that, right?\r\n\r\nThis makes it so that it does do that.\r\n\r\nI don't _love_ the new messages yet, but they're decent I think. They can probably be improved, please suggest improvements.",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 310,
        "deletions": 304,
        "changed_files": 34,
        "created_at": "2023-10-02T11:59:48Z",
        "closed_at": null,
        "merged_at": null,
        "body": "cc https://github.com/rust-lang/rust/issues/115585\r\n\r\nContinuation of #116312",
        "comments": 9
    },
    {
        "merged": true,
        "additions": 167,
        "deletions": 1,
        "changed_files": 4,
        "created_at": "2023-10-02T11:36:54Z",
        "closed_at": "2023-10-15T23:04:01Z",
        "merged_at": "2023-10-15T23:04:01Z",
        "body": "- Uses `EFI_LOADED_IMAGE_PROTOCOL`, which is implemented for all loaded images.\r\n\r\nTested on qemu with OVMF\r\n\r\ncc @nicholasbishop \r\ncc @dvdhrm ",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 7,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-02T11:20:01Z",
        "closed_at": "2023-10-02T17:47:06Z",
        "merged_at": "2023-10-02T17:47:06Z",
        "body": null,
        "comments": 3
    },
    {
        "merged": false,
        "additions": 100,
        "deletions": 160,
        "changed_files": 8,
        "created_at": "2023-10-02T10:12:22Z",
        "closed_at": "2023-10-02T21:31:46Z",
        "merged_at": null,
        "body": "Although they do similar things, they are currently implemented differently.\r\n\r\nr? @ghost",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 2,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-02T07:47:22Z",
        "closed_at": "2023-10-02T19:36:35Z",
        "merged_at": "2023-10-02T19:36:35Z",
        "body": "I wouldn't expect this to show perf improvements: IIUC this release should only contain a bugfix.\r\n\r\ncc @nnethercote \r\n\r\nr? @ghost",
        "comments": 13
    },
    {
        "merged": true,
        "additions": 0,
        "deletions": 33,
        "changed_files": 1,
        "created_at": "2023-10-02T07:03:26Z",
        "closed_at": "2023-10-07T17:08:30Z",
        "merged_at": "2023-10-07T17:08:29Z",
        "body": "I don't understand how but somehow that leads to issues like https://github.com/rust-lang/rust/issues/83085? Anyway removing unused impls doesn't seem like a bad idea. The concerning part is that of course nothing will stop us from having such impls again in the future, alongside re-introducing bugs like #83085.\r\n\r\nr? @oli-obk ",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 9,
        "deletions": 9,
        "changed_files": 4,
        "created_at": "2023-10-02T06:36:38Z",
        "closed_at": "2023-10-06T14:56:09Z",
        "merged_at": "2023-10-06T14:56:08Z",
        "body": "Based on @eddyb's comment [here](https://github.com/rust-lang/unsafe-code-guidelines/issues/461#issuecomment-1742156410).\r\n\r\nAnd then I noticed the wrong capitalization for Miri and fixed it in some other places as well.",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 40,
        "changed_files": 2,
        "created_at": "2023-10-02T05:57:03Z",
        "closed_at": "2023-10-03T18:34:06Z",
        "merged_at": "2023-10-03T18:34:06Z",
        "body": "The failure and success cases are similar enough that they can share code.\r\n\r\nr? @davidtwco ",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 81,
        "deletions": 150,
        "changed_files": 1,
        "created_at": "2023-10-02T04:09:20Z",
        "closed_at": "2023-10-03T07:22:05Z",
        "merged_at": null,
        "body": "Although they do similar things, they are currently implemented differently, for no particular reason.\r\n\r\nr? @cjgillot ",
        "comments": 11
    },
    {
        "merged": true,
        "additions": 4,
        "deletions": 2,
        "changed_files": 1,
        "created_at": "2023-10-02T04:03:56Z",
        "closed_at": "2023-10-02T17:47:06Z",
        "merged_at": "2023-10-02T17:47:06Z",
        "body": "Nothing too crazy...\r\n\r\n- Add two to the width specifier (so all 32 bits are correctly displayed)\r\n- Pad out the compared string so the assert passes\r\n- Add `// Note` comment highlighting the need for the extra width when using the `#` flag.\r\n\r\nThe exact contents (and placement?) of the note are, of course, highly bikesheddable.",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 22,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-02T01:58:12Z",
        "closed_at": "2023-10-02T06:03:11Z",
        "merged_at": "2023-10-02T06:03:11Z",
        "body": "Seconded ACP: https://github.com/rust-lang/libs-team/issues/274#issuecomment-1741853598\r\nTracking issue: https://github.com/rust-lang/rust/issues/116324\r\ncc @dtolnay https://github.com/rust-lang/rust/issues/106447",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 675,
        "deletions": 162,
        "changed_files": 18,
        "created_at": "2023-10-01T20:13:52Z",
        "closed_at": null,
        "merged_at": null,
        "body": "cc https://github.com/rust-lang/rust/issues/115585\r\n\r\nSuch thing allows stuff that can't be easily done with declarative macros. For example, it is now possible to create arms without brackets.\r\n\r\n```rust\r\ncfg_match! {\r\n    cfg(unix) => fn foo() -> i32 { 1 },\r\n    _ => fn foo() -> i32 { 2 },\r\n}\r\n\r\n// Expands to =>\r\n\r\n#[cfg(all(unix, not(any())))]\r\nfn foo() -> i32 { 1 }\r\n\r\n#[cfg(all(not(any(unix))))]\r\nfn foo() -> i32 { 2 }\r\n```\r\n\r\ncc @petrochenkov in case you want to say something",
        "comments": 5
    },
    {
        "merged": false,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-10-01T19:58:38Z",
        "closed_at": "2023-10-01T20:01:38Z",
        "merged_at": null,
        "body": "It was changed from 2 MiB to 8 MiB three years ago (https://github.com/rust-lang/rust/pull/55617). The size is now 8 MiB (https://github.com/rust-lang/rust/blob/8ed1d4a02ddd840a1efaca4e5e66881cbec5b0b3/compiler/rustc_interface/src/util.rs#L134).",
        "comments": 2
    },
    {
        "merged": false,
        "additions": 52,
        "deletions": 58,
        "changed_files": 2,
        "created_at": "2023-10-01T16:28:14Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Now that we have [higher Apple platform requirements](https://github.com/rust-lang/rust/pull/104385), the RNG code can be simplified a lot. Since `getentropy` still doesn't look to be usable outside macOS this implementation:\r\n- Removes any macOS fallback paths and unconditionally links to `getentropy`\r\n- Minimizes the implementation for everything else (iOS, watchOS, etc).\r\n\r\n`CCRandomGenerateBytes` was added in iOS 8 which means that we can use it now. It and `SecRandomCopyBytes` have the exact same functionality, but the former has a simpler API and no longer requires libstd to link to `Security.framework` for one function. Its also available in all the other target's SDKs.\r\n\r\nWhy care about `getentropy` then though on macOS? Well, its still much more performant. Benchmarking shows it runs at ~2x the speed of `CCRandomGenerateBytes`, which makes sense since it directly pulls from the kernel vs going through its own generator etc.\r\n\r\nSemi-related to a previous, but reverted, attempt at improving this logic in https://github.com/rust-lang/rust/pull/101011",
        "comments": 5
    },
    {
        "merged": true,
        "additions": 13,
        "deletions": 0,
        "changed_files": 3,
        "created_at": "2023-10-01T15:25:45Z",
        "closed_at": "2023-10-07T04:07:48Z",
        "merged_at": "2023-10-07T04:07:48Z",
        "body": "Based on #99883 by @Arc-blroth\r\nDepends on rust-lang/backtrace-rs#556 and rust-lang/cc-rs#705",
        "comments": 49
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-01T15:22:55Z",
        "closed_at": "2023-10-02T04:15:57Z",
        "merged_at": "2023-10-02T04:15:57Z",
        "body": "Fixes issue where panics in unwrap_or_else callbacks marked with the `track_caller` attribute appear as errors in core.",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 129,
        "deletions": 173,
        "changed_files": 3,
        "created_at": "2023-10-01T14:47:09Z",
        "closed_at": null,
        "merged_at": null,
        "body": null,
        "comments": 15
    },
    {
        "merged": true,
        "additions": 11,
        "deletions": 50,
        "changed_files": 2,
        "created_at": "2023-10-01T14:02:38Z",
        "closed_at": "2023-10-11T20:50:10Z",
        "merged_at": "2023-10-11T20:50:10Z",
        "body": "The enclosing query already checks for them, and replaces the body with a single `unreachable` if they are indeed impossible.",
        "comments": 6
    },
    {
        "merged": false,
        "additions": 23,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-10-01T13:34:35Z",
        "closed_at": null,
        "merged_at": null,
        "body": "addressing https://github.com/rust-lang/rust/issues/109328",
        "comments": 3
    },
    {
        "merged": true,
        "additions": 74,
        "deletions": 71,
        "changed_files": 2,
        "created_at": "2023-10-01T11:38:50Z",
        "closed_at": "2023-10-02T17:47:06Z",
        "merged_at": "2023-10-02T17:47:06Z",
        "body": "Minor things I found while looking at this crate's code.\r\n\r\nr? @the8472 ",
        "comments": 3
    },
    {
        "merged": false,
        "additions": 67,
        "deletions": 65,
        "changed_files": 10,
        "created_at": "2023-10-01T10:51:27Z",
        "closed_at": null,
        "merged_at": null,
        "body": "cc #115585\r\n\r\nDogfood to test the implementation and remove dependencies.",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 8,
        "deletions": 2,
        "changed_files": 3,
        "created_at": "2023-10-01T10:18:13Z",
        "closed_at": "2023-10-01T12:48:28Z",
        "merged_at": "2023-10-01T12:48:28Z",
        "body": "Successful merges:\n\n - #116292 (warn if source is not either a git clone or a dist tarball)\n - #116295 (Fix `core::mem::drop` docs inaccuracy)\n - #116299 (Update location of `auxiliary/lint-plugin-test.rs`)\n\nr? @ghost\n@rustbot modify labels: rollup\n<!-- homu-ignore:start -->\n[Create a similar rollup](https://bors.rust-lang.org/queue/rust?prs=116292,116295,116299)\n<!-- homu-ignore:end -->",
        "comments": 6
    },
    {
        "merged": true,
        "additions": 83,
        "deletions": 58,
        "changed_files": 1,
        "created_at": "2023-10-01T09:17:37Z",
        "closed_at": "2023-10-07T15:20:02Z",
        "merged_at": "2023-10-07T15:20:02Z",
        "body": "This is in preparation of improving diagnostics of \"large moves into functions\", a.k.a. passing args.\r\n\r\nNote: This PR consists of two self-contained commits that can be reviewed independently.\r\n\r\nFor https://github.com/rust-lang/rust/issues/83518\r\n\r\nAlso see https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/arg.20Spans.20for.20TerminatorKind.3A.3ACall.3F\r\n\r\nr? @oli-obk who is E-mentor",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 855,
        "deletions": 35,
        "changed_files": 15,
        "created_at": "2023-10-01T05:04:01Z",
        "closed_at": "2023-10-01T09:54:24Z",
        "merged_at": "2023-10-01T09:54:24Z",
        "body": "r? @ghost",
        "comments": 7
    },
    {
        "merged": false,
        "additions": 52,
        "deletions": 12806,
        "changed_files": 1,
        "created_at": "2023-10-01T04:05:38Z",
        "closed_at": "2023-10-01T09:49:34Z",
        "merged_at": null,
        "body": "Modified a attractive readme file",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 136,
        "deletions": 0,
        "changed_files": 4,
        "created_at": "2023-10-01T03:53:06Z",
        "closed_at": "2023-10-01T22:00:42Z",
        "merged_at": "2023-10-01T22:00:42Z",
        "body": "This is a regression test for the coverage issue that was addressed temporarily by #116166, and is tracked by #116171.\r\n\r\n---\r\n\r\nIf we instrument a function for coverage, but all of its counter-increment statements are removed by MIR optimizations, LLVM will think it isn't instrumented and it will disappear from coverage maps and coverage reports.\r\n\r\nMost MIR opts won't cause this because they tend not to remove statements from bb0, but `UnreachablePropagation` can do so if it sees that bb0 ends with `TerminatorKind::Unreachable`.\r\n\r\nCurrently we have worked around this by turning off `UnreachablePropagation` when coverage instrumentation is enabled, which is why this test is able to pass.\r\n\r\n---\r\n\r\n@rustbot label +A-code-coverage",
        "comments": 7
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-30T23:10:18Z",
        "closed_at": "2023-10-01T03:59:31Z",
        "merged_at": "2023-10-01T03:59:31Z",
        "body": "Step 1 of the [release process](https://forge.rust-lang.org/release/process.html#bump-the-stable-version-number-t-6-days-friday-the-week-before).",
        "comments": 10
    },
    {
        "merged": false,
        "additions": 357,
        "deletions": 4,
        "changed_files": 2,
        "created_at": "2023-09-30T23:02:09Z",
        "closed_at": null,
        "merged_at": null,
        "body": "fixes issue #115737 , where the decimal places are rounded incorrectly when formatting scientific notation",
        "comments": 1
    },
    {
        "merged": false,
        "additions": 584,
        "deletions": 536,
        "changed_files": 19,
        "created_at": "2023-09-30T21:49:05Z",
        "closed_at": null,
        "merged_at": null,
        "body": "The primary goal of this PR is to skip creating a `MovePathIndex` for path that do not need dropping in drop elaboration.\r\n\r\nThe 2 first commits are cleanups.\r\n\r\nThe next 2 commits displace `move` errors from move-path builder to borrowck. Move-path builder keeps the same logic, but does not carry error information any more.\r\n\r\nThe remaining commits allow to filter `MovePathIndex` creation according to types. This is used in drop elaboration, to avoid computing dataflow for paths that do not need dropping.",
        "comments": 10
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-30T20:51:59Z",
        "closed_at": "2023-10-01T12:48:28Z",
        "merged_at": "2023-10-01T12:48:28Z",
        "body": "**PR Summary**:\r\nPR updates the location of  `auxiliary/lint-plugin-test.rs` file which was moved in PR #110478.",
        "comments": 4
    },
    {
        "merged": false,
        "additions": 164,
        "deletions": 0,
        "changed_files": 8,
        "created_at": "2023-09-30T20:42:33Z",
        "closed_at": null,
        "merged_at": null,
        "body": "Fixes #116190",
        "comments": 4
    },
    {
        "merged": true,
        "additions": 5,
        "deletions": 0,
        "changed_files": 1,
        "created_at": "2023-09-30T20:33:48Z",
        "closed_at": "2023-10-06T22:38:40Z",
        "merged_at": "2023-10-06T22:38:40Z",
        "body": "r? @oli-obk ",
        "comments": 2
    },
    {
        "merged": true,
        "additions": 105,
        "deletions": 89,
        "changed_files": 42,
        "created_at": "2023-09-30T19:31:55Z",
        "closed_at": "2023-10-05T09:58:14Z",
        "merged_at": "2023-10-05T09:58:14Z",
        "body": "When getting the \"default return type\" span, instead of pointing to the low span of the next token, point to the high span of the previous token. This:\r\n\r\n1. Makes forming return type suggestions more uniform, since we expect them all in the same place.\r\n2. Arguably makes labels easier to understand, since we're pointing to where the implicit `-> ()` would've gone, rather than the starting brace or the semicolon.\r\n\r\nr? @estebank",
        "comments": 8
    },
    {
        "merged": true,
        "additions": 1,
        "deletions": 1,
        "changed_files": 1,
        "created_at": "2023-09-30T18:43:23Z",
        "closed_at": "2023-10-01T12:48:28Z",
        "merged_at": "2023-10-01T12:48:28Z",
        "body": "r? @Nilstrieb ",
        "comments": 3
    }
]